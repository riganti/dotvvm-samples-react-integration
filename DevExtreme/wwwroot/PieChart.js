var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));

// node_modules/react/cjs/react.development.js
var require_react_development = __commonJS({
  "node_modules/react/cjs/react.development.js"(exports, module) {
    "use strict";
    if (true) {
      (function() {
        "use strict";
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
          __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
        }
        var ReactVersion = "18.2.0";
        var REACT_ELEMENT_TYPE = Symbol.for("react.element");
        var REACT_PORTAL_TYPE = Symbol.for("react.portal");
        var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
        var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
        var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
        var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
        var REACT_CONTEXT_TYPE = Symbol.for("react.context");
        var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
        var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
        var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
        var REACT_MEMO_TYPE = Symbol.for("react.memo");
        var REACT_LAZY_TYPE = Symbol.for("react.lazy");
        var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
        var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
        var FAUX_ITERATOR_SYMBOL = "@@iterator";
        function getIteratorFn(maybeIterable) {
          if (maybeIterable === null || typeof maybeIterable !== "object") {
            return null;
          }
          var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
          if (typeof maybeIterator === "function") {
            return maybeIterator;
          }
          return null;
        }
        var ReactCurrentDispatcher = {
          /**
           * @internal
           * @type {ReactComponent}
           */
          current: null
        };
        var ReactCurrentBatchConfig = {
          transition: null
        };
        var ReactCurrentActQueue = {
          current: null,
          // Used to reproduce behavior of `batchedUpdates` in legacy mode.
          isBatchingLegacy: false,
          didScheduleLegacyUpdate: false
        };
        var ReactCurrentOwner = {
          /**
           * @internal
           * @type {ReactComponent}
           */
          current: null
        };
        var ReactDebugCurrentFrame = {};
        var currentExtraStackFrame = null;
        function setExtraStackFrame(stack) {
          {
            currentExtraStackFrame = stack;
          }
        }
        {
          ReactDebugCurrentFrame.setExtraStackFrame = function(stack) {
            {
              currentExtraStackFrame = stack;
            }
          };
          ReactDebugCurrentFrame.getCurrentStack = null;
          ReactDebugCurrentFrame.getStackAddendum = function() {
            var stack = "";
            if (currentExtraStackFrame) {
              stack += currentExtraStackFrame;
            }
            var impl = ReactDebugCurrentFrame.getCurrentStack;
            if (impl) {
              stack += impl() || "";
            }
            return stack;
          };
        }
        var enableScopeAPI = false;
        var enableCacheElement = false;
        var enableTransitionTracing = false;
        var enableLegacyHidden = false;
        var enableDebugTracing = false;
        var ReactSharedInternals = {
          ReactCurrentDispatcher,
          ReactCurrentBatchConfig,
          ReactCurrentOwner
        };
        {
          ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame;
          ReactSharedInternals.ReactCurrentActQueue = ReactCurrentActQueue;
        }
        function warn(format) {
          {
            {
              for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                args[_key - 1] = arguments[_key];
              }
              printWarning("warn", format, args);
            }
          }
        }
        function error(format) {
          {
            {
              for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                args[_key2 - 1] = arguments[_key2];
              }
              printWarning("error", format, args);
            }
          }
        }
        function printWarning(level, format, args) {
          {
            var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
            var stack = ReactDebugCurrentFrame2.getStackAddendum();
            if (stack !== "") {
              format += "%s";
              args = args.concat([stack]);
            }
            var argsWithFormat = args.map(function(item) {
              return String(item);
            });
            argsWithFormat.unshift("Warning: " + format);
            Function.prototype.apply.call(console[level], console, argsWithFormat);
          }
        }
        var didWarnStateUpdateForUnmountedComponent = {};
        function warnNoop(publicInstance, callerName) {
          {
            var _constructor = publicInstance.constructor;
            var componentName = _constructor && (_constructor.displayName || _constructor.name) || "ReactClass";
            var warningKey = componentName + "." + callerName;
            if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
              return;
            }
            error("Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.", callerName, componentName);
            didWarnStateUpdateForUnmountedComponent[warningKey] = true;
          }
        }
        var ReactNoopUpdateQueue = {
          /**
           * Checks whether or not this composite component is mounted.
           * @param {ReactClass} publicInstance The instance we want to test.
           * @return {boolean} True if mounted, false otherwise.
           * @protected
           * @final
           */
          isMounted: function(publicInstance) {
            return false;
          },
          /**
           * Forces an update. This should only be invoked when it is known with
           * certainty that we are **not** in a DOM transaction.
           *
           * You may want to call this when you know that some deeper aspect of the
           * component's state has changed but `setState` was not called.
           *
           * This will not invoke `shouldComponentUpdate`, but it will invoke
           * `componentWillUpdate` and `componentDidUpdate`.
           *
           * @param {ReactClass} publicInstance The instance that should rerender.
           * @param {?function} callback Called after component is updated.
           * @param {?string} callerName name of the calling function in the public API.
           * @internal
           */
          enqueueForceUpdate: function(publicInstance, callback, callerName) {
            warnNoop(publicInstance, "forceUpdate");
          },
          /**
           * Replaces all of the state. Always use this or `setState` to mutate state.
           * You should treat `this.state` as immutable.
           *
           * There is no guarantee that `this.state` will be immediately updated, so
           * accessing `this.state` after calling this method may return the old value.
           *
           * @param {ReactClass} publicInstance The instance that should rerender.
           * @param {object} completeState Next state.
           * @param {?function} callback Called after component is updated.
           * @param {?string} callerName name of the calling function in the public API.
           * @internal
           */
          enqueueReplaceState: function(publicInstance, completeState, callback, callerName) {
            warnNoop(publicInstance, "replaceState");
          },
          /**
           * Sets a subset of the state. This only exists because _pendingState is
           * internal. This provides a merging strategy that is not available to deep
           * properties which is confusing. TODO: Expose pendingState or don't use it
           * during the merge.
           *
           * @param {ReactClass} publicInstance The instance that should rerender.
           * @param {object} partialState Next partial state to be merged with state.
           * @param {?function} callback Called after component is updated.
           * @param {?string} Name of the calling function in the public API.
           * @internal
           */
          enqueueSetState: function(publicInstance, partialState, callback, callerName) {
            warnNoop(publicInstance, "setState");
          }
        };
        var assign = Object.assign;
        var emptyObject = {};
        {
          Object.freeze(emptyObject);
        }
        function Component2(props, context, updater) {
          this.props = props;
          this.context = context;
          this.refs = emptyObject;
          this.updater = updater || ReactNoopUpdateQueue;
        }
        Component2.prototype.isReactComponent = {};
        Component2.prototype.setState = function(partialState, callback) {
          if (typeof partialState !== "object" && typeof partialState !== "function" && partialState != null) {
            throw new Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
          }
          this.updater.enqueueSetState(this, partialState, callback, "setState");
        };
        Component2.prototype.forceUpdate = function(callback) {
          this.updater.enqueueForceUpdate(this, callback, "forceUpdate");
        };
        {
          var deprecatedAPIs = {
            isMounted: ["isMounted", "Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."],
            replaceState: ["replaceState", "Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."]
          };
          var defineDeprecationWarning = function(methodName, info) {
            Object.defineProperty(Component2.prototype, methodName, {
              get: function() {
                warn("%s(...) is deprecated in plain JavaScript React classes. %s", info[0], info[1]);
                return void 0;
              }
            });
          };
          for (var fnName in deprecatedAPIs) {
            if (deprecatedAPIs.hasOwnProperty(fnName)) {
              defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
            }
          }
        }
        function ComponentDummy() {
        }
        ComponentDummy.prototype = Component2.prototype;
        function PureComponent(props, context, updater) {
          this.props = props;
          this.context = context;
          this.refs = emptyObject;
          this.updater = updater || ReactNoopUpdateQueue;
        }
        var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
        pureComponentPrototype.constructor = PureComponent;
        assign(pureComponentPrototype, Component2.prototype);
        pureComponentPrototype.isPureReactComponent = true;
        function createRef2() {
          var refObject = {
            current: null
          };
          {
            Object.seal(refObject);
          }
          return refObject;
        }
        var isArrayImpl = Array.isArray;
        function isArray(a) {
          return isArrayImpl(a);
        }
        function typeName(value) {
          {
            var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
            var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
            return type;
          }
        }
        function willCoercionThrow(value) {
          {
            try {
              testStringCoercion(value);
              return false;
            } catch (e) {
              return true;
            }
          }
        }
        function testStringCoercion(value) {
          return "" + value;
        }
        function checkKeyStringCoercion(value) {
          {
            if (willCoercionThrow(value)) {
              error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
              return testStringCoercion(value);
            }
          }
        }
        function getWrappedName(outerType, innerType, wrapperName) {
          var displayName = outerType.displayName;
          if (displayName) {
            return displayName;
          }
          var functionName = innerType.displayName || innerType.name || "";
          return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
        }
        function getContextName(type) {
          return type.displayName || "Context";
        }
        function getComponentNameFromType(type) {
          if (type == null) {
            return null;
          }
          {
            if (typeof type.tag === "number") {
              error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
            }
          }
          if (typeof type === "function") {
            return type.displayName || type.name || null;
          }
          if (typeof type === "string") {
            return type;
          }
          switch (type) {
            case REACT_FRAGMENT_TYPE:
              return "Fragment";
            case REACT_PORTAL_TYPE:
              return "Portal";
            case REACT_PROFILER_TYPE:
              return "Profiler";
            case REACT_STRICT_MODE_TYPE:
              return "StrictMode";
            case REACT_SUSPENSE_TYPE:
              return "Suspense";
            case REACT_SUSPENSE_LIST_TYPE:
              return "SuspenseList";
          }
          if (typeof type === "object") {
            switch (type.$$typeof) {
              case REACT_CONTEXT_TYPE:
                var context = type;
                return getContextName(context) + ".Consumer";
              case REACT_PROVIDER_TYPE:
                var provider = type;
                return getContextName(provider.Y) + ".Provider";
              case REACT_FORWARD_REF_TYPE:
                return getWrappedName(type, type.render, "ForwardRef");
              case REACT_MEMO_TYPE:
                var outerName = type.displayName || null;
                if (outerName !== null) {
                  return outerName;
                }
                return getComponentNameFromType(type.type) || "Memo";
              case REACT_LAZY_TYPE: {
                var lazyComponent = type;
                var payload = lazyComponent.Ja;
                var init = lazyComponent.G;
                try {
                  return getComponentNameFromType(init(payload));
                } catch (x) {
                  return null;
                }
              }
            }
          }
          return null;
        }
        var hasOwnProperty = Object.prototype.hasOwnProperty;
        var RESERVED_PROPS = {
          key: true,
          ref: true,
          Qe: true,
          Wg: true
        };
        var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;
        {
          didWarnAboutStringRefs = {};
        }
        function hasValidRef(config) {
          {
            if (hasOwnProperty.call(config, "ref")) {
              var getter = Object.getOwnPropertyDescriptor(config, "ref").get;
              if (getter && getter.isReactWarning) {
                return false;
              }
            }
          }
          return config.ref !== void 0;
        }
        function hasValidKey(config) {
          {
            if (hasOwnProperty.call(config, "key")) {
              var getter = Object.getOwnPropertyDescriptor(config, "key").get;
              if (getter && getter.isReactWarning) {
                return false;
              }
            }
          }
          return config.key !== void 0;
        }
        function defineKeyPropWarningGetter(props, displayName) {
          var warnAboutAccessingKey = function() {
            {
              if (!specialPropKeyWarningShown) {
                specialPropKeyWarningShown = true;
                error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
              }
            }
          };
          warnAboutAccessingKey.isReactWarning = true;
          Object.defineProperty(props, "key", {
            get: warnAboutAccessingKey,
            configurable: true
          });
        }
        function defineRefPropWarningGetter(props, displayName) {
          var warnAboutAccessingRef = function() {
            {
              if (!specialPropRefWarningShown) {
                specialPropRefWarningShown = true;
                error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
              }
            }
          };
          warnAboutAccessingRef.isReactWarning = true;
          Object.defineProperty(props, "ref", {
            get: warnAboutAccessingRef,
            configurable: true
          });
        }
        function warnIfStringRefCannotBeAutoConverted(config) {
          {
            if (typeof config.ref === "string" && ReactCurrentOwner.current && config.Qe && ReactCurrentOwner.current.stateNode !== config.Qe) {
              var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
              if (!didWarnAboutStringRefs[componentName]) {
                error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', componentName, config.ref);
                didWarnAboutStringRefs[componentName] = true;
              }
            }
          }
        }
        var ReactElement = function(type, key, ref, self, source, owner, props) {
          var element = {
            // This tag allows us to uniquely identify this as a React Element
            $$typeof: REACT_ELEMENT_TYPE,
            // Built-in properties that belong on the element
            type,
            key,
            ref,
            props,
            // Record the component responsible for creating this element.
            T: owner
          };
          {
            element.N = {};
            Object.defineProperty(element.N, "validated", {
              configurable: false,
              enumerable: false,
              writable: true,
              value: false
            });
            Object.defineProperty(element, "_self", {
              configurable: false,
              enumerable: false,
              writable: false,
              value: self
            });
            Object.defineProperty(element, "_source", {
              configurable: false,
              enumerable: false,
              writable: false,
              value: source
            });
            if (Object.freeze) {
              Object.freeze(element.props);
              Object.freeze(element);
            }
          }
          return element;
        };
        function createElement3(type, config, children) {
          var propName;
          var props = {};
          var key = null;
          var ref = null;
          var self = null;
          var source = null;
          if (config != null) {
            if (hasValidRef(config)) {
              ref = config.ref;
              {
                warnIfStringRefCannotBeAutoConverted(config);
              }
            }
            if (hasValidKey(config)) {
              {
                checkKeyStringCoercion(config.key);
              }
              key = "" + config.key;
            }
            self = config.Qe === void 0 ? null : config.Qe;
            source = config.Wg === void 0 ? null : config.Wg;
            for (propName in config) {
              if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                props[propName] = config[propName];
              }
            }
          }
          var childrenLength = arguments.length - 2;
          if (childrenLength === 1) {
            props.children = children;
          } else if (childrenLength > 1) {
            var childArray = Array(childrenLength);
            for (var i = 0; i < childrenLength; i++) {
              childArray[i] = arguments[i + 2];
            }
            {
              if (Object.freeze) {
                Object.freeze(childArray);
              }
            }
            props.children = childArray;
          }
          if (type && type.defaultProps) {
            var defaultProps = type.defaultProps;
            for (propName in defaultProps) {
              if (props[propName] === void 0) {
                props[propName] = defaultProps[propName];
              }
            }
          }
          {
            if (key || ref) {
              var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
              if (key) {
                defineKeyPropWarningGetter(props, displayName);
              }
              if (ref) {
                defineRefPropWarningGetter(props, displayName);
              }
            }
          }
          return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
        }
        function cloneAndReplaceKey(oldElement, newKey) {
          var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement.Xg, oldElement.pb, oldElement.T, oldElement.props);
          return newElement;
        }
        function cloneElement(element, config, children) {
          if (element === null || element === void 0) {
            throw new Error("React.cloneElement(...): The argument must be a React element, but you passed " + element + ".");
          }
          var propName;
          var props = assign({}, element.props);
          var key = element.key;
          var ref = element.ref;
          var self = element.Xg;
          var source = element.pb;
          var owner = element.T;
          if (config != null) {
            if (hasValidRef(config)) {
              ref = config.ref;
              owner = ReactCurrentOwner.current;
            }
            if (hasValidKey(config)) {
              {
                checkKeyStringCoercion(config.key);
              }
              key = "" + config.key;
            }
            var defaultProps;
            if (element.type && element.type.defaultProps) {
              defaultProps = element.type.defaultProps;
            }
            for (propName in config) {
              if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                if (config[propName] === void 0 && defaultProps !== void 0) {
                  props[propName] = defaultProps[propName];
                } else {
                  props[propName] = config[propName];
                }
              }
            }
          }
          var childrenLength = arguments.length - 2;
          if (childrenLength === 1) {
            props.children = children;
          } else if (childrenLength > 1) {
            var childArray = Array(childrenLength);
            for (var i = 0; i < childrenLength; i++) {
              childArray[i] = arguments[i + 2];
            }
            props.children = childArray;
          }
          return ReactElement(element.type, key, ref, self, source, owner, props);
        }
        function isValidElement(object) {
          return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
        }
        var SEPARATOR = ".";
        var SUBSEPARATOR = ":";
        function escape(key) {
          var escapeRegex = /[=:]/g;
          var escaperLookup = {
            "=": "=0",
            ":": "=2"
          };
          var escapedString = key.replace(escapeRegex, function(match) {
            return escaperLookup[match];
          });
          return "$" + escapedString;
        }
        var didWarnAboutMaps = false;
        var userProvidedKeyEscapeRegex = /\/+/g;
        function escapeUserProvidedKey(text) {
          return text.replace(userProvidedKeyEscapeRegex, "$&/");
        }
        function getElementKey(element, index) {
          if (typeof element === "object" && element !== null && element.key != null) {
            {
              checkKeyStringCoercion(element.key);
            }
            return escape("" + element.key);
          }
          return index.toString(36);
        }
        function mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {
          var type = typeof children;
          if (type === "undefined" || type === "boolean") {
            children = null;
          }
          var invokeCallback = false;
          if (children === null) {
            invokeCallback = true;
          } else {
            switch (type) {
              case "string":
              case "number":
                invokeCallback = true;
                break;
              case "object":
                switch (children.$$typeof) {
                  case REACT_ELEMENT_TYPE:
                  case REACT_PORTAL_TYPE:
                    invokeCallback = true;
                }
            }
          }
          if (invokeCallback) {
            var _child = children;
            var mappedChild = callback(_child);
            var childKey = nameSoFar === "" ? SEPARATOR + getElementKey(_child, 0) : nameSoFar;
            if (isArray(mappedChild)) {
              var escapedChildKey = "";
              if (childKey != null) {
                escapedChildKey = escapeUserProvidedKey(childKey) + "/";
              }
              mapIntoArray(mappedChild, array, escapedChildKey, "", function(c) {
                return c;
              });
            } else if (mappedChild != null) {
              if (isValidElement(mappedChild)) {
                {
                  if (mappedChild.key && (!_child || _child.key !== mappedChild.key)) {
                    checkKeyStringCoercion(mappedChild.key);
                  }
                }
                mappedChild = cloneAndReplaceKey(
                  mappedChild,
                  // Keep both the (mapped) and old keys if they differ, just as
                  // traverseAllChildren used to do for objects as children
                  escapedPrefix + // $FlowFixMe Flow incorrectly thinks React.Portal doesn't have a key
                  (mappedChild.key && (!_child || _child.key !== mappedChild.key) ? (
                    // $FlowFixMe Flow incorrectly thinks existing element's key can be a number
                    // eslint-disable-next-line react-internal/safe-string-coercion
                    escapeUserProvidedKey("" + mappedChild.key) + "/"
                  ) : "") + childKey
                );
              }
              array.push(mappedChild);
            }
            return 1;
          }
          var child;
          var nextName;
          var subtreeCount = 0;
          var nextNamePrefix = nameSoFar === "" ? SEPARATOR : nameSoFar + SUBSEPARATOR;
          if (isArray(children)) {
            for (var i = 0; i < children.length; i++) {
              child = children[i];
              nextName = nextNamePrefix + getElementKey(child, i);
              subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
            }
          } else {
            var iteratorFn = getIteratorFn(children);
            if (typeof iteratorFn === "function") {
              var iterableChildren = children;
              {
                if (iteratorFn === iterableChildren.entries) {
                  if (!didWarnAboutMaps) {
                    warn("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                  }
                  didWarnAboutMaps = true;
                }
              }
              var iterator = iteratorFn.call(iterableChildren);
              var step;
              var ii = 0;
              while (!(step = iterator.next()).done) {
                child = step.value;
                nextName = nextNamePrefix + getElementKey(child, ii++);
                subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
              }
            } else if (type === "object") {
              var childrenString = String(children);
              throw new Error("Objects are not valid as a React child (found: " + (childrenString === "[object Object]" ? "object with keys {" + Object.keys(children).join(", ") + "}" : childrenString) + "). If you meant to render a collection of children, use an array instead.");
            }
          }
          return subtreeCount;
        }
        function mapChildren(children, func, context) {
          if (children == null) {
            return children;
          }
          var result = [];
          var count = 0;
          mapIntoArray(children, result, "", "", function(child) {
            return func.call(context, child, count++);
          });
          return result;
        }
        function countChildren(children) {
          var n = 0;
          mapChildren(children, function() {
            n++;
          });
          return n;
        }
        function forEachChildren(children, forEachFunc, forEachContext) {
          mapChildren(children, function() {
            forEachFunc.apply(this, arguments);
          }, forEachContext);
        }
        function toArray(children) {
          return mapChildren(children, function(child) {
            return child;
          }) || [];
        }
        function onlyChild(children) {
          if (!isValidElement(children)) {
            throw new Error("React.Children.only expected to receive a single React element child.");
          }
          return children;
        }
        function createContext(defaultValue) {
          var context = {
            $$typeof: REACT_CONTEXT_TYPE,
            // As a workaround to support multiple concurrent renderers, we categorize
            // some renderers as primary and others as secondary. We only expect
            // there to be two concurrent renderers at most: React Native (primary) and
            // Fabric (secondary); React DOM (primary) and React ART (secondary).
            // Secondary renderers store their context values on separate fields.
            Zb: defaultValue,
            Yg: defaultValue,
            // Used to track how many concurrent renderers this context currently
            // supports within in a single renderer. Such as parallel server rendering.
            Zg: 0,
            // These are circular
            Provider: null,
            Consumer: null,
            // Add these to use same hidden class in VM as ServerContext
            _x: null,
            $x: null
          };
          context.Provider = {
            $$typeof: REACT_PROVIDER_TYPE,
            Y: context
          };
          var hasWarnedAboutUsingNestedContextConsumers = false;
          var hasWarnedAboutUsingConsumerProvider = false;
          var hasWarnedAboutDisplayNameOnConsumer = false;
          {
            var Consumer = {
              $$typeof: REACT_CONTEXT_TYPE,
              Y: context
            };
            Object.defineProperties(Consumer, {
              Provider: {
                get: function() {
                  if (!hasWarnedAboutUsingConsumerProvider) {
                    hasWarnedAboutUsingConsumerProvider = true;
                    error("Rendering <Context.Consumer.Provider> is not supported and will be removed in a future major release. Did you mean to render <Context.Provider> instead?");
                  }
                  return context.Provider;
                },
                set: function(_Provider) {
                  context.Provider = _Provider;
                }
              },
              Zb: {
                get: function() {
                  return context.Zb;
                },
                set: function(_currentValue) {
                  context.Zb = _currentValue;
                }
              },
              Yg: {
                get: function() {
                  return context.Yg;
                },
                set: function(_currentValue2) {
                  context.Yg = _currentValue2;
                }
              },
              Zg: {
                get: function() {
                  return context.Zg;
                },
                set: function(_threadCount) {
                  context.Zg = _threadCount;
                }
              },
              Consumer: {
                get: function() {
                  if (!hasWarnedAboutUsingNestedContextConsumers) {
                    hasWarnedAboutUsingNestedContextConsumers = true;
                    error("Rendering <Context.Consumer.Consumer> is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                  }
                  return context.Consumer;
                }
              },
              displayName: {
                get: function() {
                  return context.displayName;
                },
                set: function(displayName) {
                  if (!hasWarnedAboutDisplayNameOnConsumer) {
                    warn("Setting `displayName` on Context.Consumer has no effect. You should set it directly on the context with Context.displayName = '%s'.", displayName);
                    hasWarnedAboutDisplayNameOnConsumer = true;
                  }
                }
              }
            });
            context.Consumer = Consumer;
          }
          {
            context.Re = null;
            context.ay = null;
          }
          return context;
        }
        var Uninitialized = -1;
        var Pending = 0;
        var Resolved = 1;
        var Rejected = 2;
        function lazyInitializer(payload) {
          if (payload.Za === Uninitialized) {
            var ctor = payload.wc;
            var thenable = ctor();
            thenable.then(function(moduleObject2) {
              if (payload.Za === Pending || payload.Za === Uninitialized) {
                var resolved = payload;
                resolved.Za = Resolved;
                resolved.wc = moduleObject2;
              }
            }, function(error2) {
              if (payload.Za === Pending || payload.Za === Uninitialized) {
                var rejected = payload;
                rejected.Za = Rejected;
                rejected.wc = error2;
              }
            });
            if (payload.Za === Uninitialized) {
              var pending = payload;
              pending.Za = Pending;
              pending.wc = thenable;
            }
          }
          if (payload.Za === Resolved) {
            var moduleObject = payload.wc;
            {
              if (moduleObject === void 0) {
                error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))\n\nDid you accidentally put curly braces around the import?", moduleObject);
              }
            }
            {
              if (!("default" in moduleObject)) {
                error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))", moduleObject);
              }
            }
            return moduleObject.default;
          } else {
            throw payload.wc;
          }
        }
        function lazy(ctor) {
          var payload = {
            // We use these fields to store the result.
            Za: Uninitialized,
            wc: ctor
          };
          var lazyType = {
            $$typeof: REACT_LAZY_TYPE,
            Ja: payload,
            G: lazyInitializer
          };
          {
            var defaultProps;
            var propTypes;
            Object.defineProperties(lazyType, {
              defaultProps: {
                configurable: true,
                get: function() {
                  return defaultProps;
                },
                set: function(newDefaultProps) {
                  error("React.lazy(...): It is not supported to assign `defaultProps` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                  defaultProps = newDefaultProps;
                  Object.defineProperty(lazyType, "defaultProps", {
                    enumerable: true
                  });
                }
              },
              propTypes: {
                configurable: true,
                get: function() {
                  return propTypes;
                },
                set: function(newPropTypes) {
                  error("React.lazy(...): It is not supported to assign `propTypes` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                  propTypes = newPropTypes;
                  Object.defineProperty(lazyType, "propTypes", {
                    enumerable: true
                  });
                }
              }
            });
          }
          return lazyType;
        }
        function forwardRef(render2) {
          {
            if (render2 != null && render2.$$typeof === REACT_MEMO_TYPE) {
              error("forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...)).");
            } else if (typeof render2 !== "function") {
              error("forwardRef requires a render function but was given %s.", render2 === null ? "null" : typeof render2);
            } else {
              if (render2.length !== 0 && render2.length !== 2) {
                error("forwardRef render functions accept exactly two parameters: props and ref. %s", render2.length === 1 ? "Did you forget to use the ref parameter?" : "Any additional parameter will be undefined.");
              }
            }
            if (render2 != null) {
              if (render2.defaultProps != null || render2.propTypes != null) {
                error("forwardRef render functions do not support propTypes or defaultProps. Did you accidentally pass a React component?");
              }
            }
          }
          var elementType = {
            $$typeof: REACT_FORWARD_REF_TYPE,
            render: render2
          };
          {
            var ownName;
            Object.defineProperty(elementType, "displayName", {
              enumerable: false,
              configurable: true,
              get: function() {
                return ownName;
              },
              set: function(name) {
                ownName = name;
                if (!render2.name && !render2.displayName) {
                  render2.displayName = name;
                }
              }
            });
          }
          return elementType;
        }
        var REACT_MODULE_REFERENCE;
        {
          REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
        }
        function isValidElementType(type) {
          if (typeof type === "string" || typeof type === "function") {
            return true;
          }
          if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
            return true;
          }
          if (typeof type === "object" && type !== null) {
            if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object
            // types supported by any Flight configuration anywhere since
            // we don't know which Flight build this will end up being used
            // with.
            type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== void 0) {
              return true;
            }
          }
          return false;
        }
        function memo(type, compare) {
          {
            if (!isValidElementType(type)) {
              error("memo: The first argument must be a component. Instead received: %s", type === null ? "null" : typeof type);
            }
          }
          var elementType = {
            $$typeof: REACT_MEMO_TYPE,
            type,
            compare: compare === void 0 ? null : compare
          };
          {
            var ownName;
            Object.defineProperty(elementType, "displayName", {
              enumerable: false,
              configurable: true,
              get: function() {
                return ownName;
              },
              set: function(name) {
                ownName = name;
                if (!type.name && !type.displayName) {
                  type.displayName = name;
                }
              }
            });
          }
          return elementType;
        }
        function resolveDispatcher() {
          var dispatcher = ReactCurrentDispatcher.current;
          {
            if (dispatcher === null) {
              error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
            }
          }
          return dispatcher;
        }
        function useContext(Context) {
          var dispatcher = resolveDispatcher();
          {
            if (Context.Y !== void 0) {
              var realContext = Context.Y;
              if (realContext.Consumer === Context) {
                error("Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be removed in a future major release. Did you mean to call useContext(Context) instead?");
              } else if (realContext.Provider === Context) {
                error("Calling useContext(Context.Provider) is not supported. Did you mean to call useContext(Context) instead?");
              }
            }
          }
          return dispatcher.useContext(Context);
        }
        function useState(initialState) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useState(initialState);
        }
        function useReducer(reducer, initialArg, init) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useReducer(reducer, initialArg, init);
        }
        function useRef(initialValue) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useRef(initialValue);
        }
        function useEffect(create, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useEffect(create, deps);
        }
        function useInsertionEffect(create, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useInsertionEffect(create, deps);
        }
        function useLayoutEffect(create, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useLayoutEffect(create, deps);
        }
        function useCallback(callback, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useCallback(callback, deps);
        }
        function useMemo(create, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useMemo(create, deps);
        }
        function useImperativeHandle(ref, create, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useImperativeHandle(ref, create, deps);
        }
        function useDebugValue(value, formatterFn) {
          {
            var dispatcher = resolveDispatcher();
            return dispatcher.useDebugValue(value, formatterFn);
          }
        }
        function useTransition() {
          var dispatcher = resolveDispatcher();
          return dispatcher.useTransition();
        }
        function useDeferredValue(value) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useDeferredValue(value);
        }
        function useId() {
          var dispatcher = resolveDispatcher();
          return dispatcher.useId();
        }
        function useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
        }
        var disabledDepth = 0;
        var prevLog;
        var prevInfo;
        var prevWarn;
        var prevError;
        var prevGroup;
        var prevGroupCollapsed;
        var prevGroupEnd;
        function disabledLog() {
        }
        disabledLog.Cp = true;
        function disableLogs() {
          {
            if (disabledDepth === 0) {
              prevLog = console.log;
              prevInfo = console.info;
              prevWarn = console.warn;
              prevError = console.error;
              prevGroup = console.group;
              prevGroupCollapsed = console.groupCollapsed;
              prevGroupEnd = console.groupEnd;
              var props = {
                configurable: true,
                enumerable: true,
                value: disabledLog,
                writable: true
              };
              Object.defineProperties(console, {
                info: props,
                log: props,
                warn: props,
                error: props,
                group: props,
                groupCollapsed: props,
                groupEnd: props
              });
            }
            disabledDepth++;
          }
        }
        function reenableLogs() {
          {
            disabledDepth--;
            if (disabledDepth === 0) {
              var props = {
                configurable: true,
                enumerable: true,
                writable: true
              };
              Object.defineProperties(console, {
                log: assign({}, props, {
                  value: prevLog
                }),
                info: assign({}, props, {
                  value: prevInfo
                }),
                warn: assign({}, props, {
                  value: prevWarn
                }),
                error: assign({}, props, {
                  value: prevError
                }),
                group: assign({}, props, {
                  value: prevGroup
                }),
                groupCollapsed: assign({}, props, {
                  value: prevGroupCollapsed
                }),
                groupEnd: assign({}, props, {
                  value: prevGroupEnd
                })
              });
            }
            if (disabledDepth < 0) {
              error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
            }
          }
        }
        var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
        var prefix;
        function describeBuiltInComponentFrame(name, source, ownerFn) {
          {
            if (prefix === void 0) {
              try {
                throw Error();
              } catch (x) {
                var match = x.stack.trim().match(/\n( *(at )?)/);
                prefix = match && match[1] || "";
              }
            }
            return "\n" + prefix + name;
          }
        }
        var reentry = false;
        var componentFrameCache;
        {
          var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
          componentFrameCache = new PossiblyWeakMap();
        }
        function describeNativeComponentFrame(fn, construct) {
          if (!fn || reentry) {
            return "";
          }
          {
            var frame = componentFrameCache.get(fn);
            if (frame !== void 0) {
              return frame;
            }
          }
          var control;
          reentry = true;
          var previousPrepareStackTrace = Error.prepareStackTrace;
          Error.prepareStackTrace = void 0;
          var previousDispatcher;
          {
            previousDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = null;
            disableLogs();
          }
          try {
            if (construct) {
              var Fake = function() {
                throw Error();
              };
              Object.defineProperty(Fake.prototype, "props", {
                set: function() {
                  throw Error();
                }
              });
              if (typeof Reflect === "object" && Reflect.construct) {
                try {
                  Reflect.construct(Fake, []);
                } catch (x) {
                  control = x;
                }
                Reflect.construct(fn, [], Fake);
              } else {
                try {
                  Fake.call();
                } catch (x) {
                  control = x;
                }
                fn.call(Fake.prototype);
              }
            } else {
              try {
                throw Error();
              } catch (x) {
                control = x;
              }
              fn();
            }
          } catch (sample) {
            if (sample && control && typeof sample.stack === "string") {
              var sampleLines = sample.stack.split("\n");
              var controlLines = control.stack.split("\n");
              var s = sampleLines.length - 1;
              var c = controlLines.length - 1;
              while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
                c--;
              }
              for (; s >= 1 && c >= 0; s--, c--) {
                if (sampleLines[s] !== controlLines[c]) {
                  if (s !== 1 || c !== 1) {
                    do {
                      s--;
                      c--;
                      if (c < 0 || sampleLines[s] !== controlLines[c]) {
                        var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                        if (fn.displayName && _frame.includes("<anonymous>")) {
                          _frame = _frame.replace("<anonymous>", fn.displayName);
                        }
                        {
                          if (typeof fn === "function") {
                            componentFrameCache.set(fn, _frame);
                          }
                        }
                        return _frame;
                      }
                    } while (s >= 1 && c >= 0);
                  }
                  break;
                }
              }
            }
          } finally {
            reentry = false;
            {
              ReactCurrentDispatcher$1.current = previousDispatcher;
              reenableLogs();
            }
            Error.prepareStackTrace = previousPrepareStackTrace;
          }
          var name = fn ? fn.displayName || fn.name : "";
          var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
          {
            if (typeof fn === "function") {
              componentFrameCache.set(fn, syntheticFrame);
            }
          }
          return syntheticFrame;
        }
        function describeFunctionComponentFrame(fn, source, ownerFn) {
          {
            return describeNativeComponentFrame(fn, false);
          }
        }
        function shouldConstruct(Component3) {
          var prototype = Component3.prototype;
          return !!(prototype && prototype.isReactComponent);
        }
        function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
          if (type == null) {
            return "";
          }
          if (typeof type === "function") {
            {
              return describeNativeComponentFrame(type, shouldConstruct(type));
            }
          }
          if (typeof type === "string") {
            return describeBuiltInComponentFrame(type);
          }
          switch (type) {
            case REACT_SUSPENSE_TYPE:
              return describeBuiltInComponentFrame("Suspense");
            case REACT_SUSPENSE_LIST_TYPE:
              return describeBuiltInComponentFrame("SuspenseList");
          }
          if (typeof type === "object") {
            switch (type.$$typeof) {
              case REACT_FORWARD_REF_TYPE:
                return describeFunctionComponentFrame(type.render);
              case REACT_MEMO_TYPE:
                return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
              case REACT_LAZY_TYPE: {
                var lazyComponent = type;
                var payload = lazyComponent.Ja;
                var init = lazyComponent.G;
                try {
                  return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                } catch (x) {
                }
              }
            }
          }
          return "";
        }
        var loggedTypeFailures = {};
        var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
        function setCurrentlyValidatingElement(element) {
          {
            if (element) {
              var owner = element.T;
              var stack = describeUnknownElementTypeFrameInDEV(element.type, element.pb, owner ? owner.type : null);
              ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
            } else {
              ReactDebugCurrentFrame$1.setExtraStackFrame(null);
            }
          }
        }
        function checkPropTypes(typeSpecs, values, location, componentName, element) {
          {
            var has = Function.call.bind(hasOwnProperty);
            for (var typeSpecName in typeSpecs) {
              if (has(typeSpecs, typeSpecName)) {
                var error$1 = void 0;
                try {
                  if (typeof typeSpecs[typeSpecName] !== "function") {
                    var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                    err.name = "Invariant Violation";
                    throw err;
                  }
                  error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                } catch (ex) {
                  error$1 = ex;
                }
                if (error$1 && !(error$1 instanceof Error)) {
                  setCurrentlyValidatingElement(element);
                  error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                  setCurrentlyValidatingElement(null);
                }
                if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                  loggedTypeFailures[error$1.message] = true;
                  setCurrentlyValidatingElement(element);
                  error("Failed %s type: %s", location, error$1.message);
                  setCurrentlyValidatingElement(null);
                }
              }
            }
          }
        }
        function setCurrentlyValidatingElement$1(element) {
          {
            if (element) {
              var owner = element.T;
              var stack = describeUnknownElementTypeFrameInDEV(element.type, element.pb, owner ? owner.type : null);
              setExtraStackFrame(stack);
            } else {
              setExtraStackFrame(null);
            }
          }
        }
        var propTypesMisspellWarningShown;
        {
          propTypesMisspellWarningShown = false;
        }
        function getDeclarationErrorAddendum() {
          if (ReactCurrentOwner.current) {
            var name = getComponentNameFromType(ReactCurrentOwner.current.type);
            if (name) {
              return "\n\nCheck the render method of `" + name + "`.";
            }
          }
          return "";
        }
        function getSourceInfoErrorAddendum(source) {
          if (source !== void 0) {
            var fileName = source.fileName.replace(/^.*[\\\/]/, "");
            var lineNumber = source.lineNumber;
            return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
          }
          return "";
        }
        function getSourceInfoErrorAddendumForProps(elementProps) {
          if (elementProps !== null && elementProps !== void 0) {
            return getSourceInfoErrorAddendum(elementProps.Wg);
          }
          return "";
        }
        var ownerHasKeyUseWarning = {};
        function getCurrentComponentErrorInfo(parentType) {
          var info = getDeclarationErrorAddendum();
          if (!info) {
            var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
            if (parentName) {
              info = "\n\nCheck the top-level render call using <" + parentName + ">.";
            }
          }
          return info;
        }
        function validateExplicitKey(element, parentType) {
          if (!element.N || element.N.validated || element.key != null) {
            return;
          }
          element.N.validated = true;
          var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
          if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
            return;
          }
          ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
          var childOwner = "";
          if (element && element.T && element.T !== ReactCurrentOwner.current) {
            childOwner = " It was passed a child from " + getComponentNameFromType(element.T.type) + ".";
          }
          {
            setCurrentlyValidatingElement$1(element);
            error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
            setCurrentlyValidatingElement$1(null);
          }
        }
        function validateChildKeys(node, parentType) {
          if (typeof node !== "object") {
            return;
          }
          if (isArray(node)) {
            for (var i = 0; i < node.length; i++) {
              var child = node[i];
              if (isValidElement(child)) {
                validateExplicitKey(child, parentType);
              }
            }
          } else if (isValidElement(node)) {
            if (node.N) {
              node.N.validated = true;
            }
          } else if (node) {
            var iteratorFn = getIteratorFn(node);
            if (typeof iteratorFn === "function") {
              if (iteratorFn !== node.entries) {
                var iterator = iteratorFn.call(node);
                var step;
                while (!(step = iterator.next()).done) {
                  if (isValidElement(step.value)) {
                    validateExplicitKey(step.value, parentType);
                  }
                }
              }
            }
          }
        }
        function validatePropTypes(element) {
          {
            var type = element.type;
            if (type === null || type === void 0 || typeof type === "string") {
              return;
            }
            var propTypes;
            if (typeof type === "function") {
              propTypes = type.propTypes;
            } else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.
            // Inner props are checked in the reconciler.
            type.$$typeof === REACT_MEMO_TYPE)) {
              propTypes = type.propTypes;
            } else {
              return;
            }
            if (propTypes) {
              var name = getComponentNameFromType(type);
              checkPropTypes(propTypes, element.props, "prop", name, element);
            } else if (type.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
              propTypesMisspellWarningShown = true;
              var _name = getComponentNameFromType(type);
              error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
            }
            if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) {
              error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
            }
          }
        }
        function validateFragmentProps(fragment) {
          {
            var keys = Object.keys(fragment.props);
            for (var i = 0; i < keys.length; i++) {
              var key = keys[i];
              if (key !== "children" && key !== "key") {
                setCurrentlyValidatingElement$1(fragment);
                error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                setCurrentlyValidatingElement$1(null);
                break;
              }
            }
            if (fragment.ref !== null) {
              setCurrentlyValidatingElement$1(fragment);
              error("Invalid attribute `ref` supplied to `React.Fragment`.");
              setCurrentlyValidatingElement$1(null);
            }
          }
        }
        function createElementWithValidation(type, props, children) {
          var validType = isValidElementType(type);
          if (!validType) {
            var info = "";
            if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
              info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
            }
            var sourceInfo = getSourceInfoErrorAddendumForProps(props);
            if (sourceInfo) {
              info += sourceInfo;
            } else {
              info += getDeclarationErrorAddendum();
            }
            var typeString;
            if (type === null) {
              typeString = "null";
            } else if (isArray(type)) {
              typeString = "array";
            } else if (type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE) {
              typeString = "<" + (getComponentNameFromType(type.type) || "Unknown") + " />";
              info = " Did you accidentally export a JSX literal instead of a component?";
            } else {
              typeString = typeof type;
            }
            {
              error("React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
            }
          }
          var element = createElement3.apply(this, arguments);
          if (element == null) {
            return element;
          }
          if (validType) {
            for (var i = 2; i < arguments.length; i++) {
              validateChildKeys(arguments[i], type);
            }
          }
          if (type === REACT_FRAGMENT_TYPE) {
            validateFragmentProps(element);
          } else {
            validatePropTypes(element);
          }
          return element;
        }
        var didWarnAboutDeprecatedCreateFactory = false;
        function createFactoryWithValidation(type) {
          var validatedFactory = createElementWithValidation.bind(null, type);
          validatedFactory.type = type;
          {
            if (!didWarnAboutDeprecatedCreateFactory) {
              didWarnAboutDeprecatedCreateFactory = true;
              warn("React.createFactory() is deprecated and will be removed in a future major release. Consider using JSX or use React.createElement() directly instead.");
            }
            Object.defineProperty(validatedFactory, "type", {
              enumerable: false,
              get: function() {
                warn("Factory.type is deprecated. Access the class directly before passing it to createFactory.");
                Object.defineProperty(this, "type", {
                  value: type
                });
                return type;
              }
            });
          }
          return validatedFactory;
        }
        function cloneElementWithValidation(element, props, children) {
          var newElement = cloneElement.apply(this, arguments);
          for (var i = 2; i < arguments.length; i++) {
            validateChildKeys(arguments[i], newElement.type);
          }
          validatePropTypes(newElement);
          return newElement;
        }
        function startTransition(scope, options) {
          var prevTransition = ReactCurrentBatchConfig.transition;
          ReactCurrentBatchConfig.transition = {};
          var currentTransition = ReactCurrentBatchConfig.transition;
          {
            ReactCurrentBatchConfig.transition._a = /* @__PURE__ */ new Set();
          }
          try {
            scope();
          } finally {
            ReactCurrentBatchConfig.transition = prevTransition;
            {
              if (prevTransition === null && currentTransition._a) {
                var updatedFibersCount = currentTransition._a.size;
                if (updatedFibersCount > 10) {
                  warn("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.");
                }
                currentTransition._a.clear();
              }
            }
          }
        }
        var didWarnAboutMessageChannel = false;
        var enqueueTaskImpl = null;
        function enqueueTask(task) {
          if (enqueueTaskImpl === null) {
            try {
              var requireString = ("require" + Math.random()).slice(0, 7);
              var nodeRequire = module && module[requireString];
              enqueueTaskImpl = nodeRequire.call(module, "timers").setImmediate;
            } catch (_err) {
              enqueueTaskImpl = function(callback) {
                {
                  if (didWarnAboutMessageChannel === false) {
                    didWarnAboutMessageChannel = true;
                    if (typeof MessageChannel === "undefined") {
                      error("This browser does not have a MessageChannel implementation, so enqueuing tasks via await act(async () => ...) will fail. Please file an issue at https://github.com/facebook/react/issues if you encounter this warning.");
                    }
                  }
                }
                var channel = new MessageChannel();
                channel.port1.onmessage = callback;
                channel.port2.postMessage(void 0);
              };
            }
          }
          return enqueueTaskImpl(task);
        }
        var actScopeDepth = 0;
        var didWarnNoAwaitAct = false;
        function act(callback) {
          {
            var prevActScopeDepth = actScopeDepth;
            actScopeDepth++;
            if (ReactCurrentActQueue.current === null) {
              ReactCurrentActQueue.current = [];
            }
            var prevIsBatchingLegacy = ReactCurrentActQueue.isBatchingLegacy;
            var result;
            try {
              ReactCurrentActQueue.isBatchingLegacy = true;
              result = callback();
              if (!prevIsBatchingLegacy && ReactCurrentActQueue.didScheduleLegacyUpdate) {
                var queue = ReactCurrentActQueue.current;
                if (queue !== null) {
                  ReactCurrentActQueue.didScheduleLegacyUpdate = false;
                  flushActQueue(queue);
                }
              }
            } catch (error2) {
              popActScope(prevActScopeDepth);
              throw error2;
            } finally {
              ReactCurrentActQueue.isBatchingLegacy = prevIsBatchingLegacy;
            }
            if (result !== null && typeof result === "object" && typeof result.then === "function") {
              var thenableResult = result;
              var wasAwaited = false;
              var thenable = {
                then: function(resolve, reject) {
                  wasAwaited = true;
                  thenableResult.then(function(returnValue2) {
                    popActScope(prevActScopeDepth);
                    if (actScopeDepth === 0) {
                      recursivelyFlushAsyncActWork(returnValue2, resolve, reject);
                    } else {
                      resolve(returnValue2);
                    }
                  }, function(error2) {
                    popActScope(prevActScopeDepth);
                    reject(error2);
                  });
                }
              };
              {
                if (!didWarnNoAwaitAct && typeof Promise !== "undefined") {
                  Promise.resolve().then(function() {
                  }).then(function() {
                    if (!wasAwaited) {
                      didWarnNoAwaitAct = true;
                      error("You called act(async () => ...) without await. This could lead to unexpected testing behaviour, interleaving multiple act calls and mixing their scopes. You should - await act(async () => ...);");
                    }
                  });
                }
              }
              return thenable;
            } else {
              var returnValue = result;
              popActScope(prevActScopeDepth);
              if (actScopeDepth === 0) {
                var _queue = ReactCurrentActQueue.current;
                if (_queue !== null) {
                  flushActQueue(_queue);
                  ReactCurrentActQueue.current = null;
                }
                var _thenable = {
                  then: function(resolve, reject) {
                    if (ReactCurrentActQueue.current === null) {
                      ReactCurrentActQueue.current = [];
                      recursivelyFlushAsyncActWork(returnValue, resolve, reject);
                    } else {
                      resolve(returnValue);
                    }
                  }
                };
                return _thenable;
              } else {
                var _thenable2 = {
                  then: function(resolve, reject) {
                    resolve(returnValue);
                  }
                };
                return _thenable2;
              }
            }
          }
        }
        function popActScope(prevActScopeDepth) {
          {
            if (prevActScopeDepth !== actScopeDepth - 1) {
              error("You seem to have overlapping act() calls, this is not supported. Be sure to await previous act() calls before making a new one. ");
            }
            actScopeDepth = prevActScopeDepth;
          }
        }
        function recursivelyFlushAsyncActWork(returnValue, resolve, reject) {
          {
            var queue = ReactCurrentActQueue.current;
            if (queue !== null) {
              try {
                flushActQueue(queue);
                enqueueTask(function() {
                  if (queue.length === 0) {
                    ReactCurrentActQueue.current = null;
                    resolve(returnValue);
                  } else {
                    recursivelyFlushAsyncActWork(returnValue, resolve, reject);
                  }
                });
              } catch (error2) {
                reject(error2);
              }
            } else {
              resolve(returnValue);
            }
          }
        }
        var isFlushing = false;
        function flushActQueue(queue) {
          {
            if (!isFlushing) {
              isFlushing = true;
              var i = 0;
              try {
                for (; i < queue.length; i++) {
                  var callback = queue[i];
                  do {
                    callback = callback(true);
                  } while (callback !== null);
                }
                queue.length = 0;
              } catch (error2) {
                queue = queue.slice(i + 1);
                throw error2;
              } finally {
                isFlushing = false;
              }
            }
          }
        }
        var createElement$1 = createElementWithValidation;
        var cloneElement$1 = cloneElementWithValidation;
        var createFactory = createFactoryWithValidation;
        var Children = {
          map: mapChildren,
          forEach: forEachChildren,
          count: countChildren,
          toArray,
          only: onlyChild
        };
        exports.Children = Children;
        exports.Component = Component2;
        exports.Fragment = REACT_FRAGMENT_TYPE;
        exports.Profiler = REACT_PROFILER_TYPE;
        exports.PureComponent = PureComponent;
        exports.StrictMode = REACT_STRICT_MODE_TYPE;
        exports.Suspense = REACT_SUSPENSE_TYPE;
        exports.Ej = ReactSharedInternals;
        exports.cloneElement = cloneElement$1;
        exports.createContext = createContext;
        exports.createElement = createElement$1;
        exports.createFactory = createFactory;
        exports.createRef = createRef2;
        exports.forwardRef = forwardRef;
        exports.isValidElement = isValidElement;
        exports.lazy = lazy;
        exports.memo = memo;
        exports.startTransition = startTransition;
        exports.unstable_act = act;
        exports.useCallback = useCallback;
        exports.useContext = useContext;
        exports.useDebugValue = useDebugValue;
        exports.useDeferredValue = useDeferredValue;
        exports.useEffect = useEffect;
        exports.useId = useId;
        exports.useImperativeHandle = useImperativeHandle;
        exports.useInsertionEffect = useInsertionEffect;
        exports.useLayoutEffect = useLayoutEffect;
        exports.useMemo = useMemo;
        exports.useReducer = useReducer;
        exports.useRef = useRef;
        exports.useState = useState;
        exports.useSyncExternalStore = useSyncExternalStore;
        exports.useTransition = useTransition;
        exports.version = ReactVersion;
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
          __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
        }
      })();
    }
  }
});

// node_modules/react/index.js
var require_react = __commonJS({
  "node_modules/react/index.js"(exports, module) {
    "use strict";
    if (false) {
      module.exports = null;
    } else {
      module.exports = require_react_development();
    }
  }
});

// node_modules/scheduler/cjs/scheduler.development.js
var require_scheduler_development = __commonJS({
  "node_modules/scheduler/cjs/scheduler.development.js"(exports) {
    "use strict";
    if (true) {
      (function() {
        "use strict";
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
          __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
        }
        var enableSchedulerDebugging = false;
        var enableProfiling = false;
        var frameYieldMs = 5;
        function push(heap, node) {
          var index = heap.length;
          heap.push(node);
          siftUp(heap, node, index);
        }
        function peek(heap) {
          return heap.length === 0 ? null : heap[0];
        }
        function pop(heap) {
          if (heap.length === 0) {
            return null;
          }
          var first = heap[0];
          var last = heap.pop();
          if (last !== first) {
            heap[0] = last;
            siftDown(heap, last, 0);
          }
          return first;
        }
        function siftUp(heap, node, i) {
          var index = i;
          while (index > 0) {
            var parentIndex = index - 1 >>> 1;
            var parent = heap[parentIndex];
            if (compare(parent, node) > 0) {
              heap[parentIndex] = node;
              heap[index] = parent;
              index = parentIndex;
            } else {
              return;
            }
          }
        }
        function siftDown(heap, node, i) {
          var index = i;
          var length = heap.length;
          var halfLength = length >>> 1;
          while (index < halfLength) {
            var leftIndex = (index + 1) * 2 - 1;
            var left = heap[leftIndex];
            var rightIndex = leftIndex + 1;
            var right = heap[rightIndex];
            if (compare(left, node) < 0) {
              if (rightIndex < length && compare(right, left) < 0) {
                heap[index] = right;
                heap[rightIndex] = node;
                index = rightIndex;
              } else {
                heap[index] = left;
                heap[leftIndex] = node;
                index = leftIndex;
              }
            } else if (rightIndex < length && compare(right, node) < 0) {
              heap[index] = right;
              heap[rightIndex] = node;
              index = rightIndex;
            } else {
              return;
            }
          }
        }
        function compare(a, b) {
          var diff = a.sortIndex - b.sortIndex;
          return diff !== 0 ? diff : a.id - b.id;
        }
        var ImmediatePriority = 1;
        var UserBlockingPriority = 2;
        var NormalPriority = 3;
        var LowPriority = 4;
        var IdlePriority = 5;
        function markTaskErrored(task, ms) {
        }
        var hasPerformanceNow = typeof performance === "object" && typeof performance.now === "function";
        if (hasPerformanceNow) {
          var localPerformance = performance;
          exports.unstable_now = function() {
            return localPerformance.now();
          };
        } else {
          var localDate = Date;
          var initialTime = localDate.now();
          exports.unstable_now = function() {
            return localDate.now() - initialTime;
          };
        }
        var maxSigned31BitInt = 1073741823;
        var IMMEDIATE_PRIORITY_TIMEOUT = -1;
        var USER_BLOCKING_PRIORITY_TIMEOUT = 250;
        var NORMAL_PRIORITY_TIMEOUT = 5e3;
        var LOW_PRIORITY_TIMEOUT = 1e4;
        var IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt;
        var taskQueue = [];
        var timerQueue = [];
        var taskIdCounter = 1;
        var currentTask = null;
        var currentPriorityLevel = NormalPriority;
        var isPerformingWork = false;
        var isHostCallbackScheduled = false;
        var isHostTimeoutScheduled = false;
        var localSetTimeout = typeof setTimeout === "function" ? setTimeout : null;
        var localClearTimeout = typeof clearTimeout === "function" ? clearTimeout : null;
        var localSetImmediate = typeof setImmediate !== "undefined" ? setImmediate : null;
        var isInputPending = typeof navigator !== "undefined" && navigator.scheduling !== void 0 && navigator.scheduling.isInputPending !== void 0 ? navigator.scheduling.isInputPending.bind(navigator.scheduling) : null;
        function advanceTimers(currentTime) {
          var timer = peek(timerQueue);
          while (timer !== null) {
            if (timer.callback === null) {
              pop(timerQueue);
            } else if (timer.startTime <= currentTime) {
              pop(timerQueue);
              timer.sortIndex = timer.expirationTime;
              push(taskQueue, timer);
            } else {
              return;
            }
            timer = peek(timerQueue);
          }
        }
        function handleTimeout(currentTime) {
          isHostTimeoutScheduled = false;
          advanceTimers(currentTime);
          if (!isHostCallbackScheduled) {
            if (peek(taskQueue) !== null) {
              isHostCallbackScheduled = true;
              requestHostCallback(flushWork);
            } else {
              var firstTimer = peek(timerQueue);
              if (firstTimer !== null) {
                requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
              }
            }
          }
        }
        function flushWork(hasTimeRemaining, initialTime2) {
          isHostCallbackScheduled = false;
          if (isHostTimeoutScheduled) {
            isHostTimeoutScheduled = false;
            cancelHostTimeout();
          }
          isPerformingWork = true;
          var previousPriorityLevel = currentPriorityLevel;
          try {
            if (enableProfiling) {
              try {
                return workLoop(hasTimeRemaining, initialTime2);
              } catch (error) {
                if (currentTask !== null) {
                  var currentTime = exports.unstable_now();
                  markTaskErrored(currentTask, currentTime);
                  currentTask.isQueued = false;
                }
                throw error;
              }
            } else {
              return workLoop(hasTimeRemaining, initialTime2);
            }
          } finally {
            currentTask = null;
            currentPriorityLevel = previousPriorityLevel;
            isPerformingWork = false;
          }
        }
        function workLoop(hasTimeRemaining, initialTime2) {
          var currentTime = initialTime2;
          advanceTimers(currentTime);
          currentTask = peek(taskQueue);
          while (currentTask !== null && !enableSchedulerDebugging) {
            if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || shouldYieldToHost())) {
              break;
            }
            var callback = currentTask.callback;
            if (typeof callback === "function") {
              currentTask.callback = null;
              currentPriorityLevel = currentTask.priorityLevel;
              var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;
              var continuationCallback = callback(didUserCallbackTimeout);
              currentTime = exports.unstable_now();
              if (typeof continuationCallback === "function") {
                currentTask.callback = continuationCallback;
              } else {
                if (currentTask === peek(taskQueue)) {
                  pop(taskQueue);
                }
              }
              advanceTimers(currentTime);
            } else {
              pop(taskQueue);
            }
            currentTask = peek(taskQueue);
          }
          if (currentTask !== null) {
            return true;
          } else {
            var firstTimer = peek(timerQueue);
            if (firstTimer !== null) {
              requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
            }
            return false;
          }
        }
        function unstable_runWithPriority(priorityLevel, eventHandler) {
          switch (priorityLevel) {
            case ImmediatePriority:
            case UserBlockingPriority:
            case NormalPriority:
            case LowPriority:
            case IdlePriority:
              break;
            default:
              priorityLevel = NormalPriority;
          }
          var previousPriorityLevel = currentPriorityLevel;
          currentPriorityLevel = priorityLevel;
          try {
            return eventHandler();
          } finally {
            currentPriorityLevel = previousPriorityLevel;
          }
        }
        function unstable_next(eventHandler) {
          var priorityLevel;
          switch (currentPriorityLevel) {
            case ImmediatePriority:
            case UserBlockingPriority:
            case NormalPriority:
              priorityLevel = NormalPriority;
              break;
            default:
              priorityLevel = currentPriorityLevel;
              break;
          }
          var previousPriorityLevel = currentPriorityLevel;
          currentPriorityLevel = priorityLevel;
          try {
            return eventHandler();
          } finally {
            currentPriorityLevel = previousPriorityLevel;
          }
        }
        function unstable_wrapCallback(callback) {
          var parentPriorityLevel = currentPriorityLevel;
          return function() {
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = parentPriorityLevel;
            try {
              return callback.apply(this, arguments);
            } finally {
              currentPriorityLevel = previousPriorityLevel;
            }
          };
        }
        function unstable_scheduleCallback(priorityLevel, callback, options) {
          var currentTime = exports.unstable_now();
          var startTime2;
          if (typeof options === "object" && options !== null) {
            var delay = options.delay;
            if (typeof delay === "number" && delay > 0) {
              startTime2 = currentTime + delay;
            } else {
              startTime2 = currentTime;
            }
          } else {
            startTime2 = currentTime;
          }
          var timeout;
          switch (priorityLevel) {
            case ImmediatePriority:
              timeout = IMMEDIATE_PRIORITY_TIMEOUT;
              break;
            case UserBlockingPriority:
              timeout = USER_BLOCKING_PRIORITY_TIMEOUT;
              break;
            case IdlePriority:
              timeout = IDLE_PRIORITY_TIMEOUT;
              break;
            case LowPriority:
              timeout = LOW_PRIORITY_TIMEOUT;
              break;
            case NormalPriority:
            default:
              timeout = NORMAL_PRIORITY_TIMEOUT;
              break;
          }
          var expirationTime = startTime2 + timeout;
          var newTask = {
            id: taskIdCounter++,
            callback,
            priorityLevel,
            startTime: startTime2,
            expirationTime,
            sortIndex: -1
          };
          if (startTime2 > currentTime) {
            newTask.sortIndex = startTime2;
            push(timerQueue, newTask);
            if (peek(taskQueue) === null && newTask === peek(timerQueue)) {
              if (isHostTimeoutScheduled) {
                cancelHostTimeout();
              } else {
                isHostTimeoutScheduled = true;
              }
              requestHostTimeout(handleTimeout, startTime2 - currentTime);
            }
          } else {
            newTask.sortIndex = expirationTime;
            push(taskQueue, newTask);
            if (!isHostCallbackScheduled && !isPerformingWork) {
              isHostCallbackScheduled = true;
              requestHostCallback(flushWork);
            }
          }
          return newTask;
        }
        function unstable_pauseExecution() {
        }
        function unstable_continueExecution() {
          if (!isHostCallbackScheduled && !isPerformingWork) {
            isHostCallbackScheduled = true;
            requestHostCallback(flushWork);
          }
        }
        function unstable_getFirstCallbackNode() {
          return peek(taskQueue);
        }
        function unstable_cancelCallback(task) {
          task.callback = null;
        }
        function unstable_getCurrentPriorityLevel() {
          return currentPriorityLevel;
        }
        var isMessageLoopRunning = false;
        var scheduledHostCallback = null;
        var taskTimeoutID = -1;
        var frameInterval = frameYieldMs;
        var startTime = -1;
        function shouldYieldToHost() {
          var timeElapsed = exports.unstable_now() - startTime;
          if (timeElapsed < frameInterval) {
            return false;
          }
          return true;
        }
        function requestPaint() {
        }
        function forceFrameRate(fps) {
          if (fps < 0 || fps > 125) {
            console["error"]("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported");
            return;
          }
          if (fps > 0) {
            frameInterval = Math.floor(1e3 / fps);
          } else {
            frameInterval = frameYieldMs;
          }
        }
        var performWorkUntilDeadline = function() {
          if (scheduledHostCallback !== null) {
            var currentTime = exports.unstable_now();
            startTime = currentTime;
            var hasTimeRemaining = true;
            var hasMoreWork = true;
            try {
              hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);
            } finally {
              if (hasMoreWork) {
                schedulePerformWorkUntilDeadline();
              } else {
                isMessageLoopRunning = false;
                scheduledHostCallback = null;
              }
            }
          } else {
            isMessageLoopRunning = false;
          }
        };
        var schedulePerformWorkUntilDeadline;
        if (typeof localSetImmediate === "function") {
          schedulePerformWorkUntilDeadline = function() {
            localSetImmediate(performWorkUntilDeadline);
          };
        } else if (typeof MessageChannel !== "undefined") {
          var channel = new MessageChannel();
          var port = channel.port2;
          channel.port1.onmessage = performWorkUntilDeadline;
          schedulePerformWorkUntilDeadline = function() {
            port.postMessage(null);
          };
        } else {
          schedulePerformWorkUntilDeadline = function() {
            localSetTimeout(performWorkUntilDeadline, 0);
          };
        }
        function requestHostCallback(callback) {
          scheduledHostCallback = callback;
          if (!isMessageLoopRunning) {
            isMessageLoopRunning = true;
            schedulePerformWorkUntilDeadline();
          }
        }
        function requestHostTimeout(callback, ms) {
          taskTimeoutID = localSetTimeout(function() {
            callback(exports.unstable_now());
          }, ms);
        }
        function cancelHostTimeout() {
          localClearTimeout(taskTimeoutID);
          taskTimeoutID = -1;
        }
        var unstable_requestPaint = requestPaint;
        var unstable_Profiling = null;
        exports.unstable_IdlePriority = IdlePriority;
        exports.unstable_ImmediatePriority = ImmediatePriority;
        exports.unstable_LowPriority = LowPriority;
        exports.unstable_NormalPriority = NormalPriority;
        exports.unstable_Profiling = unstable_Profiling;
        exports.unstable_UserBlockingPriority = UserBlockingPriority;
        exports.unstable_cancelCallback = unstable_cancelCallback;
        exports.unstable_continueExecution = unstable_continueExecution;
        exports.unstable_forceFrameRate = forceFrameRate;
        exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
        exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
        exports.unstable_next = unstable_next;
        exports.unstable_pauseExecution = unstable_pauseExecution;
        exports.unstable_requestPaint = unstable_requestPaint;
        exports.unstable_runWithPriority = unstable_runWithPriority;
        exports.unstable_scheduleCallback = unstable_scheduleCallback;
        exports.unstable_shouldYield = shouldYieldToHost;
        exports.unstable_wrapCallback = unstable_wrapCallback;
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
          __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
        }
      })();
    }
  }
});

// node_modules/scheduler/index.js
var require_scheduler = __commonJS({
  "node_modules/scheduler/index.js"(exports, module) {
    "use strict";
    if (false) {
      module.exports = null;
    } else {
      module.exports = require_scheduler_development();
    }
  }
});

// node_modules/react-dom/cjs/react-dom.development.js
var require_react_dom_development = __commonJS({
  "node_modules/react-dom/cjs/react-dom.development.js"(exports) {
    "use strict";
    if (true) {
      (function() {
        "use strict";
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
          __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
        }
        var React3 = require_react();
        var Scheduler = require_scheduler();
        var ReactSharedInternals = React3.Ej;
        var suppressWarning = false;
        function setSuppressWarning(newSuppressWarning) {
          {
            suppressWarning = newSuppressWarning;
          }
        }
        function warn(format) {
          {
            if (!suppressWarning) {
              for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                args[_key - 1] = arguments[_key];
              }
              printWarning("warn", format, args);
            }
          }
        }
        function error(format) {
          {
            if (!suppressWarning) {
              for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                args[_key2 - 1] = arguments[_key2];
              }
              printWarning("error", format, args);
            }
          }
        }
        function printWarning(level, format, args) {
          {
            var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
            var stack = ReactDebugCurrentFrame2.getStackAddendum();
            if (stack !== "") {
              format += "%s";
              args = args.concat([stack]);
            }
            var argsWithFormat = args.map(function(item) {
              return String(item);
            });
            argsWithFormat.unshift("Warning: " + format);
            Function.prototype.apply.call(console[level], console, argsWithFormat);
          }
        }
        var FunctionComponent = 0;
        var ClassComponent = 1;
        var IndeterminateComponent = 2;
        var HostRoot = 3;
        var HostPortal = 4;
        var HostComponent = 5;
        var HostText = 6;
        var Fragment = 7;
        var Mode = 8;
        var ContextConsumer = 9;
        var ContextProvider = 10;
        var ForwardRef = 11;
        var Profiler = 12;
        var SuspenseComponent = 13;
        var MemoComponent = 14;
        var SimpleMemoComponent = 15;
        var LazyComponent = 16;
        var IncompleteClassComponent = 17;
        var DehydratedFragment = 18;
        var SuspenseListComponent = 19;
        var ScopeComponent = 21;
        var OffscreenComponent = 22;
        var LegacyHiddenComponent = 23;
        var CacheComponent = 24;
        var TracingMarkerComponent = 25;
        var enableClientRenderFallbackOnTextMismatch = true;
        var enableNewReconciler = false;
        var enableLazyContextPropagation = false;
        var enableLegacyHidden = false;
        var enableSuspenseAvoidThisFallback = false;
        var disableCommentsAsDOMContainers = true;
        var enableCustomElementPropertySupport = false;
        var warnAboutStringRefs = false;
        var enableSchedulingProfiler = true;
        var enableProfilerTimer = true;
        var enableProfilerCommitHooks = true;
        var allNativeEvents = /* @__PURE__ */ new Set();
        var registrationNameDependencies = {};
        var possibleRegistrationNames = {};
        function registerTwoPhaseEvent(registrationName, dependencies) {
          registerDirectEvent(registrationName, dependencies);
          registerDirectEvent(registrationName + "Capture", dependencies);
        }
        function registerDirectEvent(registrationName, dependencies) {
          {
            if (registrationNameDependencies[registrationName]) {
              error("EventRegistry: More than one plugin attempted to publish the same registration name, `%s`.", registrationName);
            }
          }
          registrationNameDependencies[registrationName] = dependencies;
          {
            var lowerCasedName = registrationName.toLowerCase();
            possibleRegistrationNames[lowerCasedName] = registrationName;
            if (registrationName === "onDoubleClick") {
              possibleRegistrationNames.ondblclick = registrationName;
            }
          }
          for (var i = 0; i < dependencies.length; i++) {
            allNativeEvents.add(dependencies[i]);
          }
        }
        var canUseDOM = !!(typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined");
        var hasOwnProperty = Object.prototype.hasOwnProperty;
        function typeName(value) {
          {
            var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
            var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
            return type;
          }
        }
        function willCoercionThrow(value) {
          {
            try {
              testStringCoercion(value);
              return false;
            } catch (e) {
              return true;
            }
          }
        }
        function testStringCoercion(value) {
          return "" + value;
        }
        function checkAttributeStringCoercion(value, attributeName) {
          {
            if (willCoercionThrow(value)) {
              error("The provided `%s` attribute is an unsupported type %s. This value must be coerced to a string before before using it here.", attributeName, typeName(value));
              return testStringCoercion(value);
            }
          }
        }
        function checkKeyStringCoercion(value) {
          {
            if (willCoercionThrow(value)) {
              error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
              return testStringCoercion(value);
            }
          }
        }
        function checkPropStringCoercion(value, propName) {
          {
            if (willCoercionThrow(value)) {
              error("The provided `%s` prop is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value));
              return testStringCoercion(value);
            }
          }
        }
        function checkCSSPropertyStringCoercion(value, propName) {
          {
            if (willCoercionThrow(value)) {
              error("The provided `%s` CSS property is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value));
              return testStringCoercion(value);
            }
          }
        }
        function checkHtmlStringCoercion(value) {
          {
            if (willCoercionThrow(value)) {
              error("The provided HTML markup uses a value of unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
              return testStringCoercion(value);
            }
          }
        }
        function checkFormFieldValueStringCoercion(value) {
          {
            if (willCoercionThrow(value)) {
              error("Form field values (value, checked, defaultValue, or defaultChecked props) must be strings, not %s. This value must be coerced to a string before before using it here.", typeName(value));
              return testStringCoercion(value);
            }
          }
        }
        var RESERVED = 0;
        var STRING = 1;
        var BOOLEANISH_STRING = 2;
        var BOOLEAN = 3;
        var OVERLOADED_BOOLEAN = 4;
        var NUMERIC = 5;
        var POSITIVE_NUMERIC = 6;
        var ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
        var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
        var VALID_ATTRIBUTE_NAME_REGEX = new RegExp("^[" + ATTRIBUTE_NAME_START_CHAR + "][" + ATTRIBUTE_NAME_CHAR + "]*$");
        var illegalAttributeNameCache = {};
        var validatedAttributeNameCache = {};
        function isAttributeNameSafe(attributeName) {
          if (hasOwnProperty.call(validatedAttributeNameCache, attributeName)) {
            return true;
          }
          if (hasOwnProperty.call(illegalAttributeNameCache, attributeName)) {
            return false;
          }
          if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
            validatedAttributeNameCache[attributeName] = true;
            return true;
          }
          illegalAttributeNameCache[attributeName] = true;
          {
            error("Invalid attribute name: `%s`", attributeName);
          }
          return false;
        }
        function shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag) {
          if (propertyInfo !== null) {
            return propertyInfo.type === RESERVED;
          }
          if (isCustomComponentTag) {
            return false;
          }
          if (name.length > 2 && (name[0] === "o" || name[0] === "O") && (name[1] === "n" || name[1] === "N")) {
            return true;
          }
          return false;
        }
        function shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag) {
          if (propertyInfo !== null && propertyInfo.type === RESERVED) {
            return false;
          }
          switch (typeof value) {
            case "function":
            case "symbol":
              return true;
            case "boolean": {
              if (isCustomComponentTag) {
                return false;
              }
              if (propertyInfo !== null) {
                return !propertyInfo.acceptsBooleans;
              } else {
                var prefix2 = name.toLowerCase().slice(0, 5);
                return prefix2 !== "data-" && prefix2 !== "aria-";
              }
            }
            default:
              return false;
          }
        }
        function shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag) {
          if (value === null || typeof value === "undefined") {
            return true;
          }
          if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag)) {
            return true;
          }
          if (isCustomComponentTag) {
            return false;
          }
          if (propertyInfo !== null) {
            switch (propertyInfo.type) {
              case BOOLEAN:
                return !value;
              case OVERLOADED_BOOLEAN:
                return value === false;
              case NUMERIC:
                return isNaN(value);
              case POSITIVE_NUMERIC:
                return isNaN(value) || value < 1;
            }
          }
          return false;
        }
        function getPropertyInfo(name) {
          return properties.hasOwnProperty(name) ? properties[name] : null;
        }
        function PropertyInfoRecord(name, type, mustUseProperty, attributeName, attributeNamespace, sanitizeURL2, removeEmptyString) {
          this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN;
          this.attributeName = attributeName;
          this.attributeNamespace = attributeNamespace;
          this.mustUseProperty = mustUseProperty;
          this.propertyName = name;
          this.type = type;
          this.sanitizeURL = sanitizeURL2;
          this.removeEmptyString = removeEmptyString;
        }
        var properties = {};
        var reservedProps = [
          "children",
          "dangerouslySetInnerHTML",
          // TODO: This prevents the assignment of defaultValue to regular
          // elements (not just inputs). Now that ReactDOMInput assigns to the
          // defaultValue property -- do we need this?
          "defaultValue",
          "defaultChecked",
          "innerHTML",
          "suppressContentEditableWarning",
          "suppressHydrationWarning",
          "style"
        ];
        reservedProps.forEach(function(name) {
          properties[name] = new PropertyInfoRecord(
            name,
            RESERVED,
            false,
            // mustUseProperty
            name,
            // attributeName
            null,
            // attributeNamespace
            false,
            // sanitizeURL
            false
          );
        });
        [["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function(_ref) {
          var name = _ref[0], attributeName = _ref[1];
          properties[name] = new PropertyInfoRecord(
            name,
            STRING,
            false,
            // mustUseProperty
            attributeName,
            // attributeName
            null,
            // attributeNamespace
            false,
            // sanitizeURL
            false
          );
        });
        ["contentEditable", "draggable", "spellCheck", "value"].forEach(function(name) {
          properties[name] = new PropertyInfoRecord(
            name,
            BOOLEANISH_STRING,
            false,
            // mustUseProperty
            name.toLowerCase(),
            // attributeName
            null,
            // attributeNamespace
            false,
            // sanitizeURL
            false
          );
        });
        ["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function(name) {
          properties[name] = new PropertyInfoRecord(
            name,
            BOOLEANISH_STRING,
            false,
            // mustUseProperty
            name,
            // attributeName
            null,
            // attributeNamespace
            false,
            // sanitizeURL
            false
          );
        });
        [
          "allowFullScreen",
          "async",
          // Note: there is a special case that prevents it from being written to the DOM
          // on the client side because the browsers are inconsistent. Instead we call focus().
          "autoFocus",
          "autoPlay",
          "controls",
          "default",
          "defer",
          "disabled",
          "disablePictureInPicture",
          "disableRemotePlayback",
          "formNoValidate",
          "hidden",
          "loop",
          "noModule",
          "noValidate",
          "open",
          "playsInline",
          "readOnly",
          "required",
          "reversed",
          "scoped",
          "seamless",
          // Microdata
          "itemScope"
        ].forEach(function(name) {
          properties[name] = new PropertyInfoRecord(
            name,
            BOOLEAN,
            false,
            // mustUseProperty
            name.toLowerCase(),
            // attributeName
            null,
            // attributeNamespace
            false,
            // sanitizeURL
            false
          );
        });
        [
          "checked",
          // Note: `option.selected` is not updated if `select.multiple` is
          // disabled with `removeAttribute`. We have special logic for handling this.
          "multiple",
          "muted",
          "selected"
          // NOTE: if you add a camelCased prop to this list,
          // you'll need to set attributeName to name.toLowerCase()
          // instead in the assignment below.
        ].forEach(function(name) {
          properties[name] = new PropertyInfoRecord(
            name,
            BOOLEAN,
            true,
            // mustUseProperty
            name,
            // attributeName
            null,
            // attributeNamespace
            false,
            // sanitizeURL
            false
          );
        });
        [
          "capture",
          "download"
          // NOTE: if you add a camelCased prop to this list,
          // you'll need to set attributeName to name.toLowerCase()
          // instead in the assignment below.
        ].forEach(function(name) {
          properties[name] = new PropertyInfoRecord(
            name,
            OVERLOADED_BOOLEAN,
            false,
            // mustUseProperty
            name,
            // attributeName
            null,
            // attributeNamespace
            false,
            // sanitizeURL
            false
          );
        });
        [
          "cols",
          "rows",
          "size",
          "span"
          // NOTE: if you add a camelCased prop to this list,
          // you'll need to set attributeName to name.toLowerCase()
          // instead in the assignment below.
        ].forEach(function(name) {
          properties[name] = new PropertyInfoRecord(
            name,
            POSITIVE_NUMERIC,
            false,
            // mustUseProperty
            name,
            // attributeName
            null,
            // attributeNamespace
            false,
            // sanitizeURL
            false
          );
        });
        ["rowSpan", "start"].forEach(function(name) {
          properties[name] = new PropertyInfoRecord(
            name,
            NUMERIC,
            false,
            // mustUseProperty
            name.toLowerCase(),
            // attributeName
            null,
            // attributeNamespace
            false,
            // sanitizeURL
            false
          );
        });
        var CAMELIZE = /[\-\:]([a-z])/g;
        var capitalize = function(token) {
          return token[1].toUpperCase();
        };
        [
          "accent-height",
          "alignment-baseline",
          "arabic-form",
          "baseline-shift",
          "cap-height",
          "clip-path",
          "clip-rule",
          "color-interpolation",
          "color-interpolation-filters",
          "color-profile",
          "color-rendering",
          "dominant-baseline",
          "enable-background",
          "fill-opacity",
          "fill-rule",
          "flood-color",
          "flood-opacity",
          "font-family",
          "font-size",
          "font-size-adjust",
          "font-stretch",
          "font-style",
          "font-variant",
          "font-weight",
          "glyph-name",
          "glyph-orientation-horizontal",
          "glyph-orientation-vertical",
          "horiz-adv-x",
          "horiz-origin-x",
          "image-rendering",
          "letter-spacing",
          "lighting-color",
          "marker-end",
          "marker-mid",
          "marker-start",
          "overline-position",
          "overline-thickness",
          "paint-order",
          "panose-1",
          "pointer-events",
          "rendering-intent",
          "shape-rendering",
          "stop-color",
          "stop-opacity",
          "strikethrough-position",
          "strikethrough-thickness",
          "stroke-dasharray",
          "stroke-dashoffset",
          "stroke-linecap",
          "stroke-linejoin",
          "stroke-miterlimit",
          "stroke-opacity",
          "stroke-width",
          "text-anchor",
          "text-decoration",
          "text-rendering",
          "underline-position",
          "underline-thickness",
          "unicode-bidi",
          "unicode-range",
          "units-per-em",
          "v-alphabetic",
          "v-hanging",
          "v-ideographic",
          "v-mathematical",
          "vector-effect",
          "vert-adv-y",
          "vert-origin-x",
          "vert-origin-y",
          "word-spacing",
          "writing-mode",
          "xmlns:xlink",
          "x-height"
          // NOTE: if you add a camelCased prop to this list,
          // you'll need to set attributeName to name.toLowerCase()
          // instead in the assignment below.
        ].forEach(function(attributeName) {
          var name = attributeName.replace(CAMELIZE, capitalize);
          properties[name] = new PropertyInfoRecord(
            name,
            STRING,
            false,
            // mustUseProperty
            attributeName,
            null,
            // attributeNamespace
            false,
            // sanitizeURL
            false
          );
        });
        [
          "xlink:actuate",
          "xlink:arcrole",
          "xlink:role",
          "xlink:show",
          "xlink:title",
          "xlink:type"
          // NOTE: if you add a camelCased prop to this list,
          // you'll need to set attributeName to name.toLowerCase()
          // instead in the assignment below.
        ].forEach(function(attributeName) {
          var name = attributeName.replace(CAMELIZE, capitalize);
          properties[name] = new PropertyInfoRecord(
            name,
            STRING,
            false,
            // mustUseProperty
            attributeName,
            "http://www.w3.org/1999/xlink",
            false,
            // sanitizeURL
            false
          );
        });
        [
          "xml:base",
          "xml:lang",
          "xml:space"
          // NOTE: if you add a camelCased prop to this list,
          // you'll need to set attributeName to name.toLowerCase()
          // instead in the assignment below.
        ].forEach(function(attributeName) {
          var name = attributeName.replace(CAMELIZE, capitalize);
          properties[name] = new PropertyInfoRecord(
            name,
            STRING,
            false,
            // mustUseProperty
            attributeName,
            "http://www.w3.org/XML/1998/namespace",
            false,
            // sanitizeURL
            false
          );
        });
        ["tabIndex", "crossOrigin"].forEach(function(attributeName) {
          properties[attributeName] = new PropertyInfoRecord(
            attributeName,
            STRING,
            false,
            // mustUseProperty
            attributeName.toLowerCase(),
            // attributeName
            null,
            // attributeNamespace
            false,
            // sanitizeURL
            false
          );
        });
        var xlinkHref = "xlinkHref";
        properties[xlinkHref] = new PropertyInfoRecord(
          "xlinkHref",
          STRING,
          false,
          // mustUseProperty
          "xlink:href",
          "http://www.w3.org/1999/xlink",
          true,
          // sanitizeURL
          false
        );
        ["src", "href", "action", "formAction"].forEach(function(attributeName) {
          properties[attributeName] = new PropertyInfoRecord(
            attributeName,
            STRING,
            false,
            // mustUseProperty
            attributeName.toLowerCase(),
            // attributeName
            null,
            // attributeNamespace
            true,
            // sanitizeURL
            true
          );
        });
        var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;
        var didWarn = false;
        function sanitizeURL(url) {
          {
            if (!didWarn && isJavaScriptProtocol.test(url)) {
              didWarn = true;
              error("A future version of React will block javascript: URLs as a security precaution. Use event handlers instead if you can. If you need to generate unsafe HTML try using dangerouslySetInnerHTML instead. React was passed %s.", JSON.stringify(url));
            }
          }
        }
        function getValueForProperty(node, name, expected, propertyInfo) {
          {
            if (propertyInfo.mustUseProperty) {
              var propertyName = propertyInfo.propertyName;
              return node[propertyName];
            } else {
              {
                checkAttributeStringCoercion(expected, name);
              }
              if (propertyInfo.sanitizeURL) {
                sanitizeURL("" + expected);
              }
              var attributeName = propertyInfo.attributeName;
              var stringValue = null;
              if (propertyInfo.type === OVERLOADED_BOOLEAN) {
                if (node.hasAttribute(attributeName)) {
                  var value = node.getAttribute(attributeName);
                  if (value === "") {
                    return true;
                  }
                  if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                    return value;
                  }
                  if (value === "" + expected) {
                    return expected;
                  }
                  return value;
                }
              } else if (node.hasAttribute(attributeName)) {
                if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                  return node.getAttribute(attributeName);
                }
                if (propertyInfo.type === BOOLEAN) {
                  return expected;
                }
                stringValue = node.getAttribute(attributeName);
              }
              if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                return stringValue === null ? expected : stringValue;
              } else if (stringValue === "" + expected) {
                return expected;
              } else {
                return stringValue;
              }
            }
          }
        }
        function getValueForAttribute(node, name, expected, isCustomComponentTag) {
          {
            if (!isAttributeNameSafe(name)) {
              return;
            }
            if (!node.hasAttribute(name)) {
              return expected === void 0 ? void 0 : null;
            }
            var value = node.getAttribute(name);
            {
              checkAttributeStringCoercion(expected, name);
            }
            if (value === "" + expected) {
              return expected;
            }
            return value;
          }
        }
        function setValueForProperty(node, name, value, isCustomComponentTag) {
          var propertyInfo = getPropertyInfo(name);
          if (shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag)) {
            return;
          }
          if (shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag)) {
            value = null;
          }
          if (isCustomComponentTag || propertyInfo === null) {
            if (isAttributeNameSafe(name)) {
              var _attributeName = name;
              if (value === null) {
                node.removeAttribute(_attributeName);
              } else {
                {
                  checkAttributeStringCoercion(value, name);
                }
                node.setAttribute(_attributeName, "" + value);
              }
            }
            return;
          }
          var mustUseProperty = propertyInfo.mustUseProperty;
          if (mustUseProperty) {
            var propertyName = propertyInfo.propertyName;
            if (value === null) {
              var type = propertyInfo.type;
              node[propertyName] = type === BOOLEAN ? false : "";
            } else {
              node[propertyName] = value;
            }
            return;
          }
          var attributeName = propertyInfo.attributeName, attributeNamespace = propertyInfo.attributeNamespace;
          if (value === null) {
            node.removeAttribute(attributeName);
          } else {
            var _type = propertyInfo.type;
            var attributeValue;
            if (_type === BOOLEAN || _type === OVERLOADED_BOOLEAN && value === true) {
              attributeValue = "";
            } else {
              {
                {
                  checkAttributeStringCoercion(value, attributeName);
                }
                attributeValue = "" + value;
              }
              if (propertyInfo.sanitizeURL) {
                sanitizeURL(attributeValue.toString());
              }
            }
            if (attributeNamespace) {
              node.setAttributeNS(attributeNamespace, attributeName, attributeValue);
            } else {
              node.setAttribute(attributeName, attributeValue);
            }
          }
        }
        var REACT_ELEMENT_TYPE = Symbol.for("react.element");
        var REACT_PORTAL_TYPE = Symbol.for("react.portal");
        var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
        var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
        var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
        var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
        var REACT_CONTEXT_TYPE = Symbol.for("react.context");
        var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
        var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
        var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
        var REACT_MEMO_TYPE = Symbol.for("react.memo");
        var REACT_LAZY_TYPE = Symbol.for("react.lazy");
        var REACT_SCOPE_TYPE = Symbol.for("react.scope");
        var REACT_DEBUG_TRACING_MODE_TYPE = Symbol.for("react.debug_trace_mode");
        var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
        var REACT_LEGACY_HIDDEN_TYPE = Symbol.for("react.legacy_hidden");
        var REACT_CACHE_TYPE = Symbol.for("react.cache");
        var REACT_TRACING_MARKER_TYPE = Symbol.for("react.tracing_marker");
        var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
        var FAUX_ITERATOR_SYMBOL = "@@iterator";
        function getIteratorFn(maybeIterable) {
          if (maybeIterable === null || typeof maybeIterable !== "object") {
            return null;
          }
          var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
          if (typeof maybeIterator === "function") {
            return maybeIterator;
          }
          return null;
        }
        var assign = Object.assign;
        var disabledDepth = 0;
        var prevLog;
        var prevInfo;
        var prevWarn;
        var prevError;
        var prevGroup;
        var prevGroupCollapsed;
        var prevGroupEnd;
        function disabledLog() {
        }
        disabledLog.Cp = true;
        function disableLogs() {
          {
            if (disabledDepth === 0) {
              prevLog = console.log;
              prevInfo = console.info;
              prevWarn = console.warn;
              prevError = console.error;
              prevGroup = console.group;
              prevGroupCollapsed = console.groupCollapsed;
              prevGroupEnd = console.groupEnd;
              var props = {
                configurable: true,
                enumerable: true,
                value: disabledLog,
                writable: true
              };
              Object.defineProperties(console, {
                info: props,
                log: props,
                warn: props,
                error: props,
                group: props,
                groupCollapsed: props,
                groupEnd: props
              });
            }
            disabledDepth++;
          }
        }
        function reenableLogs() {
          {
            disabledDepth--;
            if (disabledDepth === 0) {
              var props = {
                configurable: true,
                enumerable: true,
                writable: true
              };
              Object.defineProperties(console, {
                log: assign({}, props, {
                  value: prevLog
                }),
                info: assign({}, props, {
                  value: prevInfo
                }),
                warn: assign({}, props, {
                  value: prevWarn
                }),
                error: assign({}, props, {
                  value: prevError
                }),
                group: assign({}, props, {
                  value: prevGroup
                }),
                groupCollapsed: assign({}, props, {
                  value: prevGroupCollapsed
                }),
                groupEnd: assign({}, props, {
                  value: prevGroupEnd
                })
              });
            }
            if (disabledDepth < 0) {
              error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
            }
          }
        }
        var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
        var prefix;
        function describeBuiltInComponentFrame(name, source, ownerFn) {
          {
            if (prefix === void 0) {
              try {
                throw Error();
              } catch (x) {
                var match = x.stack.trim().match(/\n( *(at )?)/);
                prefix = match && match[1] || "";
              }
            }
            return "\n" + prefix + name;
          }
        }
        var reentry = false;
        var componentFrameCache;
        {
          var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
          componentFrameCache = new PossiblyWeakMap();
        }
        function describeNativeComponentFrame(fn, construct) {
          if (!fn || reentry) {
            return "";
          }
          {
            var frame = componentFrameCache.get(fn);
            if (frame !== void 0) {
              return frame;
            }
          }
          var control;
          reentry = true;
          var previousPrepareStackTrace = Error.prepareStackTrace;
          Error.prepareStackTrace = void 0;
          var previousDispatcher;
          {
            previousDispatcher = ReactCurrentDispatcher.current;
            ReactCurrentDispatcher.current = null;
            disableLogs();
          }
          try {
            if (construct) {
              var Fake = function() {
                throw Error();
              };
              Object.defineProperty(Fake.prototype, "props", {
                set: function() {
                  throw Error();
                }
              });
              if (typeof Reflect === "object" && Reflect.construct) {
                try {
                  Reflect.construct(Fake, []);
                } catch (x) {
                  control = x;
                }
                Reflect.construct(fn, [], Fake);
              } else {
                try {
                  Fake.call();
                } catch (x) {
                  control = x;
                }
                fn.call(Fake.prototype);
              }
            } else {
              try {
                throw Error();
              } catch (x) {
                control = x;
              }
              fn();
            }
          } catch (sample) {
            if (sample && control && typeof sample.stack === "string") {
              var sampleLines = sample.stack.split("\n");
              var controlLines = control.stack.split("\n");
              var s = sampleLines.length - 1;
              var c = controlLines.length - 1;
              while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
                c--;
              }
              for (; s >= 1 && c >= 0; s--, c--) {
                if (sampleLines[s] !== controlLines[c]) {
                  if (s !== 1 || c !== 1) {
                    do {
                      s--;
                      c--;
                      if (c < 0 || sampleLines[s] !== controlLines[c]) {
                        var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                        if (fn.displayName && _frame.includes("<anonymous>")) {
                          _frame = _frame.replace("<anonymous>", fn.displayName);
                        }
                        {
                          if (typeof fn === "function") {
                            componentFrameCache.set(fn, _frame);
                          }
                        }
                        return _frame;
                      }
                    } while (s >= 1 && c >= 0);
                  }
                  break;
                }
              }
            }
          } finally {
            reentry = false;
            {
              ReactCurrentDispatcher.current = previousDispatcher;
              reenableLogs();
            }
            Error.prepareStackTrace = previousPrepareStackTrace;
          }
          var name = fn ? fn.displayName || fn.name : "";
          var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
          {
            if (typeof fn === "function") {
              componentFrameCache.set(fn, syntheticFrame);
            }
          }
          return syntheticFrame;
        }
        function describeClassComponentFrame(ctor, source, ownerFn) {
          {
            return describeNativeComponentFrame(ctor, true);
          }
        }
        function describeFunctionComponentFrame(fn, source, ownerFn) {
          {
            return describeNativeComponentFrame(fn, false);
          }
        }
        function shouldConstruct(Component2) {
          var prototype = Component2.prototype;
          return !!(prototype && prototype.isReactComponent);
        }
        function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
          if (type == null) {
            return "";
          }
          if (typeof type === "function") {
            {
              return describeNativeComponentFrame(type, shouldConstruct(type));
            }
          }
          if (typeof type === "string") {
            return describeBuiltInComponentFrame(type);
          }
          switch (type) {
            case REACT_SUSPENSE_TYPE:
              return describeBuiltInComponentFrame("Suspense");
            case REACT_SUSPENSE_LIST_TYPE:
              return describeBuiltInComponentFrame("SuspenseList");
          }
          if (typeof type === "object") {
            switch (type.$$typeof) {
              case REACT_FORWARD_REF_TYPE:
                return describeFunctionComponentFrame(type.render);
              case REACT_MEMO_TYPE:
                return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
              case REACT_LAZY_TYPE: {
                var lazyComponent = type;
                var payload = lazyComponent.Ja;
                var init = lazyComponent.G;
                try {
                  return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                } catch (x) {
                }
              }
            }
          }
          return "";
        }
        function describeFiber(fiber) {
          var owner = fiber.qa ? fiber.qa.type : null;
          var source = fiber.$a;
          switch (fiber.tag) {
            case HostComponent:
              return describeBuiltInComponentFrame(fiber.type);
            case LazyComponent:
              return describeBuiltInComponentFrame("Lazy");
            case SuspenseComponent:
              return describeBuiltInComponentFrame("Suspense");
            case SuspenseListComponent:
              return describeBuiltInComponentFrame("SuspenseList");
            case FunctionComponent:
            case IndeterminateComponent:
            case SimpleMemoComponent:
              return describeFunctionComponentFrame(fiber.type);
            case ForwardRef:
              return describeFunctionComponentFrame(fiber.type.render);
            case ClassComponent:
              return describeClassComponentFrame(fiber.type);
            default:
              return "";
          }
        }
        function getStackByFiberInDevAndProd(workInProgress2) {
          try {
            var info = "";
            var node = workInProgress2;
            do {
              info += describeFiber(node);
              node = node.return;
            } while (node);
            return info;
          } catch (x) {
            return "\nError generating stack: " + x.message + "\n" + x.stack;
          }
        }
        function getWrappedName(outerType, innerType, wrapperName) {
          var displayName = outerType.displayName;
          if (displayName) {
            return displayName;
          }
          var functionName = innerType.displayName || innerType.name || "";
          return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
        }
        function getContextName(type) {
          return type.displayName || "Context";
        }
        function getComponentNameFromType(type) {
          if (type == null) {
            return null;
          }
          {
            if (typeof type.tag === "number") {
              error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
            }
          }
          if (typeof type === "function") {
            return type.displayName || type.name || null;
          }
          if (typeof type === "string") {
            return type;
          }
          switch (type) {
            case REACT_FRAGMENT_TYPE:
              return "Fragment";
            case REACT_PORTAL_TYPE:
              return "Portal";
            case REACT_PROFILER_TYPE:
              return "Profiler";
            case REACT_STRICT_MODE_TYPE:
              return "StrictMode";
            case REACT_SUSPENSE_TYPE:
              return "Suspense";
            case REACT_SUSPENSE_LIST_TYPE:
              return "SuspenseList";
          }
          if (typeof type === "object") {
            switch (type.$$typeof) {
              case REACT_CONTEXT_TYPE:
                var context = type;
                return getContextName(context) + ".Consumer";
              case REACT_PROVIDER_TYPE:
                var provider = type;
                return getContextName(provider.Y) + ".Provider";
              case REACT_FORWARD_REF_TYPE:
                return getWrappedName(type, type.render, "ForwardRef");
              case REACT_MEMO_TYPE:
                var outerName = type.displayName || null;
                if (outerName !== null) {
                  return outerName;
                }
                return getComponentNameFromType(type.type) || "Memo";
              case REACT_LAZY_TYPE: {
                var lazyComponent = type;
                var payload = lazyComponent.Ja;
                var init = lazyComponent.G;
                try {
                  return getComponentNameFromType(init(payload));
                } catch (x) {
                  return null;
                }
              }
            }
          }
          return null;
        }
        function getWrappedName$1(outerType, innerType, wrapperName) {
          var functionName = innerType.displayName || innerType.name || "";
          return outerType.displayName || (functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName);
        }
        function getContextName$1(type) {
          return type.displayName || "Context";
        }
        function getComponentNameFromFiber(fiber) {
          var tag = fiber.tag, type = fiber.type;
          switch (tag) {
            case CacheComponent:
              return "Cache";
            case ContextConsumer:
              var context = type;
              return getContextName$1(context) + ".Consumer";
            case ContextProvider:
              var provider = type;
              return getContextName$1(provider.Y) + ".Provider";
            case DehydratedFragment:
              return "DehydratedFragment";
            case ForwardRef:
              return getWrappedName$1(type, type.render, "ForwardRef");
            case Fragment:
              return "Fragment";
            case HostComponent:
              return type;
            case HostPortal:
              return "Portal";
            case HostRoot:
              return "Root";
            case HostText:
              return "Text";
            case LazyComponent:
              return getComponentNameFromType(type);
            case Mode:
              if (type === REACT_STRICT_MODE_TYPE) {
                return "StrictMode";
              }
              return "Mode";
            case OffscreenComponent:
              return "Offscreen";
            case Profiler:
              return "Profiler";
            case ScopeComponent:
              return "Scope";
            case SuspenseComponent:
              return "Suspense";
            case SuspenseListComponent:
              return "SuspenseList";
            case TracingMarkerComponent:
              return "TracingMarker";
            case ClassComponent:
            case FunctionComponent:
            case IncompleteClassComponent:
            case IndeterminateComponent:
            case MemoComponent:
            case SimpleMemoComponent:
              if (typeof type === "function") {
                return type.displayName || type.name || null;
              }
              if (typeof type === "string") {
                return type;
              }
              break;
          }
          return null;
        }
        var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
        var current = null;
        var isRendering = false;
        function getCurrentFiberOwnerNameInDevOrNull() {
          {
            if (current === null) {
              return null;
            }
            var owner = current.qa;
            if (owner !== null && typeof owner !== "undefined") {
              return getComponentNameFromFiber(owner);
            }
          }
          return null;
        }
        function getCurrentFiberStackInDev() {
          {
            if (current === null) {
              return "";
            }
            return getStackByFiberInDevAndProd(current);
          }
        }
        function resetCurrentFiber() {
          {
            ReactDebugCurrentFrame.getCurrentStack = null;
            current = null;
            isRendering = false;
          }
        }
        function setCurrentFiber(fiber) {
          {
            ReactDebugCurrentFrame.getCurrentStack = fiber === null ? null : getCurrentFiberStackInDev;
            current = fiber;
            isRendering = false;
          }
        }
        function getCurrentFiber() {
          {
            return current;
          }
        }
        function setIsRendering(rendering) {
          {
            isRendering = rendering;
          }
        }
        function toString(value) {
          return "" + value;
        }
        function getToStringValue(value) {
          switch (typeof value) {
            case "boolean":
            case "number":
            case "string":
            case "undefined":
              return value;
            case "object":
              {
                checkFormFieldValueStringCoercion(value);
              }
              return value;
            default:
              return "";
          }
        }
        var hasReadOnlyValue = {
          button: true,
          checkbox: true,
          image: true,
          hidden: true,
          radio: true,
          reset: true,
          submit: true
        };
        function checkControlledValueProps(tagName, props) {
          {
            if (!(hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || props.value == null)) {
              error("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.");
            }
            if (!(props.onChange || props.readOnly || props.disabled || props.checked == null)) {
              error("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.");
            }
          }
        }
        function isCheckable(elem) {
          var type = elem.type;
          var nodeName = elem.nodeName;
          return nodeName && nodeName.toLowerCase() === "input" && (type === "checkbox" || type === "radio");
        }
        function getTracker(node) {
          return node.Fj;
        }
        function detachTracker(node) {
          node.Fj = null;
        }
        function getValueFromNode(node) {
          var value = "";
          if (!node) {
            return value;
          }
          if (isCheckable(node)) {
            value = node.checked ? "true" : "false";
          } else {
            value = node.value;
          }
          return value;
        }
        function trackValueOnNode(node) {
          var valueField = isCheckable(node) ? "checked" : "value";
          var descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);
          {
            checkFormFieldValueStringCoercion(node[valueField]);
          }
          var currentValue = "" + node[valueField];
          if (node.hasOwnProperty(valueField) || typeof descriptor === "undefined" || typeof descriptor.get !== "function" || typeof descriptor.set !== "function") {
            return;
          }
          var get2 = descriptor.get, set2 = descriptor.set;
          Object.defineProperty(node, valueField, {
            configurable: true,
            get: function() {
              return get2.call(this);
            },
            set: function(value) {
              {
                checkFormFieldValueStringCoercion(value);
              }
              currentValue = "" + value;
              set2.call(this, value);
            }
          });
          Object.defineProperty(node, valueField, {
            enumerable: descriptor.enumerable
          });
          var tracker = {
            getValue: function() {
              return currentValue;
            },
            setValue: function(value) {
              {
                checkFormFieldValueStringCoercion(value);
              }
              currentValue = "" + value;
            },
            stopTracking: function() {
              detachTracker(node);
              delete node[valueField];
            }
          };
          return tracker;
        }
        function track(node) {
          if (getTracker(node)) {
            return;
          }
          node.Fj = trackValueOnNode(node);
        }
        function updateValueIfChanged(node) {
          if (!node) {
            return false;
          }
          var tracker = getTracker(node);
          if (!tracker) {
            return true;
          }
          var lastValue = tracker.getValue();
          var nextValue = getValueFromNode(node);
          if (nextValue !== lastValue) {
            tracker.setValue(nextValue);
            return true;
          }
          return false;
        }
        function getActiveElement(doc) {
          doc = doc || (typeof document !== "undefined" ? document : void 0);
          if (typeof doc === "undefined") {
            return null;
          }
          try {
            return doc.activeElement || doc.body;
          } catch (e) {
            return doc.body;
          }
        }
        var didWarnValueDefaultValue = false;
        var didWarnCheckedDefaultChecked = false;
        var didWarnControlledToUncontrolled = false;
        var didWarnUncontrolledToControlled = false;
        function isControlled(props) {
          var usesChecked = props.type === "checkbox" || props.type === "radio";
          return usesChecked ? props.checked != null : props.value != null;
        }
        function getHostProps(element, props) {
          var node = element;
          var checked = props.checked;
          var hostProps = assign({}, props, {
            defaultChecked: void 0,
            defaultValue: void 0,
            value: void 0,
            checked: checked != null ? checked : node.za.initialChecked
          });
          return hostProps;
        }
        function initWrapperState(element, props) {
          {
            checkControlledValueProps("input", props);
            if (props.checked !== void 0 && props.defaultChecked !== void 0 && !didWarnCheckedDefaultChecked) {
              error("%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
              didWarnCheckedDefaultChecked = true;
            }
            if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue) {
              error("%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
              didWarnValueDefaultValue = true;
            }
          }
          var node = element;
          var defaultValue = props.defaultValue == null ? "" : props.defaultValue;
          node.za = {
            initialChecked: props.checked != null ? props.checked : props.defaultChecked,
            initialValue: getToStringValue(props.value != null ? props.value : defaultValue),
            controlled: isControlled(props)
          };
        }
        function updateChecked(element, props) {
          var node = element;
          var checked = props.checked;
          if (checked != null) {
            setValueForProperty(node, "checked", checked, false);
          }
        }
        function updateWrapper(element, props) {
          var node = element;
          {
            var controlled = isControlled(props);
            if (!node.za.controlled && controlled && !didWarnUncontrolledToControlled) {
              error("A component is changing an uncontrolled input to be controlled. This is likely caused by the value changing from undefined to a defined value, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
              didWarnUncontrolledToControlled = true;
            }
            if (node.za.controlled && !controlled && !didWarnControlledToUncontrolled) {
              error("A component is changing a controlled input to be uncontrolled. This is likely caused by the value changing from a defined to undefined, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
              didWarnControlledToUncontrolled = true;
            }
          }
          updateChecked(element, props);
          var value = getToStringValue(props.value);
          var type = props.type;
          if (value != null) {
            if (type === "number") {
              if (value === 0 && node.value === "" || // We explicitly want to coerce to number here if possible.
              // eslint-disable-next-line
              node.value != value) {
                node.value = toString(value);
              }
            } else if (node.value !== toString(value)) {
              node.value = toString(value);
            }
          } else if (type === "submit" || type === "reset") {
            node.removeAttribute("value");
            return;
          }
          {
            if (props.hasOwnProperty("value")) {
              setDefaultValue(node, props.type, value);
            } else if (props.hasOwnProperty("defaultValue")) {
              setDefaultValue(node, props.type, getToStringValue(props.defaultValue));
            }
          }
          {
            if (props.checked == null && props.defaultChecked != null) {
              node.defaultChecked = !!props.defaultChecked;
            }
          }
        }
        function postMountWrapper(element, props, isHydrating2) {
          var node = element;
          if (props.hasOwnProperty("value") || props.hasOwnProperty("defaultValue")) {
            var type = props.type;
            var isButton = type === "submit" || type === "reset";
            if (isButton && (props.value === void 0 || props.value === null)) {
              return;
            }
            var initialValue = toString(node.za.initialValue);
            if (!isHydrating2) {
              {
                if (initialValue !== node.value) {
                  node.value = initialValue;
                }
              }
            }
            {
              node.defaultValue = initialValue;
            }
          }
          var name = node.name;
          if (name !== "") {
            node.name = "";
          }
          {
            node.defaultChecked = !node.defaultChecked;
            node.defaultChecked = !!node.za.initialChecked;
          }
          if (name !== "") {
            node.name = name;
          }
        }
        function restoreControlledState(element, props) {
          var node = element;
          updateWrapper(node, props);
          updateNamedCousins(node, props);
        }
        function updateNamedCousins(rootNode, props) {
          var name = props.name;
          if (props.type === "radio" && name != null) {
            var queryRoot = rootNode;
            while (queryRoot.parentNode) {
              queryRoot = queryRoot.parentNode;
            }
            {
              checkAttributeStringCoercion(name, "name");
            }
            var group = queryRoot.querySelectorAll("input[name=" + JSON.stringify("" + name) + '][type="radio"]');
            for (var i = 0; i < group.length; i++) {
              var otherNode = group[i];
              if (otherNode === rootNode || otherNode.form !== rootNode.form) {
                continue;
              }
              var otherProps = getFiberCurrentPropsFromNode(otherNode);
              if (!otherProps) {
                throw new Error("ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.");
              }
              updateValueIfChanged(otherNode);
              updateWrapper(otherNode, otherProps);
            }
          }
        }
        function setDefaultValue(node, type, value) {
          if (
            // Focused number inputs synchronize on blur. See ChangeEventPlugin.js
            type !== "number" || getActiveElement(node.ownerDocument) !== node
          ) {
            if (value == null) {
              node.defaultValue = toString(node.za.initialValue);
            } else if (node.defaultValue !== toString(value)) {
              node.defaultValue = toString(value);
            }
          }
        }
        var didWarnSelectedSetOnOption = false;
        var didWarnInvalidChild = false;
        var didWarnInvalidInnerHTML = false;
        function validateProps(element, props) {
          {
            if (props.value == null) {
              if (typeof props.children === "object" && props.children !== null) {
                React3.Children.forEach(props.children, function(child) {
                  if (child == null) {
                    return;
                  }
                  if (typeof child === "string" || typeof child === "number") {
                    return;
                  }
                  if (!didWarnInvalidChild) {
                    didWarnInvalidChild = true;
                    error("Cannot infer the option value of complex children. Pass a `value` prop or use a plain string as children to <option>.");
                  }
                });
              } else if (props.dangerouslySetInnerHTML != null) {
                if (!didWarnInvalidInnerHTML) {
                  didWarnInvalidInnerHTML = true;
                  error("Pass a `value` prop if you set dangerouslyInnerHTML so React knows which value should be selected.");
                }
              }
            }
            if (props.selected != null && !didWarnSelectedSetOnOption) {
              error("Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>.");
              didWarnSelectedSetOnOption = true;
            }
          }
        }
        function postMountWrapper$1(element, props) {
          if (props.value != null) {
            element.setAttribute("value", toString(getToStringValue(props.value)));
          }
        }
        var isArrayImpl = Array.isArray;
        function isArray(a) {
          return isArrayImpl(a);
        }
        var didWarnValueDefaultValue$1;
        {
          didWarnValueDefaultValue$1 = false;
        }
        function getDeclarationErrorAddendum() {
          var ownerName = getCurrentFiberOwnerNameInDevOrNull();
          if (ownerName) {
            return "\n\nCheck the render method of `" + ownerName + "`.";
          }
          return "";
        }
        var valuePropNames = ["value", "defaultValue"];
        function checkSelectPropTypes(props) {
          {
            checkControlledValueProps("select", props);
            for (var i = 0; i < valuePropNames.length; i++) {
              var propName = valuePropNames[i];
              if (props[propName] == null) {
                continue;
              }
              var propNameIsArray = isArray(props[propName]);
              if (props.multiple && !propNameIsArray) {
                error("The `%s` prop supplied to <select> must be an array if `multiple` is true.%s", propName, getDeclarationErrorAddendum());
              } else if (!props.multiple && propNameIsArray) {
                error("The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.%s", propName, getDeclarationErrorAddendum());
              }
            }
          }
        }
        function updateOptions(node, multiple, propValue, setDefaultSelected) {
          var options2 = node.options;
          if (multiple) {
            var selectedValues = propValue;
            var selectedValue = {};
            for (var i = 0; i < selectedValues.length; i++) {
              selectedValue["$" + selectedValues[i]] = true;
            }
            for (var _i = 0; _i < options2.length; _i++) {
              var selected = selectedValue.hasOwnProperty("$" + options2[_i].value);
              if (options2[_i].selected !== selected) {
                options2[_i].selected = selected;
              }
              if (selected && setDefaultSelected) {
                options2[_i].defaultSelected = true;
              }
            }
          } else {
            var _selectedValue = toString(getToStringValue(propValue));
            var defaultSelected = null;
            for (var _i2 = 0; _i2 < options2.length; _i2++) {
              if (options2[_i2].value === _selectedValue) {
                options2[_i2].selected = true;
                if (setDefaultSelected) {
                  options2[_i2].defaultSelected = true;
                }
                return;
              }
              if (defaultSelected === null && !options2[_i2].disabled) {
                defaultSelected = options2[_i2];
              }
            }
            if (defaultSelected !== null) {
              defaultSelected.selected = true;
            }
          }
        }
        function getHostProps$1(element, props) {
          return assign({}, props, {
            value: void 0
          });
        }
        function initWrapperState$1(element, props) {
          var node = element;
          {
            checkSelectPropTypes(props);
          }
          node.za = {
            wasMultiple: !!props.multiple
          };
          {
            if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue$1) {
              error("Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://reactjs.org/link/controlled-components");
              didWarnValueDefaultValue$1 = true;
            }
          }
        }
        function postMountWrapper$2(element, props) {
          var node = element;
          node.multiple = !!props.multiple;
          var value = props.value;
          if (value != null) {
            updateOptions(node, !!props.multiple, value, false);
          } else if (props.defaultValue != null) {
            updateOptions(node, !!props.multiple, props.defaultValue, true);
          }
        }
        function postUpdateWrapper(element, props) {
          var node = element;
          var wasMultiple = node.za.wasMultiple;
          node.za.wasMultiple = !!props.multiple;
          var value = props.value;
          if (value != null) {
            updateOptions(node, !!props.multiple, value, false);
          } else if (wasMultiple !== !!props.multiple) {
            if (props.defaultValue != null) {
              updateOptions(node, !!props.multiple, props.defaultValue, true);
            } else {
              updateOptions(node, !!props.multiple, props.multiple ? [] : "", false);
            }
          }
        }
        function restoreControlledState$1(element, props) {
          var node = element;
          var value = props.value;
          if (value != null) {
            updateOptions(node, !!props.multiple, value, false);
          }
        }
        var didWarnValDefaultVal = false;
        function getHostProps$2(element, props) {
          var node = element;
          if (props.dangerouslySetInnerHTML != null) {
            throw new Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");
          }
          var hostProps = assign({}, props, {
            value: void 0,
            defaultValue: void 0,
            children: toString(node.za.initialValue)
          });
          return hostProps;
        }
        function initWrapperState$2(element, props) {
          var node = element;
          {
            checkControlledValueProps("textarea", props);
            if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValDefaultVal) {
              error("%s contains a textarea with both value and defaultValue props. Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component");
              didWarnValDefaultVal = true;
            }
          }
          var initialValue = props.value;
          if (initialValue == null) {
            var children = props.children, defaultValue = props.defaultValue;
            if (children != null) {
              {
                error("Use the `defaultValue` or `value` props instead of setting children on <textarea>.");
              }
              {
                if (defaultValue != null) {
                  throw new Error("If you supply `defaultValue` on a <textarea>, do not pass children.");
                }
                if (isArray(children)) {
                  if (children.length > 1) {
                    throw new Error("<textarea> can only have at most one child.");
                  }
                  children = children[0];
                }
                defaultValue = children;
              }
            }
            if (defaultValue == null) {
              defaultValue = "";
            }
            initialValue = defaultValue;
          }
          node.za = {
            initialValue: getToStringValue(initialValue)
          };
        }
        function updateWrapper$1(element, props) {
          var node = element;
          var value = getToStringValue(props.value);
          var defaultValue = getToStringValue(props.defaultValue);
          if (value != null) {
            var newValue = toString(value);
            if (newValue !== node.value) {
              node.value = newValue;
            }
            if (props.defaultValue == null && node.defaultValue !== newValue) {
              node.defaultValue = newValue;
            }
          }
          if (defaultValue != null) {
            node.defaultValue = toString(defaultValue);
          }
        }
        function postMountWrapper$3(element, props) {
          var node = element;
          var textContent = node.textContent;
          if (textContent === node.za.initialValue) {
            if (textContent !== "" && textContent !== null) {
              node.value = textContent;
            }
          }
        }
        function restoreControlledState$2(element, props) {
          updateWrapper$1(element, props);
        }
        var HTML_NAMESPACE = "http://www.w3.org/1999/xhtml";
        var MATH_NAMESPACE = "http://www.w3.org/1998/Math/MathML";
        var SVG_NAMESPACE = "http://www.w3.org/2000/svg";
        function getIntrinsicNamespace(type) {
          switch (type) {
            case "svg":
              return SVG_NAMESPACE;
            case "math":
              return MATH_NAMESPACE;
            default:
              return HTML_NAMESPACE;
          }
        }
        function getChildNamespace(parentNamespace, type) {
          if (parentNamespace == null || parentNamespace === HTML_NAMESPACE) {
            return getIntrinsicNamespace(type);
          }
          if (parentNamespace === SVG_NAMESPACE && type === "foreignObject") {
            return HTML_NAMESPACE;
          }
          return parentNamespace;
        }
        var createMicrosoftUnsafeLocalFunction = function(func) {
          if (typeof MSApp !== "undefined" && MSApp.execUnsafeLocalFunction) {
            return function(arg0, arg1, arg2, arg3) {
              MSApp.execUnsafeLocalFunction(function() {
                return func(arg0, arg1, arg2, arg3);
              });
            };
          } else {
            return func;
          }
        };
        var reusableSVGContainer;
        var setInnerHTML = createMicrosoftUnsafeLocalFunction(function(node, html) {
          if (node.namespaceURI === SVG_NAMESPACE) {
            if (!("innerHTML" in node)) {
              reusableSVGContainer = reusableSVGContainer || document.createElement("div");
              reusableSVGContainer.innerHTML = "<svg>" + html.valueOf().toString() + "</svg>";
              var svgNode = reusableSVGContainer.firstChild;
              while (node.firstChild) {
                node.removeChild(node.firstChild);
              }
              while (svgNode.firstChild) {
                node.appendChild(svgNode.firstChild);
              }
              return;
            }
          }
          node.innerHTML = html;
        });
        var ELEMENT_NODE = 1;
        var TEXT_NODE = 3;
        var COMMENT_NODE = 8;
        var DOCUMENT_NODE = 9;
        var DOCUMENT_FRAGMENT_NODE = 11;
        var setTextContent = function(node, text) {
          if (text) {
            var firstChild = node.firstChild;
            if (firstChild && firstChild === node.lastChild && firstChild.nodeType === TEXT_NODE) {
              firstChild.nodeValue = text;
              return;
            }
          }
          node.textContent = text;
        };
        var shorthandToLonghand = {
          animation: ["animationDelay", "animationDirection", "animationDuration", "animationFillMode", "animationIterationCount", "animationName", "animationPlayState", "animationTimingFunction"],
          background: ["backgroundAttachment", "backgroundClip", "backgroundColor", "backgroundImage", "backgroundOrigin", "backgroundPositionX", "backgroundPositionY", "backgroundRepeat", "backgroundSize"],
          backgroundPosition: ["backgroundPositionX", "backgroundPositionY"],
          border: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth", "borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth", "borderLeftColor", "borderLeftStyle", "borderLeftWidth", "borderRightColor", "borderRightStyle", "borderRightWidth", "borderTopColor", "borderTopStyle", "borderTopWidth"],
          borderBlockEnd: ["borderBlockEndColor", "borderBlockEndStyle", "borderBlockEndWidth"],
          borderBlockStart: ["borderBlockStartColor", "borderBlockStartStyle", "borderBlockStartWidth"],
          borderBottom: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth"],
          borderColor: ["borderBottomColor", "borderLeftColor", "borderRightColor", "borderTopColor"],
          borderImage: ["borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth"],
          borderInlineEnd: ["borderInlineEndColor", "borderInlineEndStyle", "borderInlineEndWidth"],
          borderInlineStart: ["borderInlineStartColor", "borderInlineStartStyle", "borderInlineStartWidth"],
          borderLeft: ["borderLeftColor", "borderLeftStyle", "borderLeftWidth"],
          borderRadius: ["borderBottomLeftRadius", "borderBottomRightRadius", "borderTopLeftRadius", "borderTopRightRadius"],
          borderRight: ["borderRightColor", "borderRightStyle", "borderRightWidth"],
          borderStyle: ["borderBottomStyle", "borderLeftStyle", "borderRightStyle", "borderTopStyle"],
          borderTop: ["borderTopColor", "borderTopStyle", "borderTopWidth"],
          borderWidth: ["borderBottomWidth", "borderLeftWidth", "borderRightWidth", "borderTopWidth"],
          columnRule: ["columnRuleColor", "columnRuleStyle", "columnRuleWidth"],
          columns: ["columnCount", "columnWidth"],
          flex: ["flexBasis", "flexGrow", "flexShrink"],
          flexFlow: ["flexDirection", "flexWrap"],
          font: ["fontFamily", "fontFeatureSettings", "fontKerning", "fontLanguageOverride", "fontSize", "fontSizeAdjust", "fontStretch", "fontStyle", "fontVariant", "fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition", "fontWeight", "lineHeight"],
          fontVariant: ["fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition"],
          gap: ["columnGap", "rowGap"],
          grid: ["gridAutoColumns", "gridAutoFlow", "gridAutoRows", "gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
          gridArea: ["gridColumnEnd", "gridColumnStart", "gridRowEnd", "gridRowStart"],
          gridColumn: ["gridColumnEnd", "gridColumnStart"],
          gridColumnGap: ["columnGap"],
          gridGap: ["columnGap", "rowGap"],
          gridRow: ["gridRowEnd", "gridRowStart"],
          gridRowGap: ["rowGap"],
          gridTemplate: ["gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
          listStyle: ["listStyleImage", "listStylePosition", "listStyleType"],
          margin: ["marginBottom", "marginLeft", "marginRight", "marginTop"],
          marker: ["markerEnd", "markerMid", "markerStart"],
          mask: ["maskClip", "maskComposite", "maskImage", "maskMode", "maskOrigin", "maskPositionX", "maskPositionY", "maskRepeat", "maskSize"],
          maskPosition: ["maskPositionX", "maskPositionY"],
          outline: ["outlineColor", "outlineStyle", "outlineWidth"],
          overflow: ["overflowX", "overflowY"],
          padding: ["paddingBottom", "paddingLeft", "paddingRight", "paddingTop"],
          placeContent: ["alignContent", "justifyContent"],
          placeItems: ["alignItems", "justifyItems"],
          placeSelf: ["alignSelf", "justifySelf"],
          textDecoration: ["textDecorationColor", "textDecorationLine", "textDecorationStyle"],
          textEmphasis: ["textEmphasisColor", "textEmphasisStyle"],
          transition: ["transitionDelay", "transitionDuration", "transitionProperty", "transitionTimingFunction"],
          wordWrap: ["overflowWrap"]
        };
        var isUnitlessNumber = {
          animationIterationCount: true,
          aspectRatio: true,
          borderImageOutset: true,
          borderImageSlice: true,
          borderImageWidth: true,
          boxFlex: true,
          boxFlexGroup: true,
          boxOrdinalGroup: true,
          columnCount: true,
          columns: true,
          flex: true,
          flexGrow: true,
          flexPositive: true,
          flexShrink: true,
          flexNegative: true,
          flexOrder: true,
          gridArea: true,
          gridRow: true,
          gridRowEnd: true,
          gridRowSpan: true,
          gridRowStart: true,
          gridColumn: true,
          gridColumnEnd: true,
          gridColumnSpan: true,
          gridColumnStart: true,
          fontWeight: true,
          lineClamp: true,
          lineHeight: true,
          opacity: true,
          order: true,
          orphans: true,
          tabSize: true,
          widows: true,
          zIndex: true,
          zoom: true,
          // SVG-related properties
          fillOpacity: true,
          floodOpacity: true,
          stopOpacity: true,
          strokeDasharray: true,
          strokeDashoffset: true,
          strokeMiterlimit: true,
          strokeOpacity: true,
          strokeWidth: true
        };
        function prefixKey(prefix2, key) {
          return prefix2 + key.charAt(0).toUpperCase() + key.substring(1);
        }
        var prefixes = ["Webkit", "ms", "Moz", "O"];
        Object.keys(isUnitlessNumber).forEach(function(prop) {
          prefixes.forEach(function(prefix2) {
            isUnitlessNumber[prefixKey(prefix2, prop)] = isUnitlessNumber[prop];
          });
        });
        function dangerousStyleValue(name, value, isCustomProperty) {
          var isEmpty = value == null || typeof value === "boolean" || value === "";
          if (isEmpty) {
            return "";
          }
          if (!isCustomProperty && typeof value === "number" && value !== 0 && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])) {
            return value + "px";
          }
          {
            checkCSSPropertyStringCoercion(value, name);
          }
          return ("" + value).trim();
        }
        var uppercasePattern = /([A-Z])/g;
        var msPattern = /^ms-/;
        function hyphenateStyleName(name) {
          return name.replace(uppercasePattern, "-$1").toLowerCase().replace(msPattern, "-ms-");
        }
        var warnValidStyle = function() {
        };
        {
          var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
          var msPattern$1 = /^-ms-/;
          var hyphenPattern = /-(.)/g;
          var badStyleValueWithSemicolonPattern = /;\s*$/;
          var warnedStyleNames = {};
          var warnedStyleValues = {};
          var warnedForNaNValue = false;
          var warnedForInfinityValue = false;
          var camelize = function(string) {
            return string.replace(hyphenPattern, function(_, character) {
              return character.toUpperCase();
            });
          };
          var warnHyphenatedStyleName = function(name) {
            if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
              return;
            }
            warnedStyleNames[name] = true;
            error(
              "Unsupported style property %s. Did you mean %s?",
              name,
              // As Andi Smith suggests
              // (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
              // is converted to lowercase `ms`.
              camelize(name.replace(msPattern$1, "ms-"))
            );
          };
          var warnBadVendoredStyleName = function(name) {
            if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
              return;
            }
            warnedStyleNames[name] = true;
            error("Unsupported vendor-prefixed style property %s. Did you mean %s?", name, name.charAt(0).toUpperCase() + name.slice(1));
          };
          var warnStyleValueWithSemicolon = function(name, value) {
            if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
              return;
            }
            warnedStyleValues[value] = true;
            error(`Style property values shouldn't contain a semicolon. Try "%s: %s" instead.`, name, value.replace(badStyleValueWithSemicolonPattern, ""));
          };
          var warnStyleValueIsNaN = function(name, value) {
            if (warnedForNaNValue) {
              return;
            }
            warnedForNaNValue = true;
            error("`NaN` is an invalid value for the `%s` css style property.", name);
          };
          var warnStyleValueIsInfinity = function(name, value) {
            if (warnedForInfinityValue) {
              return;
            }
            warnedForInfinityValue = true;
            error("`Infinity` is an invalid value for the `%s` css style property.", name);
          };
          warnValidStyle = function(name, value) {
            if (name.indexOf("-") > -1) {
              warnHyphenatedStyleName(name);
            } else if (badVendoredStyleNamePattern.test(name)) {
              warnBadVendoredStyleName(name);
            } else if (badStyleValueWithSemicolonPattern.test(value)) {
              warnStyleValueWithSemicolon(name, value);
            }
            if (typeof value === "number") {
              if (isNaN(value)) {
                warnStyleValueIsNaN(name, value);
              } else if (!isFinite(value)) {
                warnStyleValueIsInfinity(name, value);
              }
            }
          };
        }
        var warnValidStyle$1 = warnValidStyle;
        function createDangerousStringForStyles(styles) {
          {
            var serialized = "";
            var delimiter = "";
            for (var styleName in styles) {
              if (!styles.hasOwnProperty(styleName)) {
                continue;
              }
              var styleValue = styles[styleName];
              if (styleValue != null) {
                var isCustomProperty = styleName.indexOf("--") === 0;
                serialized += delimiter + (isCustomProperty ? styleName : hyphenateStyleName(styleName)) + ":";
                serialized += dangerousStyleValue(styleName, styleValue, isCustomProperty);
                delimiter = ";";
              }
            }
            return serialized || null;
          }
        }
        function setValueForStyles(node, styles) {
          var style2 = node.style;
          for (var styleName in styles) {
            if (!styles.hasOwnProperty(styleName)) {
              continue;
            }
            var isCustomProperty = styleName.indexOf("--") === 0;
            {
              if (!isCustomProperty) {
                warnValidStyle$1(styleName, styles[styleName]);
              }
            }
            var styleValue = dangerousStyleValue(styleName, styles[styleName], isCustomProperty);
            if (styleName === "float") {
              styleName = "cssFloat";
            }
            if (isCustomProperty) {
              style2.setProperty(styleName, styleValue);
            } else {
              style2[styleName] = styleValue;
            }
          }
        }
        function isValueEmpty(value) {
          return value == null || typeof value === "boolean" || value === "";
        }
        function expandShorthandMap(styles) {
          var expanded = {};
          for (var key in styles) {
            var longhands = shorthandToLonghand[key] || [key];
            for (var i = 0; i < longhands.length; i++) {
              expanded[longhands[i]] = key;
            }
          }
          return expanded;
        }
        function validateShorthandPropertyCollisionInDev(styleUpdates, nextStyles) {
          {
            if (!nextStyles) {
              return;
            }
            var expandedUpdates = expandShorthandMap(styleUpdates);
            var expandedStyles = expandShorthandMap(nextStyles);
            var warnedAbout = {};
            for (var key in expandedUpdates) {
              var originalKey = expandedUpdates[key];
              var correctOriginalKey = expandedStyles[key];
              if (correctOriginalKey && originalKey !== correctOriginalKey) {
                var warningKey = originalKey + "," + correctOriginalKey;
                if (warnedAbout[warningKey]) {
                  continue;
                }
                warnedAbout[warningKey] = true;
                error("%s a style property during rerender (%s) when a conflicting property is set (%s) can lead to styling bugs. To avoid this, don't mix shorthand and non-shorthand properties for the same value; instead, replace the shorthand with separate values.", isValueEmpty(styleUpdates[originalKey]) ? "Removing" : "Updating", originalKey, correctOriginalKey);
              }
            }
          }
        }
        var omittedCloseTags = {
          area: true,
          base: true,
          br: true,
          col: true,
          embed: true,
          hr: true,
          img: true,
          input: true,
          keygen: true,
          link: true,
          meta: true,
          param: true,
          source: true,
          track: true,
          wbr: true
          // NOTE: menuitem's close tag should be omitted, but that causes problems.
        };
        var voidElementTags = assign({
          menuitem: true
        }, omittedCloseTags);
        var HTML = "__html";
        function assertValidProps(tag, props) {
          if (!props) {
            return;
          }
          if (voidElementTags[tag]) {
            if (props.children != null || props.dangerouslySetInnerHTML != null) {
              throw new Error(tag + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
            }
          }
          if (props.dangerouslySetInnerHTML != null) {
            if (props.children != null) {
              throw new Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
            }
            if (typeof props.dangerouslySetInnerHTML !== "object" || !(HTML in props.dangerouslySetInnerHTML)) {
              throw new Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
            }
          }
          {
            if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null) {
              error("A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional.");
            }
          }
          if (props.style != null && typeof props.style !== "object") {
            throw new Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.");
          }
        }
        function isCustomComponent(tagName, props) {
          if (tagName.indexOf("-") === -1) {
            return typeof props.is === "string";
          }
          switch (tagName) {
            case "annotation-xml":
            case "color-profile":
            case "font-face":
            case "font-face-src":
            case "font-face-uri":
            case "font-face-format":
            case "font-face-name":
            case "missing-glyph":
              return false;
            default:
              return true;
          }
        }
        var possibleStandardNames = {
          // HTML
          accept: "accept",
          acceptcharset: "acceptCharset",
          "accept-charset": "acceptCharset",
          accesskey: "accessKey",
          action: "action",
          allowfullscreen: "allowFullScreen",
          alt: "alt",
          as: "as",
          async: "async",
          autocapitalize: "autoCapitalize",
          autocomplete: "autoComplete",
          autocorrect: "autoCorrect",
          autofocus: "autoFocus",
          autoplay: "autoPlay",
          autosave: "autoSave",
          capture: "capture",
          cellpadding: "cellPadding",
          cellspacing: "cellSpacing",
          challenge: "challenge",
          charset: "charSet",
          checked: "checked",
          children: "children",
          cite: "cite",
          class: "className",
          classid: "classID",
          classname: "className",
          cols: "cols",
          colspan: "colSpan",
          content: "content",
          contenteditable: "contentEditable",
          contextmenu: "contextMenu",
          controls: "controls",
          controlslist: "controlsList",
          coords: "coords",
          crossorigin: "crossOrigin",
          dangerouslysetinnerhtml: "dangerouslySetInnerHTML",
          data: "data",
          datetime: "dateTime",
          default: "default",
          defaultchecked: "defaultChecked",
          defaultvalue: "defaultValue",
          defer: "defer",
          dir: "dir",
          disabled: "disabled",
          disablepictureinpicture: "disablePictureInPicture",
          disableremoteplayback: "disableRemotePlayback",
          download: "download",
          draggable: "draggable",
          enctype: "encType",
          enterkeyhint: "enterKeyHint",
          for: "htmlFor",
          form: "form",
          formmethod: "formMethod",
          formaction: "formAction",
          formenctype: "formEncType",
          formnovalidate: "formNoValidate",
          formtarget: "formTarget",
          frameborder: "frameBorder",
          headers: "headers",
          height: "height",
          hidden: "hidden",
          high: "high",
          href: "href",
          hreflang: "hrefLang",
          htmlfor: "htmlFor",
          httpequiv: "httpEquiv",
          "http-equiv": "httpEquiv",
          icon: "icon",
          id: "id",
          imagesizes: "imageSizes",
          imagesrcset: "imageSrcSet",
          innerhtml: "innerHTML",
          inputmode: "inputMode",
          integrity: "integrity",
          is: "is",
          itemid: "itemID",
          itemprop: "itemProp",
          itemref: "itemRef",
          itemscope: "itemScope",
          itemtype: "itemType",
          keyparams: "keyParams",
          keytype: "keyType",
          kind: "kind",
          label: "label",
          lang: "lang",
          list: "list",
          loop: "loop",
          low: "low",
          manifest: "manifest",
          marginwidth: "marginWidth",
          marginheight: "marginHeight",
          max: "max",
          maxlength: "maxLength",
          media: "media",
          mediagroup: "mediaGroup",
          method: "method",
          min: "min",
          minlength: "minLength",
          multiple: "multiple",
          muted: "muted",
          name: "name",
          nomodule: "noModule",
          nonce: "nonce",
          novalidate: "noValidate",
          open: "open",
          optimum: "optimum",
          pattern: "pattern",
          placeholder: "placeholder",
          playsinline: "playsInline",
          poster: "poster",
          preload: "preload",
          profile: "profile",
          radiogroup: "radioGroup",
          readonly: "readOnly",
          referrerpolicy: "referrerPolicy",
          rel: "rel",
          required: "required",
          reversed: "reversed",
          role: "role",
          rows: "rows",
          rowspan: "rowSpan",
          sandbox: "sandbox",
          scope: "scope",
          scoped: "scoped",
          scrolling: "scrolling",
          seamless: "seamless",
          selected: "selected",
          shape: "shape",
          size: "size",
          sizes: "sizes",
          span: "span",
          spellcheck: "spellCheck",
          src: "src",
          srcdoc: "srcDoc",
          srclang: "srcLang",
          srcset: "srcSet",
          start: "start",
          step: "step",
          style: "style",
          summary: "summary",
          tabindex: "tabIndex",
          target: "target",
          title: "title",
          type: "type",
          usemap: "useMap",
          value: "value",
          width: "width",
          wmode: "wmode",
          wrap: "wrap",
          // SVG
          about: "about",
          accentheight: "accentHeight",
          "accent-height": "accentHeight",
          accumulate: "accumulate",
          additive: "additive",
          alignmentbaseline: "alignmentBaseline",
          "alignment-baseline": "alignmentBaseline",
          allowreorder: "allowReorder",
          alphabetic: "alphabetic",
          amplitude: "amplitude",
          arabicform: "arabicForm",
          "arabic-form": "arabicForm",
          ascent: "ascent",
          attributename: "attributeName",
          attributetype: "attributeType",
          autoreverse: "autoReverse",
          azimuth: "azimuth",
          basefrequency: "baseFrequency",
          baselineshift: "baselineShift",
          "baseline-shift": "baselineShift",
          baseprofile: "baseProfile",
          bbox: "bbox",
          begin: "begin",
          bias: "bias",
          by: "by",
          calcmode: "calcMode",
          capheight: "capHeight",
          "cap-height": "capHeight",
          clip: "clip",
          clippath: "clipPath",
          "clip-path": "clipPath",
          clippathunits: "clipPathUnits",
          cliprule: "clipRule",
          "clip-rule": "clipRule",
          color: "color",
          colorinterpolation: "colorInterpolation",
          "color-interpolation": "colorInterpolation",
          colorinterpolationfilters: "colorInterpolationFilters",
          "color-interpolation-filters": "colorInterpolationFilters",
          colorprofile: "colorProfile",
          "color-profile": "colorProfile",
          colorrendering: "colorRendering",
          "color-rendering": "colorRendering",
          contentscripttype: "contentScriptType",
          contentstyletype: "contentStyleType",
          cursor: "cursor",
          cx: "cx",
          cy: "cy",
          d: "d",
          datatype: "datatype",
          decelerate: "decelerate",
          descent: "descent",
          diffuseconstant: "diffuseConstant",
          direction: "direction",
          display: "display",
          divisor: "divisor",
          dominantbaseline: "dominantBaseline",
          "dominant-baseline": "dominantBaseline",
          dur: "dur",
          dx: "dx",
          dy: "dy",
          edgemode: "edgeMode",
          elevation: "elevation",
          enablebackground: "enableBackground",
          "enable-background": "enableBackground",
          end: "end",
          exponent: "exponent",
          externalresourcesrequired: "externalResourcesRequired",
          fill: "fill",
          fillopacity: "fillOpacity",
          "fill-opacity": "fillOpacity",
          fillrule: "fillRule",
          "fill-rule": "fillRule",
          filter: "filter",
          filterres: "filterRes",
          filterunits: "filterUnits",
          floodopacity: "floodOpacity",
          "flood-opacity": "floodOpacity",
          floodcolor: "floodColor",
          "flood-color": "floodColor",
          focusable: "focusable",
          fontfamily: "fontFamily",
          "font-family": "fontFamily",
          fontsize: "fontSize",
          "font-size": "fontSize",
          fontsizeadjust: "fontSizeAdjust",
          "font-size-adjust": "fontSizeAdjust",
          fontstretch: "fontStretch",
          "font-stretch": "fontStretch",
          fontstyle: "fontStyle",
          "font-style": "fontStyle",
          fontvariant: "fontVariant",
          "font-variant": "fontVariant",
          fontweight: "fontWeight",
          "font-weight": "fontWeight",
          format: "format",
          from: "from",
          fx: "fx",
          fy: "fy",
          g1: "g1",
          g2: "g2",
          glyphname: "glyphName",
          "glyph-name": "glyphName",
          glyphorientationhorizontal: "glyphOrientationHorizontal",
          "glyph-orientation-horizontal": "glyphOrientationHorizontal",
          glyphorientationvertical: "glyphOrientationVertical",
          "glyph-orientation-vertical": "glyphOrientationVertical",
          glyphref: "glyphRef",
          gradienttransform: "gradientTransform",
          gradientunits: "gradientUnits",
          hanging: "hanging",
          horizadvx: "horizAdvX",
          "horiz-adv-x": "horizAdvX",
          horizoriginx: "horizOriginX",
          "horiz-origin-x": "horizOriginX",
          ideographic: "ideographic",
          imagerendering: "imageRendering",
          "image-rendering": "imageRendering",
          in2: "in2",
          in: "in",
          inlist: "inlist",
          intercept: "intercept",
          k1: "k1",
          k2: "k2",
          k3: "k3",
          k4: "k4",
          k: "k",
          kernelmatrix: "kernelMatrix",
          kernelunitlength: "kernelUnitLength",
          kerning: "kerning",
          keypoints: "keyPoints",
          keysplines: "keySplines",
          keytimes: "keyTimes",
          lengthadjust: "lengthAdjust",
          letterspacing: "letterSpacing",
          "letter-spacing": "letterSpacing",
          lightingcolor: "lightingColor",
          "lighting-color": "lightingColor",
          limitingconeangle: "limitingConeAngle",
          local: "local",
          markerend: "markerEnd",
          "marker-end": "markerEnd",
          markerheight: "markerHeight",
          markermid: "markerMid",
          "marker-mid": "markerMid",
          markerstart: "markerStart",
          "marker-start": "markerStart",
          markerunits: "markerUnits",
          markerwidth: "markerWidth",
          mask: "mask",
          maskcontentunits: "maskContentUnits",
          maskunits: "maskUnits",
          mathematical: "mathematical",
          mode: "mode",
          numoctaves: "numOctaves",
          offset: "offset",
          opacity: "opacity",
          operator: "operator",
          order: "order",
          orient: "orient",
          orientation: "orientation",
          origin: "origin",
          overflow: "overflow",
          overlineposition: "overlinePosition",
          "overline-position": "overlinePosition",
          overlinethickness: "overlineThickness",
          "overline-thickness": "overlineThickness",
          paintorder: "paintOrder",
          "paint-order": "paintOrder",
          panose1: "panose1",
          "panose-1": "panose1",
          pathlength: "pathLength",
          patterncontentunits: "patternContentUnits",
          patterntransform: "patternTransform",
          patternunits: "patternUnits",
          pointerevents: "pointerEvents",
          "pointer-events": "pointerEvents",
          points: "points",
          pointsatx: "pointsAtX",
          pointsaty: "pointsAtY",
          pointsatz: "pointsAtZ",
          prefix: "prefix",
          preservealpha: "preserveAlpha",
          preserveaspectratio: "preserveAspectRatio",
          primitiveunits: "primitiveUnits",
          property: "property",
          r: "r",
          radius: "radius",
          refx: "refX",
          refy: "refY",
          renderingintent: "renderingIntent",
          "rendering-intent": "renderingIntent",
          repeatcount: "repeatCount",
          repeatdur: "repeatDur",
          requiredextensions: "requiredExtensions",
          requiredfeatures: "requiredFeatures",
          resource: "resource",
          restart: "restart",
          result: "result",
          results: "results",
          rotate: "rotate",
          rx: "rx",
          ry: "ry",
          scale: "scale",
          security: "security",
          seed: "seed",
          shaperendering: "shapeRendering",
          "shape-rendering": "shapeRendering",
          slope: "slope",
          spacing: "spacing",
          specularconstant: "specularConstant",
          specularexponent: "specularExponent",
          speed: "speed",
          spreadmethod: "spreadMethod",
          startoffset: "startOffset",
          stddeviation: "stdDeviation",
          stemh: "stemh",
          stemv: "stemv",
          stitchtiles: "stitchTiles",
          stopcolor: "stopColor",
          "stop-color": "stopColor",
          stopopacity: "stopOpacity",
          "stop-opacity": "stopOpacity",
          strikethroughposition: "strikethroughPosition",
          "strikethrough-position": "strikethroughPosition",
          strikethroughthickness: "strikethroughThickness",
          "strikethrough-thickness": "strikethroughThickness",
          string: "string",
          stroke: "stroke",
          strokedasharray: "strokeDasharray",
          "stroke-dasharray": "strokeDasharray",
          strokedashoffset: "strokeDashoffset",
          "stroke-dashoffset": "strokeDashoffset",
          strokelinecap: "strokeLinecap",
          "stroke-linecap": "strokeLinecap",
          strokelinejoin: "strokeLinejoin",
          "stroke-linejoin": "strokeLinejoin",
          strokemiterlimit: "strokeMiterlimit",
          "stroke-miterlimit": "strokeMiterlimit",
          strokewidth: "strokeWidth",
          "stroke-width": "strokeWidth",
          strokeopacity: "strokeOpacity",
          "stroke-opacity": "strokeOpacity",
          suppresscontenteditablewarning: "suppressContentEditableWarning",
          suppresshydrationwarning: "suppressHydrationWarning",
          surfacescale: "surfaceScale",
          systemlanguage: "systemLanguage",
          tablevalues: "tableValues",
          targetx: "targetX",
          targety: "targetY",
          textanchor: "textAnchor",
          "text-anchor": "textAnchor",
          textdecoration: "textDecoration",
          "text-decoration": "textDecoration",
          textlength: "textLength",
          textrendering: "textRendering",
          "text-rendering": "textRendering",
          to: "to",
          transform: "transform",
          typeof: "typeof",
          u1: "u1",
          u2: "u2",
          underlineposition: "underlinePosition",
          "underline-position": "underlinePosition",
          underlinethickness: "underlineThickness",
          "underline-thickness": "underlineThickness",
          unicode: "unicode",
          unicodebidi: "unicodeBidi",
          "unicode-bidi": "unicodeBidi",
          unicoderange: "unicodeRange",
          "unicode-range": "unicodeRange",
          unitsperem: "unitsPerEm",
          "units-per-em": "unitsPerEm",
          unselectable: "unselectable",
          valphabetic: "vAlphabetic",
          "v-alphabetic": "vAlphabetic",
          values: "values",
          vectoreffect: "vectorEffect",
          "vector-effect": "vectorEffect",
          version: "version",
          vertadvy: "vertAdvY",
          "vert-adv-y": "vertAdvY",
          vertoriginx: "vertOriginX",
          "vert-origin-x": "vertOriginX",
          vertoriginy: "vertOriginY",
          "vert-origin-y": "vertOriginY",
          vhanging: "vHanging",
          "v-hanging": "vHanging",
          videographic: "vIdeographic",
          "v-ideographic": "vIdeographic",
          viewbox: "viewBox",
          viewtarget: "viewTarget",
          visibility: "visibility",
          vmathematical: "vMathematical",
          "v-mathematical": "vMathematical",
          vocab: "vocab",
          widths: "widths",
          wordspacing: "wordSpacing",
          "word-spacing": "wordSpacing",
          writingmode: "writingMode",
          "writing-mode": "writingMode",
          x1: "x1",
          x2: "x2",
          x: "x",
          xchannelselector: "xChannelSelector",
          xheight: "xHeight",
          "x-height": "xHeight",
          xlinkactuate: "xlinkActuate",
          "xlink:actuate": "xlinkActuate",
          xlinkarcrole: "xlinkArcrole",
          "xlink:arcrole": "xlinkArcrole",
          xlinkhref: "xlinkHref",
          "xlink:href": "xlinkHref",
          xlinkrole: "xlinkRole",
          "xlink:role": "xlinkRole",
          xlinkshow: "xlinkShow",
          "xlink:show": "xlinkShow",
          xlinktitle: "xlinkTitle",
          "xlink:title": "xlinkTitle",
          xlinktype: "xlinkType",
          "xlink:type": "xlinkType",
          xmlbase: "xmlBase",
          "xml:base": "xmlBase",
          xmllang: "xmlLang",
          "xml:lang": "xmlLang",
          xmlns: "xmlns",
          "xml:space": "xmlSpace",
          xmlnsxlink: "xmlnsXlink",
          "xmlns:xlink": "xmlnsXlink",
          xmlspace: "xmlSpace",
          y1: "y1",
          y2: "y2",
          y: "y",
          ychannelselector: "yChannelSelector",
          z: "z",
          zoomandpan: "zoomAndPan"
        };
        var ariaProperties = {
          "aria-current": 0,
          // state
          "aria-description": 0,
          "aria-details": 0,
          "aria-disabled": 0,
          // state
          "aria-hidden": 0,
          // state
          "aria-invalid": 0,
          // state
          "aria-keyshortcuts": 0,
          "aria-label": 0,
          "aria-roledescription": 0,
          // Widget Attributes
          "aria-autocomplete": 0,
          "aria-checked": 0,
          "aria-expanded": 0,
          "aria-haspopup": 0,
          "aria-level": 0,
          "aria-modal": 0,
          "aria-multiline": 0,
          "aria-multiselectable": 0,
          "aria-orientation": 0,
          "aria-placeholder": 0,
          "aria-pressed": 0,
          "aria-readonly": 0,
          "aria-required": 0,
          "aria-selected": 0,
          "aria-sort": 0,
          "aria-valuemax": 0,
          "aria-valuemin": 0,
          "aria-valuenow": 0,
          "aria-valuetext": 0,
          // Live Region Attributes
          "aria-atomic": 0,
          "aria-busy": 0,
          "aria-live": 0,
          "aria-relevant": 0,
          // Drag-and-Drop Attributes
          "aria-dropeffect": 0,
          "aria-grabbed": 0,
          // Relationship Attributes
          "aria-activedescendant": 0,
          "aria-colcount": 0,
          "aria-colindex": 0,
          "aria-colspan": 0,
          "aria-controls": 0,
          "aria-describedby": 0,
          "aria-errormessage": 0,
          "aria-flowto": 0,
          "aria-labelledby": 0,
          "aria-owns": 0,
          "aria-posinset": 0,
          "aria-rowcount": 0,
          "aria-rowindex": 0,
          "aria-rowspan": 0,
          "aria-setsize": 0
        };
        var warnedProperties = {};
        var rARIA = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
        var rARIACamel = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
        function validateProperty(tagName, name) {
          {
            if (hasOwnProperty.call(warnedProperties, name) && warnedProperties[name]) {
              return true;
            }
            if (rARIACamel.test(name)) {
              var ariaName = "aria-" + name.slice(4).toLowerCase();
              var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null;
              if (correctName == null) {
                error("Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.", name);
                warnedProperties[name] = true;
                return true;
              }
              if (name !== correctName) {
                error("Invalid ARIA attribute `%s`. Did you mean `%s`?", name, correctName);
                warnedProperties[name] = true;
                return true;
              }
            }
            if (rARIA.test(name)) {
              var lowerCasedName = name.toLowerCase();
              var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null;
              if (standardName == null) {
                warnedProperties[name] = true;
                return false;
              }
              if (name !== standardName) {
                error("Unknown ARIA attribute `%s`. Did you mean `%s`?", name, standardName);
                warnedProperties[name] = true;
                return true;
              }
            }
          }
          return true;
        }
        function warnInvalidARIAProps(type, props) {
          {
            var invalidProps = [];
            for (var key in props) {
              var isValid = validateProperty(type, key);
              if (!isValid) {
                invalidProps.push(key);
              }
            }
            var unknownPropString = invalidProps.map(function(prop) {
              return "`" + prop + "`";
            }).join(", ");
            if (invalidProps.length === 1) {
              error("Invalid aria prop %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
            } else if (invalidProps.length > 1) {
              error("Invalid aria props %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
            }
          }
        }
        function validateProperties(type, props) {
          if (isCustomComponent(type, props)) {
            return;
          }
          warnInvalidARIAProps(type, props);
        }
        var didWarnValueNull = false;
        function validateProperties$1(type, props) {
          {
            if (type !== "input" && type !== "textarea" && type !== "select") {
              return;
            }
            if (props != null && props.value === null && !didWarnValueNull) {
              didWarnValueNull = true;
              if (type === "select" && props.multiple) {
                error("`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.", type);
              } else {
                error("`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.", type);
              }
            }
          }
        }
        var validateProperty$1 = function() {
        };
        {
          var warnedProperties$1 = {};
          var EVENT_NAME_REGEX = /^on./;
          var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
          var rARIA$1 = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
          var rARIACamel$1 = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
          validateProperty$1 = function(tagName, name, value, eventRegistry) {
            if (hasOwnProperty.call(warnedProperties$1, name) && warnedProperties$1[name]) {
              return true;
            }
            var lowerCasedName = name.toLowerCase();
            if (lowerCasedName === "onfocusin" || lowerCasedName === "onfocusout") {
              error("React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React.");
              warnedProperties$1[name] = true;
              return true;
            }
            if (eventRegistry != null) {
              var registrationNameDependencies2 = eventRegistry.registrationNameDependencies, possibleRegistrationNames2 = eventRegistry.possibleRegistrationNames;
              if (registrationNameDependencies2.hasOwnProperty(name)) {
                return true;
              }
              var registrationName = possibleRegistrationNames2.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames2[lowerCasedName] : null;
              if (registrationName != null) {
                error("Invalid event handler property `%s`. Did you mean `%s`?", name, registrationName);
                warnedProperties$1[name] = true;
                return true;
              }
              if (EVENT_NAME_REGEX.test(name)) {
                error("Unknown event handler property `%s`. It will be ignored.", name);
                warnedProperties$1[name] = true;
                return true;
              }
            } else if (EVENT_NAME_REGEX.test(name)) {
              if (INVALID_EVENT_NAME_REGEX.test(name)) {
                error("Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.", name);
              }
              warnedProperties$1[name] = true;
              return true;
            }
            if (rARIA$1.test(name) || rARIACamel$1.test(name)) {
              return true;
            }
            if (lowerCasedName === "innerhtml") {
              error("Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`.");
              warnedProperties$1[name] = true;
              return true;
            }
            if (lowerCasedName === "aria") {
              error("The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead.");
              warnedProperties$1[name] = true;
              return true;
            }
            if (lowerCasedName === "is" && value !== null && value !== void 0 && typeof value !== "string") {
              error("Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.", typeof value);
              warnedProperties$1[name] = true;
              return true;
            }
            if (typeof value === "number" && isNaN(value)) {
              error("Received NaN for the `%s` attribute. If this is expected, cast the value to a string.", name);
              warnedProperties$1[name] = true;
              return true;
            }
            var propertyInfo = getPropertyInfo(name);
            var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED;
            if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
              var standardName = possibleStandardNames[lowerCasedName];
              if (standardName !== name) {
                error("Invalid DOM property `%s`. Did you mean `%s`?", name, standardName);
                warnedProperties$1[name] = true;
                return true;
              }
            } else if (!isReserved && name !== lowerCasedName) {
              error("React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.", name, lowerCasedName);
              warnedProperties$1[name] = true;
              return true;
            }
            if (typeof value === "boolean" && shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
              if (value) {
                error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.', value, name, name, value, name);
              } else {
                error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.', value, name, name, value, name, name, name);
              }
              warnedProperties$1[name] = true;
              return true;
            }
            if (isReserved) {
              return true;
            }
            if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
              warnedProperties$1[name] = true;
              return false;
            }
            if ((value === "false" || value === "true") && propertyInfo !== null && propertyInfo.type === BOOLEAN) {
              error("Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?", value, name, value === "false" ? "The browser will interpret it as a truthy value." : 'Although this works, it will not work as expected if you pass the string "false".', name, value);
              warnedProperties$1[name] = true;
              return true;
            }
            return true;
          };
        }
        var warnUnknownProperties = function(type, props, eventRegistry) {
          {
            var unknownProps = [];
            for (var key in props) {
              var isValid = validateProperty$1(type, key, props[key], eventRegistry);
              if (!isValid) {
                unknownProps.push(key);
              }
            }
            var unknownPropString = unknownProps.map(function(prop) {
              return "`" + prop + "`";
            }).join(", ");
            if (unknownProps.length === 1) {
              error("Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
            } else if (unknownProps.length > 1) {
              error("Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
            }
          }
        };
        function validateProperties$2(type, props, eventRegistry) {
          if (isCustomComponent(type, props)) {
            return;
          }
          warnUnknownProperties(type, props, eventRegistry);
        }
        var IS_EVENT_HANDLE_NON_MANAGED_NODE = 1;
        var IS_NON_DELEGATED = 1 << 1;
        var IS_CAPTURE_PHASE = 1 << 2;
        var SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS = IS_EVENT_HANDLE_NON_MANAGED_NODE | IS_NON_DELEGATED | IS_CAPTURE_PHASE;
        var currentReplayingEvent = null;
        function setReplayingEvent(event) {
          {
            if (currentReplayingEvent !== null) {
              error("Expected currently replaying event to be null. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          currentReplayingEvent = event;
        }
        function resetReplayingEvent() {
          {
            if (currentReplayingEvent === null) {
              error("Expected currently replaying event to not be null. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          currentReplayingEvent = null;
        }
        function isReplayingEvent(event) {
          return event === currentReplayingEvent;
        }
        function getEventTarget(nativeEvent) {
          var target = nativeEvent.target || nativeEvent.srcElement || window;
          if (target.correspondingUseElement) {
            target = target.correspondingUseElement;
          }
          return target.nodeType === TEXT_NODE ? target.parentNode : target;
        }
        var restoreImpl = null;
        var restoreTarget = null;
        var restoreQueue = null;
        function restoreStateOfTarget(target) {
          var internalInstance = getInstanceFromNode(target);
          if (!internalInstance) {
            return;
          }
          if (typeof restoreImpl !== "function") {
            throw new Error("setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue.");
          }
          var stateNode = internalInstance.stateNode;
          if (stateNode) {
            var _props = getFiberCurrentPropsFromNode(stateNode);
            restoreImpl(internalInstance.stateNode, internalInstance.type, _props);
          }
        }
        function setRestoreImplementation(impl) {
          restoreImpl = impl;
        }
        function enqueueStateRestore(target) {
          if (restoreTarget) {
            if (restoreQueue) {
              restoreQueue.push(target);
            } else {
              restoreQueue = [target];
            }
          } else {
            restoreTarget = target;
          }
        }
        function needsStateRestore() {
          return restoreTarget !== null || restoreQueue !== null;
        }
        function restoreStateIfNeeded() {
          if (!restoreTarget) {
            return;
          }
          var target = restoreTarget;
          var queuedTargets = restoreQueue;
          restoreTarget = null;
          restoreQueue = null;
          restoreStateOfTarget(target);
          if (queuedTargets) {
            for (var i = 0; i < queuedTargets.length; i++) {
              restoreStateOfTarget(queuedTargets[i]);
            }
          }
        }
        var batchedUpdatesImpl = function(fn, bookkeeping) {
          return fn(bookkeeping);
        };
        var flushSyncImpl = function() {
        };
        var isInsideEventHandler = false;
        function finishEventHandler() {
          var controlledComponentsHavePendingUpdates = needsStateRestore();
          if (controlledComponentsHavePendingUpdates) {
            flushSyncImpl();
            restoreStateIfNeeded();
          }
        }
        function batchedUpdates(fn, a, b) {
          if (isInsideEventHandler) {
            return fn(a, b);
          }
          isInsideEventHandler = true;
          try {
            return batchedUpdatesImpl(fn, a, b);
          } finally {
            isInsideEventHandler = false;
            finishEventHandler();
          }
        }
        function setBatchingImplementation(_batchedUpdatesImpl, _discreteUpdatesImpl, _flushSyncImpl) {
          batchedUpdatesImpl = _batchedUpdatesImpl;
          flushSyncImpl = _flushSyncImpl;
        }
        function isInteractive(tag) {
          return tag === "button" || tag === "input" || tag === "select" || tag === "textarea";
        }
        function shouldPreventMouseEvent(name, type, props) {
          switch (name) {
            case "onClick":
            case "onClickCapture":
            case "onDoubleClick":
            case "onDoubleClickCapture":
            case "onMouseDown":
            case "onMouseDownCapture":
            case "onMouseMove":
            case "onMouseMoveCapture":
            case "onMouseUp":
            case "onMouseUpCapture":
            case "onMouseEnter":
              return !!(props.disabled && isInteractive(type));
            default:
              return false;
          }
        }
        function getListener(inst, registrationName) {
          var stateNode = inst.stateNode;
          if (stateNode === null) {
            return null;
          }
          var props = getFiberCurrentPropsFromNode(stateNode);
          if (props === null) {
            return null;
          }
          var listener = props[registrationName];
          if (shouldPreventMouseEvent(registrationName, inst.type, props)) {
            return null;
          }
          if (listener && typeof listener !== "function") {
            throw new Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof listener + "` type.");
          }
          return listener;
        }
        var passiveBrowserEventsSupported = false;
        if (canUseDOM) {
          try {
            var options = {};
            Object.defineProperty(options, "passive", {
              get: function() {
                passiveBrowserEventsSupported = true;
              }
            });
            window.addEventListener("test", options, options);
            window.removeEventListener("test", options, options);
          } catch (e) {
            passiveBrowserEventsSupported = false;
          }
        }
        function invokeGuardedCallbackProd(name, func, context, a, b, c, d, e, f) {
          var funcArgs = Array.prototype.slice.call(arguments, 3);
          try {
            func.apply(context, funcArgs);
          } catch (error2) {
            this.onError(error2);
          }
        }
        var invokeGuardedCallbackImpl = invokeGuardedCallbackProd;
        {
          if (typeof window !== "undefined" && typeof window.dispatchEvent === "function" && typeof document !== "undefined" && typeof document.createEvent === "function") {
            var fakeNode = document.createElement("react");
            invokeGuardedCallbackImpl = function invokeGuardedCallbackDev(name, func, context, a, b, c, d, e, f) {
              if (typeof document === "undefined" || document === null) {
                throw new Error("The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.");
              }
              var evt = document.createEvent("Event");
              var didCall = false;
              var didError = true;
              var windowEvent = window.event;
              var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, "event");
              function restoreAfterDispatch() {
                fakeNode.removeEventListener(evtType, callCallback2, false);
                if (typeof window.event !== "undefined" && window.hasOwnProperty("event")) {
                  window.event = windowEvent;
                }
              }
              var funcArgs = Array.prototype.slice.call(arguments, 3);
              function callCallback2() {
                didCall = true;
                restoreAfterDispatch();
                func.apply(context, funcArgs);
                didError = false;
              }
              var error2;
              var didSetError = false;
              var isCrossOriginError = false;
              function handleWindowError(event) {
                error2 = event.error;
                didSetError = true;
                if (error2 === null && event.colno === 0 && event.lineno === 0) {
                  isCrossOriginError = true;
                }
                if (event.defaultPrevented) {
                  if (error2 != null && typeof error2 === "object") {
                    try {
                      error2.Se = true;
                    } catch (inner) {
                    }
                  }
                }
              }
              var evtType = "react-" + (name ? name : "invokeguardedcallback");
              window.addEventListener("error", handleWindowError);
              fakeNode.addEventListener(evtType, callCallback2, false);
              evt.initEvent(evtType, false, false);
              fakeNode.dispatchEvent(evt);
              if (windowEventDescriptor) {
                Object.defineProperty(window, "event", windowEventDescriptor);
              }
              if (didCall && didError) {
                if (!didSetError) {
                  error2 = new Error(`An error was thrown inside one of your components, but React doesn't know what it was. This is likely due to browser flakiness. React does its best to preserve the "Pause on exceptions" behavior of the DevTools, which requires some DEV-mode only tricks. It's possible that these don't work in your browser. Try triggering the error in production mode, or switching to a modern browser. If you suspect that this is actually an issue with React, please file an issue.`);
                } else if (isCrossOriginError) {
                  error2 = new Error("A cross-origin error was thrown. React doesn't have access to the actual error object in development. See https://reactjs.org/link/crossorigin-error for more information.");
                }
                this.onError(error2);
              }
              window.removeEventListener("error", handleWindowError);
              if (!didCall) {
                restoreAfterDispatch();
                return invokeGuardedCallbackProd.apply(this, arguments);
              }
            };
          }
        }
        var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;
        var hasError = false;
        var caughtError = null;
        var hasRethrowError = false;
        var rethrowError = null;
        var reporter = {
          onError: function(error2) {
            hasError = true;
            caughtError = error2;
          }
        };
        function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
          hasError = false;
          caughtError = null;
          invokeGuardedCallbackImpl$1.apply(reporter, arguments);
        }
        function invokeGuardedCallbackAndCatchFirstError(name, func, context, a, b, c, d, e, f) {
          invokeGuardedCallback.apply(this, arguments);
          if (hasError) {
            var error2 = clearCaughtError();
            if (!hasRethrowError) {
              hasRethrowError = true;
              rethrowError = error2;
            }
          }
        }
        function rethrowCaughtError() {
          if (hasRethrowError) {
            var error2 = rethrowError;
            hasRethrowError = false;
            rethrowError = null;
            throw error2;
          }
        }
        function hasCaughtError() {
          return hasError;
        }
        function clearCaughtError() {
          if (hasError) {
            var error2 = caughtError;
            hasError = false;
            caughtError = null;
            return error2;
          } else {
            throw new Error("clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.");
          }
        }
        function get(key) {
          return key.Gj;
        }
        function has(key) {
          return key.Gj !== void 0;
        }
        function set(key, value) {
          key.Gj = value;
        }
        var NoFlags = (
          /*                      */
          0
        );
        var PerformedWork = (
          /*                */
          1
        );
        var Placement = (
          /*                    */
          2
        );
        var Update = (
          /*                       */
          4
        );
        var ChildDeletion = (
          /*                */
          16
        );
        var ContentReset = (
          /*                 */
          32
        );
        var Callback = (
          /*                     */
          64
        );
        var DidCapture = (
          /*                   */
          128
        );
        var ForceClientRender = (
          /*            */
          256
        );
        var Ref = (
          /*                          */
          512
        );
        var Snapshot = (
          /*                     */
          1024
        );
        var Passive = (
          /*                      */
          2048
        );
        var Hydrating = (
          /*                    */
          4096
        );
        var Visibility = (
          /*                   */
          8192
        );
        var StoreConsistency = (
          /*             */
          16384
        );
        var LifecycleEffectMask = Passive | Update | Callback | Ref | Snapshot | StoreConsistency;
        var HostEffectMask = (
          /*               */
          32767
        );
        var Incomplete = (
          /*                   */
          32768
        );
        var ShouldCapture = (
          /*                */
          65536
        );
        var ForceUpdateForLegacySuspense = (
          /* */
          131072
        );
        var Forked = (
          /*                       */
          1048576
        );
        var RefStatic = (
          /*                    */
          2097152
        );
        var LayoutStatic = (
          /*                 */
          4194304
        );
        var PassiveStatic = (
          /*                */
          8388608
        );
        var MountLayoutDev = (
          /*               */
          16777216
        );
        var MountPassiveDev = (
          /*              */
          33554432
        );
        var BeforeMutationMask = (
          // TODO: Remove Update flag from before mutation phase by re-landing Visibility
          // flag logic (see #20043)
          Update | Snapshot | 0
        );
        var MutationMask = Placement | Update | ChildDeletion | ContentReset | Ref | Hydrating | Visibility;
        var LayoutMask = Update | Callback | Ref | Visibility;
        var PassiveMask = Passive | ChildDeletion;
        var StaticMask = LayoutStatic | PassiveStatic | RefStatic;
        var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
        function getNearestMountedFiber(fiber) {
          var node = fiber;
          var nearestMounted = fiber;
          if (!fiber.alternate) {
            var nextNode = node;
            do {
              node = nextNode;
              if ((node.flags & (Placement | Hydrating)) !== NoFlags) {
                nearestMounted = node.return;
              }
              nextNode = node.return;
            } while (nextNode);
          } else {
            while (node.return) {
              node = node.return;
            }
          }
          if (node.tag === HostRoot) {
            return nearestMounted;
          }
          return null;
        }
        function getSuspenseInstanceFromFiber(fiber) {
          if (fiber.tag === SuspenseComponent) {
            var suspenseState = fiber.memoizedState;
            if (suspenseState === null) {
              var current2 = fiber.alternate;
              if (current2 !== null) {
                suspenseState = current2.memoizedState;
              }
            }
            if (suspenseState !== null) {
              return suspenseState.dehydrated;
            }
          }
          return null;
        }
        function getContainerFromFiber(fiber) {
          return fiber.tag === HostRoot ? fiber.stateNode.containerInfo : null;
        }
        function isFiberMounted(fiber) {
          return getNearestMountedFiber(fiber) === fiber;
        }
        function isMounted(component) {
          {
            var owner = ReactCurrentOwner.current;
            if (owner !== null && owner.tag === ClassComponent) {
              var ownerFiber = owner;
              var instance = ownerFiber.stateNode;
              if (!instance._g) {
                error("%s is accessing isMounted inside its render() function. render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentNameFromFiber(ownerFiber) || "A component");
              }
              instance._g = true;
            }
          }
          var fiber = get(component);
          if (!fiber) {
            return false;
          }
          return getNearestMountedFiber(fiber) === fiber;
        }
        function assertIsMounted(fiber) {
          if (getNearestMountedFiber(fiber) !== fiber) {
            throw new Error("Unable to find node on an unmounted component.");
          }
        }
        function findCurrentFiberUsingSlowPath(fiber) {
          var alternate = fiber.alternate;
          if (!alternate) {
            var nearestMounted = getNearestMountedFiber(fiber);
            if (nearestMounted === null) {
              throw new Error("Unable to find node on an unmounted component.");
            }
            if (nearestMounted !== fiber) {
              return null;
            }
            return fiber;
          }
          var a = fiber;
          var b = alternate;
          while (true) {
            var parentA = a.return;
            if (parentA === null) {
              break;
            }
            var parentB = parentA.alternate;
            if (parentB === null) {
              var nextParent = parentA.return;
              if (nextParent !== null) {
                a = b = nextParent;
                continue;
              }
              break;
            }
            if (parentA.child === parentB.child) {
              var child = parentA.child;
              while (child) {
                if (child === a) {
                  assertIsMounted(parentA);
                  return fiber;
                }
                if (child === b) {
                  assertIsMounted(parentA);
                  return alternate;
                }
                child = child.sibling;
              }
              throw new Error("Unable to find node on an unmounted component.");
            }
            if (a.return !== b.return) {
              a = parentA;
              b = parentB;
            } else {
              var didFindChild = false;
              var _child = parentA.child;
              while (_child) {
                if (_child === a) {
                  didFindChild = true;
                  a = parentA;
                  b = parentB;
                  break;
                }
                if (_child === b) {
                  didFindChild = true;
                  b = parentA;
                  a = parentB;
                  break;
                }
                _child = _child.sibling;
              }
              if (!didFindChild) {
                _child = parentB.child;
                while (_child) {
                  if (_child === a) {
                    didFindChild = true;
                    a = parentB;
                    b = parentA;
                    break;
                  }
                  if (_child === b) {
                    didFindChild = true;
                    b = parentB;
                    a = parentA;
                    break;
                  }
                  _child = _child.sibling;
                }
                if (!didFindChild) {
                  throw new Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
                }
              }
            }
            if (a.alternate !== b) {
              throw new Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          if (a.tag !== HostRoot) {
            throw new Error("Unable to find node on an unmounted component.");
          }
          if (a.stateNode.current === a) {
            return fiber;
          }
          return alternate;
        }
        function findCurrentHostFiber(parent) {
          var currentParent = findCurrentFiberUsingSlowPath(parent);
          return currentParent !== null ? findCurrentHostFiberImpl(currentParent) : null;
        }
        function findCurrentHostFiberImpl(node) {
          if (node.tag === HostComponent || node.tag === HostText) {
            return node;
          }
          var child = node.child;
          while (child !== null) {
            var match = findCurrentHostFiberImpl(child);
            if (match !== null) {
              return match;
            }
            child = child.sibling;
          }
          return null;
        }
        function findCurrentHostFiberWithNoPortals(parent) {
          var currentParent = findCurrentFiberUsingSlowPath(parent);
          return currentParent !== null ? findCurrentHostFiberWithNoPortalsImpl(currentParent) : null;
        }
        function findCurrentHostFiberWithNoPortalsImpl(node) {
          if (node.tag === HostComponent || node.tag === HostText) {
            return node;
          }
          var child = node.child;
          while (child !== null) {
            if (child.tag !== HostPortal) {
              var match = findCurrentHostFiberWithNoPortalsImpl(child);
              if (match !== null) {
                return match;
              }
            }
            child = child.sibling;
          }
          return null;
        }
        var scheduleCallback = Scheduler.unstable_scheduleCallback;
        var cancelCallback = Scheduler.unstable_cancelCallback;
        var shouldYield = Scheduler.unstable_shouldYield;
        var requestPaint = Scheduler.unstable_requestPaint;
        var now = Scheduler.unstable_now;
        var getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel;
        var ImmediatePriority = Scheduler.unstable_ImmediatePriority;
        var UserBlockingPriority = Scheduler.unstable_UserBlockingPriority;
        var NormalPriority = Scheduler.unstable_NormalPriority;
        var LowPriority = Scheduler.unstable_LowPriority;
        var IdlePriority = Scheduler.unstable_IdlePriority;
        var unstable_yieldValue = Scheduler.unstable_yieldValue;
        var unstable_setDisableYieldValue = Scheduler.unstable_setDisableYieldValue;
        var rendererID = null;
        var injectedHook = null;
        var injectedProfilingHooks = null;
        var hasLoggedError = false;
        var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined";
        function injectInternals(internals) {
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined") {
            return false;
          }
          var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
          if (hook.isDisabled) {
            return true;
          }
          if (!hook.supportsFiber) {
            {
              error("The installed version of React DevTools is too old and will not work with the current version of React. Please update React DevTools. https://reactjs.org/link/react-devtools");
            }
            return true;
          }
          try {
            if (enableSchedulingProfiler) {
              internals = assign({}, internals, {
                getLaneLabelMap,
                injectProfilingHooks
              });
            }
            rendererID = hook.inject(internals);
            injectedHook = hook;
          } catch (err) {
            {
              error("React instrumentation encountered an error: %s.", err);
            }
          }
          if (hook.checkDCE) {
            return true;
          } else {
            return false;
          }
        }
        function onScheduleRoot(root2, children) {
          {
            if (injectedHook && typeof injectedHook.onScheduleFiberRoot === "function") {
              try {
                injectedHook.onScheduleFiberRoot(rendererID, root2, children);
              } catch (err) {
                if (!hasLoggedError) {
                  hasLoggedError = true;
                  error("React instrumentation encountered an error: %s", err);
                }
              }
            }
          }
        }
        function onCommitRoot(root2, eventPriority) {
          if (injectedHook && typeof injectedHook.onCommitFiberRoot === "function") {
            try {
              var didError = (root2.current.flags & DidCapture) === DidCapture;
              if (enableProfilerTimer) {
                var schedulerPriority;
                switch (eventPriority) {
                  case DiscreteEventPriority:
                    schedulerPriority = ImmediatePriority;
                    break;
                  case ContinuousEventPriority:
                    schedulerPriority = UserBlockingPriority;
                    break;
                  case DefaultEventPriority:
                    schedulerPriority = NormalPriority;
                    break;
                  case IdleEventPriority:
                    schedulerPriority = IdlePriority;
                    break;
                  default:
                    schedulerPriority = NormalPriority;
                    break;
                }
                injectedHook.onCommitFiberRoot(rendererID, root2, schedulerPriority, didError);
              } else {
                injectedHook.onCommitFiberRoot(rendererID, root2, void 0, didError);
              }
            } catch (err) {
              {
                if (!hasLoggedError) {
                  hasLoggedError = true;
                  error("React instrumentation encountered an error: %s", err);
                }
              }
            }
          }
        }
        function onPostCommitRoot(root2) {
          if (injectedHook && typeof injectedHook.onPostCommitFiberRoot === "function") {
            try {
              injectedHook.onPostCommitFiberRoot(rendererID, root2);
            } catch (err) {
              {
                if (!hasLoggedError) {
                  hasLoggedError = true;
                  error("React instrumentation encountered an error: %s", err);
                }
              }
            }
          }
        }
        function onCommitUnmount(fiber) {
          if (injectedHook && typeof injectedHook.onCommitFiberUnmount === "function") {
            try {
              injectedHook.onCommitFiberUnmount(rendererID, fiber);
            } catch (err) {
              {
                if (!hasLoggedError) {
                  hasLoggedError = true;
                  error("React instrumentation encountered an error: %s", err);
                }
              }
            }
          }
        }
        function setIsStrictModeForDevtools(newIsStrictMode) {
          {
            if (typeof unstable_yieldValue === "function") {
              unstable_setDisableYieldValue(newIsStrictMode);
              setSuppressWarning(newIsStrictMode);
            }
            if (injectedHook && typeof injectedHook.setStrictMode === "function") {
              try {
                injectedHook.setStrictMode(rendererID, newIsStrictMode);
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
        }
        function injectProfilingHooks(profilingHooks) {
          injectedProfilingHooks = profilingHooks;
        }
        function getLaneLabelMap() {
          {
            var map = /* @__PURE__ */ new Map();
            var lane = 1;
            for (var index2 = 0; index2 < TotalLanes; index2++) {
              var label = getLabelForLane(lane);
              map.set(lane, label);
              lane *= 2;
            }
            return map;
          }
        }
        function markCommitStarted(lanes) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStarted === "function") {
              injectedProfilingHooks.markCommitStarted(lanes);
            }
          }
        }
        function markCommitStopped() {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStopped === "function") {
              injectedProfilingHooks.markCommitStopped();
            }
          }
        }
        function markComponentRenderStarted(fiber) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStarted === "function") {
              injectedProfilingHooks.markComponentRenderStarted(fiber);
            }
          }
        }
        function markComponentRenderStopped() {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStopped === "function") {
              injectedProfilingHooks.markComponentRenderStopped();
            }
          }
        }
        function markComponentPassiveEffectMountStarted(fiber) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStarted === "function") {
              injectedProfilingHooks.markComponentPassiveEffectMountStarted(fiber);
            }
          }
        }
        function markComponentPassiveEffectMountStopped() {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStopped === "function") {
              injectedProfilingHooks.markComponentPassiveEffectMountStopped();
            }
          }
        }
        function markComponentPassiveEffectUnmountStarted(fiber) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStarted === "function") {
              injectedProfilingHooks.markComponentPassiveEffectUnmountStarted(fiber);
            }
          }
        }
        function markComponentPassiveEffectUnmountStopped() {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStopped === "function") {
              injectedProfilingHooks.markComponentPassiveEffectUnmountStopped();
            }
          }
        }
        function markComponentLayoutEffectMountStarted(fiber) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStarted === "function") {
              injectedProfilingHooks.markComponentLayoutEffectMountStarted(fiber);
            }
          }
        }
        function markComponentLayoutEffectMountStopped() {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStopped === "function") {
              injectedProfilingHooks.markComponentLayoutEffectMountStopped();
            }
          }
        }
        function markComponentLayoutEffectUnmountStarted(fiber) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStarted === "function") {
              injectedProfilingHooks.markComponentLayoutEffectUnmountStarted(fiber);
            }
          }
        }
        function markComponentLayoutEffectUnmountStopped() {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStopped === "function") {
              injectedProfilingHooks.markComponentLayoutEffectUnmountStopped();
            }
          }
        }
        function markComponentErrored(fiber, thrownValue, lanes) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentErrored === "function") {
              injectedProfilingHooks.markComponentErrored(fiber, thrownValue, lanes);
            }
          }
        }
        function markComponentSuspended(fiber, wakeable, lanes) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentSuspended === "function") {
              injectedProfilingHooks.markComponentSuspended(fiber, wakeable, lanes);
            }
          }
        }
        function markLayoutEffectsStarted(lanes) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStarted === "function") {
              injectedProfilingHooks.markLayoutEffectsStarted(lanes);
            }
          }
        }
        function markLayoutEffectsStopped() {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStopped === "function") {
              injectedProfilingHooks.markLayoutEffectsStopped();
            }
          }
        }
        function markPassiveEffectsStarted(lanes) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStarted === "function") {
              injectedProfilingHooks.markPassiveEffectsStarted(lanes);
            }
          }
        }
        function markPassiveEffectsStopped() {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStopped === "function") {
              injectedProfilingHooks.markPassiveEffectsStopped();
            }
          }
        }
        function markRenderStarted(lanes) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStarted === "function") {
              injectedProfilingHooks.markRenderStarted(lanes);
            }
          }
        }
        function markRenderYielded() {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderYielded === "function") {
              injectedProfilingHooks.markRenderYielded();
            }
          }
        }
        function markRenderStopped() {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStopped === "function") {
              injectedProfilingHooks.markRenderStopped();
            }
          }
        }
        function markRenderScheduled(lane) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderScheduled === "function") {
              injectedProfilingHooks.markRenderScheduled(lane);
            }
          }
        }
        function markForceUpdateScheduled(fiber, lane) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markForceUpdateScheduled === "function") {
              injectedProfilingHooks.markForceUpdateScheduled(fiber, lane);
            }
          }
        }
        function markStateUpdateScheduled(fiber, lane) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markStateUpdateScheduled === "function") {
              injectedProfilingHooks.markStateUpdateScheduled(fiber, lane);
            }
          }
        }
        var NoMode = (
          /*                         */
          0
        );
        var ConcurrentMode = (
          /*                 */
          1
        );
        var ProfileMode = (
          /*                    */
          2
        );
        var StrictLegacyMode = (
          /*               */
          8
        );
        var StrictEffectsMode = (
          /*              */
          16
        );
        var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback;
        var log = Math.log;
        var LN2 = Math.LN2;
        function clz32Fallback(x) {
          var asUint = x >>> 0;
          if (asUint === 0) {
            return 32;
          }
          return 31 - (log(asUint) / LN2 | 0) | 0;
        }
        var TotalLanes = 31;
        var NoLanes = (
          /*                        */
          0
        );
        var NoLane = (
          /*                          */
          0
        );
        var SyncLane = (
          /*                        */
          1
        );
        var InputContinuousHydrationLane = (
          /*    */
          2
        );
        var InputContinuousLane = (
          /*             */
          4
        );
        var DefaultHydrationLane = (
          /*            */
          8
        );
        var DefaultLane = (
          /*                     */
          16
        );
        var TransitionHydrationLane = (
          /*                */
          32
        );
        var TransitionLanes = (
          /*                       */
          4194240
        );
        var TransitionLane1 = (
          /*                        */
          64
        );
        var TransitionLane2 = (
          /*                        */
          128
        );
        var TransitionLane3 = (
          /*                        */
          256
        );
        var TransitionLane4 = (
          /*                        */
          512
        );
        var TransitionLane5 = (
          /*                        */
          1024
        );
        var TransitionLane6 = (
          /*                        */
          2048
        );
        var TransitionLane7 = (
          /*                        */
          4096
        );
        var TransitionLane8 = (
          /*                        */
          8192
        );
        var TransitionLane9 = (
          /*                        */
          16384
        );
        var TransitionLane10 = (
          /*                       */
          32768
        );
        var TransitionLane11 = (
          /*                       */
          65536
        );
        var TransitionLane12 = (
          /*                       */
          131072
        );
        var TransitionLane13 = (
          /*                       */
          262144
        );
        var TransitionLane14 = (
          /*                       */
          524288
        );
        var TransitionLane15 = (
          /*                       */
          1048576
        );
        var TransitionLane16 = (
          /*                       */
          2097152
        );
        var RetryLanes = (
          /*                            */
          130023424
        );
        var RetryLane1 = (
          /*                             */
          4194304
        );
        var RetryLane2 = (
          /*                             */
          8388608
        );
        var RetryLane3 = (
          /*                             */
          16777216
        );
        var RetryLane4 = (
          /*                             */
          33554432
        );
        var RetryLane5 = (
          /*                             */
          67108864
        );
        var SomeRetryLane = RetryLane1;
        var SelectiveHydrationLane = (
          /*          */
          134217728
        );
        var NonIdleLanes = (
          /*                          */
          268435455
        );
        var IdleHydrationLane = (
          /*               */
          268435456
        );
        var IdleLane = (
          /*                        */
          536870912
        );
        var OffscreenLane = (
          /*                   */
          1073741824
        );
        function getLabelForLane(lane) {
          {
            if (lane & SyncLane) {
              return "Sync";
            }
            if (lane & InputContinuousHydrationLane) {
              return "InputContinuousHydration";
            }
            if (lane & InputContinuousLane) {
              return "InputContinuous";
            }
            if (lane & DefaultHydrationLane) {
              return "DefaultHydration";
            }
            if (lane & DefaultLane) {
              return "Default";
            }
            if (lane & TransitionHydrationLane) {
              return "TransitionHydration";
            }
            if (lane & TransitionLanes) {
              return "Transition";
            }
            if (lane & RetryLanes) {
              return "Retry";
            }
            if (lane & SelectiveHydrationLane) {
              return "SelectiveHydration";
            }
            if (lane & IdleHydrationLane) {
              return "IdleHydration";
            }
            if (lane & IdleLane) {
              return "Idle";
            }
            if (lane & OffscreenLane) {
              return "Offscreen";
            }
          }
        }
        var NoTimestamp = -1;
        var nextTransitionLane = TransitionLane1;
        var nextRetryLane = RetryLane1;
        function getHighestPriorityLanes(lanes) {
          switch (getHighestPriorityLane(lanes)) {
            case SyncLane:
              return SyncLane;
            case InputContinuousHydrationLane:
              return InputContinuousHydrationLane;
            case InputContinuousLane:
              return InputContinuousLane;
            case DefaultHydrationLane:
              return DefaultHydrationLane;
            case DefaultLane:
              return DefaultLane;
            case TransitionHydrationLane:
              return TransitionHydrationLane;
            case TransitionLane1:
            case TransitionLane2:
            case TransitionLane3:
            case TransitionLane4:
            case TransitionLane5:
            case TransitionLane6:
            case TransitionLane7:
            case TransitionLane8:
            case TransitionLane9:
            case TransitionLane10:
            case TransitionLane11:
            case TransitionLane12:
            case TransitionLane13:
            case TransitionLane14:
            case TransitionLane15:
            case TransitionLane16:
              return lanes & TransitionLanes;
            case RetryLane1:
            case RetryLane2:
            case RetryLane3:
            case RetryLane4:
            case RetryLane5:
              return lanes & RetryLanes;
            case SelectiveHydrationLane:
              return SelectiveHydrationLane;
            case IdleHydrationLane:
              return IdleHydrationLane;
            case IdleLane:
              return IdleLane;
            case OffscreenLane:
              return OffscreenLane;
            default:
              {
                error("Should have found matching lanes. This is a bug in React.");
              }
              return lanes;
          }
        }
        function getNextLanes(root2, wipLanes) {
          var pendingLanes = root2.pendingLanes;
          if (pendingLanes === NoLanes) {
            return NoLanes;
          }
          var nextLanes = NoLanes;
          var suspendedLanes = root2.suspendedLanes;
          var pingedLanes = root2.pingedLanes;
          var nonIdlePendingLanes = pendingLanes & NonIdleLanes;
          if (nonIdlePendingLanes !== NoLanes) {
            var nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;
            if (nonIdleUnblockedLanes !== NoLanes) {
              nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);
            } else {
              var nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;
              if (nonIdlePingedLanes !== NoLanes) {
                nextLanes = getHighestPriorityLanes(nonIdlePingedLanes);
              }
            }
          } else {
            var unblockedLanes = pendingLanes & ~suspendedLanes;
            if (unblockedLanes !== NoLanes) {
              nextLanes = getHighestPriorityLanes(unblockedLanes);
            } else {
              if (pingedLanes !== NoLanes) {
                nextLanes = getHighestPriorityLanes(pingedLanes);
              }
            }
          }
          if (nextLanes === NoLanes) {
            return NoLanes;
          }
          if (wipLanes !== NoLanes && wipLanes !== nextLanes && // If we already suspended with a delay, then interrupting is fine. Don't
          // bother waiting until the root is complete.
          (wipLanes & suspendedLanes) === NoLanes) {
            var nextLane = getHighestPriorityLane(nextLanes);
            var wipLane = getHighestPriorityLane(wipLanes);
            if (
              // Tests whether the next lane is equal or lower priority than the wip
              // one. This works because the bits decrease in priority as you go left.
              nextLane >= wipLane || // Default priority updates should not interrupt transition updates. The
              // only difference between default updates and transition updates is that
              // default updates do not support refresh transitions.
              nextLane === DefaultLane && (wipLane & TransitionLanes) !== NoLanes
            ) {
              return wipLanes;
            }
          }
          if ((nextLanes & InputContinuousLane) !== NoLanes) {
            nextLanes |= pendingLanes & DefaultLane;
          }
          var entangledLanes = root2.entangledLanes;
          if (entangledLanes !== NoLanes) {
            var entanglements = root2.entanglements;
            var lanes = nextLanes & entangledLanes;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              nextLanes |= entanglements[index2];
              lanes &= ~lane;
            }
          }
          return nextLanes;
        }
        function getMostRecentEventTime(root2, lanes) {
          var eventTimes = root2.eventTimes;
          var mostRecentEventTime = NoTimestamp;
          while (lanes > 0) {
            var index2 = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index2;
            var eventTime = eventTimes[index2];
            if (eventTime > mostRecentEventTime) {
              mostRecentEventTime = eventTime;
            }
            lanes &= ~lane;
          }
          return mostRecentEventTime;
        }
        function computeExpirationTime(lane, currentTime) {
          switch (lane) {
            case SyncLane:
            case InputContinuousHydrationLane:
            case InputContinuousLane:
              return currentTime + 250;
            case DefaultHydrationLane:
            case DefaultLane:
            case TransitionHydrationLane:
            case TransitionLane1:
            case TransitionLane2:
            case TransitionLane3:
            case TransitionLane4:
            case TransitionLane5:
            case TransitionLane6:
            case TransitionLane7:
            case TransitionLane8:
            case TransitionLane9:
            case TransitionLane10:
            case TransitionLane11:
            case TransitionLane12:
            case TransitionLane13:
            case TransitionLane14:
            case TransitionLane15:
            case TransitionLane16:
              return currentTime + 5e3;
            case RetryLane1:
            case RetryLane2:
            case RetryLane3:
            case RetryLane4:
            case RetryLane5:
              return NoTimestamp;
            case SelectiveHydrationLane:
            case IdleHydrationLane:
            case IdleLane:
            case OffscreenLane:
              return NoTimestamp;
            default:
              {
                error("Should have found matching lanes. This is a bug in React.");
              }
              return NoTimestamp;
          }
        }
        function markStarvedLanesAsExpired(root2, currentTime) {
          var pendingLanes = root2.pendingLanes;
          var suspendedLanes = root2.suspendedLanes;
          var pingedLanes = root2.pingedLanes;
          var expirationTimes = root2.expirationTimes;
          var lanes = pendingLanes;
          while (lanes > 0) {
            var index2 = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index2;
            var expirationTime = expirationTimes[index2];
            if (expirationTime === NoTimestamp) {
              if ((lane & suspendedLanes) === NoLanes || (lane & pingedLanes) !== NoLanes) {
                expirationTimes[index2] = computeExpirationTime(lane, currentTime);
              }
            } else if (expirationTime <= currentTime) {
              root2.expiredLanes |= lane;
            }
            lanes &= ~lane;
          }
        }
        function getHighestPriorityPendingLanes(root2) {
          return getHighestPriorityLanes(root2.pendingLanes);
        }
        function getLanesToRetrySynchronouslyOnError(root2) {
          var everythingButOffscreen = root2.pendingLanes & ~OffscreenLane;
          if (everythingButOffscreen !== NoLanes) {
            return everythingButOffscreen;
          }
          if (everythingButOffscreen & OffscreenLane) {
            return OffscreenLane;
          }
          return NoLanes;
        }
        function includesSyncLane(lanes) {
          return (lanes & SyncLane) !== NoLanes;
        }
        function includesNonIdleWork(lanes) {
          return (lanes & NonIdleLanes) !== NoLanes;
        }
        function includesOnlyRetries(lanes) {
          return (lanes & RetryLanes) === lanes;
        }
        function includesOnlyNonUrgentLanes(lanes) {
          var UrgentLanes = SyncLane | InputContinuousLane | DefaultLane;
          return (lanes & UrgentLanes) === NoLanes;
        }
        function includesOnlyTransitions(lanes) {
          return (lanes & TransitionLanes) === lanes;
        }
        function includesBlockingLane(root2, lanes) {
          var SyncDefaultLanes = InputContinuousHydrationLane | InputContinuousLane | DefaultHydrationLane | DefaultLane;
          return (lanes & SyncDefaultLanes) !== NoLanes;
        }
        function includesExpiredLane(root2, lanes) {
          return (lanes & root2.expiredLanes) !== NoLanes;
        }
        function isTransitionLane(lane) {
          return (lane & TransitionLanes) !== NoLanes;
        }
        function claimNextTransitionLane() {
          var lane = nextTransitionLane;
          nextTransitionLane <<= 1;
          if ((nextTransitionLane & TransitionLanes) === NoLanes) {
            nextTransitionLane = TransitionLane1;
          }
          return lane;
        }
        function claimNextRetryLane() {
          var lane = nextRetryLane;
          nextRetryLane <<= 1;
          if ((nextRetryLane & RetryLanes) === NoLanes) {
            nextRetryLane = RetryLane1;
          }
          return lane;
        }
        function getHighestPriorityLane(lanes) {
          return lanes & -lanes;
        }
        function pickArbitraryLane(lanes) {
          return getHighestPriorityLane(lanes);
        }
        function pickArbitraryLaneIndex(lanes) {
          return 31 - clz32(lanes);
        }
        function laneToIndex(lane) {
          return pickArbitraryLaneIndex(lane);
        }
        function includesSomeLane(a, b) {
          return (a & b) !== NoLanes;
        }
        function isSubsetOfLanes(set2, subset) {
          return (set2 & subset) === subset;
        }
        function mergeLanes(a, b) {
          return a | b;
        }
        function removeLanes(set2, subset) {
          return set2 & ~subset;
        }
        function intersectLanes(a, b) {
          return a & b;
        }
        function laneToLanes(lane) {
          return lane;
        }
        function higherPriorityLane(a, b) {
          return a !== NoLane && a < b ? a : b;
        }
        function createLaneMap(initial) {
          var laneMap = [];
          for (var i = 0; i < TotalLanes; i++) {
            laneMap.push(initial);
          }
          return laneMap;
        }
        function markRootUpdated(root2, updateLane, eventTime) {
          root2.pendingLanes |= updateLane;
          if (updateLane !== IdleLane) {
            root2.suspendedLanes = NoLanes;
            root2.pingedLanes = NoLanes;
          }
          var eventTimes = root2.eventTimes;
          var index2 = laneToIndex(updateLane);
          eventTimes[index2] = eventTime;
        }
        function markRootSuspended(root2, suspendedLanes) {
          root2.suspendedLanes |= suspendedLanes;
          root2.pingedLanes &= ~suspendedLanes;
          var expirationTimes = root2.expirationTimes;
          var lanes = suspendedLanes;
          while (lanes > 0) {
            var index2 = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index2;
            expirationTimes[index2] = NoTimestamp;
            lanes &= ~lane;
          }
        }
        function markRootPinged(root2, pingedLanes, eventTime) {
          root2.pingedLanes |= root2.suspendedLanes & pingedLanes;
        }
        function markRootFinished(root2, remainingLanes) {
          var noLongerPendingLanes = root2.pendingLanes & ~remainingLanes;
          root2.pendingLanes = remainingLanes;
          root2.suspendedLanes = NoLanes;
          root2.pingedLanes = NoLanes;
          root2.expiredLanes &= remainingLanes;
          root2.mutableReadLanes &= remainingLanes;
          root2.entangledLanes &= remainingLanes;
          var entanglements = root2.entanglements;
          var eventTimes = root2.eventTimes;
          var expirationTimes = root2.expirationTimes;
          var lanes = noLongerPendingLanes;
          while (lanes > 0) {
            var index2 = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index2;
            entanglements[index2] = NoLanes;
            eventTimes[index2] = NoTimestamp;
            expirationTimes[index2] = NoTimestamp;
            lanes &= ~lane;
          }
        }
        function markRootEntangled(root2, entangledLanes) {
          var rootEntangledLanes = root2.entangledLanes |= entangledLanes;
          var entanglements = root2.entanglements;
          var lanes = rootEntangledLanes;
          while (lanes) {
            var index2 = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index2;
            if (
              // Is this one of the newly entangled lanes?
              lane & entangledLanes | // Is this lane transitively entangled with the newly entangled lanes?
              entanglements[index2] & entangledLanes
            ) {
              entanglements[index2] |= entangledLanes;
            }
            lanes &= ~lane;
          }
        }
        function getBumpedLaneForHydration(root2, renderLanes2) {
          var renderLane = getHighestPriorityLane(renderLanes2);
          var lane;
          switch (renderLane) {
            case InputContinuousLane:
              lane = InputContinuousHydrationLane;
              break;
            case DefaultLane:
              lane = DefaultHydrationLane;
              break;
            case TransitionLane1:
            case TransitionLane2:
            case TransitionLane3:
            case TransitionLane4:
            case TransitionLane5:
            case TransitionLane6:
            case TransitionLane7:
            case TransitionLane8:
            case TransitionLane9:
            case TransitionLane10:
            case TransitionLane11:
            case TransitionLane12:
            case TransitionLane13:
            case TransitionLane14:
            case TransitionLane15:
            case TransitionLane16:
            case RetryLane1:
            case RetryLane2:
            case RetryLane3:
            case RetryLane4:
            case RetryLane5:
              lane = TransitionHydrationLane;
              break;
            case IdleLane:
              lane = IdleHydrationLane;
              break;
            default:
              lane = NoLane;
              break;
          }
          if ((lane & (root2.suspendedLanes | renderLanes2)) !== NoLane) {
            return NoLane;
          }
          return lane;
        }
        function addFiberToLanesMap(root2, fiber, lanes) {
          if (!isDevToolsPresent) {
            return;
          }
          var pendingUpdatersLaneMap = root2.pendingUpdatersLaneMap;
          while (lanes > 0) {
            var index2 = laneToIndex(lanes);
            var lane = 1 << index2;
            var updaters = pendingUpdatersLaneMap[index2];
            updaters.add(fiber);
            lanes &= ~lane;
          }
        }
        function movePendingFibersToMemoized(root2, lanes) {
          if (!isDevToolsPresent) {
            return;
          }
          var pendingUpdatersLaneMap = root2.pendingUpdatersLaneMap;
          var memoizedUpdaters = root2.memoizedUpdaters;
          while (lanes > 0) {
            var index2 = laneToIndex(lanes);
            var lane = 1 << index2;
            var updaters = pendingUpdatersLaneMap[index2];
            if (updaters.size > 0) {
              updaters.forEach(function(fiber) {
                var alternate = fiber.alternate;
                if (alternate === null || !memoizedUpdaters.has(alternate)) {
                  memoizedUpdaters.add(fiber);
                }
              });
              updaters.clear();
            }
            lanes &= ~lane;
          }
        }
        function getTransitionsForLanes(root2, lanes) {
          {
            return null;
          }
        }
        var DiscreteEventPriority = SyncLane;
        var ContinuousEventPriority = InputContinuousLane;
        var DefaultEventPriority = DefaultLane;
        var IdleEventPriority = IdleLane;
        var currentUpdatePriority = NoLane;
        function getCurrentUpdatePriority() {
          return currentUpdatePriority;
        }
        function setCurrentUpdatePriority(newPriority) {
          currentUpdatePriority = newPriority;
        }
        function runWithPriority(priority, fn) {
          var previousPriority = currentUpdatePriority;
          try {
            currentUpdatePriority = priority;
            return fn();
          } finally {
            currentUpdatePriority = previousPriority;
          }
        }
        function higherEventPriority(a, b) {
          return a !== 0 && a < b ? a : b;
        }
        function lowerEventPriority(a, b) {
          return a === 0 || a > b ? a : b;
        }
        function isHigherEventPriority(a, b) {
          return a !== 0 && a < b;
        }
        function lanesToEventPriority(lanes) {
          var lane = getHighestPriorityLane(lanes);
          if (!isHigherEventPriority(DiscreteEventPriority, lane)) {
            return DiscreteEventPriority;
          }
          if (!isHigherEventPriority(ContinuousEventPriority, lane)) {
            return ContinuousEventPriority;
          }
          if (includesNonIdleWork(lane)) {
            return DefaultEventPriority;
          }
          return IdleEventPriority;
        }
        function isRootDehydrated(root2) {
          var currentState = root2.current.memoizedState;
          return currentState.isDehydrated;
        }
        var _attemptSynchronousHydration;
        function setAttemptSynchronousHydration(fn) {
          _attemptSynchronousHydration = fn;
        }
        function attemptSynchronousHydration(fiber) {
          _attemptSynchronousHydration(fiber);
        }
        var attemptContinuousHydration;
        function setAttemptContinuousHydration(fn) {
          attemptContinuousHydration = fn;
        }
        var attemptHydrationAtCurrentPriority;
        function setAttemptHydrationAtCurrentPriority(fn) {
          attemptHydrationAtCurrentPriority = fn;
        }
        var getCurrentUpdatePriority$1;
        function setGetCurrentUpdatePriority(fn) {
          getCurrentUpdatePriority$1 = fn;
        }
        var attemptHydrationAtPriority;
        function setAttemptHydrationAtPriority(fn) {
          attemptHydrationAtPriority = fn;
        }
        var hasScheduledReplayAttempt = false;
        var queuedDiscreteEvents = [];
        var queuedFocus = null;
        var queuedDrag = null;
        var queuedMouse = null;
        var queuedPointers = /* @__PURE__ */ new Map();
        var queuedPointerCaptures = /* @__PURE__ */ new Map();
        var queuedExplicitHydrationTargets = [];
        var discreteReplayableEvents = [
          "mousedown",
          "mouseup",
          "touchcancel",
          "touchend",
          "touchstart",
          "auxclick",
          "dblclick",
          "pointercancel",
          "pointerdown",
          "pointerup",
          "dragend",
          "dragstart",
          "drop",
          "compositionend",
          "compositionstart",
          "keydown",
          "keypress",
          "keyup",
          "input",
          "textInput",
          // Intentionally camelCase
          "copy",
          "cut",
          "paste",
          "click",
          "change",
          "contextmenu",
          "reset",
          "submit"
        ];
        function isDiscreteEventThatRequiresHydration(eventType) {
          return discreteReplayableEvents.indexOf(eventType) > -1;
        }
        function createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
          return {
            blockedOn,
            domEventName,
            eventSystemFlags,
            nativeEvent,
            targetContainers: [targetContainer]
          };
        }
        function clearIfContinuousEvent(domEventName, nativeEvent) {
          switch (domEventName) {
            case "focusin":
            case "focusout":
              queuedFocus = null;
              break;
            case "dragenter":
            case "dragleave":
              queuedDrag = null;
              break;
            case "mouseover":
            case "mouseout":
              queuedMouse = null;
              break;
            case "pointerover":
            case "pointerout": {
              var pointerId = nativeEvent.pointerId;
              queuedPointers.delete(pointerId);
              break;
            }
            case "gotpointercapture":
            case "lostpointercapture": {
              var _pointerId = nativeEvent.pointerId;
              queuedPointerCaptures.delete(_pointerId);
              break;
            }
          }
        }
        function accumulateOrCreateContinuousQueuedReplayableEvent(existingQueuedEvent, blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
          if (existingQueuedEvent === null || existingQueuedEvent.nativeEvent !== nativeEvent) {
            var queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
            if (blockedOn !== null) {
              var _fiber2 = getInstanceFromNode(blockedOn);
              if (_fiber2 !== null) {
                attemptContinuousHydration(_fiber2);
              }
            }
            return queuedEvent;
          }
          existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
          var targetContainers = existingQueuedEvent.targetContainers;
          if (targetContainer !== null && targetContainers.indexOf(targetContainer) === -1) {
            targetContainers.push(targetContainer);
          }
          return existingQueuedEvent;
        }
        function queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
          switch (domEventName) {
            case "focusin": {
              var focusEvent = nativeEvent;
              queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(queuedFocus, blockedOn, domEventName, eventSystemFlags, targetContainer, focusEvent);
              return true;
            }
            case "dragenter": {
              var dragEvent = nativeEvent;
              queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(queuedDrag, blockedOn, domEventName, eventSystemFlags, targetContainer, dragEvent);
              return true;
            }
            case "mouseover": {
              var mouseEvent = nativeEvent;
              queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(queuedMouse, blockedOn, domEventName, eventSystemFlags, targetContainer, mouseEvent);
              return true;
            }
            case "pointerover": {
              var pointerEvent = nativeEvent;
              var pointerId = pointerEvent.pointerId;
              queuedPointers.set(pointerId, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointers.get(pointerId) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, pointerEvent));
              return true;
            }
            case "gotpointercapture": {
              var _pointerEvent = nativeEvent;
              var _pointerId2 = _pointerEvent.pointerId;
              queuedPointerCaptures.set(_pointerId2, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointerCaptures.get(_pointerId2) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, _pointerEvent));
              return true;
            }
          }
          return false;
        }
        function attemptExplicitHydrationTarget(queuedTarget) {
          var targetInst = getClosestInstanceFromNode(queuedTarget.target);
          if (targetInst !== null) {
            var nearestMounted = getNearestMountedFiber(targetInst);
            if (nearestMounted !== null) {
              var tag = nearestMounted.tag;
              if (tag === SuspenseComponent) {
                var instance = getSuspenseInstanceFromFiber(nearestMounted);
                if (instance !== null) {
                  queuedTarget.blockedOn = instance;
                  attemptHydrationAtPriority(queuedTarget.priority, function() {
                    attemptHydrationAtCurrentPriority(nearestMounted);
                  });
                  return;
                }
              } else if (tag === HostRoot) {
                var root2 = nearestMounted.stateNode;
                if (isRootDehydrated(root2)) {
                  queuedTarget.blockedOn = getContainerFromFiber(nearestMounted);
                  return;
                }
              }
            }
          }
          queuedTarget.blockedOn = null;
        }
        function queueExplicitHydrationTarget(target) {
          var updatePriority = getCurrentUpdatePriority$1();
          var queuedTarget = {
            blockedOn: null,
            target,
            priority: updatePriority
          };
          var i = 0;
          for (; i < queuedExplicitHydrationTargets.length; i++) {
            if (!isHigherEventPriority(updatePriority, queuedExplicitHydrationTargets[i].priority)) {
              break;
            }
          }
          queuedExplicitHydrationTargets.splice(i, 0, queuedTarget);
          if (i === 0) {
            attemptExplicitHydrationTarget(queuedTarget);
          }
        }
        function attemptReplayContinuousQueuedEvent(queuedEvent) {
          if (queuedEvent.blockedOn !== null) {
            return false;
          }
          var targetContainers = queuedEvent.targetContainers;
          while (targetContainers.length > 0) {
            var targetContainer = targetContainers[0];
            var nextBlockedOn = findInstanceBlockingEvent(queuedEvent.domEventName, queuedEvent.eventSystemFlags, targetContainer, queuedEvent.nativeEvent);
            if (nextBlockedOn === null) {
              {
                var nativeEvent = queuedEvent.nativeEvent;
                var nativeEventClone = new nativeEvent.constructor(nativeEvent.type, nativeEvent);
                setReplayingEvent(nativeEventClone);
                nativeEvent.target.dispatchEvent(nativeEventClone);
                resetReplayingEvent();
              }
            } else {
              var _fiber3 = getInstanceFromNode(nextBlockedOn);
              if (_fiber3 !== null) {
                attemptContinuousHydration(_fiber3);
              }
              queuedEvent.blockedOn = nextBlockedOn;
              return false;
            }
            targetContainers.shift();
          }
          return true;
        }
        function attemptReplayContinuousQueuedEventInMap(queuedEvent, key, map) {
          if (attemptReplayContinuousQueuedEvent(queuedEvent)) {
            map.delete(key);
          }
        }
        function replayUnblockedEvents() {
          hasScheduledReplayAttempt = false;
          if (queuedFocus !== null && attemptReplayContinuousQueuedEvent(queuedFocus)) {
            queuedFocus = null;
          }
          if (queuedDrag !== null && attemptReplayContinuousQueuedEvent(queuedDrag)) {
            queuedDrag = null;
          }
          if (queuedMouse !== null && attemptReplayContinuousQueuedEvent(queuedMouse)) {
            queuedMouse = null;
          }
          queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);
          queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);
        }
        function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
          if (queuedEvent.blockedOn === unblocked) {
            queuedEvent.blockedOn = null;
            if (!hasScheduledReplayAttempt) {
              hasScheduledReplayAttempt = true;
              Scheduler.unstable_scheduleCallback(Scheduler.unstable_NormalPriority, replayUnblockedEvents);
            }
          }
        }
        function retryIfBlockedOn(unblocked) {
          if (queuedDiscreteEvents.length > 0) {
            scheduleCallbackIfUnblocked(queuedDiscreteEvents[0], unblocked);
            for (var i = 1; i < queuedDiscreteEvents.length; i++) {
              var queuedEvent = queuedDiscreteEvents[i];
              if (queuedEvent.blockedOn === unblocked) {
                queuedEvent.blockedOn = null;
              }
            }
          }
          if (queuedFocus !== null) {
            scheduleCallbackIfUnblocked(queuedFocus, unblocked);
          }
          if (queuedDrag !== null) {
            scheduleCallbackIfUnblocked(queuedDrag, unblocked);
          }
          if (queuedMouse !== null) {
            scheduleCallbackIfUnblocked(queuedMouse, unblocked);
          }
          var unblock = function(queuedEvent2) {
            return scheduleCallbackIfUnblocked(queuedEvent2, unblocked);
          };
          queuedPointers.forEach(unblock);
          queuedPointerCaptures.forEach(unblock);
          for (var _i = 0; _i < queuedExplicitHydrationTargets.length; _i++) {
            var queuedTarget = queuedExplicitHydrationTargets[_i];
            if (queuedTarget.blockedOn === unblocked) {
              queuedTarget.blockedOn = null;
            }
          }
          while (queuedExplicitHydrationTargets.length > 0) {
            var nextExplicitTarget = queuedExplicitHydrationTargets[0];
            if (nextExplicitTarget.blockedOn !== null) {
              break;
            } else {
              attemptExplicitHydrationTarget(nextExplicitTarget);
              if (nextExplicitTarget.blockedOn === null) {
                queuedExplicitHydrationTargets.shift();
              }
            }
          }
        }
        var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig;
        var _enabled = true;
        function setEnabled(enabled) {
          _enabled = !!enabled;
        }
        function isEnabled() {
          return _enabled;
        }
        function createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags) {
          var eventPriority = getEventPriority(domEventName);
          var listenerWrapper;
          switch (eventPriority) {
            case DiscreteEventPriority:
              listenerWrapper = dispatchDiscreteEvent;
              break;
            case ContinuousEventPriority:
              listenerWrapper = dispatchContinuousEvent;
              break;
            case DefaultEventPriority:
            default:
              listenerWrapper = dispatchEvent;
              break;
          }
          return listenerWrapper.bind(null, domEventName, eventSystemFlags, targetContainer);
        }
        function dispatchDiscreteEvent(domEventName, eventSystemFlags, container, nativeEvent) {
          var previousPriority = getCurrentUpdatePriority();
          var prevTransition = ReactCurrentBatchConfig.transition;
          ReactCurrentBatchConfig.transition = null;
          try {
            setCurrentUpdatePriority(DiscreteEventPriority);
            dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
          } finally {
            setCurrentUpdatePriority(previousPriority);
            ReactCurrentBatchConfig.transition = prevTransition;
          }
        }
        function dispatchContinuousEvent(domEventName, eventSystemFlags, container, nativeEvent) {
          var previousPriority = getCurrentUpdatePriority();
          var prevTransition = ReactCurrentBatchConfig.transition;
          ReactCurrentBatchConfig.transition = null;
          try {
            setCurrentUpdatePriority(ContinuousEventPriority);
            dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
          } finally {
            setCurrentUpdatePriority(previousPriority);
            ReactCurrentBatchConfig.transition = prevTransition;
          }
        }
        function dispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
          if (!_enabled) {
            return;
          }
          {
            dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent);
          }
        }
        function dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
          var blockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
          if (blockedOn === null) {
            dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
            clearIfContinuousEvent(domEventName, nativeEvent);
            return;
          }
          if (queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent)) {
            nativeEvent.stopPropagation();
            return;
          }
          clearIfContinuousEvent(domEventName, nativeEvent);
          if (eventSystemFlags & IS_CAPTURE_PHASE && isDiscreteEventThatRequiresHydration(domEventName)) {
            while (blockedOn !== null) {
              var fiber = getInstanceFromNode(blockedOn);
              if (fiber !== null) {
                attemptSynchronousHydration(fiber);
              }
              var nextBlockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
              if (nextBlockedOn === null) {
                dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
              }
              if (nextBlockedOn === blockedOn) {
                break;
              }
              blockedOn = nextBlockedOn;
            }
            if (blockedOn !== null) {
              nativeEvent.stopPropagation();
            }
            return;
          }
          dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, null, targetContainer);
        }
        var return_targetInst = null;
        function findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
          return_targetInst = null;
          var nativeEventTarget = getEventTarget(nativeEvent);
          var targetInst = getClosestInstanceFromNode(nativeEventTarget);
          if (targetInst !== null) {
            var nearestMounted = getNearestMountedFiber(targetInst);
            if (nearestMounted === null) {
              targetInst = null;
            } else {
              var tag = nearestMounted.tag;
              if (tag === SuspenseComponent) {
                var instance = getSuspenseInstanceFromFiber(nearestMounted);
                if (instance !== null) {
                  return instance;
                }
                targetInst = null;
              } else if (tag === HostRoot) {
                var root2 = nearestMounted.stateNode;
                if (isRootDehydrated(root2)) {
                  return getContainerFromFiber(nearestMounted);
                }
                targetInst = null;
              } else if (nearestMounted !== targetInst) {
                targetInst = null;
              }
            }
          }
          return_targetInst = targetInst;
          return null;
        }
        function getEventPriority(domEventName) {
          switch (domEventName) {
            case "cancel":
            case "click":
            case "close":
            case "contextmenu":
            case "copy":
            case "cut":
            case "auxclick":
            case "dblclick":
            case "dragend":
            case "dragstart":
            case "drop":
            case "focusin":
            case "focusout":
            case "input":
            case "invalid":
            case "keydown":
            case "keypress":
            case "keyup":
            case "mousedown":
            case "mouseup":
            case "paste":
            case "pause":
            case "play":
            case "pointercancel":
            case "pointerdown":
            case "pointerup":
            case "ratechange":
            case "reset":
            case "resize":
            case "seeked":
            case "submit":
            case "touchcancel":
            case "touchend":
            case "touchstart":
            case "volumechange":
            case "change":
            case "selectionchange":
            case "textInput":
            case "compositionstart":
            case "compositionend":
            case "compositionupdate":
            case "beforeblur":
            case "afterblur":
            case "beforeinput":
            case "blur":
            case "fullscreenchange":
            case "focus":
            case "hashchange":
            case "popstate":
            case "select":
            case "selectstart":
              return DiscreteEventPriority;
            case "drag":
            case "dragenter":
            case "dragexit":
            case "dragleave":
            case "dragover":
            case "mousemove":
            case "mouseout":
            case "mouseover":
            case "pointermove":
            case "pointerout":
            case "pointerover":
            case "scroll":
            case "toggle":
            case "touchmove":
            case "wheel":
            case "mouseenter":
            case "mouseleave":
            case "pointerenter":
            case "pointerleave":
              return ContinuousEventPriority;
            case "message": {
              var schedulerPriority = getCurrentPriorityLevel();
              switch (schedulerPriority) {
                case ImmediatePriority:
                  return DiscreteEventPriority;
                case UserBlockingPriority:
                  return ContinuousEventPriority;
                case NormalPriority:
                case LowPriority:
                  return DefaultEventPriority;
                case IdlePriority:
                  return IdleEventPriority;
                default:
                  return DefaultEventPriority;
              }
            }
            default:
              return DefaultEventPriority;
          }
        }
        function addEventBubbleListener(target, eventType, listener) {
          target.addEventListener(eventType, listener, false);
          return listener;
        }
        function addEventCaptureListener(target, eventType, listener) {
          target.addEventListener(eventType, listener, true);
          return listener;
        }
        function addEventCaptureListenerWithPassiveFlag(target, eventType, listener, passive) {
          target.addEventListener(eventType, listener, {
            capture: true,
            passive
          });
          return listener;
        }
        function addEventBubbleListenerWithPassiveFlag(target, eventType, listener, passive) {
          target.addEventListener(eventType, listener, {
            passive
          });
          return listener;
        }
        var root = null;
        var startText = null;
        var fallbackText = null;
        function initialize(nativeEventTarget) {
          root = nativeEventTarget;
          startText = getText();
          return true;
        }
        function reset() {
          root = null;
          startText = null;
          fallbackText = null;
        }
        function getData() {
          if (fallbackText) {
            return fallbackText;
          }
          var start;
          var startValue = startText;
          var startLength = startValue.length;
          var end;
          var endValue = getText();
          var endLength = endValue.length;
          for (start = 0; start < startLength; start++) {
            if (startValue[start] !== endValue[start]) {
              break;
            }
          }
          var minEnd = startLength - start;
          for (end = 1; end <= minEnd; end++) {
            if (startValue[startLength - end] !== endValue[endLength - end]) {
              break;
            }
          }
          var sliceTail = end > 1 ? 1 - end : void 0;
          fallbackText = endValue.slice(start, sliceTail);
          return fallbackText;
        }
        function getText() {
          if ("value" in root) {
            return root.value;
          }
          return root.textContent;
        }
        function getEventCharCode(nativeEvent) {
          var charCode;
          var keyCode = nativeEvent.keyCode;
          if ("charCode" in nativeEvent) {
            charCode = nativeEvent.charCode;
            if (charCode === 0 && keyCode === 13) {
              charCode = 13;
            }
          } else {
            charCode = keyCode;
          }
          if (charCode === 10) {
            charCode = 13;
          }
          if (charCode >= 32 || charCode === 13) {
            return charCode;
          }
          return 0;
        }
        function functionThatReturnsTrue() {
          return true;
        }
        function functionThatReturnsFalse() {
          return false;
        }
        function createSyntheticEvent(Interface) {
          function SyntheticBaseEvent(reactName, reactEventType, targetInst, nativeEvent, nativeEventTarget) {
            this.Dp = reactName;
            this.ey = targetInst;
            this.type = reactEventType;
            this.nativeEvent = nativeEvent;
            this.target = nativeEventTarget;
            this.currentTarget = null;
            for (var _propName in Interface) {
              if (!Interface.hasOwnProperty(_propName)) {
                continue;
              }
              var normalize = Interface[_propName];
              if (normalize) {
                this[_propName] = normalize(nativeEvent);
              } else {
                this[_propName] = nativeEvent[_propName];
              }
            }
            var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
            if (defaultPrevented) {
              this.isDefaultPrevented = functionThatReturnsTrue;
            } else {
              this.isDefaultPrevented = functionThatReturnsFalse;
            }
            this.isPropagationStopped = functionThatReturnsFalse;
            return this;
          }
          assign(SyntheticBaseEvent.prototype, {
            preventDefault: function() {
              this.defaultPrevented = true;
              var event = this.nativeEvent;
              if (!event) {
                return;
              }
              if (event.preventDefault) {
                event.preventDefault();
              } else if (typeof event.returnValue !== "unknown") {
                event.returnValue = false;
              }
              this.isDefaultPrevented = functionThatReturnsTrue;
            },
            stopPropagation: function() {
              var event = this.nativeEvent;
              if (!event) {
                return;
              }
              if (event.stopPropagation) {
                event.stopPropagation();
              } else if (typeof event.cancelBubble !== "unknown") {
                event.cancelBubble = true;
              }
              this.isPropagationStopped = functionThatReturnsTrue;
            },
            /**
             * We release all dispatched `SyntheticEvent`s after each event loop, adding
             * them back into the pool. This allows a way to hold onto a reference that
             * won't be added back into the pool.
             */
            persist: function() {
            },
            /**
             * Checks if this event should be released back into the pool.
             *
             * @return {boolean} True if this should not be released, false otherwise.
             */
            isPersistent: functionThatReturnsTrue
          });
          return SyntheticBaseEvent;
        }
        var EventInterface = {
          eventPhase: 0,
          bubbles: 0,
          cancelable: 0,
          timeStamp: function(event) {
            return event.timeStamp || Date.now();
          },
          defaultPrevented: 0,
          isTrusted: 0
        };
        var SyntheticEvent = createSyntheticEvent(EventInterface);
        var UIEventInterface = assign({}, EventInterface, {
          view: 0,
          detail: 0
        });
        var SyntheticUIEvent = createSyntheticEvent(UIEventInterface);
        var lastMovementX;
        var lastMovementY;
        var lastMouseEvent;
        function updateMouseMovementPolyfillState(event) {
          if (event !== lastMouseEvent) {
            if (lastMouseEvent && event.type === "mousemove") {
              lastMovementX = event.screenX - lastMouseEvent.screenX;
              lastMovementY = event.screenY - lastMouseEvent.screenY;
            } else {
              lastMovementX = 0;
              lastMovementY = 0;
            }
            lastMouseEvent = event;
          }
        }
        var MouseEventInterface = assign({}, UIEventInterface, {
          screenX: 0,
          screenY: 0,
          clientX: 0,
          clientY: 0,
          pageX: 0,
          pageY: 0,
          ctrlKey: 0,
          shiftKey: 0,
          altKey: 0,
          metaKey: 0,
          getModifierState: getEventModifierState,
          button: 0,
          buttons: 0,
          relatedTarget: function(event) {
            if (event.relatedTarget === void 0)
              return event.fromElement === event.srcElement ? event.toElement : event.fromElement;
            return event.relatedTarget;
          },
          movementX: function(event) {
            if ("movementX" in event) {
              return event.movementX;
            }
            updateMouseMovementPolyfillState(event);
            return lastMovementX;
          },
          movementY: function(event) {
            if ("movementY" in event) {
              return event.movementY;
            }
            return lastMovementY;
          }
        });
        var SyntheticMouseEvent = createSyntheticEvent(MouseEventInterface);
        var DragEventInterface = assign({}, MouseEventInterface, {
          dataTransfer: 0
        });
        var SyntheticDragEvent = createSyntheticEvent(DragEventInterface);
        var FocusEventInterface = assign({}, UIEventInterface, {
          relatedTarget: 0
        });
        var SyntheticFocusEvent = createSyntheticEvent(FocusEventInterface);
        var AnimationEventInterface = assign({}, EventInterface, {
          animationName: 0,
          elapsedTime: 0,
          pseudoElement: 0
        });
        var SyntheticAnimationEvent = createSyntheticEvent(AnimationEventInterface);
        var ClipboardEventInterface = assign({}, EventInterface, {
          clipboardData: function(event) {
            return "clipboardData" in event ? event.clipboardData : window.clipboardData;
          }
        });
        var SyntheticClipboardEvent = createSyntheticEvent(ClipboardEventInterface);
        var CompositionEventInterface = assign({}, EventInterface, {
          data: 0
        });
        var SyntheticCompositionEvent = createSyntheticEvent(CompositionEventInterface);
        var SyntheticInputEvent = SyntheticCompositionEvent;
        var normalizeKey = {
          Esc: "Escape",
          Spacebar: " ",
          Left: "ArrowLeft",
          Up: "ArrowUp",
          Right: "ArrowRight",
          Down: "ArrowDown",
          Del: "Delete",
          Win: "OS",
          Menu: "ContextMenu",
          Apps: "ContextMenu",
          Scroll: "ScrollLock",
          MozPrintableKey: "Unidentified"
        };
        var translateToKey = {
          "8": "Backspace",
          "9": "Tab",
          "12": "Clear",
          "13": "Enter",
          "16": "Shift",
          "17": "Control",
          "18": "Alt",
          "19": "Pause",
          "20": "CapsLock",
          "27": "Escape",
          "32": " ",
          "33": "PageUp",
          "34": "PageDown",
          "35": "End",
          "36": "Home",
          "37": "ArrowLeft",
          "38": "ArrowUp",
          "39": "ArrowRight",
          "40": "ArrowDown",
          "45": "Insert",
          "46": "Delete",
          "112": "F1",
          "113": "F2",
          "114": "F3",
          "115": "F4",
          "116": "F5",
          "117": "F6",
          "118": "F7",
          "119": "F8",
          "120": "F9",
          "121": "F10",
          "122": "F11",
          "123": "F12",
          "144": "NumLock",
          "145": "ScrollLock",
          "224": "Meta"
        };
        function getEventKey(nativeEvent) {
          if (nativeEvent.key) {
            var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
            if (key !== "Unidentified") {
              return key;
            }
          }
          if (nativeEvent.type === "keypress") {
            var charCode = getEventCharCode(nativeEvent);
            return charCode === 13 ? "Enter" : String.fromCharCode(charCode);
          }
          if (nativeEvent.type === "keydown" || nativeEvent.type === "keyup") {
            return translateToKey[nativeEvent.keyCode] || "Unidentified";
          }
          return "";
        }
        var modifierKeyToProp = {
          Alt: "altKey",
          Control: "ctrlKey",
          Meta: "metaKey",
          Shift: "shiftKey"
        };
        function modifierStateGetter(keyArg) {
          var syntheticEvent = this;
          var nativeEvent = syntheticEvent.nativeEvent;
          if (nativeEvent.getModifierState) {
            return nativeEvent.getModifierState(keyArg);
          }
          var keyProp = modifierKeyToProp[keyArg];
          return keyProp ? !!nativeEvent[keyProp] : false;
        }
        function getEventModifierState(nativeEvent) {
          return modifierStateGetter;
        }
        var KeyboardEventInterface = assign({}, UIEventInterface, {
          key: getEventKey,
          code: 0,
          location: 0,
          ctrlKey: 0,
          shiftKey: 0,
          altKey: 0,
          metaKey: 0,
          repeat: 0,
          locale: 0,
          getModifierState: getEventModifierState,
          // Legacy Interface
          charCode: function(event) {
            if (event.type === "keypress") {
              return getEventCharCode(event);
            }
            return 0;
          },
          keyCode: function(event) {
            if (event.type === "keydown" || event.type === "keyup") {
              return event.keyCode;
            }
            return 0;
          },
          which: function(event) {
            if (event.type === "keypress") {
              return getEventCharCode(event);
            }
            if (event.type === "keydown" || event.type === "keyup") {
              return event.keyCode;
            }
            return 0;
          }
        });
        var SyntheticKeyboardEvent = createSyntheticEvent(KeyboardEventInterface);
        var PointerEventInterface = assign({}, MouseEventInterface, {
          pointerId: 0,
          width: 0,
          height: 0,
          pressure: 0,
          tangentialPressure: 0,
          tiltX: 0,
          tiltY: 0,
          twist: 0,
          pointerType: 0,
          isPrimary: 0
        });
        var SyntheticPointerEvent = createSyntheticEvent(PointerEventInterface);
        var TouchEventInterface = assign({}, UIEventInterface, {
          touches: 0,
          targetTouches: 0,
          changedTouches: 0,
          altKey: 0,
          metaKey: 0,
          ctrlKey: 0,
          shiftKey: 0,
          getModifierState: getEventModifierState
        });
        var SyntheticTouchEvent = createSyntheticEvent(TouchEventInterface);
        var TransitionEventInterface = assign({}, EventInterface, {
          propertyName: 0,
          elapsedTime: 0,
          pseudoElement: 0
        });
        var SyntheticTransitionEvent = createSyntheticEvent(TransitionEventInterface);
        var WheelEventInterface = assign({}, MouseEventInterface, {
          deltaX: function(event) {
            return "deltaX" in event ? event.deltaX : (
              // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
              "wheelDeltaX" in event ? -event.wheelDeltaX : 0
            );
          },
          deltaY: function(event) {
            return "deltaY" in event ? event.deltaY : (
              // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
              "wheelDeltaY" in event ? -event.wheelDeltaY : (
                // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
                "wheelDelta" in event ? -event.wheelDelta : 0
              )
            );
          },
          deltaZ: 0,
          // Browsers without "deltaMode" is reporting in raw wheel delta where one
          // notch on the scroll is always +/- 120, roughly equivalent to pixels.
          // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
          // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
          deltaMode: 0
        });
        var SyntheticWheelEvent = createSyntheticEvent(WheelEventInterface);
        var END_KEYCODES = [9, 13, 27, 32];
        var START_KEYCODE = 229;
        var canUseCompositionEvent = canUseDOM && "CompositionEvent" in window;
        var documentMode = null;
        if (canUseDOM && "documentMode" in document) {
          documentMode = document.documentMode;
        }
        var canUseTextInputEvent = canUseDOM && "TextEvent" in window && !documentMode;
        var useFallbackCompositionData = canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);
        var SPACEBAR_CODE = 32;
        var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);
        function registerEvents() {
          registerTwoPhaseEvent("onBeforeInput", ["compositionend", "keypress", "textInput", "paste"]);
          registerTwoPhaseEvent("onCompositionEnd", ["compositionend", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
          registerTwoPhaseEvent("onCompositionStart", ["compositionstart", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
          registerTwoPhaseEvent("onCompositionUpdate", ["compositionupdate", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
        }
        var hasSpaceKeypress = false;
        function isKeypressCommand(nativeEvent) {
          return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) && // ctrlKey && altKey is equivalent to AltGr, and is not a command.
          !(nativeEvent.ctrlKey && nativeEvent.altKey);
        }
        function getCompositionEventType(domEventName) {
          switch (domEventName) {
            case "compositionstart":
              return "onCompositionStart";
            case "compositionend":
              return "onCompositionEnd";
            case "compositionupdate":
              return "onCompositionUpdate";
          }
        }
        function isFallbackCompositionStart(domEventName, nativeEvent) {
          return domEventName === "keydown" && nativeEvent.keyCode === START_KEYCODE;
        }
        function isFallbackCompositionEnd(domEventName, nativeEvent) {
          switch (domEventName) {
            case "keyup":
              return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
            case "keydown":
              return nativeEvent.keyCode !== START_KEYCODE;
            case "keypress":
            case "mousedown":
            case "focusout":
              return true;
            default:
              return false;
          }
        }
        function getDataFromCustomEvent(nativeEvent) {
          var detail = nativeEvent.detail;
          if (typeof detail === "object" && "data" in detail) {
            return detail.data;
          }
          return null;
        }
        function isUsingKoreanIME(nativeEvent) {
          return nativeEvent.locale === "ko";
        }
        var isComposing = false;
        function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
          var eventType;
          var fallbackData;
          if (canUseCompositionEvent) {
            eventType = getCompositionEventType(domEventName);
          } else if (!isComposing) {
            if (isFallbackCompositionStart(domEventName, nativeEvent)) {
              eventType = "onCompositionStart";
            }
          } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {
            eventType = "onCompositionEnd";
          }
          if (!eventType) {
            return null;
          }
          if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {
            if (!isComposing && eventType === "onCompositionStart") {
              isComposing = initialize(nativeEventTarget);
            } else if (eventType === "onCompositionEnd") {
              if (isComposing) {
                fallbackData = getData();
              }
            }
          }
          var listeners = accumulateTwoPhaseListeners(targetInst, eventType);
          if (listeners.length > 0) {
            var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);
            dispatchQueue.push({
              event,
              listeners
            });
            if (fallbackData) {
              event.data = fallbackData;
            } else {
              var customData = getDataFromCustomEvent(nativeEvent);
              if (customData !== null) {
                event.data = customData;
              }
            }
          }
        }
        function getNativeBeforeInputChars(domEventName, nativeEvent) {
          switch (domEventName) {
            case "compositionend":
              return getDataFromCustomEvent(nativeEvent);
            case "keypress":
              var which = nativeEvent.which;
              if (which !== SPACEBAR_CODE) {
                return null;
              }
              hasSpaceKeypress = true;
              return SPACEBAR_CHAR;
            case "textInput":
              var chars = nativeEvent.data;
              if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
                return null;
              }
              return chars;
            default:
              return null;
          }
        }
        function getFallbackBeforeInputChars(domEventName, nativeEvent) {
          if (isComposing) {
            if (domEventName === "compositionend" || !canUseCompositionEvent && isFallbackCompositionEnd(domEventName, nativeEvent)) {
              var chars = getData();
              reset();
              isComposing = false;
              return chars;
            }
            return null;
          }
          switch (domEventName) {
            case "paste":
              return null;
            case "keypress":
              if (!isKeypressCommand(nativeEvent)) {
                if (nativeEvent.char && nativeEvent.char.length > 1) {
                  return nativeEvent.char;
                } else if (nativeEvent.which) {
                  return String.fromCharCode(nativeEvent.which);
                }
              }
              return null;
            case "compositionend":
              return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) ? null : nativeEvent.data;
            default:
              return null;
          }
        }
        function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
          var chars;
          if (canUseTextInputEvent) {
            chars = getNativeBeforeInputChars(domEventName, nativeEvent);
          } else {
            chars = getFallbackBeforeInputChars(domEventName, nativeEvent);
          }
          if (!chars) {
            return null;
          }
          var listeners = accumulateTwoPhaseListeners(targetInst, "onBeforeInput");
          if (listeners.length > 0) {
            var event = new SyntheticInputEvent("onBeforeInput", "beforeinput", null, nativeEvent, nativeEventTarget);
            dispatchQueue.push({
              event,
              listeners
            });
            event.data = chars;
          }
        }
        function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
          extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
          extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
        }
        var supportedInputTypes = {
          color: true,
          date: true,
          datetime: true,
          "datetime-local": true,
          email: true,
          month: true,
          number: true,
          password: true,
          range: true,
          search: true,
          tel: true,
          text: true,
          time: true,
          url: true,
          week: true
        };
        function isTextInputElement(elem) {
          var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
          if (nodeName === "input") {
            return !!supportedInputTypes[elem.type];
          }
          if (nodeName === "textarea") {
            return true;
          }
          return false;
        }
        function isEventSupported(eventNameSuffix) {
          if (!canUseDOM) {
            return false;
          }
          var eventName = "on" + eventNameSuffix;
          var isSupported = eventName in document;
          if (!isSupported) {
            var element = document.createElement("div");
            element.setAttribute(eventName, "return;");
            isSupported = typeof element[eventName] === "function";
          }
          return isSupported;
        }
        function registerEvents$1() {
          registerTwoPhaseEvent("onChange", ["change", "click", "focusin", "focusout", "input", "keydown", "keyup", "selectionchange"]);
        }
        function createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, target) {
          enqueueStateRestore(target);
          var listeners = accumulateTwoPhaseListeners(inst, "onChange");
          if (listeners.length > 0) {
            var event = new SyntheticEvent("onChange", "change", null, nativeEvent, target);
            dispatchQueue.push({
              event,
              listeners
            });
          }
        }
        var activeElement = null;
        var activeElementInst = null;
        function shouldUseChangeEvent(elem) {
          var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
          return nodeName === "select" || nodeName === "input" && elem.type === "file";
        }
        function manualDispatchChangeEvent(nativeEvent) {
          var dispatchQueue = [];
          createAndAccumulateChangeEvent(dispatchQueue, activeElementInst, nativeEvent, getEventTarget(nativeEvent));
          batchedUpdates(runEventInBatch, dispatchQueue);
        }
        function runEventInBatch(dispatchQueue) {
          processDispatchQueue(dispatchQueue, 0);
        }
        function getInstIfValueChanged(targetInst) {
          var targetNode = getNodeFromInstance(targetInst);
          if (updateValueIfChanged(targetNode)) {
            return targetInst;
          }
        }
        function getTargetInstForChangeEvent(domEventName, targetInst) {
          if (domEventName === "change") {
            return targetInst;
          }
        }
        var isInputEventSupported = false;
        if (canUseDOM) {
          isInputEventSupported = isEventSupported("input") && (!document.documentMode || document.documentMode > 9);
        }
        function startWatchingForValueChange(target, targetInst) {
          activeElement = target;
          activeElementInst = targetInst;
          activeElement.attachEvent("onpropertychange", handlePropertyChange);
        }
        function stopWatchingForValueChange() {
          if (!activeElement) {
            return;
          }
          activeElement.detachEvent("onpropertychange", handlePropertyChange);
          activeElement = null;
          activeElementInst = null;
        }
        function handlePropertyChange(nativeEvent) {
          if (nativeEvent.propertyName !== "value") {
            return;
          }
          if (getInstIfValueChanged(activeElementInst)) {
            manualDispatchChangeEvent(nativeEvent);
          }
        }
        function handleEventsForInputEventPolyfill(domEventName, target, targetInst) {
          if (domEventName === "focusin") {
            stopWatchingForValueChange();
            startWatchingForValueChange(target, targetInst);
          } else if (domEventName === "focusout") {
            stopWatchingForValueChange();
          }
        }
        function getTargetInstForInputEventPolyfill(domEventName, targetInst) {
          if (domEventName === "selectionchange" || domEventName === "keyup" || domEventName === "keydown") {
            return getInstIfValueChanged(activeElementInst);
          }
        }
        function shouldUseClickEvent(elem) {
          var nodeName = elem.nodeName;
          return nodeName && nodeName.toLowerCase() === "input" && (elem.type === "checkbox" || elem.type === "radio");
        }
        function getTargetInstForClickEvent(domEventName, targetInst) {
          if (domEventName === "click") {
            return getInstIfValueChanged(targetInst);
          }
        }
        function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {
          if (domEventName === "input" || domEventName === "change") {
            return getInstIfValueChanged(targetInst);
          }
        }
        function handleControlledInputBlur(node) {
          var state = node.za;
          if (!state || !state.controlled || node.type !== "number") {
            return;
          }
          {
            setDefaultValue(node, "number", node.value);
          }
        }
        function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
          var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
          var getTargetInstFunc, handleEventFunc;
          if (shouldUseChangeEvent(targetNode)) {
            getTargetInstFunc = getTargetInstForChangeEvent;
          } else if (isTextInputElement(targetNode)) {
            if (isInputEventSupported) {
              getTargetInstFunc = getTargetInstForInputOrChangeEvent;
            } else {
              getTargetInstFunc = getTargetInstForInputEventPolyfill;
              handleEventFunc = handleEventsForInputEventPolyfill;
            }
          } else if (shouldUseClickEvent(targetNode)) {
            getTargetInstFunc = getTargetInstForClickEvent;
          }
          if (getTargetInstFunc) {
            var inst = getTargetInstFunc(domEventName, targetInst);
            if (inst) {
              createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);
              return;
            }
          }
          if (handleEventFunc) {
            handleEventFunc(domEventName, targetNode, targetInst);
          }
          if (domEventName === "focusout") {
            handleControlledInputBlur(targetNode);
          }
        }
        function registerEvents$2() {
          registerDirectEvent("onMouseEnter", ["mouseout", "mouseover"]);
          registerDirectEvent("onMouseLeave", ["mouseout", "mouseover"]);
          registerDirectEvent("onPointerEnter", ["pointerout", "pointerover"]);
          registerDirectEvent("onPointerLeave", ["pointerout", "pointerover"]);
        }
        function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
          var isOverEvent = domEventName === "mouseover" || domEventName === "pointerover";
          var isOutEvent = domEventName === "mouseout" || domEventName === "pointerout";
          if (isOverEvent && !isReplayingEvent(nativeEvent)) {
            var related = nativeEvent.relatedTarget || nativeEvent.fromElement;
            if (related) {
              if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) {
                return;
              }
            }
          }
          if (!isOutEvent && !isOverEvent) {
            return;
          }
          var win;
          if (nativeEventTarget.window === nativeEventTarget) {
            win = nativeEventTarget;
          } else {
            var doc = nativeEventTarget.ownerDocument;
            if (doc) {
              win = doc.defaultView || doc.parentWindow;
            } else {
              win = window;
            }
          }
          var from;
          var to;
          if (isOutEvent) {
            var _related = nativeEvent.relatedTarget || nativeEvent.toElement;
            from = targetInst;
            to = _related ? getClosestInstanceFromNode(_related) : null;
            if (to !== null) {
              var nearestMounted = getNearestMountedFiber(to);
              if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) {
                to = null;
              }
            }
          } else {
            from = null;
            to = targetInst;
          }
          if (from === to) {
            return;
          }
          var SyntheticEventCtor = SyntheticMouseEvent;
          var leaveEventType = "onMouseLeave";
          var enterEventType = "onMouseEnter";
          var eventTypePrefix = "mouse";
          if (domEventName === "pointerout" || domEventName === "pointerover") {
            SyntheticEventCtor = SyntheticPointerEvent;
            leaveEventType = "onPointerLeave";
            enterEventType = "onPointerEnter";
            eventTypePrefix = "pointer";
          }
          var fromNode = from == null ? win : getNodeFromInstance(from);
          var toNode = to == null ? win : getNodeFromInstance(to);
          var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + "leave", from, nativeEvent, nativeEventTarget);
          leave.target = fromNode;
          leave.relatedTarget = toNode;
          var enter = null;
          var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);
          if (nativeTargetInst === targetInst) {
            var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + "enter", to, nativeEvent, nativeEventTarget);
            enterEvent.target = toNode;
            enterEvent.relatedTarget = fromNode;
            enter = enterEvent;
          }
          accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from, to);
        }
        function is(x, y) {
          return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y;
        }
        var objectIs = typeof Object.is === "function" ? Object.is : is;
        function shallowEqual(objA, objB) {
          if (objectIs(objA, objB)) {
            return true;
          }
          if (typeof objA !== "object" || objA === null || typeof objB !== "object" || objB === null) {
            return false;
          }
          var keysA = Object.keys(objA);
          var keysB = Object.keys(objB);
          if (keysA.length !== keysB.length) {
            return false;
          }
          for (var i = 0; i < keysA.length; i++) {
            var currentKey = keysA[i];
            if (!hasOwnProperty.call(objB, currentKey) || !objectIs(objA[currentKey], objB[currentKey])) {
              return false;
            }
          }
          return true;
        }
        function getLeafNode(node) {
          while (node && node.firstChild) {
            node = node.firstChild;
          }
          return node;
        }
        function getSiblingNode(node) {
          while (node) {
            if (node.nextSibling) {
              return node.nextSibling;
            }
            node = node.parentNode;
          }
        }
        function getNodeForCharacterOffset(root2, offset) {
          var node = getLeafNode(root2);
          var nodeStart = 0;
          var nodeEnd = 0;
          while (node) {
            if (node.nodeType === TEXT_NODE) {
              nodeEnd = nodeStart + node.textContent.length;
              if (nodeStart <= offset && nodeEnd >= offset) {
                return {
                  node,
                  offset: offset - nodeStart
                };
              }
              nodeStart = nodeEnd;
            }
            node = getLeafNode(getSiblingNode(node));
          }
        }
        function getOffsets(outerNode) {
          var ownerDocument = outerNode.ownerDocument;
          var win = ownerDocument && ownerDocument.defaultView || window;
          var selection = win.getSelection && win.getSelection();
          if (!selection || selection.rangeCount === 0) {
            return null;
          }
          var anchorNode = selection.anchorNode, anchorOffset = selection.anchorOffset, focusNode = selection.focusNode, focusOffset = selection.focusOffset;
          try {
            anchorNode.nodeType;
            focusNode.nodeType;
          } catch (e) {
            return null;
          }
          return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);
        }
        function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {
          var length = 0;
          var start = -1;
          var end = -1;
          var indexWithinAnchor = 0;
          var indexWithinFocus = 0;
          var node = outerNode;
          var parentNode = null;
          outer:
            while (true) {
              var next = null;
              while (true) {
                if (node === anchorNode && (anchorOffset === 0 || node.nodeType === TEXT_NODE)) {
                  start = length + anchorOffset;
                }
                if (node === focusNode && (focusOffset === 0 || node.nodeType === TEXT_NODE)) {
                  end = length + focusOffset;
                }
                if (node.nodeType === TEXT_NODE) {
                  length += node.nodeValue.length;
                }
                if ((next = node.firstChild) === null) {
                  break;
                }
                parentNode = node;
                node = next;
              }
              while (true) {
                if (node === outerNode) {
                  break outer;
                }
                if (parentNode === anchorNode && ++indexWithinAnchor === anchorOffset) {
                  start = length;
                }
                if (parentNode === focusNode && ++indexWithinFocus === focusOffset) {
                  end = length;
                }
                if ((next = node.nextSibling) !== null) {
                  break;
                }
                node = parentNode;
                parentNode = node.parentNode;
              }
              node = next;
            }
          if (start === -1 || end === -1) {
            return null;
          }
          return {
            start,
            end
          };
        }
        function setOffsets(node, offsets) {
          var doc = node.ownerDocument || document;
          var win = doc && doc.defaultView || window;
          if (!win.getSelection) {
            return;
          }
          var selection = win.getSelection();
          var length = node.textContent.length;
          var start = Math.min(offsets.start, length);
          var end = offsets.end === void 0 ? start : Math.min(offsets.end, length);
          if (!selection.extend && start > end) {
            var temp = end;
            end = start;
            start = temp;
          }
          var startMarker = getNodeForCharacterOffset(node, start);
          var endMarker = getNodeForCharacterOffset(node, end);
          if (startMarker && endMarker) {
            if (selection.rangeCount === 1 && selection.anchorNode === startMarker.node && selection.anchorOffset === startMarker.offset && selection.focusNode === endMarker.node && selection.focusOffset === endMarker.offset) {
              return;
            }
            var range = doc.createRange();
            range.setStart(startMarker.node, startMarker.offset);
            selection.removeAllRanges();
            if (start > end) {
              selection.addRange(range);
              selection.extend(endMarker.node, endMarker.offset);
            } else {
              range.setEnd(endMarker.node, endMarker.offset);
              selection.addRange(range);
            }
          }
        }
        function isTextNode(node) {
          return node && node.nodeType === TEXT_NODE;
        }
        function containsNode(outerNode, innerNode) {
          if (!outerNode || !innerNode) {
            return false;
          } else if (outerNode === innerNode) {
            return true;
          } else if (isTextNode(outerNode)) {
            return false;
          } else if (isTextNode(innerNode)) {
            return containsNode(outerNode, innerNode.parentNode);
          } else if ("contains" in outerNode) {
            return outerNode.contains(innerNode);
          } else if (outerNode.compareDocumentPosition) {
            return !!(outerNode.compareDocumentPosition(innerNode) & 16);
          } else {
            return false;
          }
        }
        function isInDocument(node) {
          return node && node.ownerDocument && containsNode(node.ownerDocument.documentElement, node);
        }
        function isSameOriginFrame(iframe) {
          try {
            return typeof iframe.contentWindow.location.href === "string";
          } catch (err) {
            return false;
          }
        }
        function getActiveElementDeep() {
          var win = window;
          var element = getActiveElement();
          while (element instanceof win.HTMLIFrameElement) {
            if (isSameOriginFrame(element)) {
              win = element.contentWindow;
            } else {
              return element;
            }
            element = getActiveElement(win.document);
          }
          return element;
        }
        function hasSelectionCapabilities(elem) {
          var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
          return nodeName && (nodeName === "input" && (elem.type === "text" || elem.type === "search" || elem.type === "tel" || elem.type === "url" || elem.type === "password") || nodeName === "textarea" || elem.contentEditable === "true");
        }
        function getSelectionInformation() {
          var focusedElem = getActiveElementDeep();
          return {
            focusedElem,
            selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection(focusedElem) : null
          };
        }
        function restoreSelection(priorSelectionInformation) {
          var curFocusedElem = getActiveElementDeep();
          var priorFocusedElem = priorSelectionInformation.focusedElem;
          var priorSelectionRange = priorSelectionInformation.selectionRange;
          if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
            if (priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem)) {
              setSelection(priorFocusedElem, priorSelectionRange);
            }
            var ancestors = [];
            var ancestor = priorFocusedElem;
            while (ancestor = ancestor.parentNode) {
              if (ancestor.nodeType === ELEMENT_NODE) {
                ancestors.push({
                  element: ancestor,
                  left: ancestor.scrollLeft,
                  top: ancestor.scrollTop
                });
              }
            }
            if (typeof priorFocusedElem.focus === "function") {
              priorFocusedElem.focus();
            }
            for (var i = 0; i < ancestors.length; i++) {
              var info = ancestors[i];
              info.element.scrollLeft = info.left;
              info.element.scrollTop = info.top;
            }
          }
        }
        function getSelection(input) {
          var selection;
          if ("selectionStart" in input) {
            selection = {
              start: input.selectionStart,
              end: input.selectionEnd
            };
          } else {
            selection = getOffsets(input);
          }
          return selection || {
            start: 0,
            end: 0
          };
        }
        function setSelection(input, offsets) {
          var start = offsets.start;
          var end = offsets.end;
          if (end === void 0) {
            end = start;
          }
          if ("selectionStart" in input) {
            input.selectionStart = start;
            input.selectionEnd = Math.min(end, input.value.length);
          } else {
            setOffsets(input, offsets);
          }
        }
        var skipSelectionChangeEvent = canUseDOM && "documentMode" in document && document.documentMode <= 11;
        function registerEvents$3() {
          registerTwoPhaseEvent("onSelect", ["focusout", "contextmenu", "dragend", "focusin", "keydown", "keyup", "mousedown", "mouseup", "selectionchange"]);
        }
        var activeElement$1 = null;
        var activeElementInst$1 = null;
        var lastSelection = null;
        var mouseDown = false;
        function getSelection$1(node) {
          if ("selectionStart" in node && hasSelectionCapabilities(node)) {
            return {
              start: node.selectionStart,
              end: node.selectionEnd
            };
          } else {
            var win = node.ownerDocument && node.ownerDocument.defaultView || window;
            var selection = win.getSelection();
            return {
              anchorNode: selection.anchorNode,
              anchorOffset: selection.anchorOffset,
              focusNode: selection.focusNode,
              focusOffset: selection.focusOffset
            };
          }
        }
        function getEventTargetDocument(eventTarget) {
          return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;
        }
        function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {
          var doc = getEventTargetDocument(nativeEventTarget);
          if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) {
            return;
          }
          var currentSelection = getSelection$1(activeElement$1);
          if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
            lastSelection = currentSelection;
            var listeners = accumulateTwoPhaseListeners(activeElementInst$1, "onSelect");
            if (listeners.length > 0) {
              var event = new SyntheticEvent("onSelect", "select", null, nativeEvent, nativeEventTarget);
              dispatchQueue.push({
                event,
                listeners
              });
              event.target = activeElement$1;
            }
          }
        }
        function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
          var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
          switch (domEventName) {
            case "focusin":
              if (isTextInputElement(targetNode) || targetNode.contentEditable === "true") {
                activeElement$1 = targetNode;
                activeElementInst$1 = targetInst;
                lastSelection = null;
              }
              break;
            case "focusout":
              activeElement$1 = null;
              activeElementInst$1 = null;
              lastSelection = null;
              break;
            case "mousedown":
              mouseDown = true;
              break;
            case "contextmenu":
            case "mouseup":
            case "dragend":
              mouseDown = false;
              constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
              break;
            case "selectionchange":
              if (skipSelectionChangeEvent) {
                break;
              }
            case "keydown":
            case "keyup":
              constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
          }
        }
        function makePrefixMap(styleProp, eventName) {
          var prefixes2 = {};
          prefixes2[styleProp.toLowerCase()] = eventName.toLowerCase();
          prefixes2["Webkit" + styleProp] = "webkit" + eventName;
          prefixes2["Moz" + styleProp] = "moz" + eventName;
          return prefixes2;
        }
        var vendorPrefixes = {
          animationend: makePrefixMap("Animation", "AnimationEnd"),
          animationiteration: makePrefixMap("Animation", "AnimationIteration"),
          animationstart: makePrefixMap("Animation", "AnimationStart"),
          transitionend: makePrefixMap("Transition", "TransitionEnd")
        };
        var prefixedEventNames = {};
        var style = {};
        if (canUseDOM) {
          style = document.createElement("div").style;
          if (!("AnimationEvent" in window)) {
            delete vendorPrefixes.animationend.animation;
            delete vendorPrefixes.animationiteration.animation;
            delete vendorPrefixes.animationstart.animation;
          }
          if (!("TransitionEvent" in window)) {
            delete vendorPrefixes.transitionend.transition;
          }
        }
        function getVendorPrefixedEventName(eventName) {
          if (prefixedEventNames[eventName]) {
            return prefixedEventNames[eventName];
          } else if (!vendorPrefixes[eventName]) {
            return eventName;
          }
          var prefixMap = vendorPrefixes[eventName];
          for (var styleProp in prefixMap) {
            if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {
              return prefixedEventNames[eventName] = prefixMap[styleProp];
            }
          }
          return eventName;
        }
        var ANIMATION_END = getVendorPrefixedEventName("animationend");
        var ANIMATION_ITERATION = getVendorPrefixedEventName("animationiteration");
        var ANIMATION_START = getVendorPrefixedEventName("animationstart");
        var TRANSITION_END = getVendorPrefixedEventName("transitionend");
        var topLevelEventsToReactNames = /* @__PURE__ */ new Map();
        var simpleEventPluginEvents = ["abort", "auxClick", "cancel", "canPlay", "canPlayThrough", "click", "close", "contextMenu", "copy", "cut", "drag", "dragEnd", "dragEnter", "dragExit", "dragLeave", "dragOver", "dragStart", "drop", "durationChange", "emptied", "encrypted", "ended", "error", "gotPointerCapture", "input", "invalid", "keyDown", "keyPress", "keyUp", "load", "loadedData", "loadedMetadata", "loadStart", "lostPointerCapture", "mouseDown", "mouseMove", "mouseOut", "mouseOver", "mouseUp", "paste", "pause", "play", "playing", "pointerCancel", "pointerDown", "pointerMove", "pointerOut", "pointerOver", "pointerUp", "progress", "rateChange", "reset", "resize", "seeked", "seeking", "stalled", "submit", "suspend", "timeUpdate", "touchCancel", "touchEnd", "touchStart", "volumeChange", "scroll", "toggle", "touchMove", "waiting", "wheel"];
        function registerSimpleEvent(domEventName, reactName) {
          topLevelEventsToReactNames.set(domEventName, reactName);
          registerTwoPhaseEvent(reactName, [domEventName]);
        }
        function registerSimpleEvents() {
          for (var i = 0; i < simpleEventPluginEvents.length; i++) {
            var eventName = simpleEventPluginEvents[i];
            var domEventName = eventName.toLowerCase();
            var capitalizedEvent = eventName[0].toUpperCase() + eventName.slice(1);
            registerSimpleEvent(domEventName, "on" + capitalizedEvent);
          }
          registerSimpleEvent(ANIMATION_END, "onAnimationEnd");
          registerSimpleEvent(ANIMATION_ITERATION, "onAnimationIteration");
          registerSimpleEvent(ANIMATION_START, "onAnimationStart");
          registerSimpleEvent("dblclick", "onDoubleClick");
          registerSimpleEvent("focusin", "onFocus");
          registerSimpleEvent("focusout", "onBlur");
          registerSimpleEvent(TRANSITION_END, "onTransitionEnd");
        }
        function extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
          var reactName = topLevelEventsToReactNames.get(domEventName);
          if (reactName === void 0) {
            return;
          }
          var SyntheticEventCtor = SyntheticEvent;
          var reactEventType = domEventName;
          switch (domEventName) {
            case "keypress":
              if (getEventCharCode(nativeEvent) === 0) {
                return;
              }
            case "keydown":
            case "keyup":
              SyntheticEventCtor = SyntheticKeyboardEvent;
              break;
            case "focusin":
              reactEventType = "focus";
              SyntheticEventCtor = SyntheticFocusEvent;
              break;
            case "focusout":
              reactEventType = "blur";
              SyntheticEventCtor = SyntheticFocusEvent;
              break;
            case "beforeblur":
            case "afterblur":
              SyntheticEventCtor = SyntheticFocusEvent;
              break;
            case "click":
              if (nativeEvent.button === 2) {
                return;
              }
            case "auxclick":
            case "dblclick":
            case "mousedown":
            case "mousemove":
            case "mouseup":
            case "mouseout":
            case "mouseover":
            case "contextmenu":
              SyntheticEventCtor = SyntheticMouseEvent;
              break;
            case "drag":
            case "dragend":
            case "dragenter":
            case "dragexit":
            case "dragleave":
            case "dragover":
            case "dragstart":
            case "drop":
              SyntheticEventCtor = SyntheticDragEvent;
              break;
            case "touchcancel":
            case "touchend":
            case "touchmove":
            case "touchstart":
              SyntheticEventCtor = SyntheticTouchEvent;
              break;
            case ANIMATION_END:
            case ANIMATION_ITERATION:
            case ANIMATION_START:
              SyntheticEventCtor = SyntheticAnimationEvent;
              break;
            case TRANSITION_END:
              SyntheticEventCtor = SyntheticTransitionEvent;
              break;
            case "scroll":
              SyntheticEventCtor = SyntheticUIEvent;
              break;
            case "wheel":
              SyntheticEventCtor = SyntheticWheelEvent;
              break;
            case "copy":
            case "cut":
            case "paste":
              SyntheticEventCtor = SyntheticClipboardEvent;
              break;
            case "gotpointercapture":
            case "lostpointercapture":
            case "pointercancel":
            case "pointerdown":
            case "pointermove":
            case "pointerout":
            case "pointerover":
            case "pointerup":
              SyntheticEventCtor = SyntheticPointerEvent;
              break;
          }
          var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
          {
            var accumulateTargetOnly = !inCapturePhase && // TODO: ideally, we'd eventually add all events from
            // nonDelegatedEvents list in DOMPluginEventSystem.
            // Then we can remove this special list.
            // This is a breaking change that can wait until React 18.
            domEventName === "scroll";
            var _listeners = accumulateSinglePhaseListeners(targetInst, reactName, nativeEvent.type, inCapturePhase, accumulateTargetOnly);
            if (_listeners.length > 0) {
              var _event = new SyntheticEventCtor(reactName, reactEventType, null, nativeEvent, nativeEventTarget);
              dispatchQueue.push({
                event: _event,
                listeners: _listeners
              });
            }
          }
        }
        registerSimpleEvents();
        registerEvents$2();
        registerEvents$1();
        registerEvents$3();
        registerEvents();
        function extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
          extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
          var shouldProcessPolyfillPlugins = (eventSystemFlags & SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS) === 0;
          if (shouldProcessPolyfillPlugins) {
            extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
          }
        }
        var mediaEventTypes = ["abort", "canplay", "canplaythrough", "durationchange", "emptied", "encrypted", "ended", "error", "loadeddata", "loadedmetadata", "loadstart", "pause", "play", "playing", "progress", "ratechange", "resize", "seeked", "seeking", "stalled", "suspend", "timeupdate", "volumechange", "waiting"];
        var nonDelegatedEvents = new Set(["cancel", "close", "invalid", "load", "scroll", "toggle"].concat(mediaEventTypes));
        function executeDispatch(event, listener, currentTarget) {
          var type = event.type || "unknown-event";
          event.currentTarget = currentTarget;
          invokeGuardedCallbackAndCatchFirstError(type, listener, void 0, event);
          event.currentTarget = null;
        }
        function processDispatchQueueItemsInOrder(event, dispatchListeners, inCapturePhase) {
          var previousInstance;
          if (inCapturePhase) {
            for (var i = dispatchListeners.length - 1; i >= 0; i--) {
              var _dispatchListeners$i = dispatchListeners[i], instance = _dispatchListeners$i.instance, currentTarget = _dispatchListeners$i.currentTarget, listener = _dispatchListeners$i.listener;
              if (instance !== previousInstance && event.isPropagationStopped()) {
                return;
              }
              executeDispatch(event, listener, currentTarget);
              previousInstance = instance;
            }
          } else {
            for (var _i = 0; _i < dispatchListeners.length; _i++) {
              var _dispatchListeners$_i = dispatchListeners[_i], _instance = _dispatchListeners$_i.instance, _currentTarget = _dispatchListeners$_i.currentTarget, _listener = _dispatchListeners$_i.listener;
              if (_instance !== previousInstance && event.isPropagationStopped()) {
                return;
              }
              executeDispatch(event, _listener, _currentTarget);
              previousInstance = _instance;
            }
          }
        }
        function processDispatchQueue(dispatchQueue, eventSystemFlags) {
          var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
          for (var i = 0; i < dispatchQueue.length; i++) {
            var _dispatchQueue$i = dispatchQueue[i], event = _dispatchQueue$i.event, listeners = _dispatchQueue$i.listeners;
            processDispatchQueueItemsInOrder(event, listeners, inCapturePhase);
          }
          rethrowCaughtError();
        }
        function dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
          var nativeEventTarget = getEventTarget(nativeEvent);
          var dispatchQueue = [];
          extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
          processDispatchQueue(dispatchQueue, eventSystemFlags);
        }
        function listenToNonDelegatedEvent(domEventName, targetElement) {
          {
            if (!nonDelegatedEvents.has(domEventName)) {
              error('Did not expect a listenToNonDelegatedEvent() call for "%s". This is a bug in React. Please file an issue.', domEventName);
            }
          }
          var isCapturePhaseListener = false;
          var listenerSet = getEventListenerSet(targetElement);
          var listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener);
          if (!listenerSet.has(listenerSetKey)) {
            addTrappedEventListener(targetElement, domEventName, IS_NON_DELEGATED, isCapturePhaseListener);
            listenerSet.add(listenerSetKey);
          }
        }
        function listenToNativeEvent(domEventName, isCapturePhaseListener, target) {
          {
            if (nonDelegatedEvents.has(domEventName) && !isCapturePhaseListener) {
              error('Did not expect a listenToNativeEvent() call for "%s" in the bubble phase. This is a bug in React. Please file an issue.', domEventName);
            }
          }
          var eventSystemFlags = 0;
          if (isCapturePhaseListener) {
            eventSystemFlags |= IS_CAPTURE_PHASE;
          }
          addTrappedEventListener(target, domEventName, eventSystemFlags, isCapturePhaseListener);
        }
        var listeningMarker = "_reactListening" + Math.random().toString(36).slice(2);
        function listenToAllSupportedEvents(rootContainerElement) {
          if (!rootContainerElement[listeningMarker]) {
            rootContainerElement[listeningMarker] = true;
            allNativeEvents.forEach(function(domEventName) {
              if (domEventName !== "selectionchange") {
                if (!nonDelegatedEvents.has(domEventName)) {
                  listenToNativeEvent(domEventName, false, rootContainerElement);
                }
                listenToNativeEvent(domEventName, true, rootContainerElement);
              }
            });
            var ownerDocument = rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
            if (ownerDocument !== null) {
              if (!ownerDocument[listeningMarker]) {
                ownerDocument[listeningMarker] = true;
                listenToNativeEvent("selectionchange", false, ownerDocument);
              }
            }
          }
        }
        function addTrappedEventListener(targetContainer, domEventName, eventSystemFlags, isCapturePhaseListener, isDeferredListenerForLegacyFBSupport) {
          var listener = createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags);
          var isPassiveListener = void 0;
          if (passiveBrowserEventsSupported) {
            if (domEventName === "touchstart" || domEventName === "touchmove" || domEventName === "wheel") {
              isPassiveListener = true;
            }
          }
          targetContainer = targetContainer;
          var unsubscribeListener;
          if (isCapturePhaseListener) {
            if (isPassiveListener !== void 0) {
              unsubscribeListener = addEventCaptureListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
            } else {
              unsubscribeListener = addEventCaptureListener(targetContainer, domEventName, listener);
            }
          } else {
            if (isPassiveListener !== void 0) {
              unsubscribeListener = addEventBubbleListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
            } else {
              unsubscribeListener = addEventBubbleListener(targetContainer, domEventName, listener);
            }
          }
        }
        function isMatchingRootContainer(grandContainer, targetContainer) {
          return grandContainer === targetContainer || grandContainer.nodeType === COMMENT_NODE && grandContainer.parentNode === targetContainer;
        }
        function dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
          var ancestorInst = targetInst;
          if ((eventSystemFlags & IS_EVENT_HANDLE_NON_MANAGED_NODE) === 0 && (eventSystemFlags & IS_NON_DELEGATED) === 0) {
            var targetContainerNode = targetContainer;
            if (targetInst !== null) {
              var node = targetInst;
              mainLoop:
                while (true) {
                  if (node === null) {
                    return;
                  }
                  var nodeTag = node.tag;
                  if (nodeTag === HostRoot || nodeTag === HostPortal) {
                    var container = node.stateNode.containerInfo;
                    if (isMatchingRootContainer(container, targetContainerNode)) {
                      break;
                    }
                    if (nodeTag === HostPortal) {
                      var grandNode = node.return;
                      while (grandNode !== null) {
                        var grandTag = grandNode.tag;
                        if (grandTag === HostRoot || grandTag === HostPortal) {
                          var grandContainer = grandNode.stateNode.containerInfo;
                          if (isMatchingRootContainer(grandContainer, targetContainerNode)) {
                            return;
                          }
                        }
                        grandNode = grandNode.return;
                      }
                    }
                    while (container !== null) {
                      var parentNode = getClosestInstanceFromNode(container);
                      if (parentNode === null) {
                        return;
                      }
                      var parentTag = parentNode.tag;
                      if (parentTag === HostComponent || parentTag === HostText) {
                        node = ancestorInst = parentNode;
                        continue mainLoop;
                      }
                      container = container.parentNode;
                    }
                  }
                  node = node.return;
                }
            }
          }
          batchedUpdates(function() {
            return dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, ancestorInst);
          });
        }
        function createDispatchListener(instance, listener, currentTarget) {
          return {
            instance,
            listener,
            currentTarget
          };
        }
        function accumulateSinglePhaseListeners(targetFiber, reactName, nativeEventType, inCapturePhase, accumulateTargetOnly, nativeEvent) {
          var captureName = reactName !== null ? reactName + "Capture" : null;
          var reactEventName = inCapturePhase ? captureName : reactName;
          var listeners = [];
          var instance = targetFiber;
          var lastHostComponent = null;
          while (instance !== null) {
            var _instance2 = instance, stateNode = _instance2.stateNode, tag = _instance2.tag;
            if (tag === HostComponent && stateNode !== null) {
              lastHostComponent = stateNode;
              if (reactEventName !== null) {
                var listener = getListener(instance, reactEventName);
                if (listener != null) {
                  listeners.push(createDispatchListener(instance, listener, lastHostComponent));
                }
              }
            }
            if (accumulateTargetOnly) {
              break;
            }
            instance = instance.return;
          }
          return listeners;
        }
        function accumulateTwoPhaseListeners(targetFiber, reactName) {
          var captureName = reactName + "Capture";
          var listeners = [];
          var instance = targetFiber;
          while (instance !== null) {
            var _instance3 = instance, stateNode = _instance3.stateNode, tag = _instance3.tag;
            if (tag === HostComponent && stateNode !== null) {
              var currentTarget = stateNode;
              var captureListener = getListener(instance, captureName);
              if (captureListener != null) {
                listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
              }
              var bubbleListener = getListener(instance, reactName);
              if (bubbleListener != null) {
                listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
              }
            }
            instance = instance.return;
          }
          return listeners;
        }
        function getParent(inst) {
          if (inst === null) {
            return null;
          }
          do {
            inst = inst.return;
          } while (inst && inst.tag !== HostComponent);
          if (inst) {
            return inst;
          }
          return null;
        }
        function getLowestCommonAncestor(instA, instB) {
          var nodeA = instA;
          var nodeB = instB;
          var depthA = 0;
          for (var tempA = nodeA; tempA; tempA = getParent(tempA)) {
            depthA++;
          }
          var depthB = 0;
          for (var tempB = nodeB; tempB; tempB = getParent(tempB)) {
            depthB++;
          }
          while (depthA - depthB > 0) {
            nodeA = getParent(nodeA);
            depthA--;
          }
          while (depthB - depthA > 0) {
            nodeB = getParent(nodeB);
            depthB--;
          }
          var depth = depthA;
          while (depth--) {
            if (nodeA === nodeB || nodeB !== null && nodeA === nodeB.alternate) {
              return nodeA;
            }
            nodeA = getParent(nodeA);
            nodeB = getParent(nodeB);
          }
          return null;
        }
        function accumulateEnterLeaveListenersForEvent(dispatchQueue, event, target, common, inCapturePhase) {
          var registrationName = event.Dp;
          var listeners = [];
          var instance = target;
          while (instance !== null) {
            if (instance === common) {
              break;
            }
            var _instance4 = instance, alternate = _instance4.alternate, stateNode = _instance4.stateNode, tag = _instance4.tag;
            if (alternate !== null && alternate === common) {
              break;
            }
            if (tag === HostComponent && stateNode !== null) {
              var currentTarget = stateNode;
              if (inCapturePhase) {
                var captureListener = getListener(instance, registrationName);
                if (captureListener != null) {
                  listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                }
              } else if (!inCapturePhase) {
                var bubbleListener = getListener(instance, registrationName);
                if (bubbleListener != null) {
                  listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
                }
              }
            }
            instance = instance.return;
          }
          if (listeners.length !== 0) {
            dispatchQueue.push({
              event,
              listeners
            });
          }
        }
        function accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leaveEvent, enterEvent, from, to) {
          var common = from && to ? getLowestCommonAncestor(from, to) : null;
          if (from !== null) {
            accumulateEnterLeaveListenersForEvent(dispatchQueue, leaveEvent, from, common, false);
          }
          if (to !== null && enterEvent !== null) {
            accumulateEnterLeaveListenersForEvent(dispatchQueue, enterEvent, to, common, true);
          }
        }
        function getListenerSetKey(domEventName, capture) {
          return domEventName + "__" + (capture ? "capture" : "bubble");
        }
        var didWarnInvalidHydration = false;
        var DANGEROUSLY_SET_INNER_HTML = "dangerouslySetInnerHTML";
        var SUPPRESS_CONTENT_EDITABLE_WARNING = "suppressContentEditableWarning";
        var SUPPRESS_HYDRATION_WARNING = "suppressHydrationWarning";
        var AUTOFOCUS = "autoFocus";
        var CHILDREN = "children";
        var STYLE = "style";
        var HTML$1 = "__html";
        var warnedUnknownTags;
        var validatePropertiesInDevelopment;
        var warnForPropDifference;
        var warnForExtraAttributes;
        var warnForInvalidEventListener;
        var canDiffStyleForHydrationWarning;
        var normalizeHTML;
        {
          warnedUnknownTags = {
            // There are working polyfills for <dialog>. Let people use it.
            dialog: true,
            // Electron ships a custom <webview> tag to display external web content in
            // an isolated frame and process.
            // This tag is not present in non Electron environments such as JSDom which
            // is often used for testing purposes.
            // @see https://electronjs.org/docs/api/webview-tag
            webview: true
          };
          validatePropertiesInDevelopment = function(type, props) {
            validateProperties(type, props);
            validateProperties$1(type, props);
            validateProperties$2(type, props, {
              registrationNameDependencies,
              possibleRegistrationNames
            });
          };
          canDiffStyleForHydrationWarning = canUseDOM && !document.documentMode;
          warnForPropDifference = function(propName, serverValue, clientValue) {
            if (didWarnInvalidHydration) {
              return;
            }
            var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);
            var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);
            if (normalizedServerValue === normalizedClientValue) {
              return;
            }
            didWarnInvalidHydration = true;
            error("Prop `%s` did not match. Server: %s Client: %s", propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue));
          };
          warnForExtraAttributes = function(attributeNames) {
            if (didWarnInvalidHydration) {
              return;
            }
            didWarnInvalidHydration = true;
            var names = [];
            attributeNames.forEach(function(name) {
              names.push(name);
            });
            error("Extra attributes from the server: %s", names);
          };
          warnForInvalidEventListener = function(registrationName, listener) {
            if (listener === false) {
              error("Expected `%s` listener to be a function, instead got `false`.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.", registrationName, registrationName, registrationName);
            } else {
              error("Expected `%s` listener to be a function, instead got a value of `%s` type.", registrationName, typeof listener);
            }
          };
          normalizeHTML = function(parent, html) {
            var testElement = parent.namespaceURI === HTML_NAMESPACE ? parent.ownerDocument.createElement(parent.tagName) : parent.ownerDocument.createElementNS(parent.namespaceURI, parent.tagName);
            testElement.innerHTML = html;
            return testElement.innerHTML;
          };
        }
        var NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
        var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;
        function normalizeMarkupForTextOrAttribute(markup) {
          {
            checkHtmlStringCoercion(markup);
          }
          var markupString = typeof markup === "string" ? markup : "" + markup;
          return markupString.replace(NORMALIZE_NEWLINES_REGEX, "\n").replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, "");
        }
        function checkForUnmatchedText(serverText, clientText, isConcurrentMode, shouldWarnDev) {
          var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);
          var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);
          if (normalizedServerText === normalizedClientText) {
            return;
          }
          if (shouldWarnDev) {
            {
              if (!didWarnInvalidHydration) {
                didWarnInvalidHydration = true;
                error('Text content did not match. Server: "%s" Client: "%s"', normalizedServerText, normalizedClientText);
              }
            }
          }
          if (isConcurrentMode && enableClientRenderFallbackOnTextMismatch) {
            throw new Error("Text content does not match server-rendered HTML.");
          }
        }
        function getOwnerDocumentFromRootContainer(rootContainerElement) {
          return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
        }
        function noop() {
        }
        function trapClickOnNonInteractiveElement(node) {
          node.onclick = noop;
        }
        function setInitialDOMProperties(tag, domElement, rootContainerElement, nextProps, isCustomComponentTag) {
          for (var propKey in nextProps) {
            if (!nextProps.hasOwnProperty(propKey)) {
              continue;
            }
            var nextProp = nextProps[propKey];
            if (propKey === STYLE) {
              {
                if (nextProp) {
                  Object.freeze(nextProp);
                }
              }
              setValueForStyles(domElement, nextProp);
            } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
              var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
              if (nextHtml != null) {
                setInnerHTML(domElement, nextHtml);
              }
            } else if (propKey === CHILDREN) {
              if (typeof nextProp === "string") {
                var canSetTextContent = tag !== "textarea" || nextProp !== "";
                if (canSetTextContent) {
                  setTextContent(domElement, nextProp);
                }
              } else if (typeof nextProp === "number") {
                setTextContent(domElement, "" + nextProp);
              }
            } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
              ;
            else if (propKey === AUTOFOCUS)
              ;
            else if (registrationNameDependencies.hasOwnProperty(propKey)) {
              if (nextProp != null) {
                if (typeof nextProp !== "function") {
                  warnForInvalidEventListener(propKey, nextProp);
                }
                if (propKey === "onScroll") {
                  listenToNonDelegatedEvent("scroll", domElement);
                }
              }
            } else if (nextProp != null) {
              setValueForProperty(domElement, propKey, nextProp, isCustomComponentTag);
            }
          }
        }
        function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {
          for (var i = 0; i < updatePayload.length; i += 2) {
            var propKey = updatePayload[i];
            var propValue = updatePayload[i + 1];
            if (propKey === STYLE) {
              setValueForStyles(domElement, propValue);
            } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
              setInnerHTML(domElement, propValue);
            } else if (propKey === CHILDREN) {
              setTextContent(domElement, propValue);
            } else {
              setValueForProperty(domElement, propKey, propValue, isCustomComponentTag);
            }
          }
        }
        function createElement3(type, props, rootContainerElement, parentNamespace) {
          var isCustomComponentTag;
          var ownerDocument = getOwnerDocumentFromRootContainer(rootContainerElement);
          var domElement;
          var namespaceURI = parentNamespace;
          if (namespaceURI === HTML_NAMESPACE) {
            namespaceURI = getIntrinsicNamespace(type);
          }
          if (namespaceURI === HTML_NAMESPACE) {
            {
              isCustomComponentTag = isCustomComponent(type, props);
              if (!isCustomComponentTag && type !== type.toLowerCase()) {
                error("<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.", type);
              }
            }
            if (type === "script") {
              var div = ownerDocument.createElement("div");
              div.innerHTML = "<script><\/script>";
              var firstChild = div.firstChild;
              domElement = div.removeChild(firstChild);
            } else if (typeof props.is === "string") {
              domElement = ownerDocument.createElement(type, {
                is: props.is
              });
            } else {
              domElement = ownerDocument.createElement(type);
              if (type === "select") {
                var node = domElement;
                if (props.multiple) {
                  node.multiple = true;
                } else if (props.size) {
                  node.size = props.size;
                }
              }
            }
          } else {
            domElement = ownerDocument.createElementNS(namespaceURI, type);
          }
          {
            if (namespaceURI === HTML_NAMESPACE) {
              if (!isCustomComponentTag && Object.prototype.toString.call(domElement) === "[object HTMLUnknownElement]" && !hasOwnProperty.call(warnedUnknownTags, type)) {
                warnedUnknownTags[type] = true;
                error("The tag <%s> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.", type);
              }
            }
          }
          return domElement;
        }
        function createTextNode(text, rootContainerElement) {
          return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);
        }
        function setInitialProperties(domElement, tag, rawProps, rootContainerElement) {
          var isCustomComponentTag = isCustomComponent(tag, rawProps);
          {
            validatePropertiesInDevelopment(tag, rawProps);
          }
          var props;
          switch (tag) {
            case "dialog":
              listenToNonDelegatedEvent("cancel", domElement);
              listenToNonDelegatedEvent("close", domElement);
              props = rawProps;
              break;
            case "iframe":
            case "object":
            case "embed":
              listenToNonDelegatedEvent("load", domElement);
              props = rawProps;
              break;
            case "video":
            case "audio":
              for (var i = 0; i < mediaEventTypes.length; i++) {
                listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
              }
              props = rawProps;
              break;
            case "source":
              listenToNonDelegatedEvent("error", domElement);
              props = rawProps;
              break;
            case "img":
            case "image":
            case "link":
              listenToNonDelegatedEvent("error", domElement);
              listenToNonDelegatedEvent("load", domElement);
              props = rawProps;
              break;
            case "details":
              listenToNonDelegatedEvent("toggle", domElement);
              props = rawProps;
              break;
            case "input":
              initWrapperState(domElement, rawProps);
              props = getHostProps(domElement, rawProps);
              listenToNonDelegatedEvent("invalid", domElement);
              break;
            case "option":
              validateProps(domElement, rawProps);
              props = rawProps;
              break;
            case "select":
              initWrapperState$1(domElement, rawProps);
              props = getHostProps$1(domElement, rawProps);
              listenToNonDelegatedEvent("invalid", domElement);
              break;
            case "textarea":
              initWrapperState$2(domElement, rawProps);
              props = getHostProps$2(domElement, rawProps);
              listenToNonDelegatedEvent("invalid", domElement);
              break;
            default:
              props = rawProps;
          }
          assertValidProps(tag, props);
          setInitialDOMProperties(tag, domElement, rootContainerElement, props, isCustomComponentTag);
          switch (tag) {
            case "input":
              track(domElement);
              postMountWrapper(domElement, rawProps, false);
              break;
            case "textarea":
              track(domElement);
              postMountWrapper$3(domElement);
              break;
            case "option":
              postMountWrapper$1(domElement, rawProps);
              break;
            case "select":
              postMountWrapper$2(domElement, rawProps);
              break;
            default:
              if (typeof props.onClick === "function") {
                trapClickOnNonInteractiveElement(domElement);
              }
              break;
          }
        }
        function diffProperties(domElement, tag, lastRawProps, nextRawProps, rootContainerElement) {
          {
            validatePropertiesInDevelopment(tag, nextRawProps);
          }
          var updatePayload = null;
          var lastProps;
          var nextProps;
          switch (tag) {
            case "input":
              lastProps = getHostProps(domElement, lastRawProps);
              nextProps = getHostProps(domElement, nextRawProps);
              updatePayload = [];
              break;
            case "select":
              lastProps = getHostProps$1(domElement, lastRawProps);
              nextProps = getHostProps$1(domElement, nextRawProps);
              updatePayload = [];
              break;
            case "textarea":
              lastProps = getHostProps$2(domElement, lastRawProps);
              nextProps = getHostProps$2(domElement, nextRawProps);
              updatePayload = [];
              break;
            default:
              lastProps = lastRawProps;
              nextProps = nextRawProps;
              if (typeof lastProps.onClick !== "function" && typeof nextProps.onClick === "function") {
                trapClickOnNonInteractiveElement(domElement);
              }
              break;
          }
          assertValidProps(tag, nextProps);
          var propKey;
          var styleName;
          var styleUpdates = null;
          for (propKey in lastProps) {
            if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
              continue;
            }
            if (propKey === STYLE) {
              var lastStyle = lastProps[propKey];
              for (styleName in lastStyle) {
                if (lastStyle.hasOwnProperty(styleName)) {
                  if (!styleUpdates) {
                    styleUpdates = {};
                  }
                  styleUpdates[styleName] = "";
                }
              }
            } else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN)
              ;
            else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
              ;
            else if (propKey === AUTOFOCUS)
              ;
            else if (registrationNameDependencies.hasOwnProperty(propKey)) {
              if (!updatePayload) {
                updatePayload = [];
              }
            } else {
              (updatePayload = updatePayload || []).push(propKey, null);
            }
          }
          for (propKey in nextProps) {
            var nextProp = nextProps[propKey];
            var lastProp = lastProps != null ? lastProps[propKey] : void 0;
            if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
              continue;
            }
            if (propKey === STYLE) {
              {
                if (nextProp) {
                  Object.freeze(nextProp);
                }
              }
              if (lastProp) {
                for (styleName in lastProp) {
                  if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
                    if (!styleUpdates) {
                      styleUpdates = {};
                    }
                    styleUpdates[styleName] = "";
                  }
                }
                for (styleName in nextProp) {
                  if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
                    if (!styleUpdates) {
                      styleUpdates = {};
                    }
                    styleUpdates[styleName] = nextProp[styleName];
                  }
                }
              } else {
                if (!styleUpdates) {
                  if (!updatePayload) {
                    updatePayload = [];
                  }
                  updatePayload.push(propKey, styleUpdates);
                }
                styleUpdates = nextProp;
              }
            } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
              var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
              var lastHtml = lastProp ? lastProp[HTML$1] : void 0;
              if (nextHtml != null) {
                if (lastHtml !== nextHtml) {
                  (updatePayload = updatePayload || []).push(propKey, nextHtml);
                }
              }
            } else if (propKey === CHILDREN) {
              if (typeof nextProp === "string" || typeof nextProp === "number") {
                (updatePayload = updatePayload || []).push(propKey, "" + nextProp);
              }
            } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
              ;
            else if (registrationNameDependencies.hasOwnProperty(propKey)) {
              if (nextProp != null) {
                if (typeof nextProp !== "function") {
                  warnForInvalidEventListener(propKey, nextProp);
                }
                if (propKey === "onScroll") {
                  listenToNonDelegatedEvent("scroll", domElement);
                }
              }
              if (!updatePayload && lastProp !== nextProp) {
                updatePayload = [];
              }
            } else {
              (updatePayload = updatePayload || []).push(propKey, nextProp);
            }
          }
          if (styleUpdates) {
            {
              validateShorthandPropertyCollisionInDev(styleUpdates, nextProps[STYLE]);
            }
            (updatePayload = updatePayload || []).push(STYLE, styleUpdates);
          }
          return updatePayload;
        }
        function updateProperties(domElement, updatePayload, tag, lastRawProps, nextRawProps) {
          if (tag === "input" && nextRawProps.type === "radio" && nextRawProps.name != null) {
            updateChecked(domElement, nextRawProps);
          }
          var wasCustomComponentTag = isCustomComponent(tag, lastRawProps);
          var isCustomComponentTag = isCustomComponent(tag, nextRawProps);
          updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag);
          switch (tag) {
            case "input":
              updateWrapper(domElement, nextRawProps);
              break;
            case "textarea":
              updateWrapper$1(domElement, nextRawProps);
              break;
            case "select":
              postUpdateWrapper(domElement, nextRawProps);
              break;
          }
        }
        function getPossibleStandardName(propName) {
          {
            var lowerCasedName = propName.toLowerCase();
            if (!possibleStandardNames.hasOwnProperty(lowerCasedName)) {
              return null;
            }
            return possibleStandardNames[lowerCasedName] || null;
          }
        }
        function diffHydratedProperties(domElement, tag, rawProps, parentNamespace, rootContainerElement, isConcurrentMode, shouldWarnDev) {
          var isCustomComponentTag;
          var extraAttributeNames;
          {
            isCustomComponentTag = isCustomComponent(tag, rawProps);
            validatePropertiesInDevelopment(tag, rawProps);
          }
          switch (tag) {
            case "dialog":
              listenToNonDelegatedEvent("cancel", domElement);
              listenToNonDelegatedEvent("close", domElement);
              break;
            case "iframe":
            case "object":
            case "embed":
              listenToNonDelegatedEvent("load", domElement);
              break;
            case "video":
            case "audio":
              for (var i = 0; i < mediaEventTypes.length; i++) {
                listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
              }
              break;
            case "source":
              listenToNonDelegatedEvent("error", domElement);
              break;
            case "img":
            case "image":
            case "link":
              listenToNonDelegatedEvent("error", domElement);
              listenToNonDelegatedEvent("load", domElement);
              break;
            case "details":
              listenToNonDelegatedEvent("toggle", domElement);
              break;
            case "input":
              initWrapperState(domElement, rawProps);
              listenToNonDelegatedEvent("invalid", domElement);
              break;
            case "option":
              validateProps(domElement, rawProps);
              break;
            case "select":
              initWrapperState$1(domElement, rawProps);
              listenToNonDelegatedEvent("invalid", domElement);
              break;
            case "textarea":
              initWrapperState$2(domElement, rawProps);
              listenToNonDelegatedEvent("invalid", domElement);
              break;
          }
          assertValidProps(tag, rawProps);
          {
            extraAttributeNames = /* @__PURE__ */ new Set();
            var attributes = domElement.attributes;
            for (var _i = 0; _i < attributes.length; _i++) {
              var name = attributes[_i].name.toLowerCase();
              switch (name) {
                case "value":
                  break;
                case "checked":
                  break;
                case "selected":
                  break;
                default:
                  extraAttributeNames.add(attributes[_i].name);
              }
            }
          }
          var updatePayload = null;
          for (var propKey in rawProps) {
            if (!rawProps.hasOwnProperty(propKey)) {
              continue;
            }
            var nextProp = rawProps[propKey];
            if (propKey === CHILDREN) {
              if (typeof nextProp === "string") {
                if (domElement.textContent !== nextProp) {
                  if (rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                    checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);
                  }
                  updatePayload = [CHILDREN, nextProp];
                }
              } else if (typeof nextProp === "number") {
                if (domElement.textContent !== "" + nextProp) {
                  if (rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                    checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);
                  }
                  updatePayload = [CHILDREN, "" + nextProp];
                }
              }
            } else if (registrationNameDependencies.hasOwnProperty(propKey)) {
              if (nextProp != null) {
                if (typeof nextProp !== "function") {
                  warnForInvalidEventListener(propKey, nextProp);
                }
                if (propKey === "onScroll") {
                  listenToNonDelegatedEvent("scroll", domElement);
                }
              }
            } else if (shouldWarnDev && true && // Convince Flow we've calculated it (it's DEV-only in this method.)
            typeof isCustomComponentTag === "boolean") {
              var serverValue = void 0;
              var propertyInfo = isCustomComponentTag && enableCustomElementPropertySupport ? null : getPropertyInfo(propKey);
              if (rawProps[SUPPRESS_HYDRATION_WARNING] === true)
                ;
              else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING || // Controlled attributes are not validated
              // TODO: Only ignore them on controlled tags.
              propKey === "value" || propKey === "checked" || propKey === "selected")
                ;
              else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var serverHTML = domElement.innerHTML;
                var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                if (nextHtml != null) {
                  var expectedHTML = normalizeHTML(domElement, nextHtml);
                  if (expectedHTML !== serverHTML) {
                    warnForPropDifference(propKey, serverHTML, expectedHTML);
                  }
                }
              } else if (propKey === STYLE) {
                extraAttributeNames.delete(propKey);
                if (canDiffStyleForHydrationWarning) {
                  var expectedStyle = createDangerousStringForStyles(nextProp);
                  serverValue = domElement.getAttribute("style");
                  if (expectedStyle !== serverValue) {
                    warnForPropDifference(propKey, serverValue, expectedStyle);
                  }
                }
              } else if (isCustomComponentTag && !enableCustomElementPropertySupport) {
                extraAttributeNames.delete(propKey.toLowerCase());
                serverValue = getValueForAttribute(domElement, propKey, nextProp);
                if (nextProp !== serverValue) {
                  warnForPropDifference(propKey, serverValue, nextProp);
                }
              } else if (!shouldIgnoreAttribute(propKey, propertyInfo, isCustomComponentTag) && !shouldRemoveAttribute(propKey, nextProp, propertyInfo, isCustomComponentTag)) {
                var isMismatchDueToBadCasing = false;
                if (propertyInfo !== null) {
                  extraAttributeNames.delete(propertyInfo.attributeName);
                  serverValue = getValueForProperty(domElement, propKey, nextProp, propertyInfo);
                } else {
                  var ownNamespace = parentNamespace;
                  if (ownNamespace === HTML_NAMESPACE) {
                    ownNamespace = getIntrinsicNamespace(tag);
                  }
                  if (ownNamespace === HTML_NAMESPACE) {
                    extraAttributeNames.delete(propKey.toLowerCase());
                  } else {
                    var standardName = getPossibleStandardName(propKey);
                    if (standardName !== null && standardName !== propKey) {
                      isMismatchDueToBadCasing = true;
                      extraAttributeNames.delete(standardName);
                    }
                    extraAttributeNames.delete(propKey);
                  }
                  serverValue = getValueForAttribute(domElement, propKey, nextProp);
                }
                var dontWarnCustomElement = enableCustomElementPropertySupport;
                if (!dontWarnCustomElement && nextProp !== serverValue && !isMismatchDueToBadCasing) {
                  warnForPropDifference(propKey, serverValue, nextProp);
                }
              }
            }
          }
          {
            if (shouldWarnDev) {
              if (
                // $FlowFixMe - Should be inferred as not undefined.
                extraAttributeNames.size > 0 && rawProps[SUPPRESS_HYDRATION_WARNING] !== true
              ) {
                warnForExtraAttributes(extraAttributeNames);
              }
            }
          }
          switch (tag) {
            case "input":
              track(domElement);
              postMountWrapper(domElement, rawProps, true);
              break;
            case "textarea":
              track(domElement);
              postMountWrapper$3(domElement);
              break;
            case "select":
            case "option":
              break;
            default:
              if (typeof rawProps.onClick === "function") {
                trapClickOnNonInteractiveElement(domElement);
              }
              break;
          }
          return updatePayload;
        }
        function diffHydratedText(textNode, text, isConcurrentMode) {
          var isDifferent = textNode.nodeValue !== text;
          return isDifferent;
        }
        function warnForDeletedHydratableElement(parentNode, child) {
          {
            if (didWarnInvalidHydration) {
              return;
            }
            didWarnInvalidHydration = true;
            error("Did not expect server HTML to contain a <%s> in <%s>.", child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());
          }
        }
        function warnForDeletedHydratableText(parentNode, child) {
          {
            if (didWarnInvalidHydration) {
              return;
            }
            didWarnInvalidHydration = true;
            error('Did not expect server HTML to contain the text node "%s" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());
          }
        }
        function warnForInsertedHydratedElement(parentNode, tag, props) {
          {
            if (didWarnInvalidHydration) {
              return;
            }
            didWarnInvalidHydration = true;
            error("Expected server HTML to contain a matching <%s> in <%s>.", tag, parentNode.nodeName.toLowerCase());
          }
        }
        function warnForInsertedHydratedText(parentNode, text) {
          {
            if (text === "") {
              return;
            }
            if (didWarnInvalidHydration) {
              return;
            }
            didWarnInvalidHydration = true;
            error('Expected server HTML to contain a matching text node for "%s" in <%s>.', text, parentNode.nodeName.toLowerCase());
          }
        }
        function restoreControlledState$3(domElement, tag, props) {
          switch (tag) {
            case "input":
              restoreControlledState(domElement, props);
              return;
            case "textarea":
              restoreControlledState$2(domElement, props);
              return;
            case "select":
              restoreControlledState$1(domElement, props);
              return;
          }
        }
        var validateDOMNesting = function() {
        };
        var updatedAncestorInfo = function() {
        };
        {
          var specialTags = ["address", "applet", "area", "article", "aside", "base", "basefont", "bgsound", "blockquote", "body", "br", "button", "caption", "center", "col", "colgroup", "dd", "details", "dir", "div", "dl", "dt", "embed", "fieldset", "figcaption", "figure", "footer", "form", "frame", "frameset", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "iframe", "img", "input", "isindex", "li", "link", "listing", "main", "marquee", "menu", "menuitem", "meta", "nav", "noembed", "noframes", "noscript", "object", "ol", "p", "param", "plaintext", "pre", "script", "section", "select", "source", "style", "summary", "table", "tbody", "td", "template", "textarea", "tfoot", "th", "thead", "title", "tr", "track", "ul", "wbr", "xmp"];
          var inScopeTags = [
            "applet",
            "caption",
            "html",
            "table",
            "td",
            "th",
            "marquee",
            "object",
            "template",
            // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
            // TODO: Distinguish by namespace here -- for <title>, including it here
            // errs on the side of fewer warnings
            "foreignObject",
            "desc",
            "title"
          ];
          var buttonScopeTags = inScopeTags.concat(["button"]);
          var impliedEndTags = ["dd", "dt", "li", "option", "optgroup", "p", "rp", "rt"];
          var emptyAncestorInfo = {
            current: null,
            formTag: null,
            aTagInScope: null,
            buttonTagInScope: null,
            nobrTagInScope: null,
            pTagInButtonScope: null,
            listItemTagAutoclosing: null,
            dlItemTagAutoclosing: null
          };
          updatedAncestorInfo = function(oldInfo, tag) {
            var ancestorInfo = assign({}, oldInfo || emptyAncestorInfo);
            var info = {
              tag
            };
            if (inScopeTags.indexOf(tag) !== -1) {
              ancestorInfo.aTagInScope = null;
              ancestorInfo.buttonTagInScope = null;
              ancestorInfo.nobrTagInScope = null;
            }
            if (buttonScopeTags.indexOf(tag) !== -1) {
              ancestorInfo.pTagInButtonScope = null;
            }
            if (specialTags.indexOf(tag) !== -1 && tag !== "address" && tag !== "div" && tag !== "p") {
              ancestorInfo.listItemTagAutoclosing = null;
              ancestorInfo.dlItemTagAutoclosing = null;
            }
            ancestorInfo.current = info;
            if (tag === "form") {
              ancestorInfo.formTag = info;
            }
            if (tag === "a") {
              ancestorInfo.aTagInScope = info;
            }
            if (tag === "button") {
              ancestorInfo.buttonTagInScope = info;
            }
            if (tag === "nobr") {
              ancestorInfo.nobrTagInScope = info;
            }
            if (tag === "p") {
              ancestorInfo.pTagInButtonScope = info;
            }
            if (tag === "li") {
              ancestorInfo.listItemTagAutoclosing = info;
            }
            if (tag === "dd" || tag === "dt") {
              ancestorInfo.dlItemTagAutoclosing = info;
            }
            return ancestorInfo;
          };
          var isTagValidWithParent = function(tag, parentTag) {
            switch (parentTag) {
              case "select":
                return tag === "option" || tag === "optgroup" || tag === "#text";
              case "optgroup":
                return tag === "option" || tag === "#text";
              case "option":
                return tag === "#text";
              case "tr":
                return tag === "th" || tag === "td" || tag === "style" || tag === "script" || tag === "template";
              case "tbody":
              case "thead":
              case "tfoot":
                return tag === "tr" || tag === "style" || tag === "script" || tag === "template";
              case "colgroup":
                return tag === "col" || tag === "template";
              case "table":
                return tag === "caption" || tag === "colgroup" || tag === "tbody" || tag === "tfoot" || tag === "thead" || tag === "style" || tag === "script" || tag === "template";
              case "head":
                return tag === "base" || tag === "basefont" || tag === "bgsound" || tag === "link" || tag === "meta" || tag === "title" || tag === "noscript" || tag === "noframes" || tag === "style" || tag === "script" || tag === "template";
              case "html":
                return tag === "head" || tag === "body" || tag === "frameset";
              case "frameset":
                return tag === "frame";
              case "#document":
                return tag === "html";
            }
            switch (tag) {
              case "h1":
              case "h2":
              case "h3":
              case "h4":
              case "h5":
              case "h6":
                return parentTag !== "h1" && parentTag !== "h2" && parentTag !== "h3" && parentTag !== "h4" && parentTag !== "h5" && parentTag !== "h6";
              case "rp":
              case "rt":
                return impliedEndTags.indexOf(parentTag) === -1;
              case "body":
              case "caption":
              case "col":
              case "colgroup":
              case "frameset":
              case "frame":
              case "head":
              case "html":
              case "tbody":
              case "td":
              case "tfoot":
              case "th":
              case "thead":
              case "tr":
                return parentTag == null;
            }
            return true;
          };
          var findInvalidAncestorForTag = function(tag, ancestorInfo) {
            switch (tag) {
              case "address":
              case "article":
              case "aside":
              case "blockquote":
              case "center":
              case "details":
              case "dialog":
              case "dir":
              case "div":
              case "dl":
              case "fieldset":
              case "figcaption":
              case "figure":
              case "footer":
              case "header":
              case "hgroup":
              case "main":
              case "menu":
              case "nav":
              case "ol":
              case "p":
              case "section":
              case "summary":
              case "ul":
              case "pre":
              case "listing":
              case "table":
              case "hr":
              case "xmp":
              case "h1":
              case "h2":
              case "h3":
              case "h4":
              case "h5":
              case "h6":
                return ancestorInfo.pTagInButtonScope;
              case "form":
                return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;
              case "li":
                return ancestorInfo.listItemTagAutoclosing;
              case "dd":
              case "dt":
                return ancestorInfo.dlItemTagAutoclosing;
              case "button":
                return ancestorInfo.buttonTagInScope;
              case "a":
                return ancestorInfo.aTagInScope;
              case "nobr":
                return ancestorInfo.nobrTagInScope;
            }
            return null;
          };
          var didWarn$1 = {};
          validateDOMNesting = function(childTag, childText, ancestorInfo) {
            ancestorInfo = ancestorInfo || emptyAncestorInfo;
            var parentInfo = ancestorInfo.current;
            var parentTag = parentInfo && parentInfo.tag;
            if (childText != null) {
              if (childTag != null) {
                error("validateDOMNesting: when childText is passed, childTag should be null");
              }
              childTag = "#text";
            }
            var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
            var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
            var invalidParentOrAncestor = invalidParent || invalidAncestor;
            if (!invalidParentOrAncestor) {
              return;
            }
            var ancestorTag = invalidParentOrAncestor.tag;
            var warnKey = !!invalidParent + "|" + childTag + "|" + ancestorTag;
            if (didWarn$1[warnKey]) {
              return;
            }
            didWarn$1[warnKey] = true;
            var tagDisplayName = childTag;
            var whitespaceInfo = "";
            if (childTag === "#text") {
              if (/\S/.test(childText)) {
                tagDisplayName = "Text nodes";
              } else {
                tagDisplayName = "Whitespace text nodes";
                whitespaceInfo = " Make sure you don't have any extra whitespace between tags on each line of your source code.";
              }
            } else {
              tagDisplayName = "<" + childTag + ">";
            }
            if (invalidParent) {
              var info = "";
              if (ancestorTag === "table" && childTag === "tr") {
                info += " Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by the browser.";
              }
              error("validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s", tagDisplayName, ancestorTag, whitespaceInfo, info);
            } else {
              error("validateDOMNesting(...): %s cannot appear as a descendant of <%s>.", tagDisplayName, ancestorTag);
            }
          };
        }
        var SUPPRESS_HYDRATION_WARNING$1 = "suppressHydrationWarning";
        var SUSPENSE_START_DATA = "$";
        var SUSPENSE_END_DATA = "/$";
        var SUSPENSE_PENDING_START_DATA = "$?";
        var SUSPENSE_FALLBACK_START_DATA = "$!";
        var STYLE$1 = "style";
        var eventsEnabled = null;
        var selectionInformation = null;
        function getRootHostContext(rootContainerInstance) {
          var type;
          var namespace;
          var nodeType = rootContainerInstance.nodeType;
          switch (nodeType) {
            case DOCUMENT_NODE:
            case DOCUMENT_FRAGMENT_NODE: {
              type = nodeType === DOCUMENT_NODE ? "#document" : "#fragment";
              var root2 = rootContainerInstance.documentElement;
              namespace = root2 ? root2.namespaceURI : getChildNamespace(null, "");
              break;
            }
            default: {
              var container = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;
              var ownNamespace = container.namespaceURI || null;
              type = container.tagName;
              namespace = getChildNamespace(ownNamespace, type);
              break;
            }
          }
          {
            var validatedTag = type.toLowerCase();
            var ancestorInfo = updatedAncestorInfo(null, validatedTag);
            return {
              namespace,
              ancestorInfo
            };
          }
        }
        function getChildHostContext(parentHostContext, type, rootContainerInstance) {
          {
            var parentHostContextDev = parentHostContext;
            var namespace = getChildNamespace(parentHostContextDev.namespace, type);
            var ancestorInfo = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type);
            return {
              namespace,
              ancestorInfo
            };
          }
        }
        function getPublicInstance(instance) {
          return instance;
        }
        function prepareForCommit(containerInfo) {
          eventsEnabled = isEnabled();
          selectionInformation = getSelectionInformation();
          var activeInstance = null;
          setEnabled(false);
          return activeInstance;
        }
        function resetAfterCommit(containerInfo) {
          restoreSelection(selectionInformation);
          setEnabled(eventsEnabled);
          eventsEnabled = null;
          selectionInformation = null;
        }
        function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
          var parentNamespace;
          {
            var hostContextDev = hostContext;
            validateDOMNesting(type, null, hostContextDev.ancestorInfo);
            if (typeof props.children === "string" || typeof props.children === "number") {
              var string = "" + props.children;
              var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
              validateDOMNesting(null, string, ownAncestorInfo);
            }
            parentNamespace = hostContextDev.namespace;
          }
          var domElement = createElement3(type, props, rootContainerInstance, parentNamespace);
          precacheFiberNode(internalInstanceHandle, domElement);
          updateFiberProps(domElement, props);
          return domElement;
        }
        function appendInitialChild(parentInstance, child) {
          parentInstance.appendChild(child);
        }
        function finalizeInitialChildren(domElement, type, props, rootContainerInstance, hostContext) {
          setInitialProperties(domElement, type, props, rootContainerInstance);
          switch (type) {
            case "button":
            case "input":
            case "select":
            case "textarea":
              return !!props.autoFocus;
            case "img":
              return true;
            default:
              return false;
          }
        }
        function prepareUpdate(domElement, type, oldProps, newProps, rootContainerInstance, hostContext) {
          {
            var hostContextDev = hostContext;
            if (typeof newProps.children !== typeof oldProps.children && (typeof newProps.children === "string" || typeof newProps.children === "number")) {
              var string = "" + newProps.children;
              var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
              validateDOMNesting(null, string, ownAncestorInfo);
            }
          }
          return diffProperties(domElement, type, oldProps, newProps);
        }
        function shouldSetTextContent(type, props) {
          return type === "textarea" || type === "noscript" || typeof props.children === "string" || typeof props.children === "number" || typeof props.dangerouslySetInnerHTML === "object" && props.dangerouslySetInnerHTML !== null && props.dangerouslySetInnerHTML.gy != null;
        }
        function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
          {
            var hostContextDev = hostContext;
            validateDOMNesting(null, text, hostContextDev.ancestorInfo);
          }
          var textNode = createTextNode(text, rootContainerInstance);
          precacheFiberNode(internalInstanceHandle, textNode);
          return textNode;
        }
        function getCurrentEventPriority() {
          var currentEvent = window.event;
          if (currentEvent === void 0) {
            return DefaultEventPriority;
          }
          return getEventPriority(currentEvent.type);
        }
        var scheduleTimeout = typeof setTimeout === "function" ? setTimeout : void 0;
        var cancelTimeout = typeof clearTimeout === "function" ? clearTimeout : void 0;
        var noTimeout = -1;
        var localPromise = typeof Promise === "function" ? Promise : void 0;
        var scheduleMicrotask = typeof queueMicrotask === "function" ? queueMicrotask : typeof localPromise !== "undefined" ? function(callback) {
          return localPromise.resolve(null).then(callback).catch(handleErrorInNextTick);
        } : scheduleTimeout;
        function handleErrorInNextTick(error2) {
          setTimeout(function() {
            throw error2;
          });
        }
        function commitMount(domElement, type, newProps, internalInstanceHandle) {
          switch (type) {
            case "button":
            case "input":
            case "select":
            case "textarea":
              if (newProps.autoFocus) {
                domElement.focus();
              }
              return;
            case "img": {
              if (newProps.src) {
                domElement.src = newProps.src;
              }
              return;
            }
          }
        }
        function commitUpdate(domElement, updatePayload, type, oldProps, newProps, internalInstanceHandle) {
          updateProperties(domElement, updatePayload, type, oldProps, newProps);
          updateFiberProps(domElement, newProps);
        }
        function resetTextContent(domElement) {
          setTextContent(domElement, "");
        }
        function commitTextUpdate(textInstance, oldText, newText) {
          textInstance.nodeValue = newText;
        }
        function appendChild(parentInstance, child) {
          parentInstance.appendChild(child);
        }
        function appendChildToContainer(container, child) {
          var parentNode;
          if (container.nodeType === COMMENT_NODE) {
            parentNode = container.parentNode;
            parentNode.insertBefore(child, container);
          } else {
            parentNode = container;
            parentNode.appendChild(child);
          }
          var reactRootContainer = container.Aa;
          if ((reactRootContainer === null || reactRootContainer === void 0) && parentNode.onclick === null) {
            trapClickOnNonInteractiveElement(parentNode);
          }
        }
        function insertBefore(parentInstance, child, beforeChild) {
          parentInstance.insertBefore(child, beforeChild);
        }
        function insertInContainerBefore(container, child, beforeChild) {
          if (container.nodeType === COMMENT_NODE) {
            container.parentNode.insertBefore(child, beforeChild);
          } else {
            container.insertBefore(child, beforeChild);
          }
        }
        function removeChild(parentInstance, child) {
          parentInstance.removeChild(child);
        }
        function removeChildFromContainer(container, child) {
          if (container.nodeType === COMMENT_NODE) {
            container.parentNode.removeChild(child);
          } else {
            container.removeChild(child);
          }
        }
        function clearSuspenseBoundary(parentInstance, suspenseInstance) {
          var node = suspenseInstance;
          var depth = 0;
          do {
            var nextNode = node.nextSibling;
            parentInstance.removeChild(node);
            if (nextNode && nextNode.nodeType === COMMENT_NODE) {
              var data = nextNode.data;
              if (data === SUSPENSE_END_DATA) {
                if (depth === 0) {
                  parentInstance.removeChild(nextNode);
                  retryIfBlockedOn(suspenseInstance);
                  return;
                } else {
                  depth--;
                }
              } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_PENDING_START_DATA || data === SUSPENSE_FALLBACK_START_DATA) {
                depth++;
              }
            }
            node = nextNode;
          } while (node);
          retryIfBlockedOn(suspenseInstance);
        }
        function clearSuspenseBoundaryFromContainer(container, suspenseInstance) {
          if (container.nodeType === COMMENT_NODE) {
            clearSuspenseBoundary(container.parentNode, suspenseInstance);
          } else if (container.nodeType === ELEMENT_NODE) {
            clearSuspenseBoundary(container, suspenseInstance);
          }
          retryIfBlockedOn(container);
        }
        function hideInstance(instance) {
          instance = instance;
          var style2 = instance.style;
          if (typeof style2.setProperty === "function") {
            style2.setProperty("display", "none", "important");
          } else {
            style2.display = "none";
          }
        }
        function hideTextInstance(textInstance) {
          textInstance.nodeValue = "";
        }
        function unhideInstance(instance, props) {
          instance = instance;
          var styleProp = props[STYLE$1];
          var display = styleProp !== void 0 && styleProp !== null && styleProp.hasOwnProperty("display") ? styleProp.display : null;
          instance.style.display = dangerousStyleValue("display", display);
        }
        function unhideTextInstance(textInstance, text) {
          textInstance.nodeValue = text;
        }
        function clearContainer(container) {
          if (container.nodeType === ELEMENT_NODE) {
            container.textContent = "";
          } else if (container.nodeType === DOCUMENT_NODE) {
            if (container.documentElement) {
              container.removeChild(container.documentElement);
            }
          }
        }
        function canHydrateInstance(instance, type, props) {
          if (instance.nodeType !== ELEMENT_NODE || type.toLowerCase() !== instance.nodeName.toLowerCase()) {
            return null;
          }
          return instance;
        }
        function canHydrateTextInstance(instance, text) {
          if (text === "" || instance.nodeType !== TEXT_NODE) {
            return null;
          }
          return instance;
        }
        function canHydrateSuspenseInstance(instance) {
          if (instance.nodeType !== COMMENT_NODE) {
            return null;
          }
          return instance;
        }
        function isSuspenseInstancePending(instance) {
          return instance.data === SUSPENSE_PENDING_START_DATA;
        }
        function isSuspenseInstanceFallback(instance) {
          return instance.data === SUSPENSE_FALLBACK_START_DATA;
        }
        function getSuspenseInstanceFallbackErrorDetails(instance) {
          var dataset = instance.nextSibling && instance.nextSibling.dataset;
          var digest, message, stack;
          if (dataset) {
            digest = dataset.dgst;
            {
              message = dataset.msg;
              stack = dataset.stck;
            }
          }
          {
            return {
              message,
              digest,
              stack
            };
          }
        }
        function registerSuspenseInstanceRetry(instance, callback) {
          instance.iy = callback;
        }
        function getNextHydratable(node) {
          for (; node != null; node = node.nextSibling) {
            var nodeType = node.nodeType;
            if (nodeType === ELEMENT_NODE || nodeType === TEXT_NODE) {
              break;
            }
            if (nodeType === COMMENT_NODE) {
              var nodeData = node.data;
              if (nodeData === SUSPENSE_START_DATA || nodeData === SUSPENSE_FALLBACK_START_DATA || nodeData === SUSPENSE_PENDING_START_DATA) {
                break;
              }
              if (nodeData === SUSPENSE_END_DATA) {
                return null;
              }
            }
          }
          return node;
        }
        function getNextHydratableSibling(instance) {
          return getNextHydratable(instance.nextSibling);
        }
        function getFirstHydratableChild(parentInstance) {
          return getNextHydratable(parentInstance.firstChild);
        }
        function getFirstHydratableChildWithinContainer(parentContainer) {
          return getNextHydratable(parentContainer.firstChild);
        }
        function getFirstHydratableChildWithinSuspenseInstance(parentInstance) {
          return getNextHydratable(parentInstance.nextSibling);
        }
        function hydrateInstance(instance, type, props, rootContainerInstance, hostContext, internalInstanceHandle, shouldWarnDev) {
          precacheFiberNode(internalInstanceHandle, instance);
          updateFiberProps(instance, props);
          var parentNamespace;
          {
            var hostContextDev = hostContext;
            parentNamespace = hostContextDev.namespace;
          }
          var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
          return diffHydratedProperties(instance, type, props, parentNamespace, rootContainerInstance, isConcurrentMode, shouldWarnDev);
        }
        function hydrateTextInstance(textInstance, text, internalInstanceHandle, shouldWarnDev) {
          precacheFiberNode(internalInstanceHandle, textInstance);
          var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
          return diffHydratedText(textInstance, text);
        }
        function hydrateSuspenseInstance(suspenseInstance, internalInstanceHandle) {
          precacheFiberNode(internalInstanceHandle, suspenseInstance);
        }
        function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {
          var node = suspenseInstance.nextSibling;
          var depth = 0;
          while (node) {
            if (node.nodeType === COMMENT_NODE) {
              var data = node.data;
              if (data === SUSPENSE_END_DATA) {
                if (depth === 0) {
                  return getNextHydratableSibling(node);
                } else {
                  depth--;
                }
              } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                depth++;
              }
            }
            node = node.nextSibling;
          }
          return null;
        }
        function getParentSuspenseInstance(targetInstance) {
          var node = targetInstance.previousSibling;
          var depth = 0;
          while (node) {
            if (node.nodeType === COMMENT_NODE) {
              var data = node.data;
              if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                if (depth === 0) {
                  return node;
                } else {
                  depth--;
                }
              } else if (data === SUSPENSE_END_DATA) {
                depth++;
              }
            }
            node = node.previousSibling;
          }
          return null;
        }
        function commitHydratedContainer(container) {
          retryIfBlockedOn(container);
        }
        function commitHydratedSuspenseInstance(suspenseInstance) {
          retryIfBlockedOn(suspenseInstance);
        }
        function shouldDeleteUnhydratedTailInstances(parentType) {
          return parentType !== "head" && parentType !== "body";
        }
        function didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text, isConcurrentMode) {
          var shouldWarnDev = true;
          checkForUnmatchedText(textInstance.nodeValue, text, isConcurrentMode, shouldWarnDev);
        }
        function didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, text, isConcurrentMode) {
          if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
            var shouldWarnDev = true;
            checkForUnmatchedText(textInstance.nodeValue, text, isConcurrentMode, shouldWarnDev);
          }
        }
        function didNotHydrateInstanceWithinContainer(parentContainer, instance) {
          {
            if (instance.nodeType === ELEMENT_NODE) {
              warnForDeletedHydratableElement(parentContainer, instance);
            } else if (instance.nodeType === COMMENT_NODE)
              ;
            else {
              warnForDeletedHydratableText(parentContainer, instance);
            }
          }
        }
        function didNotHydrateInstanceWithinSuspenseInstance(parentInstance, instance) {
          {
            var parentNode = parentInstance.parentNode;
            if (parentNode !== null) {
              if (instance.nodeType === ELEMENT_NODE) {
                warnForDeletedHydratableElement(parentNode, instance);
              } else if (instance.nodeType === COMMENT_NODE)
                ;
              else {
                warnForDeletedHydratableText(parentNode, instance);
              }
            }
          }
        }
        function didNotHydrateInstance(parentType, parentProps, parentInstance, instance, isConcurrentMode) {
          {
            if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
              if (instance.nodeType === ELEMENT_NODE) {
                warnForDeletedHydratableElement(parentInstance, instance);
              } else if (instance.nodeType === COMMENT_NODE)
                ;
              else {
                warnForDeletedHydratableText(parentInstance, instance);
              }
            }
          }
        }
        function didNotFindHydratableInstanceWithinContainer(parentContainer, type, props) {
          {
            warnForInsertedHydratedElement(parentContainer, type);
          }
        }
        function didNotFindHydratableTextInstanceWithinContainer(parentContainer, text) {
          {
            warnForInsertedHydratedText(parentContainer, text);
          }
        }
        function didNotFindHydratableInstanceWithinSuspenseInstance(parentInstance, type, props) {
          {
            var parentNode = parentInstance.parentNode;
            if (parentNode !== null)
              warnForInsertedHydratedElement(parentNode, type);
          }
        }
        function didNotFindHydratableTextInstanceWithinSuspenseInstance(parentInstance, text) {
          {
            var parentNode = parentInstance.parentNode;
            if (parentNode !== null)
              warnForInsertedHydratedText(parentNode, text);
          }
        }
        function didNotFindHydratableInstance(parentType, parentProps, parentInstance, type, props, isConcurrentMode) {
          {
            if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
              warnForInsertedHydratedElement(parentInstance, type);
            }
          }
        }
        function didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, text, isConcurrentMode) {
          {
            if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
              warnForInsertedHydratedText(parentInstance, text);
            }
          }
        }
        function errorHydratingContainer(parentContainer) {
          {
            error("An error occurred during hydration. The server HTML was replaced with client content in <%s>.", parentContainer.nodeName.toLowerCase());
          }
        }
        function preparePortalMount(portalInstance) {
          listenToAllSupportedEvents(portalInstance);
        }
        var randomKey = Math.random().toString(36).slice(2);
        var internalInstanceKey = "__reactFiber$" + randomKey;
        var internalPropsKey = "__reactProps$" + randomKey;
        var internalContainerInstanceKey = "__reactContainer$" + randomKey;
        var internalEventHandlersKey = "__reactEvents$" + randomKey;
        var internalEventHandlerListenersKey = "__reactListeners$" + randomKey;
        var internalEventHandlesSetKey = "__reactHandles$" + randomKey;
        function detachDeletedInstance(node) {
          delete node[internalInstanceKey];
          delete node[internalPropsKey];
          delete node[internalEventHandlersKey];
          delete node[internalEventHandlerListenersKey];
          delete node[internalEventHandlesSetKey];
        }
        function precacheFiberNode(hostInst, node) {
          node[internalInstanceKey] = hostInst;
        }
        function markContainerAsRoot(hostRoot, node) {
          node[internalContainerInstanceKey] = hostRoot;
        }
        function unmarkContainerAsRoot(node) {
          node[internalContainerInstanceKey] = null;
        }
        function isContainerMarkedAsRoot(node) {
          return !!node[internalContainerInstanceKey];
        }
        function getClosestInstanceFromNode(targetNode) {
          var targetInst = targetNode[internalInstanceKey];
          if (targetInst) {
            return targetInst;
          }
          var parentNode = targetNode.parentNode;
          while (parentNode) {
            targetInst = parentNode[internalContainerInstanceKey] || parentNode[internalInstanceKey];
            if (targetInst) {
              var alternate = targetInst.alternate;
              if (targetInst.child !== null || alternate !== null && alternate.child !== null) {
                var suspenseInstance = getParentSuspenseInstance(targetNode);
                while (suspenseInstance !== null) {
                  var targetSuspenseInst = suspenseInstance[internalInstanceKey];
                  if (targetSuspenseInst) {
                    return targetSuspenseInst;
                  }
                  suspenseInstance = getParentSuspenseInstance(suspenseInstance);
                }
              }
              return targetInst;
            }
            targetNode = parentNode;
            parentNode = targetNode.parentNode;
          }
          return null;
        }
        function getInstanceFromNode(node) {
          var inst = node[internalInstanceKey] || node[internalContainerInstanceKey];
          if (inst) {
            if (inst.tag === HostComponent || inst.tag === HostText || inst.tag === SuspenseComponent || inst.tag === HostRoot) {
              return inst;
            } else {
              return null;
            }
          }
          return null;
        }
        function getNodeFromInstance(inst) {
          if (inst.tag === HostComponent || inst.tag === HostText) {
            return inst.stateNode;
          }
          throw new Error("getNodeFromInstance: Invalid argument.");
        }
        function getFiberCurrentPropsFromNode(node) {
          return node[internalPropsKey] || null;
        }
        function updateFiberProps(node, props) {
          node[internalPropsKey] = props;
        }
        function getEventListenerSet(node) {
          var elementListenerSet = node[internalEventHandlersKey];
          if (elementListenerSet === void 0) {
            elementListenerSet = node[internalEventHandlersKey] = /* @__PURE__ */ new Set();
          }
          return elementListenerSet;
        }
        var loggedTypeFailures = {};
        var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
        function setCurrentlyValidatingElement(element) {
          {
            if (element) {
              var owner = element.T;
              var stack = describeUnknownElementTypeFrameInDEV(element.type, element.pb, owner ? owner.type : null);
              ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
            } else {
              ReactDebugCurrentFrame$1.setExtraStackFrame(null);
            }
          }
        }
        function checkPropTypes(typeSpecs, values, location, componentName, element) {
          {
            var has2 = Function.call.bind(hasOwnProperty);
            for (var typeSpecName in typeSpecs) {
              if (has2(typeSpecs, typeSpecName)) {
                var error$1 = void 0;
                try {
                  if (typeof typeSpecs[typeSpecName] !== "function") {
                    var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                    err.name = "Invariant Violation";
                    throw err;
                  }
                  error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                } catch (ex) {
                  error$1 = ex;
                }
                if (error$1 && !(error$1 instanceof Error)) {
                  setCurrentlyValidatingElement(element);
                  error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                  setCurrentlyValidatingElement(null);
                }
                if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                  loggedTypeFailures[error$1.message] = true;
                  setCurrentlyValidatingElement(element);
                  error("Failed %s type: %s", location, error$1.message);
                  setCurrentlyValidatingElement(null);
                }
              }
            }
          }
        }
        var valueStack = [];
        var fiberStack;
        {
          fiberStack = [];
        }
        var index = -1;
        function createCursor(defaultValue) {
          return {
            current: defaultValue
          };
        }
        function pop(cursor, fiber) {
          if (index < 0) {
            {
              error("Unexpected pop.");
            }
            return;
          }
          {
            if (fiber !== fiberStack[index]) {
              error("Unexpected Fiber popped.");
            }
          }
          cursor.current = valueStack[index];
          valueStack[index] = null;
          {
            fiberStack[index] = null;
          }
          index--;
        }
        function push(cursor, value, fiber) {
          index++;
          valueStack[index] = cursor.current;
          {
            fiberStack[index] = fiber;
          }
          cursor.current = value;
        }
        var warnedAboutMissingGetChildContext;
        {
          warnedAboutMissingGetChildContext = {};
        }
        var emptyContextObject = {};
        {
          Object.freeze(emptyContextObject);
        }
        var contextStackCursor = createCursor(emptyContextObject);
        var didPerformWorkStackCursor = createCursor(false);
        var previousContext = emptyContextObject;
        function getUnmaskedContext(workInProgress2, Component2, didPushOwnContextIfProvider) {
          {
            if (didPushOwnContextIfProvider && isContextProvider(Component2)) {
              return previousContext;
            }
            return contextStackCursor.current;
          }
        }
        function cacheContext(workInProgress2, unmaskedContext, maskedContext) {
          {
            var instance = workInProgress2.stateNode;
            instance.Ep = unmaskedContext;
            instance.Fp = maskedContext;
          }
        }
        function getMaskedContext(workInProgress2, unmaskedContext) {
          {
            var type = workInProgress2.type;
            var contextTypes = type.contextTypes;
            if (!contextTypes) {
              return emptyContextObject;
            }
            var instance = workInProgress2.stateNode;
            if (instance && instance.Ep === unmaskedContext) {
              return instance.Fp;
            }
            var context = {};
            for (var key in contextTypes) {
              context[key] = unmaskedContext[key];
            }
            {
              var name = getComponentNameFromFiber(workInProgress2) || "Unknown";
              checkPropTypes(contextTypes, context, "context", name);
            }
            if (instance) {
              cacheContext(workInProgress2, unmaskedContext, context);
            }
            return context;
          }
        }
        function hasContextChanged() {
          {
            return didPerformWorkStackCursor.current;
          }
        }
        function isContextProvider(type) {
          {
            var childContextTypes = type.childContextTypes;
            return childContextTypes !== null && childContextTypes !== void 0;
          }
        }
        function popContext(fiber) {
          {
            pop(didPerformWorkStackCursor, fiber);
            pop(contextStackCursor, fiber);
          }
        }
        function popTopLevelContextObject(fiber) {
          {
            pop(didPerformWorkStackCursor, fiber);
            pop(contextStackCursor, fiber);
          }
        }
        function pushTopLevelContextObject(fiber, context, didChange) {
          {
            if (contextStackCursor.current !== emptyContextObject) {
              throw new Error("Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.");
            }
            push(contextStackCursor, context, fiber);
            push(didPerformWorkStackCursor, didChange, fiber);
          }
        }
        function processChildContext(fiber, type, parentContext) {
          {
            var instance = fiber.stateNode;
            var childContextTypes = type.childContextTypes;
            if (typeof instance.getChildContext !== "function") {
              {
                var componentName = getComponentNameFromFiber(fiber) || "Unknown";
                if (!warnedAboutMissingGetChildContext[componentName]) {
                  warnedAboutMissingGetChildContext[componentName] = true;
                  error("%s.childContextTypes is specified but there is no getChildContext() method on the instance. You can either define getChildContext() on %s or remove childContextTypes from it.", componentName, componentName);
                }
              }
              return parentContext;
            }
            var childContext = instance.getChildContext();
            for (var contextKey in childContext) {
              if (!(contextKey in childContextTypes)) {
                throw new Error((getComponentNameFromFiber(fiber) || "Unknown") + '.getChildContext(): key "' + contextKey + '" is not defined in childContextTypes.');
              }
            }
            {
              var name = getComponentNameFromFiber(fiber) || "Unknown";
              checkPropTypes(childContextTypes, childContext, "child context", name);
            }
            return assign({}, parentContext, childContext);
          }
        }
        function pushContextProvider(workInProgress2) {
          {
            var instance = workInProgress2.stateNode;
            var memoizedMergedChildContext = instance && instance.Hj || emptyContextObject;
            previousContext = contextStackCursor.current;
            push(contextStackCursor, memoizedMergedChildContext, workInProgress2);
            push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress2);
            return true;
          }
        }
        function invalidateContextProvider(workInProgress2, type, didChange) {
          {
            var instance = workInProgress2.stateNode;
            if (!instance) {
              throw new Error("Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.");
            }
            if (didChange) {
              var mergedContext = processChildContext(workInProgress2, type, previousContext);
              instance.Hj = mergedContext;
              pop(didPerformWorkStackCursor, workInProgress2);
              pop(contextStackCursor, workInProgress2);
              push(contextStackCursor, mergedContext, workInProgress2);
              push(didPerformWorkStackCursor, didChange, workInProgress2);
            } else {
              pop(didPerformWorkStackCursor, workInProgress2);
              push(didPerformWorkStackCursor, didChange, workInProgress2);
            }
          }
        }
        function findCurrentUnmaskedContext(fiber) {
          {
            if (!isFiberMounted(fiber) || fiber.tag !== ClassComponent) {
              throw new Error("Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.");
            }
            var node = fiber;
            do {
              switch (node.tag) {
                case HostRoot:
                  return node.stateNode.context;
                case ClassComponent: {
                  var Component2 = node.type;
                  if (isContextProvider(Component2)) {
                    return node.stateNode.Hj;
                  }
                  break;
                }
              }
              node = node.return;
            } while (node !== null);
            throw new Error("Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.");
          }
        }
        var LegacyRoot = 0;
        var ConcurrentRoot = 1;
        var syncQueue = null;
        var includesLegacySyncCallbacks = false;
        var isFlushingSyncQueue = false;
        function scheduleSyncCallback(callback) {
          if (syncQueue === null) {
            syncQueue = [callback];
          } else {
            syncQueue.push(callback);
          }
        }
        function scheduleLegacySyncCallback(callback) {
          includesLegacySyncCallbacks = true;
          scheduleSyncCallback(callback);
        }
        function flushSyncCallbacksOnlyInLegacyMode() {
          if (includesLegacySyncCallbacks) {
            flushSyncCallbacks();
          }
        }
        function flushSyncCallbacks() {
          if (!isFlushingSyncQueue && syncQueue !== null) {
            isFlushingSyncQueue = true;
            var i = 0;
            var previousUpdatePriority = getCurrentUpdatePriority();
            try {
              var isSync = true;
              var queue = syncQueue;
              setCurrentUpdatePriority(DiscreteEventPriority);
              for (; i < queue.length; i++) {
                var callback = queue[i];
                do {
                  callback = callback(isSync);
                } while (callback !== null);
              }
              syncQueue = null;
              includesLegacySyncCallbacks = false;
            } catch (error2) {
              if (syncQueue !== null) {
                syncQueue = syncQueue.slice(i + 1);
              }
              scheduleCallback(ImmediatePriority, flushSyncCallbacks);
              throw error2;
            } finally {
              setCurrentUpdatePriority(previousUpdatePriority);
              isFlushingSyncQueue = false;
            }
          }
          return null;
        }
        var forkStack = [];
        var forkStackIndex = 0;
        var treeForkProvider = null;
        var treeForkCount = 0;
        var idStack = [];
        var idStackIndex = 0;
        var treeContextProvider = null;
        var treeContextId = 1;
        var treeContextOverflow = "";
        function isForkedChild(workInProgress2) {
          warnIfNotHydrating();
          return (workInProgress2.flags & Forked) !== NoFlags;
        }
        function getForksAtLevel(workInProgress2) {
          warnIfNotHydrating();
          return treeForkCount;
        }
        function getTreeId() {
          var overflow = treeContextOverflow;
          var idWithLeadingBit = treeContextId;
          var id = idWithLeadingBit & ~getLeadingBit(idWithLeadingBit);
          return id.toString(32) + overflow;
        }
        function pushTreeFork(workInProgress2, totalChildren) {
          warnIfNotHydrating();
          forkStack[forkStackIndex++] = treeForkCount;
          forkStack[forkStackIndex++] = treeForkProvider;
          treeForkProvider = workInProgress2;
          treeForkCount = totalChildren;
        }
        function pushTreeId(workInProgress2, totalChildren, index2) {
          warnIfNotHydrating();
          idStack[idStackIndex++] = treeContextId;
          idStack[idStackIndex++] = treeContextOverflow;
          idStack[idStackIndex++] = treeContextProvider;
          treeContextProvider = workInProgress2;
          var baseIdWithLeadingBit = treeContextId;
          var baseOverflow = treeContextOverflow;
          var baseLength = getBitLength(baseIdWithLeadingBit) - 1;
          var baseId = baseIdWithLeadingBit & ~(1 << baseLength);
          var slot = index2 + 1;
          var length = getBitLength(totalChildren) + baseLength;
          if (length > 30) {
            var numberOfOverflowBits = baseLength - baseLength % 5;
            var newOverflowBits = (1 << numberOfOverflowBits) - 1;
            var newOverflow = (baseId & newOverflowBits).toString(32);
            var restOfBaseId = baseId >> numberOfOverflowBits;
            var restOfBaseLength = baseLength - numberOfOverflowBits;
            var restOfLength = getBitLength(totalChildren) + restOfBaseLength;
            var restOfNewBits = slot << restOfBaseLength;
            var id = restOfNewBits | restOfBaseId;
            var overflow = newOverflow + baseOverflow;
            treeContextId = 1 << restOfLength | id;
            treeContextOverflow = overflow;
          } else {
            var newBits = slot << baseLength;
            var _id = newBits | baseId;
            var _overflow = baseOverflow;
            treeContextId = 1 << length | _id;
            treeContextOverflow = _overflow;
          }
        }
        function pushMaterializedTreeId(workInProgress2) {
          warnIfNotHydrating();
          var returnFiber = workInProgress2.return;
          if (returnFiber !== null) {
            var numberOfForks = 1;
            var slotIndex = 0;
            pushTreeFork(workInProgress2, numberOfForks);
            pushTreeId(workInProgress2, numberOfForks, slotIndex);
          }
        }
        function getBitLength(number) {
          return 32 - clz32(number);
        }
        function getLeadingBit(id) {
          return 1 << getBitLength(id) - 1;
        }
        function popTreeContext(workInProgress2) {
          while (workInProgress2 === treeForkProvider) {
            treeForkProvider = forkStack[--forkStackIndex];
            forkStack[forkStackIndex] = null;
            treeForkCount = forkStack[--forkStackIndex];
            forkStack[forkStackIndex] = null;
          }
          while (workInProgress2 === treeContextProvider) {
            treeContextProvider = idStack[--idStackIndex];
            idStack[idStackIndex] = null;
            treeContextOverflow = idStack[--idStackIndex];
            idStack[idStackIndex] = null;
            treeContextId = idStack[--idStackIndex];
            idStack[idStackIndex] = null;
          }
        }
        function getSuspendedTreeContext() {
          warnIfNotHydrating();
          if (treeContextProvider !== null) {
            return {
              id: treeContextId,
              overflow: treeContextOverflow
            };
          } else {
            return null;
          }
        }
        function restoreSuspendedTreeContext(workInProgress2, suspendedContext) {
          warnIfNotHydrating();
          idStack[idStackIndex++] = treeContextId;
          idStack[idStackIndex++] = treeContextOverflow;
          idStack[idStackIndex++] = treeContextProvider;
          treeContextId = suspendedContext.id;
          treeContextOverflow = suspendedContext.overflow;
          treeContextProvider = workInProgress2;
        }
        function warnIfNotHydrating() {
          {
            if (!getIsHydrating()) {
              error("Expected to be hydrating. This is a bug in React. Please file an issue.");
            }
          }
        }
        var hydrationParentFiber = null;
        var nextHydratableInstance = null;
        var isHydrating = false;
        var didSuspendOrErrorDEV = false;
        var hydrationErrors = null;
        function warnIfHydrating() {
          {
            if (isHydrating) {
              error("We should not be hydrating here. This is a bug in React. Please file a bug.");
            }
          }
        }
        function markDidThrowWhileHydratingDEV() {
          {
            didSuspendOrErrorDEV = true;
          }
        }
        function didSuspendOrErrorWhileHydratingDEV() {
          {
            return didSuspendOrErrorDEV;
          }
        }
        function enterHydrationState(fiber) {
          var parentInstance = fiber.stateNode.containerInfo;
          nextHydratableInstance = getFirstHydratableChildWithinContainer(parentInstance);
          hydrationParentFiber = fiber;
          isHydrating = true;
          hydrationErrors = null;
          didSuspendOrErrorDEV = false;
          return true;
        }
        function reenterHydrationStateFromDehydratedSuspenseInstance(fiber, suspenseInstance, treeContext) {
          nextHydratableInstance = getFirstHydratableChildWithinSuspenseInstance(suspenseInstance);
          hydrationParentFiber = fiber;
          isHydrating = true;
          hydrationErrors = null;
          didSuspendOrErrorDEV = false;
          if (treeContext !== null) {
            restoreSuspendedTreeContext(fiber, treeContext);
          }
          return true;
        }
        function warnUnhydratedInstance(returnFiber, instance) {
          {
            switch (returnFiber.tag) {
              case HostRoot: {
                didNotHydrateInstanceWithinContainer(returnFiber.stateNode.containerInfo, instance);
                break;
              }
              case HostComponent: {
                var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                didNotHydrateInstance(
                  returnFiber.type,
                  returnFiber.memoizedProps,
                  returnFiber.stateNode,
                  instance,
                  // TODO: Delete this argument when we remove the legacy root API.
                  isConcurrentMode
                );
                break;
              }
              case SuspenseComponent: {
                var suspenseState = returnFiber.memoizedState;
                if (suspenseState.dehydrated !== null)
                  didNotHydrateInstanceWithinSuspenseInstance(suspenseState.dehydrated, instance);
                break;
              }
            }
          }
        }
        function deleteHydratableInstance(returnFiber, instance) {
          warnUnhydratedInstance(returnFiber, instance);
          var childToDelete = createFiberFromHostInstanceForDeletion();
          childToDelete.stateNode = instance;
          childToDelete.return = returnFiber;
          var deletions = returnFiber.deletions;
          if (deletions === null) {
            returnFiber.deletions = [childToDelete];
            returnFiber.flags |= ChildDeletion;
          } else {
            deletions.push(childToDelete);
          }
        }
        function warnNonhydratedInstance(returnFiber, fiber) {
          {
            if (didSuspendOrErrorDEV) {
              return;
            }
            switch (returnFiber.tag) {
              case HostRoot: {
                var parentContainer = returnFiber.stateNode.containerInfo;
                switch (fiber.tag) {
                  case HostComponent:
                    var type = fiber.type;
                    var props = fiber.pendingProps;
                    didNotFindHydratableInstanceWithinContainer(parentContainer, type);
                    break;
                  case HostText:
                    var text = fiber.pendingProps;
                    didNotFindHydratableTextInstanceWithinContainer(parentContainer, text);
                    break;
                }
                break;
              }
              case HostComponent: {
                var parentType = returnFiber.type;
                var parentProps = returnFiber.memoizedProps;
                var parentInstance = returnFiber.stateNode;
                switch (fiber.tag) {
                  case HostComponent: {
                    var _type = fiber.type;
                    var _props = fiber.pendingProps;
                    var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                    didNotFindHydratableInstance(
                      parentType,
                      parentProps,
                      parentInstance,
                      _type,
                      _props,
                      // TODO: Delete this argument when we remove the legacy root API.
                      isConcurrentMode
                    );
                    break;
                  }
                  case HostText: {
                    var _text = fiber.pendingProps;
                    var _isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                    didNotFindHydratableTextInstance(
                      parentType,
                      parentProps,
                      parentInstance,
                      _text,
                      // TODO: Delete this argument when we remove the legacy root API.
                      _isConcurrentMode
                    );
                    break;
                  }
                }
                break;
              }
              case SuspenseComponent: {
                var suspenseState = returnFiber.memoizedState;
                var _parentInstance = suspenseState.dehydrated;
                if (_parentInstance !== null)
                  switch (fiber.tag) {
                    case HostComponent:
                      var _type2 = fiber.type;
                      var _props2 = fiber.pendingProps;
                      didNotFindHydratableInstanceWithinSuspenseInstance(_parentInstance, _type2);
                      break;
                    case HostText:
                      var _text2 = fiber.pendingProps;
                      didNotFindHydratableTextInstanceWithinSuspenseInstance(_parentInstance, _text2);
                      break;
                  }
                break;
              }
              default:
                return;
            }
          }
        }
        function insertNonHydratedInstance(returnFiber, fiber) {
          fiber.flags = fiber.flags & ~Hydrating | Placement;
          warnNonhydratedInstance(returnFiber, fiber);
        }
        function tryHydrate(fiber, nextInstance) {
          switch (fiber.tag) {
            case HostComponent: {
              var type = fiber.type;
              var props = fiber.pendingProps;
              var instance = canHydrateInstance(nextInstance, type);
              if (instance !== null) {
                fiber.stateNode = instance;
                hydrationParentFiber = fiber;
                nextHydratableInstance = getFirstHydratableChild(instance);
                return true;
              }
              return false;
            }
            case HostText: {
              var text = fiber.pendingProps;
              var textInstance = canHydrateTextInstance(nextInstance, text);
              if (textInstance !== null) {
                fiber.stateNode = textInstance;
                hydrationParentFiber = fiber;
                nextHydratableInstance = null;
                return true;
              }
              return false;
            }
            case SuspenseComponent: {
              var suspenseInstance = canHydrateSuspenseInstance(nextInstance);
              if (suspenseInstance !== null) {
                var suspenseState = {
                  dehydrated: suspenseInstance,
                  treeContext: getSuspendedTreeContext(),
                  retryLane: OffscreenLane
                };
                fiber.memoizedState = suspenseState;
                var dehydratedFragment = createFiberFromDehydratedFragment(suspenseInstance);
                dehydratedFragment.return = fiber;
                fiber.child = dehydratedFragment;
                hydrationParentFiber = fiber;
                nextHydratableInstance = null;
                return true;
              }
              return false;
            }
            default:
              return false;
          }
        }
        function shouldClientRenderOnMismatch(fiber) {
          return (fiber.mode & ConcurrentMode) !== NoMode && (fiber.flags & DidCapture) === NoFlags;
        }
        function throwOnHydrationMismatch(fiber) {
          throw new Error("Hydration failed because the initial UI does not match what was rendered on the server.");
        }
        function tryToClaimNextHydratableInstance(fiber) {
          if (!isHydrating) {
            return;
          }
          var nextInstance = nextHydratableInstance;
          if (!nextInstance) {
            if (shouldClientRenderOnMismatch(fiber)) {
              warnNonhydratedInstance(hydrationParentFiber, fiber);
              throwOnHydrationMismatch();
            }
            insertNonHydratedInstance(hydrationParentFiber, fiber);
            isHydrating = false;
            hydrationParentFiber = fiber;
            return;
          }
          var firstAttemptedInstance = nextInstance;
          if (!tryHydrate(fiber, nextInstance)) {
            if (shouldClientRenderOnMismatch(fiber)) {
              warnNonhydratedInstance(hydrationParentFiber, fiber);
              throwOnHydrationMismatch();
            }
            nextInstance = getNextHydratableSibling(firstAttemptedInstance);
            var prevHydrationParentFiber = hydrationParentFiber;
            if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
              insertNonHydratedInstance(hydrationParentFiber, fiber);
              isHydrating = false;
              hydrationParentFiber = fiber;
              return;
            }
            deleteHydratableInstance(prevHydrationParentFiber, firstAttemptedInstance);
          }
        }
        function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
          var instance = fiber.stateNode;
          var shouldWarnIfMismatchDev = !didSuspendOrErrorDEV;
          var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber, shouldWarnIfMismatchDev);
          fiber.updateQueue = updatePayload;
          if (updatePayload !== null) {
            return true;
          }
          return false;
        }
        function prepareToHydrateHostTextInstance(fiber) {
          var textInstance = fiber.stateNode;
          var textContent = fiber.memoizedProps;
          var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);
          if (shouldUpdate) {
            var returnFiber = hydrationParentFiber;
            if (returnFiber !== null) {
              switch (returnFiber.tag) {
                case HostRoot: {
                  var parentContainer = returnFiber.stateNode.containerInfo;
                  var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                  didNotMatchHydratedContainerTextInstance(
                    parentContainer,
                    textInstance,
                    textContent,
                    // TODO: Delete this argument when we remove the legacy root API.
                    isConcurrentMode
                  );
                  break;
                }
                case HostComponent: {
                  var parentType = returnFiber.type;
                  var parentProps = returnFiber.memoizedProps;
                  var parentInstance = returnFiber.stateNode;
                  var _isConcurrentMode2 = (returnFiber.mode & ConcurrentMode) !== NoMode;
                  didNotMatchHydratedTextInstance(
                    parentType,
                    parentProps,
                    parentInstance,
                    textInstance,
                    textContent,
                    // TODO: Delete this argument when we remove the legacy root API.
                    _isConcurrentMode2
                  );
                  break;
                }
              }
            }
          }
          return shouldUpdate;
        }
        function prepareToHydrateHostSuspenseInstance(fiber) {
          var suspenseState = fiber.memoizedState;
          var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
          if (!suspenseInstance) {
            throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
          }
          hydrateSuspenseInstance(suspenseInstance, fiber);
        }
        function skipPastDehydratedSuspenseInstance(fiber) {
          var suspenseState = fiber.memoizedState;
          var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
          if (!suspenseInstance) {
            throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
          }
          return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
        }
        function popToNextHostParent(fiber) {
          var parent = fiber.return;
          while (parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot && parent.tag !== SuspenseComponent) {
            parent = parent.return;
          }
          hydrationParentFiber = parent;
        }
        function popHydrationState(fiber) {
          if (fiber !== hydrationParentFiber) {
            return false;
          }
          if (!isHydrating) {
            popToNextHostParent(fiber);
            isHydrating = true;
            return false;
          }
          if (fiber.tag !== HostRoot && (fiber.tag !== HostComponent || shouldDeleteUnhydratedTailInstances(fiber.type) && !shouldSetTextContent(fiber.type, fiber.memoizedProps))) {
            var nextInstance = nextHydratableInstance;
            if (nextInstance) {
              if (shouldClientRenderOnMismatch(fiber)) {
                warnIfUnhydratedTailNodes(fiber);
                throwOnHydrationMismatch();
              } else {
                while (nextInstance) {
                  deleteHydratableInstance(fiber, nextInstance);
                  nextInstance = getNextHydratableSibling(nextInstance);
                }
              }
            }
          }
          popToNextHostParent(fiber);
          if (fiber.tag === SuspenseComponent) {
            nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);
          } else {
            nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
          }
          return true;
        }
        function hasUnhydratedTailNodes() {
          return isHydrating && nextHydratableInstance !== null;
        }
        function warnIfUnhydratedTailNodes(fiber) {
          var nextInstance = nextHydratableInstance;
          while (nextInstance) {
            warnUnhydratedInstance(fiber, nextInstance);
            nextInstance = getNextHydratableSibling(nextInstance);
          }
        }
        function resetHydrationState() {
          hydrationParentFiber = null;
          nextHydratableInstance = null;
          isHydrating = false;
          didSuspendOrErrorDEV = false;
        }
        function upgradeHydrationErrorsToRecoverable() {
          if (hydrationErrors !== null) {
            queueRecoverableErrors(hydrationErrors);
            hydrationErrors = null;
          }
        }
        function getIsHydrating() {
          return isHydrating;
        }
        function queueHydrationError(error2) {
          if (hydrationErrors === null) {
            hydrationErrors = [error2];
          } else {
            hydrationErrors.push(error2);
          }
        }
        var ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig;
        var NoTransition = null;
        function requestCurrentTransition() {
          return ReactCurrentBatchConfig$1.transition;
        }
        var ReactStrictModeWarnings = {
          recordUnsafeLifecycleWarnings: function(fiber, instance) {
          },
          flushPendingUnsafeLifecycleWarnings: function() {
          },
          recordLegacyContextWarning: function(fiber, instance) {
          },
          flushLegacyContextWarning: function() {
          },
          discardPendingWarnings: function() {
          }
        };
        {
          var findStrictRoot = function(fiber) {
            var maybeStrictRoot = null;
            var node = fiber;
            while (node !== null) {
              if (node.mode & StrictLegacyMode) {
                maybeStrictRoot = node;
              }
              node = node.return;
            }
            return maybeStrictRoot;
          };
          var setToSortedString = function(set2) {
            var array = [];
            set2.forEach(function(value) {
              array.push(value);
            });
            return array.sort().join(", ");
          };
          var pendingComponentWillMountWarnings = [];
          var pendingUNSAFE_ComponentWillMountWarnings = [];
          var pendingComponentWillReceivePropsWarnings = [];
          var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
          var pendingComponentWillUpdateWarnings = [];
          var pendingUNSAFE_ComponentWillUpdateWarnings = [];
          var didWarnAboutUnsafeLifecycles = /* @__PURE__ */ new Set();
          ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function(fiber, instance) {
            if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {
              return;
            }
            if (typeof instance.componentWillMount === "function" && // Don't warn about react-lifecycles-compat polyfilled components.
            instance.componentWillMount.Dd !== true) {
              pendingComponentWillMountWarnings.push(fiber);
            }
            if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillMount === "function") {
              pendingUNSAFE_ComponentWillMountWarnings.push(fiber);
            }
            if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.Dd !== true) {
              pendingComponentWillReceivePropsWarnings.push(fiber);
            }
            if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillReceiveProps === "function") {
              pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);
            }
            if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.Dd !== true) {
              pendingComponentWillUpdateWarnings.push(fiber);
            }
            if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillUpdate === "function") {
              pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);
            }
          };
          ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function() {
            var componentWillMountUniqueNames = /* @__PURE__ */ new Set();
            if (pendingComponentWillMountWarnings.length > 0) {
              pendingComponentWillMountWarnings.forEach(function(fiber) {
                componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingComponentWillMountWarnings = [];
            }
            var UNSAFE_componentWillMountUniqueNames = /* @__PURE__ */ new Set();
            if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {
              pendingUNSAFE_ComponentWillMountWarnings.forEach(function(fiber) {
                UNSAFE_componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingUNSAFE_ComponentWillMountWarnings = [];
            }
            var componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set();
            if (pendingComponentWillReceivePropsWarnings.length > 0) {
              pendingComponentWillReceivePropsWarnings.forEach(function(fiber) {
                componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingComponentWillReceivePropsWarnings = [];
            }
            var UNSAFE_componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set();
            if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {
              pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function(fiber) {
                UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
            }
            var componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
            if (pendingComponentWillUpdateWarnings.length > 0) {
              pendingComponentWillUpdateWarnings.forEach(function(fiber) {
                componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingComponentWillUpdateWarnings = [];
            }
            var UNSAFE_componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
            if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {
              pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function(fiber) {
                UNSAFE_componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingUNSAFE_ComponentWillUpdateWarnings = [];
            }
            if (UNSAFE_componentWillMountUniqueNames.size > 0) {
              var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);
              error("Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n\nPlease update the following components: %s", sortedNames);
            }
            if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {
              var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);
              error("Using UNSAFE_componentWillReceiveProps in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n\nPlease update the following components: %s", _sortedNames);
            }
            if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {
              var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);
              error("Using UNSAFE_componentWillUpdate in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n\nPlease update the following components: %s", _sortedNames2);
            }
            if (componentWillMountUniqueNames.size > 0) {
              var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);
              warn("componentWillMount has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n* Rename componentWillMount to UNSAFE_componentWillMount to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames3);
            }
            if (componentWillReceivePropsUniqueNames.size > 0) {
              var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);
              warn("componentWillReceiveProps has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames4);
            }
            if (componentWillUpdateUniqueNames.size > 0) {
              var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);
              warn("componentWillUpdate has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames5);
            }
          };
          var pendingLegacyContextWarning = /* @__PURE__ */ new Map();
          var didWarnAboutLegacyContext = /* @__PURE__ */ new Set();
          ReactStrictModeWarnings.recordLegacyContextWarning = function(fiber, instance) {
            var strictRoot = findStrictRoot(fiber);
            if (strictRoot === null) {
              error("Expected to find a StrictMode component in a strict mode tree. This error is likely caused by a bug in React. Please file an issue.");
              return;
            }
            if (didWarnAboutLegacyContext.has(fiber.type)) {
              return;
            }
            var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);
            if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === "function") {
              if (warningsForRoot === void 0) {
                warningsForRoot = [];
                pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
              }
              warningsForRoot.push(fiber);
            }
          };
          ReactStrictModeWarnings.flushLegacyContextWarning = function() {
            pendingLegacyContextWarning.forEach(function(fiberArray, strictRoot) {
              if (fiberArray.length === 0) {
                return;
              }
              var firstFiber = fiberArray[0];
              var uniqueNames = /* @__PURE__ */ new Set();
              fiberArray.forEach(function(fiber) {
                uniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                didWarnAboutLegacyContext.add(fiber.type);
              });
              var sortedNames = setToSortedString(uniqueNames);
              try {
                setCurrentFiber(firstFiber);
                error("Legacy context API has been detected within a strict-mode tree.\n\nThe old API will be supported in all 16.x releases, but applications using it should migrate to the new version.\n\nPlease update the following components: %s\n\nLearn more about this warning here: https://reactjs.org/link/legacy-context", sortedNames);
              } finally {
                resetCurrentFiber();
              }
            });
          };
          ReactStrictModeWarnings.discardPendingWarnings = function() {
            pendingComponentWillMountWarnings = [];
            pendingUNSAFE_ComponentWillMountWarnings = [];
            pendingComponentWillReceivePropsWarnings = [];
            pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
            pendingComponentWillUpdateWarnings = [];
            pendingUNSAFE_ComponentWillUpdateWarnings = [];
            pendingLegacyContextWarning = /* @__PURE__ */ new Map();
          };
        }
        function resolveDefaultProps(Component2, baseProps) {
          if (Component2 && Component2.defaultProps) {
            var props = assign({}, baseProps);
            var defaultProps = Component2.defaultProps;
            for (var propName in defaultProps) {
              if (props[propName] === void 0) {
                props[propName] = defaultProps[propName];
              }
            }
            return props;
          }
          return baseProps;
        }
        var valueCursor = createCursor(null);
        var rendererSigil;
        {
          rendererSigil = {};
        }
        var currentlyRenderingFiber = null;
        var lastContextDependency = null;
        var lastFullyObservedContext = null;
        var isDisallowedContextReadInDEV = false;
        function resetContextDependencies() {
          currentlyRenderingFiber = null;
          lastContextDependency = null;
          lastFullyObservedContext = null;
          {
            isDisallowedContextReadInDEV = false;
          }
        }
        function enterDisallowedContextReadInDEV() {
          {
            isDisallowedContextReadInDEV = true;
          }
        }
        function exitDisallowedContextReadInDEV() {
          {
            isDisallowedContextReadInDEV = false;
          }
        }
        function pushProvider(providerFiber, context, nextValue) {
          {
            push(valueCursor, context.Zb, providerFiber);
            context.Zb = nextValue;
            {
              if (context.Re !== void 0 && context.Re !== null && context.Re !== rendererSigil) {
                error("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.");
              }
              context.Re = rendererSigil;
            }
          }
        }
        function popProvider(context, providerFiber) {
          var currentValue = valueCursor.current;
          pop(valueCursor, providerFiber);
          {
            {
              context.Zb = currentValue;
            }
          }
        }
        function scheduleContextWorkOnParentPath(parent, renderLanes2, propagationRoot) {
          var node = parent;
          while (node !== null) {
            var alternate = node.alternate;
            if (!isSubsetOfLanes(node.childLanes, renderLanes2)) {
              node.childLanes = mergeLanes(node.childLanes, renderLanes2);
              if (alternate !== null) {
                alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
              }
            } else if (alternate !== null && !isSubsetOfLanes(alternate.childLanes, renderLanes2)) {
              alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
            }
            if (node === propagationRoot) {
              break;
            }
            node = node.return;
          }
          {
            if (node !== propagationRoot) {
              error("Expected to find the propagation root when scheduling context work. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
        }
        function propagateContextChange(workInProgress2, context, renderLanes2) {
          {
            propagateContextChange_eager(workInProgress2, context, renderLanes2);
          }
        }
        function propagateContextChange_eager(workInProgress2, context, renderLanes2) {
          var fiber = workInProgress2.child;
          if (fiber !== null) {
            fiber.return = workInProgress2;
          }
          while (fiber !== null) {
            var nextFiber = void 0;
            var list = fiber.dependencies;
            if (list !== null) {
              nextFiber = fiber.child;
              var dependency = list.firstContext;
              while (dependency !== null) {
                if (dependency.context === context) {
                  if (fiber.tag === ClassComponent) {
                    var lane = pickArbitraryLane(renderLanes2);
                    var update = createUpdate(NoTimestamp, lane);
                    update.tag = ForceUpdate;
                    var updateQueue = fiber.updateQueue;
                    if (updateQueue === null)
                      ;
                    else {
                      var sharedQueue = updateQueue.shared;
                      var pending = sharedQueue.pending;
                      if (pending === null) {
                        update.next = update;
                      } else {
                        update.next = pending.next;
                        pending.next = update;
                      }
                      sharedQueue.pending = update;
                    }
                  }
                  fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
                  var alternate = fiber.alternate;
                  if (alternate !== null) {
                    alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
                  }
                  scheduleContextWorkOnParentPath(fiber.return, renderLanes2, workInProgress2);
                  list.lanes = mergeLanes(list.lanes, renderLanes2);
                  break;
                }
                dependency = dependency.next;
              }
            } else if (fiber.tag === ContextProvider) {
              nextFiber = fiber.type === workInProgress2.type ? null : fiber.child;
            } else if (fiber.tag === DehydratedFragment) {
              var parentSuspense = fiber.return;
              if (parentSuspense === null) {
                throw new Error("We just came from a parent so we must have had a parent. This is a bug in React.");
              }
              parentSuspense.lanes = mergeLanes(parentSuspense.lanes, renderLanes2);
              var _alternate = parentSuspense.alternate;
              if (_alternate !== null) {
                _alternate.lanes = mergeLanes(_alternate.lanes, renderLanes2);
              }
              scheduleContextWorkOnParentPath(parentSuspense, renderLanes2, workInProgress2);
              nextFiber = fiber.sibling;
            } else {
              nextFiber = fiber.child;
            }
            if (nextFiber !== null) {
              nextFiber.return = fiber;
            } else {
              nextFiber = fiber;
              while (nextFiber !== null) {
                if (nextFiber === workInProgress2) {
                  nextFiber = null;
                  break;
                }
                var sibling = nextFiber.sibling;
                if (sibling !== null) {
                  sibling.return = nextFiber.return;
                  nextFiber = sibling;
                  break;
                }
                nextFiber = nextFiber.return;
              }
            }
            fiber = nextFiber;
          }
        }
        function prepareToReadContext(workInProgress2, renderLanes2) {
          currentlyRenderingFiber = workInProgress2;
          lastContextDependency = null;
          lastFullyObservedContext = null;
          var dependencies = workInProgress2.dependencies;
          if (dependencies !== null) {
            {
              var firstContext = dependencies.firstContext;
              if (firstContext !== null) {
                if (includesSomeLane(dependencies.lanes, renderLanes2)) {
                  markWorkInProgressReceivedUpdate();
                }
                dependencies.firstContext = null;
              }
            }
          }
        }
        function readContext(context) {
          {
            if (isDisallowedContextReadInDEV) {
              error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
            }
          }
          var value = context.Zb;
          if (lastFullyObservedContext === context)
            ;
          else {
            var contextItem = {
              context,
              memoizedValue: value,
              next: null
            };
            if (lastContextDependency === null) {
              if (currentlyRenderingFiber === null) {
                throw new Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
              }
              lastContextDependency = contextItem;
              currentlyRenderingFiber.dependencies = {
                lanes: NoLanes,
                firstContext: contextItem
              };
            } else {
              lastContextDependency = lastContextDependency.next = contextItem;
            }
          }
          return value;
        }
        var concurrentQueues = null;
        function pushConcurrentUpdateQueue(queue) {
          if (concurrentQueues === null) {
            concurrentQueues = [queue];
          } else {
            concurrentQueues.push(queue);
          }
        }
        function finishQueueingConcurrentUpdates() {
          if (concurrentQueues !== null) {
            for (var i = 0; i < concurrentQueues.length; i++) {
              var queue = concurrentQueues[i];
              var lastInterleavedUpdate = queue.interleaved;
              if (lastInterleavedUpdate !== null) {
                queue.interleaved = null;
                var firstInterleavedUpdate = lastInterleavedUpdate.next;
                var lastPendingUpdate = queue.pending;
                if (lastPendingUpdate !== null) {
                  var firstPendingUpdate = lastPendingUpdate.next;
                  lastPendingUpdate.next = firstInterleavedUpdate;
                  lastInterleavedUpdate.next = firstPendingUpdate;
                }
                queue.pending = lastInterleavedUpdate;
              }
            }
            concurrentQueues = null;
          }
        }
        function enqueueConcurrentHookUpdate(fiber, queue, update, lane) {
          var interleaved = queue.interleaved;
          if (interleaved === null) {
            update.next = update;
            pushConcurrentUpdateQueue(queue);
          } else {
            update.next = interleaved.next;
            interleaved.next = update;
          }
          queue.interleaved = update;
          return markUpdateLaneFromFiberToRoot(fiber, lane);
        }
        function enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane) {
          var interleaved = queue.interleaved;
          if (interleaved === null) {
            update.next = update;
            pushConcurrentUpdateQueue(queue);
          } else {
            update.next = interleaved.next;
            interleaved.next = update;
          }
          queue.interleaved = update;
        }
        function enqueueConcurrentClassUpdate(fiber, queue, update, lane) {
          var interleaved = queue.interleaved;
          if (interleaved === null) {
            update.next = update;
            pushConcurrentUpdateQueue(queue);
          } else {
            update.next = interleaved.next;
            interleaved.next = update;
          }
          queue.interleaved = update;
          return markUpdateLaneFromFiberToRoot(fiber, lane);
        }
        function enqueueConcurrentRenderForLane(fiber, lane) {
          return markUpdateLaneFromFiberToRoot(fiber, lane);
        }
        var unsafe_markUpdateLaneFromFiberToRoot = markUpdateLaneFromFiberToRoot;
        function markUpdateLaneFromFiberToRoot(sourceFiber, lane) {
          sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);
          var alternate = sourceFiber.alternate;
          if (alternate !== null) {
            alternate.lanes = mergeLanes(alternate.lanes, lane);
          }
          {
            if (alternate === null && (sourceFiber.flags & (Placement | Hydrating)) !== NoFlags) {
              warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
            }
          }
          var node = sourceFiber;
          var parent = sourceFiber.return;
          while (parent !== null) {
            parent.childLanes = mergeLanes(parent.childLanes, lane);
            alternate = parent.alternate;
            if (alternate !== null) {
              alternate.childLanes = mergeLanes(alternate.childLanes, lane);
            } else {
              {
                if ((parent.flags & (Placement | Hydrating)) !== NoFlags) {
                  warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
                }
              }
            }
            node = parent;
            parent = parent.return;
          }
          if (node.tag === HostRoot) {
            var root2 = node.stateNode;
            return root2;
          } else {
            return null;
          }
        }
        var UpdateState = 0;
        var ReplaceState = 1;
        var ForceUpdate = 2;
        var CaptureUpdate = 3;
        var hasForceUpdate = false;
        var didWarnUpdateInsideUpdate;
        var currentlyProcessingQueue;
        {
          didWarnUpdateInsideUpdate = false;
          currentlyProcessingQueue = null;
        }
        function initializeUpdateQueue(fiber) {
          var queue = {
            baseState: fiber.memoizedState,
            firstBaseUpdate: null,
            lastBaseUpdate: null,
            shared: {
              pending: null,
              interleaved: null,
              lanes: NoLanes
            },
            effects: null
          };
          fiber.updateQueue = queue;
        }
        function cloneUpdateQueue(current2, workInProgress2) {
          var queue = workInProgress2.updateQueue;
          var currentQueue = current2.updateQueue;
          if (queue === currentQueue) {
            var clone = {
              baseState: currentQueue.baseState,
              firstBaseUpdate: currentQueue.firstBaseUpdate,
              lastBaseUpdate: currentQueue.lastBaseUpdate,
              shared: currentQueue.shared,
              effects: currentQueue.effects
            };
            workInProgress2.updateQueue = clone;
          }
        }
        function createUpdate(eventTime, lane) {
          var update = {
            eventTime,
            lane,
            tag: UpdateState,
            payload: null,
            callback: null,
            next: null
          };
          return update;
        }
        function enqueueUpdate(fiber, update, lane) {
          var updateQueue = fiber.updateQueue;
          if (updateQueue === null) {
            return null;
          }
          var sharedQueue = updateQueue.shared;
          {
            if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate) {
              error("An update (setState, replaceState, or forceUpdate) was scheduled from inside an update function. Update functions should be pure, with zero side-effects. Consider using componentDidUpdate or a callback.");
              didWarnUpdateInsideUpdate = true;
            }
          }
          if (isUnsafeClassRenderPhaseUpdate()) {
            var pending = sharedQueue.pending;
            if (pending === null) {
              update.next = update;
            } else {
              update.next = pending.next;
              pending.next = update;
            }
            sharedQueue.pending = update;
            return unsafe_markUpdateLaneFromFiberToRoot(fiber, lane);
          } else {
            return enqueueConcurrentClassUpdate(fiber, sharedQueue, update, lane);
          }
        }
        function entangleTransitions(root2, fiber, lane) {
          var updateQueue = fiber.updateQueue;
          if (updateQueue === null) {
            return;
          }
          var sharedQueue = updateQueue.shared;
          if (isTransitionLane(lane)) {
            var queueLanes = sharedQueue.lanes;
            queueLanes = intersectLanes(queueLanes, root2.pendingLanes);
            var newQueueLanes = mergeLanes(queueLanes, lane);
            sharedQueue.lanes = newQueueLanes;
            markRootEntangled(root2, newQueueLanes);
          }
        }
        function enqueueCapturedUpdate(workInProgress2, capturedUpdate) {
          var queue = workInProgress2.updateQueue;
          var current2 = workInProgress2.alternate;
          if (current2 !== null) {
            var currentQueue = current2.updateQueue;
            if (queue === currentQueue) {
              var newFirst = null;
              var newLast = null;
              var firstBaseUpdate = queue.firstBaseUpdate;
              if (firstBaseUpdate !== null) {
                var update = firstBaseUpdate;
                do {
                  var clone = {
                    eventTime: update.eventTime,
                    lane: update.lane,
                    tag: update.tag,
                    payload: update.payload,
                    callback: update.callback,
                    next: null
                  };
                  if (newLast === null) {
                    newFirst = newLast = clone;
                  } else {
                    newLast.next = clone;
                    newLast = clone;
                  }
                  update = update.next;
                } while (update !== null);
                if (newLast === null) {
                  newFirst = newLast = capturedUpdate;
                } else {
                  newLast.next = capturedUpdate;
                  newLast = capturedUpdate;
                }
              } else {
                newFirst = newLast = capturedUpdate;
              }
              queue = {
                baseState: currentQueue.baseState,
                firstBaseUpdate: newFirst,
                lastBaseUpdate: newLast,
                shared: currentQueue.shared,
                effects: currentQueue.effects
              };
              workInProgress2.updateQueue = queue;
              return;
            }
          }
          var lastBaseUpdate = queue.lastBaseUpdate;
          if (lastBaseUpdate === null) {
            queue.firstBaseUpdate = capturedUpdate;
          } else {
            lastBaseUpdate.next = capturedUpdate;
          }
          queue.lastBaseUpdate = capturedUpdate;
        }
        function getStateFromUpdate(workInProgress2, queue, update, prevState, nextProps, instance) {
          switch (update.tag) {
            case ReplaceState: {
              var payload = update.payload;
              if (typeof payload === "function") {
                {
                  enterDisallowedContextReadInDEV();
                }
                var nextState = payload.call(instance, prevState, nextProps);
                {
                  if (workInProgress2.mode & StrictLegacyMode) {
                    setIsStrictModeForDevtools(true);
                    try {
                      payload.call(instance, prevState, nextProps);
                    } finally {
                      setIsStrictModeForDevtools(false);
                    }
                  }
                  exitDisallowedContextReadInDEV();
                }
                return nextState;
              }
              return payload;
            }
            case CaptureUpdate: {
              workInProgress2.flags = workInProgress2.flags & ~ShouldCapture | DidCapture;
            }
            case UpdateState: {
              var _payload = update.payload;
              var partialState;
              if (typeof _payload === "function") {
                {
                  enterDisallowedContextReadInDEV();
                }
                partialState = _payload.call(instance, prevState, nextProps);
                {
                  if (workInProgress2.mode & StrictLegacyMode) {
                    setIsStrictModeForDevtools(true);
                    try {
                      _payload.call(instance, prevState, nextProps);
                    } finally {
                      setIsStrictModeForDevtools(false);
                    }
                  }
                  exitDisallowedContextReadInDEV();
                }
              } else {
                partialState = _payload;
              }
              if (partialState === null || partialState === void 0) {
                return prevState;
              }
              return assign({}, prevState, partialState);
            }
            case ForceUpdate: {
              hasForceUpdate = true;
              return prevState;
            }
          }
          return prevState;
        }
        function processUpdateQueue(workInProgress2, props, instance, renderLanes2) {
          var queue = workInProgress2.updateQueue;
          hasForceUpdate = false;
          {
            currentlyProcessingQueue = queue.shared;
          }
          var firstBaseUpdate = queue.firstBaseUpdate;
          var lastBaseUpdate = queue.lastBaseUpdate;
          var pendingQueue = queue.shared.pending;
          if (pendingQueue !== null) {
            queue.shared.pending = null;
            var lastPendingUpdate = pendingQueue;
            var firstPendingUpdate = lastPendingUpdate.next;
            lastPendingUpdate.next = null;
            if (lastBaseUpdate === null) {
              firstBaseUpdate = firstPendingUpdate;
            } else {
              lastBaseUpdate.next = firstPendingUpdate;
            }
            lastBaseUpdate = lastPendingUpdate;
            var current2 = workInProgress2.alternate;
            if (current2 !== null) {
              var currentQueue = current2.updateQueue;
              var currentLastBaseUpdate = currentQueue.lastBaseUpdate;
              if (currentLastBaseUpdate !== lastBaseUpdate) {
                if (currentLastBaseUpdate === null) {
                  currentQueue.firstBaseUpdate = firstPendingUpdate;
                } else {
                  currentLastBaseUpdate.next = firstPendingUpdate;
                }
                currentQueue.lastBaseUpdate = lastPendingUpdate;
              }
            }
          }
          if (firstBaseUpdate !== null) {
            var newState = queue.baseState;
            var newLanes = NoLanes;
            var newBaseState = null;
            var newFirstBaseUpdate = null;
            var newLastBaseUpdate = null;
            var update = firstBaseUpdate;
            do {
              var updateLane = update.lane;
              var updateEventTime = update.eventTime;
              if (!isSubsetOfLanes(renderLanes2, updateLane)) {
                var clone = {
                  eventTime: updateEventTime,
                  lane: updateLane,
                  tag: update.tag,
                  payload: update.payload,
                  callback: update.callback,
                  next: null
                };
                if (newLastBaseUpdate === null) {
                  newFirstBaseUpdate = newLastBaseUpdate = clone;
                  newBaseState = newState;
                } else {
                  newLastBaseUpdate = newLastBaseUpdate.next = clone;
                }
                newLanes = mergeLanes(newLanes, updateLane);
              } else {
                if (newLastBaseUpdate !== null) {
                  var _clone = {
                    eventTime: updateEventTime,
                    // This update is going to be committed so we never want uncommit
                    // it. Using NoLane works because 0 is a subset of all bitmasks, so
                    // this will never be skipped by the check above.
                    lane: NoLane,
                    tag: update.tag,
                    payload: update.payload,
                    callback: update.callback,
                    next: null
                  };
                  newLastBaseUpdate = newLastBaseUpdate.next = _clone;
                }
                newState = getStateFromUpdate(workInProgress2, queue, update, newState, props, instance);
                var callback = update.callback;
                if (callback !== null && // If the update was already committed, we should not queue its
                // callback again.
                update.lane !== NoLane) {
                  workInProgress2.flags |= Callback;
                  var effects = queue.effects;
                  if (effects === null) {
                    queue.effects = [update];
                  } else {
                    effects.push(update);
                  }
                }
              }
              update = update.next;
              if (update === null) {
                pendingQueue = queue.shared.pending;
                if (pendingQueue === null) {
                  break;
                } else {
                  var _lastPendingUpdate = pendingQueue;
                  var _firstPendingUpdate = _lastPendingUpdate.next;
                  _lastPendingUpdate.next = null;
                  update = _firstPendingUpdate;
                  queue.lastBaseUpdate = _lastPendingUpdate;
                  queue.shared.pending = null;
                }
              }
            } while (true);
            if (newLastBaseUpdate === null) {
              newBaseState = newState;
            }
            queue.baseState = newBaseState;
            queue.firstBaseUpdate = newFirstBaseUpdate;
            queue.lastBaseUpdate = newLastBaseUpdate;
            var lastInterleaved = queue.shared.interleaved;
            if (lastInterleaved !== null) {
              var interleaved = lastInterleaved;
              do {
                newLanes = mergeLanes(newLanes, interleaved.lane);
                interleaved = interleaved.next;
              } while (interleaved !== lastInterleaved);
            } else if (firstBaseUpdate === null) {
              queue.shared.lanes = NoLanes;
            }
            markSkippedUpdateLanes(newLanes);
            workInProgress2.lanes = newLanes;
            workInProgress2.memoizedState = newState;
          }
          {
            currentlyProcessingQueue = null;
          }
        }
        function callCallback(callback, context) {
          if (typeof callback !== "function") {
            throw new Error("Invalid argument passed as callback. Expected a function. Instead " + ("received: " + callback));
          }
          callback.call(context);
        }
        function resetHasForceUpdateBeforeProcessing() {
          hasForceUpdate = false;
        }
        function checkHasForceUpdateAfterProcessing() {
          return hasForceUpdate;
        }
        function commitUpdateQueue(finishedWork, finishedQueue, instance) {
          var effects = finishedQueue.effects;
          finishedQueue.effects = null;
          if (effects !== null) {
            for (var i = 0; i < effects.length; i++) {
              var effect = effects[i];
              var callback = effect.callback;
              if (callback !== null) {
                effect.callback = null;
                callCallback(callback, instance);
              }
            }
          }
        }
        var fakeInternalInstance = {};
        var emptyRefsObject = new React3.Component().refs;
        var didWarnAboutStateAssignmentForComponent;
        var didWarnAboutUninitializedState;
        var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
        var didWarnAboutLegacyLifecyclesAndDerivedState;
        var didWarnAboutUndefinedDerivedState;
        var warnOnUndefinedDerivedState;
        var warnOnInvalidCallback;
        var didWarnAboutDirectlyAssigningPropsToState;
        var didWarnAboutContextTypeAndContextTypes;
        var didWarnAboutInvalidateContextType;
        {
          didWarnAboutStateAssignmentForComponent = /* @__PURE__ */ new Set();
          didWarnAboutUninitializedState = /* @__PURE__ */ new Set();
          didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = /* @__PURE__ */ new Set();
          didWarnAboutLegacyLifecyclesAndDerivedState = /* @__PURE__ */ new Set();
          didWarnAboutDirectlyAssigningPropsToState = /* @__PURE__ */ new Set();
          didWarnAboutUndefinedDerivedState = /* @__PURE__ */ new Set();
          didWarnAboutContextTypeAndContextTypes = /* @__PURE__ */ new Set();
          didWarnAboutInvalidateContextType = /* @__PURE__ */ new Set();
          var didWarnOnInvalidCallback = /* @__PURE__ */ new Set();
          warnOnInvalidCallback = function(callback, callerName) {
            if (callback === null || typeof callback === "function") {
              return;
            }
            var key = callerName + "_" + callback;
            if (!didWarnOnInvalidCallback.has(key)) {
              didWarnOnInvalidCallback.add(key);
              error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
            }
          };
          warnOnUndefinedDerivedState = function(type, partialState) {
            if (partialState === void 0) {
              var componentName = getComponentNameFromType(type) || "Component";
              if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
                didWarnAboutUndefinedDerivedState.add(componentName);
                error("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.", componentName);
              }
            }
          };
          Object.defineProperty(fakeInternalInstance, "_processChildContext", {
            enumerable: false,
            value: function() {
              throw new Error("_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).");
            }
          });
          Object.freeze(fakeInternalInstance);
        }
        function applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, nextProps) {
          var prevState = workInProgress2.memoizedState;
          var partialState = getDerivedStateFromProps(nextProps, prevState);
          {
            if (workInProgress2.mode & StrictLegacyMode) {
              setIsStrictModeForDevtools(true);
              try {
                partialState = getDerivedStateFromProps(nextProps, prevState);
              } finally {
                setIsStrictModeForDevtools(false);
              }
            }
            warnOnUndefinedDerivedState(ctor, partialState);
          }
          var memoizedState = partialState === null || partialState === void 0 ? prevState : assign({}, prevState, partialState);
          workInProgress2.memoizedState = memoizedState;
          if (workInProgress2.lanes === NoLanes) {
            var updateQueue = workInProgress2.updateQueue;
            updateQueue.baseState = memoizedState;
          }
        }
        var classComponentUpdater = {
          isMounted,
          enqueueSetState: function(inst, payload, callback) {
            var fiber = get(inst);
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(fiber);
            var update = createUpdate(eventTime, lane);
            update.payload = payload;
            if (callback !== void 0 && callback !== null) {
              {
                warnOnInvalidCallback(callback, "setState");
              }
              update.callback = callback;
            }
            var root2 = enqueueUpdate(fiber, update, lane);
            if (root2 !== null) {
              scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
              entangleTransitions(root2, fiber, lane);
            }
            {
              markStateUpdateScheduled(fiber, lane);
            }
          },
          enqueueReplaceState: function(inst, payload, callback) {
            var fiber = get(inst);
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(fiber);
            var update = createUpdate(eventTime, lane);
            update.tag = ReplaceState;
            update.payload = payload;
            if (callback !== void 0 && callback !== null) {
              {
                warnOnInvalidCallback(callback, "replaceState");
              }
              update.callback = callback;
            }
            var root2 = enqueueUpdate(fiber, update, lane);
            if (root2 !== null) {
              scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
              entangleTransitions(root2, fiber, lane);
            }
            {
              markStateUpdateScheduled(fiber, lane);
            }
          },
          enqueueForceUpdate: function(inst, callback) {
            var fiber = get(inst);
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(fiber);
            var update = createUpdate(eventTime, lane);
            update.tag = ForceUpdate;
            if (callback !== void 0 && callback !== null) {
              {
                warnOnInvalidCallback(callback, "forceUpdate");
              }
              update.callback = callback;
            }
            var root2 = enqueueUpdate(fiber, update, lane);
            if (root2 !== null) {
              scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
              entangleTransitions(root2, fiber, lane);
            }
            {
              markForceUpdateScheduled(fiber, lane);
            }
          }
        };
        function checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) {
          var instance = workInProgress2.stateNode;
          if (typeof instance.shouldComponentUpdate === "function") {
            var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
            {
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              if (shouldUpdate === void 0) {
                error("%s.shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false.", getComponentNameFromType(ctor) || "Component");
              }
            }
            return shouldUpdate;
          }
          if (ctor.prototype && ctor.prototype.isPureReactComponent) {
            return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
          }
          return true;
        }
        function checkClassInstance(workInProgress2, ctor, newProps) {
          var instance = workInProgress2.stateNode;
          {
            var name = getComponentNameFromType(ctor) || "Component";
            var renderPresent = instance.render;
            if (!renderPresent) {
              if (ctor.prototype && typeof ctor.prototype.render === "function") {
                error("%s(...): No `render` method found on the returned component instance: did you accidentally return an object from the constructor?", name);
              } else {
                error("%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.", name);
              }
            }
            if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) {
              error("getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?", name);
            }
            if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {
              error("getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.", name);
            }
            if (instance.propTypes) {
              error("propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.", name);
            }
            if (instance.contextType) {
              error("contextType was defined as an instance property on %s. Use a static property to define contextType instead.", name);
            }
            {
              if (instance.contextTypes) {
                error("contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.", name);
              }
              if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
                didWarnAboutContextTypeAndContextTypes.add(ctor);
                error("%s declares both contextTypes and contextType static properties. The legacy contextTypes property will be ignored.", name);
              }
            }
            if (typeof instance.componentShouldUpdate === "function") {
              error("%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.", name);
            }
            if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== "undefined") {
              error("%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.", getComponentNameFromType(ctor) || "A pure component");
            }
            if (typeof instance.componentDidUnmount === "function") {
              error("%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?", name);
            }
            if (typeof instance.componentDidReceiveProps === "function") {
              error("%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().", name);
            }
            if (typeof instance.componentWillRecieveProps === "function") {
              error("%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", name);
            }
            if (typeof instance.UNSAFE_componentWillRecieveProps === "function") {
              error("%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", name);
            }
            var hasMutatedProps = instance.props !== newProps;
            if (instance.props !== void 0 && hasMutatedProps) {
              error("%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.", name, name);
            }
            if (instance.defaultProps) {
              error("Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.", name, name);
            }
            if (typeof instance.getSnapshotBeforeUpdate === "function" && typeof instance.componentDidUpdate !== "function" && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
              didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
              error("%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.", getComponentNameFromType(ctor));
            }
            if (typeof instance.getDerivedStateFromProps === "function") {
              error("%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
            }
            if (typeof instance.getDerivedStateFromError === "function") {
              error("%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
            }
            if (typeof ctor.getSnapshotBeforeUpdate === "function") {
              error("%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.", name);
            }
            var _state = instance.state;
            if (_state && (typeof _state !== "object" || isArray(_state))) {
              error("%s.state: must be set to an object or null", name);
            }
            if (typeof instance.getChildContext === "function" && typeof ctor.childContextTypes !== "object") {
              error("%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().", name);
            }
          }
        }
        function adoptClassInstance(workInProgress2, instance) {
          instance.updater = classComponentUpdater;
          workInProgress2.stateNode = instance;
          set(instance, workInProgress2);
          {
            instance.jy = fakeInternalInstance;
          }
        }
        function constructClassInstance(workInProgress2, ctor, props) {
          var isLegacyContextConsumer = false;
          var unmaskedContext = emptyContextObject;
          var context = emptyContextObject;
          var contextType = ctor.contextType;
          {
            if ("contextType" in ctor) {
              var isValid = (
                // Allow null for conditional declaration
                contextType === null || contextType !== void 0 && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType.Y === void 0
              );
              if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
                didWarnAboutInvalidateContextType.add(ctor);
                var addendum = "";
                if (contextType === void 0) {
                  addendum = " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file.";
                } else if (typeof contextType !== "object") {
                  addendum = " However, it is set to a " + typeof contextType + ".";
                } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {
                  addendum = " Did you accidentally pass the Context.Provider instead?";
                } else if (contextType.Y !== void 0) {
                  addendum = " Did you accidentally pass the Context.Consumer instead?";
                } else {
                  addendum = " However, it is set to an object with keys {" + Object.keys(contextType).join(", ") + "}.";
                }
                error("%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s", getComponentNameFromType(ctor) || "Component", addendum);
              }
            }
          }
          if (typeof contextType === "object" && contextType !== null) {
            context = readContext(contextType);
          } else {
            unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
            var contextTypes = ctor.contextTypes;
            isLegacyContextConsumer = contextTypes !== null && contextTypes !== void 0;
            context = isLegacyContextConsumer ? getMaskedContext(workInProgress2, unmaskedContext) : emptyContextObject;
          }
          var instance = new ctor(props, context);
          {
            if (workInProgress2.mode & StrictLegacyMode) {
              setIsStrictModeForDevtools(true);
              try {
                instance = new ctor(props, context);
              } finally {
                setIsStrictModeForDevtools(false);
              }
            }
          }
          var state = workInProgress2.memoizedState = instance.state !== null && instance.state !== void 0 ? instance.state : null;
          adoptClassInstance(workInProgress2, instance);
          {
            if (typeof ctor.getDerivedStateFromProps === "function" && state === null) {
              var componentName = getComponentNameFromType(ctor) || "Component";
              if (!didWarnAboutUninitializedState.has(componentName)) {
                didWarnAboutUninitializedState.add(componentName);
                error("`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.", componentName, instance.state === null ? "null" : "undefined", componentName);
              }
            }
            if (typeof ctor.getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function") {
              var foundWillMountName = null;
              var foundWillReceivePropsName = null;
              var foundWillUpdateName = null;
              if (typeof instance.componentWillMount === "function" && instance.componentWillMount.Dd !== true) {
                foundWillMountName = "componentWillMount";
              } else if (typeof instance.UNSAFE_componentWillMount === "function") {
                foundWillMountName = "UNSAFE_componentWillMount";
              }
              if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.Dd !== true) {
                foundWillReceivePropsName = "componentWillReceiveProps";
              } else if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
                foundWillReceivePropsName = "UNSAFE_componentWillReceiveProps";
              }
              if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.Dd !== true) {
                foundWillUpdateName = "componentWillUpdate";
              } else if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                foundWillUpdateName = "UNSAFE_componentWillUpdate";
              }
              if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
                var _componentName = getComponentNameFromType(ctor) || "Component";
                var newApiName = typeof ctor.getDerivedStateFromProps === "function" ? "getDerivedStateFromProps()" : "getSnapshotBeforeUpdate()";
                if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
                  didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
                  error("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://reactjs.org/link/unsafe-component-lifecycles", _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : "", foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : "", foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : "");
                }
              }
            }
          }
          if (isLegacyContextConsumer) {
            cacheContext(workInProgress2, unmaskedContext, context);
          }
          return instance;
        }
        function callComponentWillMount(workInProgress2, instance) {
          var oldState = instance.state;
          if (typeof instance.componentWillMount === "function") {
            instance.componentWillMount();
          }
          if (typeof instance.UNSAFE_componentWillMount === "function") {
            instance.UNSAFE_componentWillMount();
          }
          if (oldState !== instance.state) {
            {
              error("%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", getComponentNameFromFiber(workInProgress2) || "Component");
            }
            classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
          }
        }
        function callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext) {
          var oldState = instance.state;
          if (typeof instance.componentWillReceiveProps === "function") {
            instance.componentWillReceiveProps(newProps, nextContext);
          }
          if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
            instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
          }
          if (instance.state !== oldState) {
            {
              var componentName = getComponentNameFromFiber(workInProgress2) || "Component";
              if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
                didWarnAboutStateAssignmentForComponent.add(componentName);
                error("%s.componentWillReceiveProps(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", componentName);
              }
            }
            classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
          }
        }
        function mountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
          {
            checkClassInstance(workInProgress2, ctor, newProps);
          }
          var instance = workInProgress2.stateNode;
          instance.props = newProps;
          instance.state = workInProgress2.memoizedState;
          instance.refs = emptyRefsObject;
          initializeUpdateQueue(workInProgress2);
          var contextType = ctor.contextType;
          if (typeof contextType === "object" && contextType !== null) {
            instance.context = readContext(contextType);
          } else {
            var unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
            instance.context = getMaskedContext(workInProgress2, unmaskedContext);
          }
          {
            if (instance.state === newProps) {
              var componentName = getComponentNameFromType(ctor) || "Component";
              if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
                didWarnAboutDirectlyAssigningPropsToState.add(componentName);
                error("%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.", componentName);
              }
            }
            if (workInProgress2.mode & StrictLegacyMode) {
              ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, instance);
            }
            {
              ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress2, instance);
            }
          }
          instance.state = workInProgress2.memoizedState;
          var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
          if (typeof getDerivedStateFromProps === "function") {
            applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
            instance.state = workInProgress2.memoizedState;
          }
          if (typeof ctor.getDerivedStateFromProps !== "function" && typeof instance.getSnapshotBeforeUpdate !== "function" && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
            callComponentWillMount(workInProgress2, instance);
            processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
            instance.state = workInProgress2.memoizedState;
          }
          if (typeof instance.componentDidMount === "function") {
            var fiberFlags = Update;
            {
              fiberFlags |= LayoutStatic;
            }
            if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
              fiberFlags |= MountLayoutDev;
            }
            workInProgress2.flags |= fiberFlags;
          }
        }
        function resumeMountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
          var instance = workInProgress2.stateNode;
          var oldProps = workInProgress2.memoizedProps;
          instance.props = oldProps;
          var oldContext = instance.context;
          var contextType = ctor.contextType;
          var nextContext = emptyContextObject;
          if (typeof contextType === "object" && contextType !== null) {
            nextContext = readContext(contextType);
          } else {
            var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
            nextContext = getMaskedContext(workInProgress2, nextLegacyUnmaskedContext);
          }
          var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
          var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
          if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
            if (oldProps !== newProps || oldContext !== nextContext) {
              callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
            }
          }
          resetHasForceUpdateBeforeProcessing();
          var oldState = workInProgress2.memoizedState;
          var newState = instance.state = oldState;
          processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
          newState = workInProgress2.memoizedState;
          if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
            if (typeof instance.componentDidMount === "function") {
              var fiberFlags = Update;
              {
                fiberFlags |= LayoutStatic;
              }
              if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                fiberFlags |= MountLayoutDev;
              }
              workInProgress2.flags |= fiberFlags;
            }
            return false;
          }
          if (typeof getDerivedStateFromProps === "function") {
            applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
            newState = workInProgress2.memoizedState;
          }
          var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext);
          if (shouldUpdate) {
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
              if (typeof instance.componentWillMount === "function") {
                instance.componentWillMount();
              }
              if (typeof instance.UNSAFE_componentWillMount === "function") {
                instance.UNSAFE_componentWillMount();
              }
            }
            if (typeof instance.componentDidMount === "function") {
              var _fiberFlags = Update;
              {
                _fiberFlags |= LayoutStatic;
              }
              if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                _fiberFlags |= MountLayoutDev;
              }
              workInProgress2.flags |= _fiberFlags;
            }
          } else {
            if (typeof instance.componentDidMount === "function") {
              var _fiberFlags2 = Update;
              {
                _fiberFlags2 |= LayoutStatic;
              }
              if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                _fiberFlags2 |= MountLayoutDev;
              }
              workInProgress2.flags |= _fiberFlags2;
            }
            workInProgress2.memoizedProps = newProps;
            workInProgress2.memoizedState = newState;
          }
          instance.props = newProps;
          instance.state = newState;
          instance.context = nextContext;
          return shouldUpdate;
        }
        function updateClassInstance(current2, workInProgress2, ctor, newProps, renderLanes2) {
          var instance = workInProgress2.stateNode;
          cloneUpdateQueue(current2, workInProgress2);
          var unresolvedOldProps = workInProgress2.memoizedProps;
          var oldProps = workInProgress2.type === workInProgress2.elementType ? unresolvedOldProps : resolveDefaultProps(workInProgress2.type, unresolvedOldProps);
          instance.props = oldProps;
          var unresolvedNewProps = workInProgress2.pendingProps;
          var oldContext = instance.context;
          var contextType = ctor.contextType;
          var nextContext = emptyContextObject;
          if (typeof contextType === "object" && contextType !== null) {
            nextContext = readContext(contextType);
          } else {
            var nextUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
            nextContext = getMaskedContext(workInProgress2, nextUnmaskedContext);
          }
          var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
          var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
          if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
            if (unresolvedOldProps !== unresolvedNewProps || oldContext !== nextContext) {
              callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
            }
          }
          resetHasForceUpdateBeforeProcessing();
          var oldState = workInProgress2.memoizedState;
          var newState = instance.state = oldState;
          processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
          newState = workInProgress2.memoizedState;
          if (unresolvedOldProps === unresolvedNewProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing() && !enableLazyContextPropagation) {
            if (typeof instance.componentDidUpdate === "function") {
              if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                workInProgress2.flags |= Update;
              }
            }
            if (typeof instance.getSnapshotBeforeUpdate === "function") {
              if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                workInProgress2.flags |= Snapshot;
              }
            }
            return false;
          }
          if (typeof getDerivedStateFromProps === "function") {
            applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
            newState = workInProgress2.memoizedState;
          }
          var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) || // TODO: In some cases, we'll end up checking if context has changed twice,
          // both before and after `shouldComponentUpdate` has been called. Not ideal,
          // but I'm loath to refactor this function. This only happens for memoized
          // components so it's not that common.
          enableLazyContextPropagation;
          if (shouldUpdate) {
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === "function" || typeof instance.componentWillUpdate === "function")) {
              if (typeof instance.componentWillUpdate === "function") {
                instance.componentWillUpdate(newProps, newState, nextContext);
              }
              if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
              }
            }
            if (typeof instance.componentDidUpdate === "function") {
              workInProgress2.flags |= Update;
            }
            if (typeof instance.getSnapshotBeforeUpdate === "function") {
              workInProgress2.flags |= Snapshot;
            }
          } else {
            if (typeof instance.componentDidUpdate === "function") {
              if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                workInProgress2.flags |= Update;
              }
            }
            if (typeof instance.getSnapshotBeforeUpdate === "function") {
              if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                workInProgress2.flags |= Snapshot;
              }
            }
            workInProgress2.memoizedProps = newProps;
            workInProgress2.memoizedState = newState;
          }
          instance.props = newProps;
          instance.state = newState;
          instance.context = nextContext;
          return shouldUpdate;
        }
        var didWarnAboutMaps;
        var didWarnAboutGenerators;
        var didWarnAboutStringRefs;
        var ownerHasKeyUseWarning;
        var ownerHasFunctionTypeWarning;
        var warnForMissingKey = function(child, returnFiber) {
        };
        {
          didWarnAboutMaps = false;
          didWarnAboutGenerators = false;
          didWarnAboutStringRefs = {};
          ownerHasKeyUseWarning = {};
          ownerHasFunctionTypeWarning = {};
          warnForMissingKey = function(child, returnFiber) {
            if (child === null || typeof child !== "object") {
              return;
            }
            if (!child.N || child.N.validated || child.key != null) {
              return;
            }
            if (typeof child.N !== "object") {
              throw new Error("React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.");
            }
            child.N.validated = true;
            var componentName = getComponentNameFromFiber(returnFiber) || "Component";
            if (ownerHasKeyUseWarning[componentName]) {
              return;
            }
            ownerHasKeyUseWarning[componentName] = true;
            error('Each child in a list should have a unique "key" prop. See https://reactjs.org/link/warning-keys for more information.');
          };
        }
        function coerceRef(returnFiber, current2, element) {
          var mixedRef = element.ref;
          if (mixedRef !== null && typeof mixedRef !== "function" && typeof mixedRef !== "object") {
            {
              if ((returnFiber.mode & StrictLegacyMode || warnAboutStringRefs) && // We warn in ReactElement.js if owner and self are equal for string refs
              // because these cannot be automatically converted to an arrow function
              // using a codemod. Therefore, we don't have to warn about string refs again.
              !(element.T && element.Xg && element.T.stateNode !== element.Xg)) {
                var componentName = getComponentNameFromFiber(returnFiber) || "Component";
                if (!didWarnAboutStringRefs[componentName]) {
                  {
                    error('A string ref, "%s", has been found within a strict mode tree. String refs are a source of potential bugs and should be avoided. We recommend using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', mixedRef);
                  }
                  didWarnAboutStringRefs[componentName] = true;
                }
              }
            }
            if (element.T) {
              var owner = element.T;
              var inst;
              if (owner) {
                var ownerFiber = owner;
                if (ownerFiber.tag !== ClassComponent) {
                  throw new Error("Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref");
                }
                inst = ownerFiber.stateNode;
              }
              if (!inst) {
                throw new Error("Missing owner for string ref " + mixedRef + ". This error is likely caused by a bug in React. Please file an issue.");
              }
              var resolvedInst = inst;
              {
                checkPropStringCoercion(mixedRef, "ref");
              }
              var stringRef = "" + mixedRef;
              if (current2 !== null && current2.ref !== null && typeof current2.ref === "function" && current2.ref.Gp === stringRef) {
                return current2.ref;
              }
              var ref = function(value) {
                var refs = resolvedInst.refs;
                if (refs === emptyRefsObject) {
                  refs = resolvedInst.refs = {};
                }
                if (value === null) {
                  delete refs[stringRef];
                } else {
                  refs[stringRef] = value;
                }
              };
              ref.Gp = stringRef;
              return ref;
            } else {
              if (typeof mixedRef !== "string") {
                throw new Error("Expected ref to be a function, a string, an object returned by React.createRef(), or null.");
              }
              if (!element.T) {
                throw new Error("Element ref was specified as a string (" + mixedRef + ") but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://reactjs.org/link/refs-must-have-owner for more information.");
              }
            }
          }
          return mixedRef;
        }
        function throwOnInvalidObjectType(returnFiber, newChild) {
          var childString = Object.prototype.toString.call(newChild);
          throw new Error("Objects are not valid as a React child (found: " + (childString === "[object Object]" ? "object with keys {" + Object.keys(newChild).join(", ") + "}" : childString) + "). If you meant to render a collection of children, use an array instead.");
        }
        function warnOnFunctionType(returnFiber) {
          {
            var componentName = getComponentNameFromFiber(returnFiber) || "Component";
            if (ownerHasFunctionTypeWarning[componentName]) {
              return;
            }
            ownerHasFunctionTypeWarning[componentName] = true;
            error("Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it.");
          }
        }
        function resolveLazy(lazyType) {
          var payload = lazyType.Ja;
          var init = lazyType.G;
          return init(payload);
        }
        function ChildReconciler(shouldTrackSideEffects) {
          function deleteChild(returnFiber, childToDelete) {
            if (!shouldTrackSideEffects) {
              return;
            }
            var deletions = returnFiber.deletions;
            if (deletions === null) {
              returnFiber.deletions = [childToDelete];
              returnFiber.flags |= ChildDeletion;
            } else {
              deletions.push(childToDelete);
            }
          }
          function deleteRemainingChildren(returnFiber, currentFirstChild) {
            if (!shouldTrackSideEffects) {
              return null;
            }
            var childToDelete = currentFirstChild;
            while (childToDelete !== null) {
              deleteChild(returnFiber, childToDelete);
              childToDelete = childToDelete.sibling;
            }
            return null;
          }
          function mapRemainingChildren(returnFiber, currentFirstChild) {
            var existingChildren = /* @__PURE__ */ new Map();
            var existingChild = currentFirstChild;
            while (existingChild !== null) {
              if (existingChild.key !== null) {
                existingChildren.set(existingChild.key, existingChild);
              } else {
                existingChildren.set(existingChild.index, existingChild);
              }
              existingChild = existingChild.sibling;
            }
            return existingChildren;
          }
          function useFiber(fiber, pendingProps) {
            var clone = createWorkInProgress(fiber, pendingProps);
            clone.index = 0;
            clone.sibling = null;
            return clone;
          }
          function placeChild(newFiber, lastPlacedIndex, newIndex) {
            newFiber.index = newIndex;
            if (!shouldTrackSideEffects) {
              newFiber.flags |= Forked;
              return lastPlacedIndex;
            }
            var current2 = newFiber.alternate;
            if (current2 !== null) {
              var oldIndex = current2.index;
              if (oldIndex < lastPlacedIndex) {
                newFiber.flags |= Placement;
                return lastPlacedIndex;
              } else {
                return oldIndex;
              }
            } else {
              newFiber.flags |= Placement;
              return lastPlacedIndex;
            }
          }
          function placeSingleChild(newFiber) {
            if (shouldTrackSideEffects && newFiber.alternate === null) {
              newFiber.flags |= Placement;
            }
            return newFiber;
          }
          function updateTextNode(returnFiber, current2, textContent, lanes) {
            if (current2 === null || current2.tag !== HostText) {
              var created = createFiberFromText(textContent, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            } else {
              var existing = useFiber(current2, textContent);
              existing.return = returnFiber;
              return existing;
            }
          }
          function updateElement(returnFiber, current2, element, lanes) {
            var elementType = element.type;
            if (elementType === REACT_FRAGMENT_TYPE) {
              return updateFragment2(returnFiber, current2, element.props.children, lanes, element.key);
            }
            if (current2 !== null) {
              if (current2.elementType === elementType || // Keep this check inline so it only runs on the false path:
              isCompatibleFamilyForHotReloading(current2, element) || // Lazy types should reconcile their resolved type.
              // We need to do this after the Hot Reloading check above,
              // because hot reloading has different semantics than prod because
              // it doesn't resuspend. So we can't let the call below suspend.
              typeof elementType === "object" && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === current2.type) {
                var existing = useFiber(current2, element.props);
                existing.ref = coerceRef(returnFiber, current2, element);
                existing.return = returnFiber;
                {
                  existing.$a = element.pb;
                  existing.qa = element.T;
                }
                return existing;
              }
            }
            var created = createFiberFromElement(element, returnFiber.mode, lanes);
            created.ref = coerceRef(returnFiber, current2, element);
            created.return = returnFiber;
            return created;
          }
          function updatePortal(returnFiber, current2, portal, lanes) {
            if (current2 === null || current2.tag !== HostPortal || current2.stateNode.containerInfo !== portal.containerInfo || current2.stateNode.implementation !== portal.implementation) {
              var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            } else {
              var existing = useFiber(current2, portal.children || []);
              existing.return = returnFiber;
              return existing;
            }
          }
          function updateFragment2(returnFiber, current2, fragment, lanes, key) {
            if (current2 === null || current2.tag !== Fragment) {
              var created = createFiberFromFragment(fragment, returnFiber.mode, lanes, key);
              created.return = returnFiber;
              return created;
            } else {
              var existing = useFiber(current2, fragment);
              existing.return = returnFiber;
              return existing;
            }
          }
          function createChild(returnFiber, newChild, lanes) {
            if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
              var created = createFiberFromText("" + newChild, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            }
            if (typeof newChild === "object" && newChild !== null) {
              switch (newChild.$$typeof) {
                case REACT_ELEMENT_TYPE: {
                  var _created = createFiberFromElement(newChild, returnFiber.mode, lanes);
                  _created.ref = coerceRef(returnFiber, null, newChild);
                  _created.return = returnFiber;
                  return _created;
                }
                case REACT_PORTAL_TYPE: {
                  var _created2 = createFiberFromPortal(newChild, returnFiber.mode, lanes);
                  _created2.return = returnFiber;
                  return _created2;
                }
                case REACT_LAZY_TYPE: {
                  var payload = newChild.Ja;
                  var init = newChild.G;
                  return createChild(returnFiber, init(payload), lanes);
                }
              }
              if (isArray(newChild) || getIteratorFn(newChild)) {
                var _created3 = createFiberFromFragment(newChild, returnFiber.mode, lanes, null);
                _created3.return = returnFiber;
                return _created3;
              }
              throwOnInvalidObjectType(returnFiber, newChild);
            }
            {
              if (typeof newChild === "function") {
                warnOnFunctionType(returnFiber);
              }
            }
            return null;
          }
          function updateSlot(returnFiber, oldFiber, newChild, lanes) {
            var key = oldFiber !== null ? oldFiber.key : null;
            if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
              if (key !== null) {
                return null;
              }
              return updateTextNode(returnFiber, oldFiber, "" + newChild, lanes);
            }
            if (typeof newChild === "object" && newChild !== null) {
              switch (newChild.$$typeof) {
                case REACT_ELEMENT_TYPE: {
                  if (newChild.key === key) {
                    return updateElement(returnFiber, oldFiber, newChild, lanes);
                  } else {
                    return null;
                  }
                }
                case REACT_PORTAL_TYPE: {
                  if (newChild.key === key) {
                    return updatePortal(returnFiber, oldFiber, newChild, lanes);
                  } else {
                    return null;
                  }
                }
                case REACT_LAZY_TYPE: {
                  var payload = newChild.Ja;
                  var init = newChild.G;
                  return updateSlot(returnFiber, oldFiber, init(payload), lanes);
                }
              }
              if (isArray(newChild) || getIteratorFn(newChild)) {
                if (key !== null) {
                  return null;
                }
                return updateFragment2(returnFiber, oldFiber, newChild, lanes, null);
              }
              throwOnInvalidObjectType(returnFiber, newChild);
            }
            {
              if (typeof newChild === "function") {
                warnOnFunctionType(returnFiber);
              }
            }
            return null;
          }
          function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {
            if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
              var matchedFiber = existingChildren.get(newIdx) || null;
              return updateTextNode(returnFiber, matchedFiber, "" + newChild, lanes);
            }
            if (typeof newChild === "object" && newChild !== null) {
              switch (newChild.$$typeof) {
                case REACT_ELEMENT_TYPE: {
                  var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                  return updateElement(returnFiber, _matchedFiber, newChild, lanes);
                }
                case REACT_PORTAL_TYPE: {
                  var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                  return updatePortal(returnFiber, _matchedFiber2, newChild, lanes);
                }
                case REACT_LAZY_TYPE:
                  var payload = newChild.Ja;
                  var init = newChild.G;
                  return updateFromMap(existingChildren, returnFiber, newIdx, init(payload), lanes);
              }
              if (isArray(newChild) || getIteratorFn(newChild)) {
                var _matchedFiber3 = existingChildren.get(newIdx) || null;
                return updateFragment2(returnFiber, _matchedFiber3, newChild, lanes, null);
              }
              throwOnInvalidObjectType(returnFiber, newChild);
            }
            {
              if (typeof newChild === "function") {
                warnOnFunctionType(returnFiber);
              }
            }
            return null;
          }
          function warnOnInvalidKey(child, knownKeys, returnFiber) {
            {
              if (typeof child !== "object" || child === null) {
                return knownKeys;
              }
              switch (child.$$typeof) {
                case REACT_ELEMENT_TYPE:
                case REACT_PORTAL_TYPE:
                  warnForMissingKey(child, returnFiber);
                  var key = child.key;
                  if (typeof key !== "string") {
                    break;
                  }
                  if (knownKeys === null) {
                    knownKeys = /* @__PURE__ */ new Set();
                    knownKeys.add(key);
                    break;
                  }
                  if (!knownKeys.has(key)) {
                    knownKeys.add(key);
                    break;
                  }
                  error("Encountered two children with the same key, `%s`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted \u2014 the behavior is unsupported and could change in a future version.", key);
                  break;
                case REACT_LAZY_TYPE:
                  var payload = child.Ja;
                  var init = child.G;
                  warnOnInvalidKey(init(payload), knownKeys, returnFiber);
                  break;
              }
            }
            return knownKeys;
          }
          function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {
            {
              var knownKeys = null;
              for (var i = 0; i < newChildren.length; i++) {
                var child = newChildren[i];
                knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
              }
            }
            var resultingFirstChild = null;
            var previousNewFiber = null;
            var oldFiber = currentFirstChild;
            var lastPlacedIndex = 0;
            var newIdx = 0;
            var nextOldFiber = null;
            for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
              if (oldFiber.index > newIdx) {
                nextOldFiber = oldFiber;
                oldFiber = null;
              } else {
                nextOldFiber = oldFiber.sibling;
              }
              var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes);
              if (newFiber === null) {
                if (oldFiber === null) {
                  oldFiber = nextOldFiber;
                }
                break;
              }
              if (shouldTrackSideEffects) {
                if (oldFiber && newFiber.alternate === null) {
                  deleteChild(returnFiber, oldFiber);
                }
              }
              lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
              if (previousNewFiber === null) {
                resultingFirstChild = newFiber;
              } else {
                previousNewFiber.sibling = newFiber;
              }
              previousNewFiber = newFiber;
              oldFiber = nextOldFiber;
            }
            if (newIdx === newChildren.length) {
              deleteRemainingChildren(returnFiber, oldFiber);
              if (getIsHydrating()) {
                var numberOfForks = newIdx;
                pushTreeFork(returnFiber, numberOfForks);
              }
              return resultingFirstChild;
            }
            if (oldFiber === null) {
              for (; newIdx < newChildren.length; newIdx++) {
                var _newFiber = createChild(returnFiber, newChildren[newIdx], lanes);
                if (_newFiber === null) {
                  continue;
                }
                lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = _newFiber;
                } else {
                  previousNewFiber.sibling = _newFiber;
                }
                previousNewFiber = _newFiber;
              }
              if (getIsHydrating()) {
                var _numberOfForks = newIdx;
                pushTreeFork(returnFiber, _numberOfForks);
              }
              return resultingFirstChild;
            }
            var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
            for (; newIdx < newChildren.length; newIdx++) {
              var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], lanes);
              if (_newFiber2 !== null) {
                if (shouldTrackSideEffects) {
                  if (_newFiber2.alternate !== null) {
                    existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
                  }
                }
                lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = _newFiber2;
                } else {
                  previousNewFiber.sibling = _newFiber2;
                }
                previousNewFiber = _newFiber2;
              }
            }
            if (shouldTrackSideEffects) {
              existingChildren.forEach(function(child2) {
                return deleteChild(returnFiber, child2);
              });
            }
            if (getIsHydrating()) {
              var _numberOfForks2 = newIdx;
              pushTreeFork(returnFiber, _numberOfForks2);
            }
            return resultingFirstChild;
          }
          function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, lanes) {
            var iteratorFn = getIteratorFn(newChildrenIterable);
            if (typeof iteratorFn !== "function") {
              throw new Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");
            }
            {
              if (typeof Symbol === "function" && // $FlowFixMe Flow doesn't know about toStringTag
              newChildrenIterable[Symbol.toStringTag] === "Generator") {
                if (!didWarnAboutGenerators) {
                  error("Using Generators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. Keep in mind you might need to polyfill these features for older browsers.");
                }
                didWarnAboutGenerators = true;
              }
              if (newChildrenIterable.entries === iteratorFn) {
                if (!didWarnAboutMaps) {
                  error("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                }
                didWarnAboutMaps = true;
              }
              var _newChildren = iteratorFn.call(newChildrenIterable);
              if (_newChildren) {
                var knownKeys = null;
                var _step = _newChildren.next();
                for (; !_step.done; _step = _newChildren.next()) {
                  var child = _step.value;
                  knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
                }
              }
            }
            var newChildren = iteratorFn.call(newChildrenIterable);
            if (newChildren == null) {
              throw new Error("An iterable object provided no iterator.");
            }
            var resultingFirstChild = null;
            var previousNewFiber = null;
            var oldFiber = currentFirstChild;
            var lastPlacedIndex = 0;
            var newIdx = 0;
            var nextOldFiber = null;
            var step = newChildren.next();
            for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {
              if (oldFiber.index > newIdx) {
                nextOldFiber = oldFiber;
                oldFiber = null;
              } else {
                nextOldFiber = oldFiber.sibling;
              }
              var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);
              if (newFiber === null) {
                if (oldFiber === null) {
                  oldFiber = nextOldFiber;
                }
                break;
              }
              if (shouldTrackSideEffects) {
                if (oldFiber && newFiber.alternate === null) {
                  deleteChild(returnFiber, oldFiber);
                }
              }
              lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
              if (previousNewFiber === null) {
                resultingFirstChild = newFiber;
              } else {
                previousNewFiber.sibling = newFiber;
              }
              previousNewFiber = newFiber;
              oldFiber = nextOldFiber;
            }
            if (step.done) {
              deleteRemainingChildren(returnFiber, oldFiber);
              if (getIsHydrating()) {
                var numberOfForks = newIdx;
                pushTreeFork(returnFiber, numberOfForks);
              }
              return resultingFirstChild;
            }
            if (oldFiber === null) {
              for (; !step.done; newIdx++, step = newChildren.next()) {
                var _newFiber3 = createChild(returnFiber, step.value, lanes);
                if (_newFiber3 === null) {
                  continue;
                }
                lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = _newFiber3;
                } else {
                  previousNewFiber.sibling = _newFiber3;
                }
                previousNewFiber = _newFiber3;
              }
              if (getIsHydrating()) {
                var _numberOfForks3 = newIdx;
                pushTreeFork(returnFiber, _numberOfForks3);
              }
              return resultingFirstChild;
            }
            var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
            for (; !step.done; newIdx++, step = newChildren.next()) {
              var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, lanes);
              if (_newFiber4 !== null) {
                if (shouldTrackSideEffects) {
                  if (_newFiber4.alternate !== null) {
                    existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
                  }
                }
                lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = _newFiber4;
                } else {
                  previousNewFiber.sibling = _newFiber4;
                }
                previousNewFiber = _newFiber4;
              }
            }
            if (shouldTrackSideEffects) {
              existingChildren.forEach(function(child2) {
                return deleteChild(returnFiber, child2);
              });
            }
            if (getIsHydrating()) {
              var _numberOfForks4 = newIdx;
              pushTreeFork(returnFiber, _numberOfForks4);
            }
            return resultingFirstChild;
          }
          function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, lanes) {
            if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
              deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
              var existing = useFiber(currentFirstChild, textContent);
              existing.return = returnFiber;
              return existing;
            }
            deleteRemainingChildren(returnFiber, currentFirstChild);
            var created = createFiberFromText(textContent, returnFiber.mode, lanes);
            created.return = returnFiber;
            return created;
          }
          function reconcileSingleElement(returnFiber, currentFirstChild, element, lanes) {
            var key = element.key;
            var child = currentFirstChild;
            while (child !== null) {
              if (child.key === key) {
                var elementType = element.type;
                if (elementType === REACT_FRAGMENT_TYPE) {
                  if (child.tag === Fragment) {
                    deleteRemainingChildren(returnFiber, child.sibling);
                    var existing = useFiber(child, element.props.children);
                    existing.return = returnFiber;
                    {
                      existing.$a = element.pb;
                      existing.qa = element.T;
                    }
                    return existing;
                  }
                } else {
                  if (child.elementType === elementType || // Keep this check inline so it only runs on the false path:
                  isCompatibleFamilyForHotReloading(child, element) || // Lazy types should reconcile their resolved type.
                  // We need to do this after the Hot Reloading check above,
                  // because hot reloading has different semantics than prod because
                  // it doesn't resuspend. So we can't let the call below suspend.
                  typeof elementType === "object" && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === child.type) {
                    deleteRemainingChildren(returnFiber, child.sibling);
                    var _existing = useFiber(child, element.props);
                    _existing.ref = coerceRef(returnFiber, child, element);
                    _existing.return = returnFiber;
                    {
                      _existing.$a = element.pb;
                      _existing.qa = element.T;
                    }
                    return _existing;
                  }
                }
                deleteRemainingChildren(returnFiber, child);
                break;
              } else {
                deleteChild(returnFiber, child);
              }
              child = child.sibling;
            }
            if (element.type === REACT_FRAGMENT_TYPE) {
              var created = createFiberFromFragment(element.props.children, returnFiber.mode, lanes, element.key);
              created.return = returnFiber;
              return created;
            } else {
              var _created4 = createFiberFromElement(element, returnFiber.mode, lanes);
              _created4.ref = coerceRef(returnFiber, currentFirstChild, element);
              _created4.return = returnFiber;
              return _created4;
            }
          }
          function reconcileSinglePortal(returnFiber, currentFirstChild, portal, lanes) {
            var key = portal.key;
            var child = currentFirstChild;
            while (child !== null) {
              if (child.key === key) {
                if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
                  deleteRemainingChildren(returnFiber, child.sibling);
                  var existing = useFiber(child, portal.children || []);
                  existing.return = returnFiber;
                  return existing;
                } else {
                  deleteRemainingChildren(returnFiber, child);
                  break;
                }
              } else {
                deleteChild(returnFiber, child);
              }
              child = child.sibling;
            }
            var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
            created.return = returnFiber;
            return created;
          }
          function reconcileChildFibers2(returnFiber, currentFirstChild, newChild, lanes) {
            var isUnkeyedTopLevelFragment = typeof newChild === "object" && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;
            if (isUnkeyedTopLevelFragment) {
              newChild = newChild.props.children;
            }
            if (typeof newChild === "object" && newChild !== null) {
              switch (newChild.$$typeof) {
                case REACT_ELEMENT_TYPE:
                  return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, lanes));
                case REACT_PORTAL_TYPE:
                  return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, lanes));
                case REACT_LAZY_TYPE:
                  var payload = newChild.Ja;
                  var init = newChild.G;
                  return reconcileChildFibers2(returnFiber, currentFirstChild, init(payload), lanes);
              }
              if (isArray(newChild)) {
                return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes);
              }
              if (getIteratorFn(newChild)) {
                return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, lanes);
              }
              throwOnInvalidObjectType(returnFiber, newChild);
            }
            if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
              return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, "" + newChild, lanes));
            }
            {
              if (typeof newChild === "function") {
                warnOnFunctionType(returnFiber);
              }
            }
            return deleteRemainingChildren(returnFiber, currentFirstChild);
          }
          return reconcileChildFibers2;
        }
        var reconcileChildFibers = ChildReconciler(true);
        var mountChildFibers = ChildReconciler(false);
        function cloneChildFibers(current2, workInProgress2) {
          if (current2 !== null && workInProgress2.child !== current2.child) {
            throw new Error("Resuming work not yet implemented.");
          }
          if (workInProgress2.child === null) {
            return;
          }
          var currentChild = workInProgress2.child;
          var newChild = createWorkInProgress(currentChild, currentChild.pendingProps);
          workInProgress2.child = newChild;
          newChild.return = workInProgress2;
          while (currentChild.sibling !== null) {
            currentChild = currentChild.sibling;
            newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps);
            newChild.return = workInProgress2;
          }
          newChild.sibling = null;
        }
        function resetChildFibers(workInProgress2, lanes) {
          var child = workInProgress2.child;
          while (child !== null) {
            resetWorkInProgress(child, lanes);
            child = child.sibling;
          }
        }
        var NO_CONTEXT = {};
        var contextStackCursor$1 = createCursor(NO_CONTEXT);
        var contextFiberStackCursor = createCursor(NO_CONTEXT);
        var rootInstanceStackCursor = createCursor(NO_CONTEXT);
        function requiredContext(c) {
          if (c === NO_CONTEXT) {
            throw new Error("Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.");
          }
          return c;
        }
        function getRootHostContainer() {
          var rootInstance = requiredContext(rootInstanceStackCursor.current);
          return rootInstance;
        }
        function pushHostContainer(fiber, nextRootInstance) {
          push(rootInstanceStackCursor, nextRootInstance, fiber);
          push(contextFiberStackCursor, fiber, fiber);
          push(contextStackCursor$1, NO_CONTEXT, fiber);
          var nextRootContext = getRootHostContext(nextRootInstance);
          pop(contextStackCursor$1, fiber);
          push(contextStackCursor$1, nextRootContext, fiber);
        }
        function popHostContainer(fiber) {
          pop(contextStackCursor$1, fiber);
          pop(contextFiberStackCursor, fiber);
          pop(rootInstanceStackCursor, fiber);
        }
        function getHostContext() {
          var context = requiredContext(contextStackCursor$1.current);
          return context;
        }
        function pushHostContext(fiber) {
          var rootInstance = requiredContext(rootInstanceStackCursor.current);
          var context = requiredContext(contextStackCursor$1.current);
          var nextContext = getChildHostContext(context, fiber.type);
          if (context === nextContext) {
            return;
          }
          push(contextFiberStackCursor, fiber, fiber);
          push(contextStackCursor$1, nextContext, fiber);
        }
        function popHostContext(fiber) {
          if (contextFiberStackCursor.current !== fiber) {
            return;
          }
          pop(contextStackCursor$1, fiber);
          pop(contextFiberStackCursor, fiber);
        }
        var DefaultSuspenseContext = 0;
        var SubtreeSuspenseContextMask = 1;
        var InvisibleParentSuspenseContext = 1;
        var ForceSuspenseFallback = 2;
        var suspenseStackCursor = createCursor(DefaultSuspenseContext);
        function hasSuspenseContext(parentContext, flag) {
          return (parentContext & flag) !== 0;
        }
        function setDefaultShallowSuspenseContext(parentContext) {
          return parentContext & SubtreeSuspenseContextMask;
        }
        function setShallowSuspenseContext(parentContext, shallowContext) {
          return parentContext & SubtreeSuspenseContextMask | shallowContext;
        }
        function addSubtreeSuspenseContext(parentContext, subtreeContext) {
          return parentContext | subtreeContext;
        }
        function pushSuspenseContext(fiber, newContext) {
          push(suspenseStackCursor, newContext, fiber);
        }
        function popSuspenseContext(fiber) {
          pop(suspenseStackCursor, fiber);
        }
        function shouldCaptureSuspense(workInProgress2, hasInvisibleParent) {
          var nextState = workInProgress2.memoizedState;
          if (nextState !== null) {
            if (nextState.dehydrated !== null) {
              return true;
            }
            return false;
          }
          var props = workInProgress2.memoizedProps;
          {
            return true;
          }
        }
        function findFirstSuspended(row) {
          var node = row;
          while (node !== null) {
            if (node.tag === SuspenseComponent) {
              var state = node.memoizedState;
              if (state !== null) {
                var dehydrated = state.dehydrated;
                if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated)) {
                  return node;
                }
              }
            } else if (node.tag === SuspenseListComponent && // revealOrder undefined can't be trusted because it don't
            // keep track of whether it suspended or not.
            node.memoizedProps.revealOrder !== void 0) {
              var didSuspend = (node.flags & DidCapture) !== NoFlags;
              if (didSuspend) {
                return node;
              }
            } else if (node.child !== null) {
              node.child.return = node;
              node = node.child;
              continue;
            }
            if (node === row) {
              return null;
            }
            while (node.sibling === null) {
              if (node.return === null || node.return === row) {
                return null;
              }
              node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
          }
          return null;
        }
        var NoFlags$1 = (
          /*   */
          0
        );
        var HasEffect = (
          /* */
          1
        );
        var Insertion = (
          /*  */
          2
        );
        var Layout = (
          /*    */
          4
        );
        var Passive$1 = (
          /*   */
          8
        );
        var workInProgressSources = [];
        function resetWorkInProgressVersions() {
          for (var i = 0; i < workInProgressSources.length; i++) {
            var mutableSource = workInProgressSources[i];
            {
              mutableSource.ly = null;
            }
          }
          workInProgressSources.length = 0;
        }
        function registerMutableSourceForHydration(root2, mutableSource) {
          var getVersion = mutableSource.ny;
          var version = getVersion(mutableSource.pb);
          if (root2.mutableSourceEagerHydrationData == null) {
            root2.mutableSourceEagerHydrationData = [mutableSource, version];
          } else {
            root2.mutableSourceEagerHydrationData.push(mutableSource, version);
          }
        }
        var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentBatchConfig$2 = ReactSharedInternals.ReactCurrentBatchConfig;
        var didWarnAboutMismatchedHooksForComponent;
        var didWarnUncachedGetSnapshot;
        {
          didWarnAboutMismatchedHooksForComponent = /* @__PURE__ */ new Set();
        }
        var renderLanes = NoLanes;
        var currentlyRenderingFiber$1 = null;
        var currentHook = null;
        var workInProgressHook = null;
        var didScheduleRenderPhaseUpdate = false;
        var didScheduleRenderPhaseUpdateDuringThisPass = false;
        var localIdCounter = 0;
        var globalClientIdCounter = 0;
        var RE_RENDER_LIMIT = 25;
        var currentHookNameInDev = null;
        var hookTypesDev = null;
        var hookTypesUpdateIndexDev = -1;
        var ignorePreviousDependencies = false;
        function mountHookTypesDev() {
          {
            var hookName = currentHookNameInDev;
            if (hookTypesDev === null) {
              hookTypesDev = [hookName];
            } else {
              hookTypesDev.push(hookName);
            }
          }
        }
        function updateHookTypesDev() {
          {
            var hookName = currentHookNameInDev;
            if (hookTypesDev !== null) {
              hookTypesUpdateIndexDev++;
              if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {
                warnOnHookMismatchInDev(hookName);
              }
            }
          }
        }
        function checkDepsAreArrayDev(deps) {
          {
            if (deps !== void 0 && deps !== null && !isArray(deps)) {
              error("%s received a final argument that is not an array (instead, received `%s`). When specified, the final argument must be an array.", currentHookNameInDev, typeof deps);
            }
          }
        }
        function warnOnHookMismatchInDev(currentHookName) {
          {
            var componentName = getComponentNameFromFiber(currentlyRenderingFiber$1);
            if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {
              didWarnAboutMismatchedHooksForComponent.add(componentName);
              if (hookTypesDev !== null) {
                var table = "";
                var secondColumnStart = 30;
                for (var i = 0; i <= hookTypesUpdateIndexDev; i++) {
                  var oldHookName = hookTypesDev[i];
                  var newHookName = i === hookTypesUpdateIndexDev ? currentHookName : oldHookName;
                  var row = i + 1 + ". " + oldHookName;
                  while (row.length < secondColumnStart) {
                    row += " ";
                  }
                  row += newHookName + "\n";
                  table += row;
                }
                error("React has detected a change in the order of Hooks called by %s. This will lead to bugs and errors if not fixed. For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\n\n   Previous render            Next render\n   ------------------------------------------------------\n%s   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n", componentName, table);
              }
            }
          }
        }
        function throwInvalidHookError() {
          throw new Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
        }
        function areHookInputsEqual(nextDeps, prevDeps) {
          {
            if (ignorePreviousDependencies) {
              return false;
            }
          }
          if (prevDeps === null) {
            {
              error("%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.", currentHookNameInDev);
            }
            return false;
          }
          {
            if (nextDeps.length !== prevDeps.length) {
              error("The final argument passed to %s changed size between renders. The order and size of this array must remain constant.\n\nPrevious: %s\nIncoming: %s", currentHookNameInDev, "[" + prevDeps.join(", ") + "]", "[" + nextDeps.join(", ") + "]");
            }
          }
          for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++) {
            if (objectIs(nextDeps[i], prevDeps[i])) {
              continue;
            }
            return false;
          }
          return true;
        }
        function renderWithHooks(current2, workInProgress2, Component2, props, secondArg, nextRenderLanes) {
          renderLanes = nextRenderLanes;
          currentlyRenderingFiber$1 = workInProgress2;
          {
            hookTypesDev = current2 !== null ? current2.xc : null;
            hookTypesUpdateIndexDev = -1;
            ignorePreviousDependencies = current2 !== null && current2.type !== workInProgress2.type;
          }
          workInProgress2.memoizedState = null;
          workInProgress2.updateQueue = null;
          workInProgress2.lanes = NoLanes;
          {
            if (current2 !== null && current2.memoizedState !== null) {
              ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;
            } else if (hookTypesDev !== null) {
              ReactCurrentDispatcher$1.current = HooksDispatcherOnMountWithHookTypesInDEV;
            } else {
              ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;
            }
          }
          var children = Component2(props, secondArg);
          if (didScheduleRenderPhaseUpdateDuringThisPass) {
            var numberOfReRenders = 0;
            do {
              didScheduleRenderPhaseUpdateDuringThisPass = false;
              localIdCounter = 0;
              if (numberOfReRenders >= RE_RENDER_LIMIT) {
                throw new Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
              }
              numberOfReRenders += 1;
              {
                ignorePreviousDependencies = false;
              }
              currentHook = null;
              workInProgressHook = null;
              workInProgress2.updateQueue = null;
              {
                hookTypesUpdateIndexDev = -1;
              }
              ReactCurrentDispatcher$1.current = HooksDispatcherOnRerenderInDEV;
              children = Component2(props, secondArg);
            } while (didScheduleRenderPhaseUpdateDuringThisPass);
          }
          ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
          {
            workInProgress2.xc = hookTypesDev;
          }
          var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;
          renderLanes = NoLanes;
          currentlyRenderingFiber$1 = null;
          currentHook = null;
          workInProgressHook = null;
          {
            currentHookNameInDev = null;
            hookTypesDev = null;
            hookTypesUpdateIndexDev = -1;
            if (current2 !== null && (current2.flags & StaticMask) !== (workInProgress2.flags & StaticMask) && // Disable this warning in legacy mode, because legacy Suspense is weird
            // and creates false positives. To make this work in legacy mode, we'd
            // need to mark fibers that commit in an incomplete state, somehow. For
            // now I'll disable the warning that most of the bugs that would trigger
            // it are either exclusive to concurrent mode or exist in both.
            (current2.mode & ConcurrentMode) !== NoMode) {
              error("Internal React error: Expected static flag was missing. Please notify the React team.");
            }
          }
          didScheduleRenderPhaseUpdate = false;
          if (didRenderTooFewHooks) {
            throw new Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement.");
          }
          return children;
        }
        function checkDidRenderIdHook() {
          var didRenderIdHook = localIdCounter !== 0;
          localIdCounter = 0;
          return didRenderIdHook;
        }
        function bailoutHooks(current2, workInProgress2, lanes) {
          workInProgress2.updateQueue = current2.updateQueue;
          if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
            workInProgress2.flags &= ~(MountPassiveDev | MountLayoutDev | Passive | Update);
          } else {
            workInProgress2.flags &= ~(Passive | Update);
          }
          current2.lanes = removeLanes(current2.lanes, lanes);
        }
        function resetHooksAfterThrow() {
          ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
          if (didScheduleRenderPhaseUpdate) {
            var hook = currentlyRenderingFiber$1.memoizedState;
            while (hook !== null) {
              var queue = hook.queue;
              if (queue !== null) {
                queue.pending = null;
              }
              hook = hook.next;
            }
            didScheduleRenderPhaseUpdate = false;
          }
          renderLanes = NoLanes;
          currentlyRenderingFiber$1 = null;
          currentHook = null;
          workInProgressHook = null;
          {
            hookTypesDev = null;
            hookTypesUpdateIndexDev = -1;
            currentHookNameInDev = null;
            isUpdatingOpaqueValueInRenderPhase = false;
          }
          didScheduleRenderPhaseUpdateDuringThisPass = false;
          localIdCounter = 0;
        }
        function mountWorkInProgressHook() {
          var hook = {
            memoizedState: null,
            baseState: null,
            baseQueue: null,
            queue: null,
            next: null
          };
          if (workInProgressHook === null) {
            currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;
          } else {
            workInProgressHook = workInProgressHook.next = hook;
          }
          return workInProgressHook;
        }
        function updateWorkInProgressHook() {
          var nextCurrentHook;
          if (currentHook === null) {
            var current2 = currentlyRenderingFiber$1.alternate;
            if (current2 !== null) {
              nextCurrentHook = current2.memoizedState;
            } else {
              nextCurrentHook = null;
            }
          } else {
            nextCurrentHook = currentHook.next;
          }
          var nextWorkInProgressHook;
          if (workInProgressHook === null) {
            nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;
          } else {
            nextWorkInProgressHook = workInProgressHook.next;
          }
          if (nextWorkInProgressHook !== null) {
            workInProgressHook = nextWorkInProgressHook;
            nextWorkInProgressHook = workInProgressHook.next;
            currentHook = nextCurrentHook;
          } else {
            if (nextCurrentHook === null) {
              throw new Error("Rendered more hooks than during the previous render.");
            }
            currentHook = nextCurrentHook;
            var newHook = {
              memoizedState: currentHook.memoizedState,
              baseState: currentHook.baseState,
              baseQueue: currentHook.baseQueue,
              queue: currentHook.queue,
              next: null
            };
            if (workInProgressHook === null) {
              currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook;
            } else {
              workInProgressHook = workInProgressHook.next = newHook;
            }
          }
          return workInProgressHook;
        }
        function createFunctionComponentUpdateQueue() {
          return {
            lastEffect: null,
            stores: null
          };
        }
        function basicStateReducer(state, action) {
          return typeof action === "function" ? action(state) : action;
        }
        function mountReducer(reducer, initialArg, init) {
          var hook = mountWorkInProgressHook();
          var initialState;
          if (init !== void 0) {
            initialState = init(initialArg);
          } else {
            initialState = initialArg;
          }
          hook.memoizedState = hook.baseState = initialState;
          var queue = {
            pending: null,
            interleaved: null,
            lanes: NoLanes,
            dispatch: null,
            lastRenderedReducer: reducer,
            lastRenderedState: initialState
          };
          hook.queue = queue;
          var dispatch = queue.dispatch = dispatchReducerAction.bind(null, currentlyRenderingFiber$1, queue);
          return [hook.memoizedState, dispatch];
        }
        function updateReducer(reducer, initialArg, init) {
          var hook = updateWorkInProgressHook();
          var queue = hook.queue;
          if (queue === null) {
            throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
          }
          queue.lastRenderedReducer = reducer;
          var current2 = currentHook;
          var baseQueue = current2.baseQueue;
          var pendingQueue = queue.pending;
          if (pendingQueue !== null) {
            if (baseQueue !== null) {
              var baseFirst = baseQueue.next;
              var pendingFirst = pendingQueue.next;
              baseQueue.next = pendingFirst;
              pendingQueue.next = baseFirst;
            }
            {
              if (current2.baseQueue !== baseQueue) {
                error("Internal error: Expected work-in-progress queue to be a clone. This is a bug in React.");
              }
            }
            current2.baseQueue = baseQueue = pendingQueue;
            queue.pending = null;
          }
          if (baseQueue !== null) {
            var first = baseQueue.next;
            var newState = current2.baseState;
            var newBaseState = null;
            var newBaseQueueFirst = null;
            var newBaseQueueLast = null;
            var update = first;
            do {
              var updateLane = update.lane;
              if (!isSubsetOfLanes(renderLanes, updateLane)) {
                var clone = {
                  lane: updateLane,
                  action: update.action,
                  hasEagerState: update.hasEagerState,
                  eagerState: update.eagerState,
                  next: null
                };
                if (newBaseQueueLast === null) {
                  newBaseQueueFirst = newBaseQueueLast = clone;
                  newBaseState = newState;
                } else {
                  newBaseQueueLast = newBaseQueueLast.next = clone;
                }
                currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, updateLane);
                markSkippedUpdateLanes(updateLane);
              } else {
                if (newBaseQueueLast !== null) {
                  var _clone = {
                    // This update is going to be committed so we never want uncommit
                    // it. Using NoLane works because 0 is a subset of all bitmasks, so
                    // this will never be skipped by the check above.
                    lane: NoLane,
                    action: update.action,
                    hasEagerState: update.hasEagerState,
                    eagerState: update.eagerState,
                    next: null
                  };
                  newBaseQueueLast = newBaseQueueLast.next = _clone;
                }
                if (update.hasEagerState) {
                  newState = update.eagerState;
                } else {
                  var action = update.action;
                  newState = reducer(newState, action);
                }
              }
              update = update.next;
            } while (update !== null && update !== first);
            if (newBaseQueueLast === null) {
              newBaseState = newState;
            } else {
              newBaseQueueLast.next = newBaseQueueFirst;
            }
            if (!objectIs(newState, hook.memoizedState)) {
              markWorkInProgressReceivedUpdate();
            }
            hook.memoizedState = newState;
            hook.baseState = newBaseState;
            hook.baseQueue = newBaseQueueLast;
            queue.lastRenderedState = newState;
          }
          var lastInterleaved = queue.interleaved;
          if (lastInterleaved !== null) {
            var interleaved = lastInterleaved;
            do {
              var interleavedLane = interleaved.lane;
              currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, interleavedLane);
              markSkippedUpdateLanes(interleavedLane);
              interleaved = interleaved.next;
            } while (interleaved !== lastInterleaved);
          } else if (baseQueue === null) {
            queue.lanes = NoLanes;
          }
          var dispatch = queue.dispatch;
          return [hook.memoizedState, dispatch];
        }
        function rerenderReducer(reducer, initialArg, init) {
          var hook = updateWorkInProgressHook();
          var queue = hook.queue;
          if (queue === null) {
            throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
          }
          queue.lastRenderedReducer = reducer;
          var dispatch = queue.dispatch;
          var lastRenderPhaseUpdate = queue.pending;
          var newState = hook.memoizedState;
          if (lastRenderPhaseUpdate !== null) {
            queue.pending = null;
            var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;
            var update = firstRenderPhaseUpdate;
            do {
              var action = update.action;
              newState = reducer(newState, action);
              update = update.next;
            } while (update !== firstRenderPhaseUpdate);
            if (!objectIs(newState, hook.memoizedState)) {
              markWorkInProgressReceivedUpdate();
            }
            hook.memoizedState = newState;
            if (hook.baseQueue === null) {
              hook.baseState = newState;
            }
            queue.lastRenderedState = newState;
          }
          return [newState, dispatch];
        }
        function mountMutableSource(source, getSnapshot, subscribe) {
          {
            return void 0;
          }
        }
        function updateMutableSource(source, getSnapshot, subscribe) {
          {
            return void 0;
          }
        }
        function mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
          var fiber = currentlyRenderingFiber$1;
          var hook = mountWorkInProgressHook();
          var nextSnapshot;
          var isHydrating2 = getIsHydrating();
          if (isHydrating2) {
            if (getServerSnapshot === void 0) {
              throw new Error("Missing getServerSnapshot, which is required for server-rendered content. Will revert to client rendering.");
            }
            nextSnapshot = getServerSnapshot();
            {
              if (!didWarnUncachedGetSnapshot) {
                if (nextSnapshot !== getServerSnapshot()) {
                  error("The result of getServerSnapshot should be cached to avoid an infinite loop");
                  didWarnUncachedGetSnapshot = true;
                }
              }
            }
          } else {
            nextSnapshot = getSnapshot();
            {
              if (!didWarnUncachedGetSnapshot) {
                var cachedSnapshot = getSnapshot();
                if (!objectIs(nextSnapshot, cachedSnapshot)) {
                  error("The result of getSnapshot should be cached to avoid an infinite loop");
                  didWarnUncachedGetSnapshot = true;
                }
              }
            }
            var root2 = getWorkInProgressRoot();
            if (root2 === null) {
              throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
            }
            if (!includesBlockingLane(root2, renderLanes)) {
              pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
            }
          }
          hook.memoizedState = nextSnapshot;
          var inst = {
            value: nextSnapshot,
            getSnapshot
          };
          hook.queue = inst;
          mountEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]);
          fiber.flags |= Passive;
          pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), void 0, null);
          return nextSnapshot;
        }
        function updateSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
          var fiber = currentlyRenderingFiber$1;
          var hook = updateWorkInProgressHook();
          var nextSnapshot = getSnapshot();
          {
            if (!didWarnUncachedGetSnapshot) {
              var cachedSnapshot = getSnapshot();
              if (!objectIs(nextSnapshot, cachedSnapshot)) {
                error("The result of getSnapshot should be cached to avoid an infinite loop");
                didWarnUncachedGetSnapshot = true;
              }
            }
          }
          var prevSnapshot = hook.memoizedState;
          var snapshotChanged = !objectIs(prevSnapshot, nextSnapshot);
          if (snapshotChanged) {
            hook.memoizedState = nextSnapshot;
            markWorkInProgressReceivedUpdate();
          }
          var inst = hook.queue;
          updateEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]);
          if (inst.getSnapshot !== getSnapshot || snapshotChanged || // Check if the susbcribe function changed. We can save some memory by
          // checking whether we scheduled a subscription effect above.
          workInProgressHook !== null && workInProgressHook.memoizedState.tag & HasEffect) {
            fiber.flags |= Passive;
            pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), void 0, null);
            var root2 = getWorkInProgressRoot();
            if (root2 === null) {
              throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
            }
            if (!includesBlockingLane(root2, renderLanes)) {
              pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
            }
          }
          return nextSnapshot;
        }
        function pushStoreConsistencyCheck(fiber, getSnapshot, renderedSnapshot) {
          fiber.flags |= StoreConsistency;
          var check = {
            getSnapshot,
            value: renderedSnapshot
          };
          var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
          if (componentUpdateQueue === null) {
            componentUpdateQueue = createFunctionComponentUpdateQueue();
            currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
            componentUpdateQueue.stores = [check];
          } else {
            var stores = componentUpdateQueue.stores;
            if (stores === null) {
              componentUpdateQueue.stores = [check];
            } else {
              stores.push(check);
            }
          }
        }
        function updateStoreInstance(fiber, inst, nextSnapshot, getSnapshot) {
          inst.value = nextSnapshot;
          inst.getSnapshot = getSnapshot;
          if (checkIfSnapshotChanged(inst)) {
            forceStoreRerender(fiber);
          }
        }
        function subscribeToStore(fiber, inst, subscribe) {
          var handleStoreChange = function() {
            if (checkIfSnapshotChanged(inst)) {
              forceStoreRerender(fiber);
            }
          };
          return subscribe(handleStoreChange);
        }
        function checkIfSnapshotChanged(inst) {
          var latestGetSnapshot = inst.getSnapshot;
          var prevValue = inst.value;
          try {
            var nextValue = latestGetSnapshot();
            return !objectIs(prevValue, nextValue);
          } catch (error2) {
            return true;
          }
        }
        function forceStoreRerender(fiber) {
          var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
          if (root2 !== null) {
            scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
          }
        }
        function mountState(initialState) {
          var hook = mountWorkInProgressHook();
          if (typeof initialState === "function") {
            initialState = initialState();
          }
          hook.memoizedState = hook.baseState = initialState;
          var queue = {
            pending: null,
            interleaved: null,
            lanes: NoLanes,
            dispatch: null,
            lastRenderedReducer: basicStateReducer,
            lastRenderedState: initialState
          };
          hook.queue = queue;
          var dispatch = queue.dispatch = dispatchSetState.bind(null, currentlyRenderingFiber$1, queue);
          return [hook.memoizedState, dispatch];
        }
        function updateState(initialState) {
          return updateReducer(basicStateReducer);
        }
        function rerenderState(initialState) {
          return rerenderReducer(basicStateReducer);
        }
        function pushEffect(tag, create, destroy, deps) {
          var effect = {
            tag,
            create,
            destroy,
            deps,
            // Circular
            next: null
          };
          var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
          if (componentUpdateQueue === null) {
            componentUpdateQueue = createFunctionComponentUpdateQueue();
            currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
            componentUpdateQueue.lastEffect = effect.next = effect;
          } else {
            var lastEffect = componentUpdateQueue.lastEffect;
            if (lastEffect === null) {
              componentUpdateQueue.lastEffect = effect.next = effect;
            } else {
              var firstEffect = lastEffect.next;
              lastEffect.next = effect;
              effect.next = firstEffect;
              componentUpdateQueue.lastEffect = effect;
            }
          }
          return effect;
        }
        function mountRef(initialValue) {
          var hook = mountWorkInProgressHook();
          {
            var _ref2 = {
              current: initialValue
            };
            hook.memoizedState = _ref2;
            return _ref2;
          }
        }
        function updateRef(initialValue) {
          var hook = updateWorkInProgressHook();
          return hook.memoizedState;
        }
        function mountEffectImpl(fiberFlags, hookFlags, create, deps) {
          var hook = mountWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          currentlyRenderingFiber$1.flags |= fiberFlags;
          hook.memoizedState = pushEffect(HasEffect | hookFlags, create, void 0, nextDeps);
        }
        function updateEffectImpl(fiberFlags, hookFlags, create, deps) {
          var hook = updateWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          var destroy = void 0;
          if (currentHook !== null) {
            var prevEffect = currentHook.memoizedState;
            destroy = prevEffect.destroy;
            if (nextDeps !== null) {
              var prevDeps = prevEffect.deps;
              if (areHookInputsEqual(nextDeps, prevDeps)) {
                hook.memoizedState = pushEffect(hookFlags, create, destroy, nextDeps);
                return;
              }
            }
          }
          currentlyRenderingFiber$1.flags |= fiberFlags;
          hook.memoizedState = pushEffect(HasEffect | hookFlags, create, destroy, nextDeps);
        }
        function mountEffect(create, deps) {
          if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
            return mountEffectImpl(MountPassiveDev | Passive | PassiveStatic, Passive$1, create, deps);
          } else {
            return mountEffectImpl(Passive | PassiveStatic, Passive$1, create, deps);
          }
        }
        function updateEffect(create, deps) {
          return updateEffectImpl(Passive, Passive$1, create, deps);
        }
        function mountInsertionEffect(create, deps) {
          return mountEffectImpl(Update, Insertion, create, deps);
        }
        function updateInsertionEffect(create, deps) {
          return updateEffectImpl(Update, Insertion, create, deps);
        }
        function mountLayoutEffect(create, deps) {
          var fiberFlags = Update;
          {
            fiberFlags |= LayoutStatic;
          }
          if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
            fiberFlags |= MountLayoutDev;
          }
          return mountEffectImpl(fiberFlags, Layout, create, deps);
        }
        function updateLayoutEffect(create, deps) {
          return updateEffectImpl(Update, Layout, create, deps);
        }
        function imperativeHandleEffect(create, ref) {
          if (typeof ref === "function") {
            var refCallback = ref;
            var _inst = create();
            refCallback(_inst);
            return function() {
              refCallback(null);
            };
          } else if (ref !== null && ref !== void 0) {
            var refObject = ref;
            {
              if (!refObject.hasOwnProperty("current")) {
                error("Expected useImperativeHandle() first argument to either be a ref callback or React.createRef() object. Instead received: %s.", "an object with keys {" + Object.keys(refObject).join(", ") + "}");
              }
            }
            var _inst2 = create();
            refObject.current = _inst2;
            return function() {
              refObject.current = null;
            };
          }
        }
        function mountImperativeHandle(ref, create, deps) {
          {
            if (typeof create !== "function") {
              error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : "null");
            }
          }
          var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
          var fiberFlags = Update;
          {
            fiberFlags |= LayoutStatic;
          }
          if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
            fiberFlags |= MountLayoutDev;
          }
          return mountEffectImpl(fiberFlags, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
        }
        function updateImperativeHandle(ref, create, deps) {
          {
            if (typeof create !== "function") {
              error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : "null");
            }
          }
          var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
          return updateEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
        }
        function mountDebugValue(value, formatterFn) {
        }
        var updateDebugValue = mountDebugValue;
        function mountCallback(callback, deps) {
          var hook = mountWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          hook.memoizedState = [callback, nextDeps];
          return callback;
        }
        function updateCallback(callback, deps) {
          var hook = updateWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          var prevState = hook.memoizedState;
          if (prevState !== null) {
            if (nextDeps !== null) {
              var prevDeps = prevState[1];
              if (areHookInputsEqual(nextDeps, prevDeps)) {
                return prevState[0];
              }
            }
          }
          hook.memoizedState = [callback, nextDeps];
          return callback;
        }
        function mountMemo(nextCreate, deps) {
          var hook = mountWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          var nextValue = nextCreate();
          hook.memoizedState = [nextValue, nextDeps];
          return nextValue;
        }
        function updateMemo(nextCreate, deps) {
          var hook = updateWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          var prevState = hook.memoizedState;
          if (prevState !== null) {
            if (nextDeps !== null) {
              var prevDeps = prevState[1];
              if (areHookInputsEqual(nextDeps, prevDeps)) {
                return prevState[0];
              }
            }
          }
          var nextValue = nextCreate();
          hook.memoizedState = [nextValue, nextDeps];
          return nextValue;
        }
        function mountDeferredValue(value) {
          var hook = mountWorkInProgressHook();
          hook.memoizedState = value;
          return value;
        }
        function updateDeferredValue(value) {
          var hook = updateWorkInProgressHook();
          var resolvedCurrentHook = currentHook;
          var prevValue = resolvedCurrentHook.memoizedState;
          return updateDeferredValueImpl(hook, prevValue, value);
        }
        function rerenderDeferredValue(value) {
          var hook = updateWorkInProgressHook();
          if (currentHook === null) {
            hook.memoizedState = value;
            return value;
          } else {
            var prevValue = currentHook.memoizedState;
            return updateDeferredValueImpl(hook, prevValue, value);
          }
        }
        function updateDeferredValueImpl(hook, prevValue, value) {
          var shouldDeferValue = !includesOnlyNonUrgentLanes(renderLanes);
          if (shouldDeferValue) {
            if (!objectIs(value, prevValue)) {
              var deferredLane = claimNextTransitionLane();
              currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, deferredLane);
              markSkippedUpdateLanes(deferredLane);
              hook.baseState = true;
            }
            return prevValue;
          } else {
            if (hook.baseState) {
              hook.baseState = false;
              markWorkInProgressReceivedUpdate();
            }
            hook.memoizedState = value;
            return value;
          }
        }
        function startTransition(setPending, callback, options2) {
          var previousPriority = getCurrentUpdatePriority();
          setCurrentUpdatePriority(higherEventPriority(previousPriority, ContinuousEventPriority));
          setPending(true);
          var prevTransition = ReactCurrentBatchConfig$2.transition;
          ReactCurrentBatchConfig$2.transition = {};
          var currentTransition = ReactCurrentBatchConfig$2.transition;
          {
            ReactCurrentBatchConfig$2.transition._a = /* @__PURE__ */ new Set();
          }
          try {
            setPending(false);
            callback();
          } finally {
            setCurrentUpdatePriority(previousPriority);
            ReactCurrentBatchConfig$2.transition = prevTransition;
            {
              if (prevTransition === null && currentTransition._a) {
                var updatedFibersCount = currentTransition._a.size;
                if (updatedFibersCount > 10) {
                  warn("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.");
                }
                currentTransition._a.clear();
              }
            }
          }
        }
        function mountTransition() {
          var _mountState = mountState(false), isPending = _mountState[0], setPending = _mountState[1];
          var start = startTransition.bind(null, setPending);
          var hook = mountWorkInProgressHook();
          hook.memoizedState = start;
          return [isPending, start];
        }
        function updateTransition() {
          var _updateState = updateState(), isPending = _updateState[0];
          var hook = updateWorkInProgressHook();
          var start = hook.memoizedState;
          return [isPending, start];
        }
        function rerenderTransition() {
          var _rerenderState = rerenderState(), isPending = _rerenderState[0];
          var hook = updateWorkInProgressHook();
          var start = hook.memoizedState;
          return [isPending, start];
        }
        var isUpdatingOpaqueValueInRenderPhase = false;
        function getIsUpdatingOpaqueValueInRenderPhaseInDEV() {
          {
            return isUpdatingOpaqueValueInRenderPhase;
          }
        }
        function mountId() {
          var hook = mountWorkInProgressHook();
          var root2 = getWorkInProgressRoot();
          var identifierPrefix = root2.identifierPrefix;
          var id;
          if (getIsHydrating()) {
            var treeId = getTreeId();
            id = ":" + identifierPrefix + "R" + treeId;
            var localId = localIdCounter++;
            if (localId > 0) {
              id += "H" + localId.toString(32);
            }
            id += ":";
          } else {
            var globalClientId = globalClientIdCounter++;
            id = ":" + identifierPrefix + "r" + globalClientId.toString(32) + ":";
          }
          hook.memoizedState = id;
          return id;
        }
        function updateId() {
          var hook = updateWorkInProgressHook();
          var id = hook.memoizedState;
          return id;
        }
        function dispatchReducerAction(fiber, queue, action) {
          {
            if (typeof arguments[3] === "function") {
              error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
            }
          }
          var lane = requestUpdateLane(fiber);
          var update = {
            lane,
            action,
            hasEagerState: false,
            eagerState: null,
            next: null
          };
          if (isRenderPhaseUpdate(fiber)) {
            enqueueRenderPhaseUpdate(queue, update);
          } else {
            var root2 = enqueueConcurrentHookUpdate(fiber, queue, update, lane);
            if (root2 !== null) {
              var eventTime = requestEventTime();
              scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
              entangleTransitionUpdate(root2, queue, lane);
            }
          }
          markUpdateInDevTools(fiber, lane);
        }
        function dispatchSetState(fiber, queue, action) {
          {
            if (typeof arguments[3] === "function") {
              error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
            }
          }
          var lane = requestUpdateLane(fiber);
          var update = {
            lane,
            action,
            hasEagerState: false,
            eagerState: null,
            next: null
          };
          if (isRenderPhaseUpdate(fiber)) {
            enqueueRenderPhaseUpdate(queue, update);
          } else {
            var alternate = fiber.alternate;
            if (fiber.lanes === NoLanes && (alternate === null || alternate.lanes === NoLanes)) {
              var lastRenderedReducer = queue.lastRenderedReducer;
              if (lastRenderedReducer !== null) {
                var prevDispatcher;
                {
                  prevDispatcher = ReactCurrentDispatcher$1.current;
                  ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                }
                try {
                  var currentState = queue.lastRenderedState;
                  var eagerState = lastRenderedReducer(currentState, action);
                  update.hasEagerState = true;
                  update.eagerState = eagerState;
                  if (objectIs(eagerState, currentState)) {
                    enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane);
                    return;
                  }
                } catch (error2) {
                } finally {
                  {
                    ReactCurrentDispatcher$1.current = prevDispatcher;
                  }
                }
              }
            }
            var root2 = enqueueConcurrentHookUpdate(fiber, queue, update, lane);
            if (root2 !== null) {
              var eventTime = requestEventTime();
              scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
              entangleTransitionUpdate(root2, queue, lane);
            }
          }
          markUpdateInDevTools(fiber, lane);
        }
        function isRenderPhaseUpdate(fiber) {
          var alternate = fiber.alternate;
          return fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1;
        }
        function enqueueRenderPhaseUpdate(queue, update) {
          didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;
          var pending = queue.pending;
          if (pending === null) {
            update.next = update;
          } else {
            update.next = pending.next;
            pending.next = update;
          }
          queue.pending = update;
        }
        function entangleTransitionUpdate(root2, queue, lane) {
          if (isTransitionLane(lane)) {
            var queueLanes = queue.lanes;
            queueLanes = intersectLanes(queueLanes, root2.pendingLanes);
            var newQueueLanes = mergeLanes(queueLanes, lane);
            queue.lanes = newQueueLanes;
            markRootEntangled(root2, newQueueLanes);
          }
        }
        function markUpdateInDevTools(fiber, lane, action) {
          {
            markStateUpdateScheduled(fiber, lane);
          }
        }
        var ContextOnlyDispatcher = {
          readContext,
          useCallback: throwInvalidHookError,
          useContext: throwInvalidHookError,
          useEffect: throwInvalidHookError,
          useImperativeHandle: throwInvalidHookError,
          useInsertionEffect: throwInvalidHookError,
          useLayoutEffect: throwInvalidHookError,
          useMemo: throwInvalidHookError,
          useReducer: throwInvalidHookError,
          useRef: throwInvalidHookError,
          useState: throwInvalidHookError,
          useDebugValue: throwInvalidHookError,
          useDeferredValue: throwInvalidHookError,
          useTransition: throwInvalidHookError,
          useMutableSource: throwInvalidHookError,
          useSyncExternalStore: throwInvalidHookError,
          useId: throwInvalidHookError,
          unstable_isNewReconciler: enableNewReconciler
        };
        var HooksDispatcherOnMountInDEV = null;
        var HooksDispatcherOnMountWithHookTypesInDEV = null;
        var HooksDispatcherOnUpdateInDEV = null;
        var HooksDispatcherOnRerenderInDEV = null;
        var InvalidNestedHooksDispatcherOnMountInDEV = null;
        var InvalidNestedHooksDispatcherOnUpdateInDEV = null;
        var InvalidNestedHooksDispatcherOnRerenderInDEV = null;
        {
          var warnInvalidContextAccess = function() {
            error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
          };
          var warnInvalidHookAccess = function() {
            error("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://reactjs.org/link/rules-of-hooks");
          };
          HooksDispatcherOnMountInDEV = {
            readContext: function(context) {
              return readContext(context);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              return mountCallback(callback, deps);
            },
            useContext: function(context) {
              currentHookNameInDev = "useContext";
              mountHookTypesDev();
              return readContext(context);
            },
            useEffect: function(create, deps) {
              currentHookNameInDev = "useEffect";
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              return mountEffect(create, deps);
            },
            useImperativeHandle: function(ref, create, deps) {
              currentHookNameInDev = "useImperativeHandle";
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              return mountImperativeHandle(ref, create, deps);
            },
            useInsertionEffect: function(create, deps) {
              currentHookNameInDev = "useInsertionEffect";
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              return mountInsertionEffect(create, deps);
            },
            useLayoutEffect: function(create, deps) {
              currentHookNameInDev = "useLayoutEffect";
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              return mountLayoutEffect(create, deps);
            },
            useMemo: function(create, deps) {
              currentHookNameInDev = "useMemo";
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountMemo(create, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              mountHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              mountHookTypesDev();
              return mountRef(initialValue);
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              mountHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              mountHookTypesDev();
              return mountDebugValue();
            },
            useDeferredValue: function(value) {
              currentHookNameInDev = "useDeferredValue";
              mountHookTypesDev();
              return mountDeferredValue(value);
            },
            useTransition: function() {
              currentHookNameInDev = "useTransition";
              mountHookTypesDev();
              return mountTransition();
            },
            useMutableSource: function(source, getSnapshot, subscribe) {
              currentHookNameInDev = "useMutableSource";
              mountHookTypesDev();
              return mountMutableSource();
            },
            useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
              currentHookNameInDev = "useSyncExternalStore";
              mountHookTypesDev();
              return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
            },
            useId: function() {
              currentHookNameInDev = "useId";
              mountHookTypesDev();
              return mountId();
            },
            unstable_isNewReconciler: enableNewReconciler
          };
          HooksDispatcherOnMountWithHookTypesInDEV = {
            readContext: function(context) {
              return readContext(context);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              updateHookTypesDev();
              return mountCallback(callback, deps);
            },
            useContext: function(context) {
              currentHookNameInDev = "useContext";
              updateHookTypesDev();
              return readContext(context);
            },
            useEffect: function(create, deps) {
              currentHookNameInDev = "useEffect";
              updateHookTypesDev();
              return mountEffect(create, deps);
            },
            useImperativeHandle: function(ref, create, deps) {
              currentHookNameInDev = "useImperativeHandle";
              updateHookTypesDev();
              return mountImperativeHandle(ref, create, deps);
            },
            useInsertionEffect: function(create, deps) {
              currentHookNameInDev = "useInsertionEffect";
              updateHookTypesDev();
              return mountInsertionEffect(create, deps);
            },
            useLayoutEffect: function(create, deps) {
              currentHookNameInDev = "useLayoutEffect";
              updateHookTypesDev();
              return mountLayoutEffect(create, deps);
            },
            useMemo: function(create, deps) {
              currentHookNameInDev = "useMemo";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountMemo(create, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              updateHookTypesDev();
              return mountRef(initialValue);
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              updateHookTypesDev();
              return mountDebugValue();
            },
            useDeferredValue: function(value) {
              currentHookNameInDev = "useDeferredValue";
              updateHookTypesDev();
              return mountDeferredValue(value);
            },
            useTransition: function() {
              currentHookNameInDev = "useTransition";
              updateHookTypesDev();
              return mountTransition();
            },
            useMutableSource: function(source, getSnapshot, subscribe) {
              currentHookNameInDev = "useMutableSource";
              updateHookTypesDev();
              return mountMutableSource();
            },
            useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
              currentHookNameInDev = "useSyncExternalStore";
              updateHookTypesDev();
              return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
            },
            useId: function() {
              currentHookNameInDev = "useId";
              updateHookTypesDev();
              return mountId();
            },
            unstable_isNewReconciler: enableNewReconciler
          };
          HooksDispatcherOnUpdateInDEV = {
            readContext: function(context) {
              return readContext(context);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              updateHookTypesDev();
              return updateCallback(callback, deps);
            },
            useContext: function(context) {
              currentHookNameInDev = "useContext";
              updateHookTypesDev();
              return readContext(context);
            },
            useEffect: function(create, deps) {
              currentHookNameInDev = "useEffect";
              updateHookTypesDev();
              return updateEffect(create, deps);
            },
            useImperativeHandle: function(ref, create, deps) {
              currentHookNameInDev = "useImperativeHandle";
              updateHookTypesDev();
              return updateImperativeHandle(ref, create, deps);
            },
            useInsertionEffect: function(create, deps) {
              currentHookNameInDev = "useInsertionEffect";
              updateHookTypesDev();
              return updateInsertionEffect(create, deps);
            },
            useLayoutEffect: function(create, deps) {
              currentHookNameInDev = "useLayoutEffect";
              updateHookTypesDev();
              return updateLayoutEffect(create, deps);
            },
            useMemo: function(create, deps) {
              currentHookNameInDev = "useMemo";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateMemo(create, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              updateHookTypesDev();
              return updateRef();
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              updateHookTypesDev();
              return updateDebugValue();
            },
            useDeferredValue: function(value) {
              currentHookNameInDev = "useDeferredValue";
              updateHookTypesDev();
              return updateDeferredValue(value);
            },
            useTransition: function() {
              currentHookNameInDev = "useTransition";
              updateHookTypesDev();
              return updateTransition();
            },
            useMutableSource: function(source, getSnapshot, subscribe) {
              currentHookNameInDev = "useMutableSource";
              updateHookTypesDev();
              return updateMutableSource();
            },
            useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
              currentHookNameInDev = "useSyncExternalStore";
              updateHookTypesDev();
              return updateSyncExternalStore(subscribe, getSnapshot);
            },
            useId: function() {
              currentHookNameInDev = "useId";
              updateHookTypesDev();
              return updateId();
            },
            unstable_isNewReconciler: enableNewReconciler
          };
          HooksDispatcherOnRerenderInDEV = {
            readContext: function(context) {
              return readContext(context);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              updateHookTypesDev();
              return updateCallback(callback, deps);
            },
            useContext: function(context) {
              currentHookNameInDev = "useContext";
              updateHookTypesDev();
              return readContext(context);
            },
            useEffect: function(create, deps) {
              currentHookNameInDev = "useEffect";
              updateHookTypesDev();
              return updateEffect(create, deps);
            },
            useImperativeHandle: function(ref, create, deps) {
              currentHookNameInDev = "useImperativeHandle";
              updateHookTypesDev();
              return updateImperativeHandle(ref, create, deps);
            },
            useInsertionEffect: function(create, deps) {
              currentHookNameInDev = "useInsertionEffect";
              updateHookTypesDev();
              return updateInsertionEffect(create, deps);
            },
            useLayoutEffect: function(create, deps) {
              currentHookNameInDev = "useLayoutEffect";
              updateHookTypesDev();
              return updateLayoutEffect(create, deps);
            },
            useMemo: function(create, deps) {
              currentHookNameInDev = "useMemo";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
              try {
                return updateMemo(create, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
              try {
                return rerenderReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              updateHookTypesDev();
              return updateRef();
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
              try {
                return rerenderState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              updateHookTypesDev();
              return updateDebugValue();
            },
            useDeferredValue: function(value) {
              currentHookNameInDev = "useDeferredValue";
              updateHookTypesDev();
              return rerenderDeferredValue(value);
            },
            useTransition: function() {
              currentHookNameInDev = "useTransition";
              updateHookTypesDev();
              return rerenderTransition();
            },
            useMutableSource: function(source, getSnapshot, subscribe) {
              currentHookNameInDev = "useMutableSource";
              updateHookTypesDev();
              return updateMutableSource();
            },
            useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
              currentHookNameInDev = "useSyncExternalStore";
              updateHookTypesDev();
              return updateSyncExternalStore(subscribe, getSnapshot);
            },
            useId: function() {
              currentHookNameInDev = "useId";
              updateHookTypesDev();
              return updateId();
            },
            unstable_isNewReconciler: enableNewReconciler
          };
          InvalidNestedHooksDispatcherOnMountInDEV = {
            readContext: function(context) {
              warnInvalidContextAccess();
              return readContext(context);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountCallback(callback, deps);
            },
            useContext: function(context) {
              currentHookNameInDev = "useContext";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return readContext(context);
            },
            useEffect: function(create, deps) {
              currentHookNameInDev = "useEffect";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountEffect(create, deps);
            },
            useImperativeHandle: function(ref, create, deps) {
              currentHookNameInDev = "useImperativeHandle";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountImperativeHandle(ref, create, deps);
            },
            useInsertionEffect: function(create, deps) {
              currentHookNameInDev = "useInsertionEffect";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountInsertionEffect(create, deps);
            },
            useLayoutEffect: function(create, deps) {
              currentHookNameInDev = "useLayoutEffect";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountLayoutEffect(create, deps);
            },
            useMemo: function(create, deps) {
              currentHookNameInDev = "useMemo";
              warnInvalidHookAccess();
              mountHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountMemo(create, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              warnInvalidHookAccess();
              mountHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountRef(initialValue);
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              warnInvalidHookAccess();
              mountHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountDebugValue();
            },
            useDeferredValue: function(value) {
              currentHookNameInDev = "useDeferredValue";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountDeferredValue(value);
            },
            useTransition: function() {
              currentHookNameInDev = "useTransition";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountTransition();
            },
            useMutableSource: function(source, getSnapshot, subscribe) {
              currentHookNameInDev = "useMutableSource";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountMutableSource();
            },
            useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
              currentHookNameInDev = "useSyncExternalStore";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
            },
            useId: function() {
              currentHookNameInDev = "useId";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountId();
            },
            unstable_isNewReconciler: enableNewReconciler
          };
          InvalidNestedHooksDispatcherOnUpdateInDEV = {
            readContext: function(context) {
              warnInvalidContextAccess();
              return readContext(context);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateCallback(callback, deps);
            },
            useContext: function(context) {
              currentHookNameInDev = "useContext";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return readContext(context);
            },
            useEffect: function(create, deps) {
              currentHookNameInDev = "useEffect";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateEffect(create, deps);
            },
            useImperativeHandle: function(ref, create, deps) {
              currentHookNameInDev = "useImperativeHandle";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateImperativeHandle(ref, create, deps);
            },
            useInsertionEffect: function(create, deps) {
              currentHookNameInDev = "useInsertionEffect";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateInsertionEffect(create, deps);
            },
            useLayoutEffect: function(create, deps) {
              currentHookNameInDev = "useLayoutEffect";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateLayoutEffect(create, deps);
            },
            useMemo: function(create, deps) {
              currentHookNameInDev = "useMemo";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateMemo(create, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateRef();
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateDebugValue();
            },
            useDeferredValue: function(value) {
              currentHookNameInDev = "useDeferredValue";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateDeferredValue(value);
            },
            useTransition: function() {
              currentHookNameInDev = "useTransition";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateTransition();
            },
            useMutableSource: function(source, getSnapshot, subscribe) {
              currentHookNameInDev = "useMutableSource";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateMutableSource();
            },
            useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
              currentHookNameInDev = "useSyncExternalStore";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateSyncExternalStore(subscribe, getSnapshot);
            },
            useId: function() {
              currentHookNameInDev = "useId";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateId();
            },
            unstable_isNewReconciler: enableNewReconciler
          };
          InvalidNestedHooksDispatcherOnRerenderInDEV = {
            readContext: function(context) {
              warnInvalidContextAccess();
              return readContext(context);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateCallback(callback, deps);
            },
            useContext: function(context) {
              currentHookNameInDev = "useContext";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return readContext(context);
            },
            useEffect: function(create, deps) {
              currentHookNameInDev = "useEffect";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateEffect(create, deps);
            },
            useImperativeHandle: function(ref, create, deps) {
              currentHookNameInDev = "useImperativeHandle";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateImperativeHandle(ref, create, deps);
            },
            useInsertionEffect: function(create, deps) {
              currentHookNameInDev = "useInsertionEffect";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateInsertionEffect(create, deps);
            },
            useLayoutEffect: function(create, deps) {
              currentHookNameInDev = "useLayoutEffect";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateLayoutEffect(create, deps);
            },
            useMemo: function(create, deps) {
              currentHookNameInDev = "useMemo";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateMemo(create, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return rerenderReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateRef();
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return rerenderState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateDebugValue();
            },
            useDeferredValue: function(value) {
              currentHookNameInDev = "useDeferredValue";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return rerenderDeferredValue(value);
            },
            useTransition: function() {
              currentHookNameInDev = "useTransition";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return rerenderTransition();
            },
            useMutableSource: function(source, getSnapshot, subscribe) {
              currentHookNameInDev = "useMutableSource";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateMutableSource();
            },
            useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
              currentHookNameInDev = "useSyncExternalStore";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateSyncExternalStore(subscribe, getSnapshot);
            },
            useId: function() {
              currentHookNameInDev = "useId";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateId();
            },
            unstable_isNewReconciler: enableNewReconciler
          };
        }
        var now$1 = Scheduler.unstable_now;
        var commitTime = 0;
        var layoutEffectStartTime = -1;
        var profilerStartTime = -1;
        var passiveEffectStartTime = -1;
        var currentUpdateIsNested = false;
        var nestedUpdateScheduled = false;
        function isCurrentUpdateNested() {
          return currentUpdateIsNested;
        }
        function markNestedUpdateScheduled() {
          {
            nestedUpdateScheduled = true;
          }
        }
        function resetNestedUpdateFlag() {
          {
            currentUpdateIsNested = false;
            nestedUpdateScheduled = false;
          }
        }
        function syncNestedUpdateFlag() {
          {
            currentUpdateIsNested = nestedUpdateScheduled;
            nestedUpdateScheduled = false;
          }
        }
        function getCommitTime() {
          return commitTime;
        }
        function recordCommitTime() {
          commitTime = now$1();
        }
        function startProfilerTimer(fiber) {
          profilerStartTime = now$1();
          if (fiber.actualStartTime < 0) {
            fiber.actualStartTime = now$1();
          }
        }
        function stopProfilerTimerIfRunning(fiber) {
          profilerStartTime = -1;
        }
        function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {
          if (profilerStartTime >= 0) {
            var elapsedTime = now$1() - profilerStartTime;
            fiber.actualDuration += elapsedTime;
            if (overrideBaseTime) {
              fiber.selfBaseDuration = elapsedTime;
            }
            profilerStartTime = -1;
          }
        }
        function recordLayoutEffectDuration(fiber) {
          if (layoutEffectStartTime >= 0) {
            var elapsedTime = now$1() - layoutEffectStartTime;
            layoutEffectStartTime = -1;
            var parentFiber = fiber.return;
            while (parentFiber !== null) {
              switch (parentFiber.tag) {
                case HostRoot:
                  var root2 = parentFiber.stateNode;
                  root2.effectDuration += elapsedTime;
                  return;
                case Profiler:
                  var parentStateNode = parentFiber.stateNode;
                  parentStateNode.effectDuration += elapsedTime;
                  return;
              }
              parentFiber = parentFiber.return;
            }
          }
        }
        function recordPassiveEffectDuration(fiber) {
          if (passiveEffectStartTime >= 0) {
            var elapsedTime = now$1() - passiveEffectStartTime;
            passiveEffectStartTime = -1;
            var parentFiber = fiber.return;
            while (parentFiber !== null) {
              switch (parentFiber.tag) {
                case HostRoot:
                  var root2 = parentFiber.stateNode;
                  if (root2 !== null) {
                    root2.passiveEffectDuration += elapsedTime;
                  }
                  return;
                case Profiler:
                  var parentStateNode = parentFiber.stateNode;
                  if (parentStateNode !== null) {
                    parentStateNode.passiveEffectDuration += elapsedTime;
                  }
                  return;
              }
              parentFiber = parentFiber.return;
            }
          }
        }
        function startLayoutEffectTimer() {
          layoutEffectStartTime = now$1();
        }
        function startPassiveEffectTimer() {
          passiveEffectStartTime = now$1();
        }
        function transferActualDuration(fiber) {
          var child = fiber.child;
          while (child) {
            fiber.actualDuration += child.actualDuration;
            child = child.sibling;
          }
        }
        function createCapturedValueAtFiber(value, source) {
          return {
            value,
            source,
            stack: getStackByFiberInDevAndProd(source),
            digest: null
          };
        }
        function createCapturedValue(value, digest, stack) {
          return {
            value,
            source: null,
            stack: stack != null ? stack : null,
            digest: digest != null ? digest : null
          };
        }
        function showErrorDialog(boundary, errorInfo) {
          return true;
        }
        function logCapturedError(boundary, errorInfo) {
          try {
            var logError = showErrorDialog(boundary, errorInfo);
            if (logError === false) {
              return;
            }
            var error2 = errorInfo.value;
            if (true) {
              var source = errorInfo.source;
              var stack = errorInfo.stack;
              var componentStack = stack !== null ? stack : "";
              if (error2 != null && error2.Se) {
                if (boundary.tag === ClassComponent) {
                  return;
                }
                console["error"](error2);
              }
              var componentName = source ? getComponentNameFromFiber(source) : null;
              var componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component:" : "The above error occurred in one of your React components:";
              var errorBoundaryMessage;
              if (boundary.tag === HostRoot) {
                errorBoundaryMessage = "Consider adding an error boundary to your tree to customize error handling behavior.\nVisit https://reactjs.org/link/error-boundaries to learn more about error boundaries.";
              } else {
                var errorBoundaryName = getComponentNameFromFiber(boundary) || "Anonymous";
                errorBoundaryMessage = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + errorBoundaryName + ".");
              }
              var combinedMessage = componentNameMessage + "\n" + componentStack + "\n\n" + ("" + errorBoundaryMessage);
              console["error"](combinedMessage);
            } else {
              console["error"](error2);
            }
          } catch (e) {
            setTimeout(function() {
              throw e;
            });
          }
        }
        var PossiblyWeakMap$1 = typeof WeakMap === "function" ? WeakMap : Map;
        function createRootErrorUpdate(fiber, errorInfo, lane) {
          var update = createUpdate(NoTimestamp, lane);
          update.tag = CaptureUpdate;
          update.payload = {
            element: null
          };
          var error2 = errorInfo.value;
          update.callback = function() {
            onUncaughtError(error2);
            logCapturedError(fiber, errorInfo);
          };
          return update;
        }
        function createClassErrorUpdate(fiber, errorInfo, lane) {
          var update = createUpdate(NoTimestamp, lane);
          update.tag = CaptureUpdate;
          var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
          if (typeof getDerivedStateFromError === "function") {
            var error$1 = errorInfo.value;
            update.payload = function() {
              return getDerivedStateFromError(error$1);
            };
            update.callback = function() {
              {
                markFailedErrorBoundaryForHotReloading(fiber);
              }
              logCapturedError(fiber, errorInfo);
            };
          }
          var inst = fiber.stateNode;
          if (inst !== null && typeof inst.componentDidCatch === "function") {
            update.callback = function callback() {
              {
                markFailedErrorBoundaryForHotReloading(fiber);
              }
              logCapturedError(fiber, errorInfo);
              if (typeof getDerivedStateFromError !== "function") {
                markLegacyErrorBoundaryAsFailed(this);
              }
              var error$12 = errorInfo.value;
              var stack = errorInfo.stack;
              this.componentDidCatch(error$12, {
                componentStack: stack !== null ? stack : ""
              });
              {
                if (typeof getDerivedStateFromError !== "function") {
                  if (!includesSomeLane(fiber.lanes, SyncLane)) {
                    error("%s: Error boundaries should implement getDerivedStateFromError(). In that method, return a state update to display an error message or fallback UI.", getComponentNameFromFiber(fiber) || "Unknown");
                  }
                }
              }
            };
          }
          return update;
        }
        function attachPingListener(root2, wakeable, lanes) {
          var pingCache = root2.pingCache;
          var threadIDs;
          if (pingCache === null) {
            pingCache = root2.pingCache = new PossiblyWeakMap$1();
            threadIDs = /* @__PURE__ */ new Set();
            pingCache.set(wakeable, threadIDs);
          } else {
            threadIDs = pingCache.get(wakeable);
            if (threadIDs === void 0) {
              threadIDs = /* @__PURE__ */ new Set();
              pingCache.set(wakeable, threadIDs);
            }
          }
          if (!threadIDs.has(lanes)) {
            threadIDs.add(lanes);
            var ping = pingSuspendedRoot.bind(null, root2, wakeable, lanes);
            {
              if (isDevToolsPresent) {
                restorePendingUpdaters(root2, lanes);
              }
            }
            wakeable.then(ping, ping);
          }
        }
        function attachRetryListener(suspenseBoundary, root2, wakeable, lanes) {
          var wakeables = suspenseBoundary.updateQueue;
          if (wakeables === null) {
            var updateQueue = /* @__PURE__ */ new Set();
            updateQueue.add(wakeable);
            suspenseBoundary.updateQueue = updateQueue;
          } else {
            wakeables.add(wakeable);
          }
        }
        function resetSuspendedComponent(sourceFiber, rootRenderLanes) {
          var tag = sourceFiber.tag;
          if ((sourceFiber.mode & ConcurrentMode) === NoMode && (tag === FunctionComponent || tag === ForwardRef || tag === SimpleMemoComponent)) {
            var currentSource = sourceFiber.alternate;
            if (currentSource) {
              sourceFiber.updateQueue = currentSource.updateQueue;
              sourceFiber.memoizedState = currentSource.memoizedState;
              sourceFiber.lanes = currentSource.lanes;
            } else {
              sourceFiber.updateQueue = null;
              sourceFiber.memoizedState = null;
            }
          }
        }
        function getNearestSuspenseBoundaryToCapture(returnFiber) {
          var node = returnFiber;
          do {
            if (node.tag === SuspenseComponent && shouldCaptureSuspense(node)) {
              return node;
            }
            node = node.return;
          } while (node !== null);
          return null;
        }
        function markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root2, rootRenderLanes) {
          if ((suspenseBoundary.mode & ConcurrentMode) === NoMode) {
            if (suspenseBoundary === returnFiber) {
              suspenseBoundary.flags |= ShouldCapture;
            } else {
              suspenseBoundary.flags |= DidCapture;
              sourceFiber.flags |= ForceUpdateForLegacySuspense;
              sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete);
              if (sourceFiber.tag === ClassComponent) {
                var currentSourceFiber = sourceFiber.alternate;
                if (currentSourceFiber === null) {
                  sourceFiber.tag = IncompleteClassComponent;
                } else {
                  var update = createUpdate(NoTimestamp, SyncLane);
                  update.tag = ForceUpdate;
                  enqueueUpdate(sourceFiber, update, SyncLane);
                }
              }
              sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane);
            }
            return suspenseBoundary;
          }
          suspenseBoundary.flags |= ShouldCapture;
          suspenseBoundary.lanes = rootRenderLanes;
          return suspenseBoundary;
        }
        function throwException(root2, returnFiber, sourceFiber, value, rootRenderLanes) {
          sourceFiber.flags |= Incomplete;
          {
            if (isDevToolsPresent) {
              restorePendingUpdaters(root2, rootRenderLanes);
            }
          }
          if (value !== null && typeof value === "object" && typeof value.then === "function") {
            var wakeable = value;
            resetSuspendedComponent(sourceFiber);
            {
              if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
                markDidThrowWhileHydratingDEV();
              }
            }
            var suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);
            if (suspenseBoundary !== null) {
              suspenseBoundary.flags &= ~ForceClientRender;
              markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root2, rootRenderLanes);
              if (suspenseBoundary.mode & ConcurrentMode) {
                attachPingListener(root2, wakeable, rootRenderLanes);
              }
              attachRetryListener(suspenseBoundary, root2, wakeable);
              return;
            } else {
              if (!includesSyncLane(rootRenderLanes)) {
                attachPingListener(root2, wakeable, rootRenderLanes);
                renderDidSuspendDelayIfPossible();
                return;
              }
              var uncaughtSuspenseError = new Error("A component suspended while responding to synchronous input. This will cause the UI to be replaced with a loading indicator. To fix, updates that suspend should be wrapped with startTransition.");
              value = uncaughtSuspenseError;
            }
          } else {
            if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
              markDidThrowWhileHydratingDEV();
              var _suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);
              if (_suspenseBoundary !== null) {
                if ((_suspenseBoundary.flags & ShouldCapture) === NoFlags) {
                  _suspenseBoundary.flags |= ForceClientRender;
                }
                markSuspenseBoundaryShouldCapture(_suspenseBoundary, returnFiber, sourceFiber, root2, rootRenderLanes);
                queueHydrationError(createCapturedValueAtFiber(value, sourceFiber));
                return;
              }
            }
          }
          value = createCapturedValueAtFiber(value, sourceFiber);
          renderDidError(value);
          var workInProgress2 = returnFiber;
          do {
            switch (workInProgress2.tag) {
              case HostRoot: {
                var _errorInfo = value;
                workInProgress2.flags |= ShouldCapture;
                var lane = pickArbitraryLane(rootRenderLanes);
                workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
                var update = createRootErrorUpdate(workInProgress2, _errorInfo, lane);
                enqueueCapturedUpdate(workInProgress2, update);
                return;
              }
              case ClassComponent:
                var errorInfo = value;
                var ctor = workInProgress2.type;
                var instance = workInProgress2.stateNode;
                if ((workInProgress2.flags & DidCapture) === NoFlags && (typeof ctor.getDerivedStateFromError === "function" || instance !== null && typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance))) {
                  workInProgress2.flags |= ShouldCapture;
                  var _lane = pickArbitraryLane(rootRenderLanes);
                  workInProgress2.lanes = mergeLanes(workInProgress2.lanes, _lane);
                  var _update = createClassErrorUpdate(workInProgress2, errorInfo, _lane);
                  enqueueCapturedUpdate(workInProgress2, _update);
                  return;
                }
                break;
            }
            workInProgress2 = workInProgress2.return;
          } while (workInProgress2 !== null);
        }
        function getSuspendedCache() {
          {
            return null;
          }
        }
        var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
        var didReceiveUpdate = false;
        var didWarnAboutBadClass;
        var didWarnAboutModulePatternComponent;
        var didWarnAboutContextTypeOnFunctionComponent;
        var didWarnAboutGetDerivedStateOnFunctionComponent;
        var didWarnAboutFunctionRefs;
        var didWarnAboutReassigningProps;
        var didWarnAboutRevealOrder;
        var didWarnAboutTailOptions;
        {
          didWarnAboutBadClass = {};
          didWarnAboutModulePatternComponent = {};
          didWarnAboutContextTypeOnFunctionComponent = {};
          didWarnAboutGetDerivedStateOnFunctionComponent = {};
          didWarnAboutFunctionRefs = {};
          didWarnAboutReassigningProps = false;
          didWarnAboutRevealOrder = {};
          didWarnAboutTailOptions = {};
        }
        function reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2) {
          if (current2 === null) {
            workInProgress2.child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
          } else {
            workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, nextChildren, renderLanes2);
          }
        }
        function forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2) {
          workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
          workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
        }
        function updateForwardRef(current2, workInProgress2, Component2, nextProps, renderLanes2) {
          {
            if (workInProgress2.type !== workInProgress2.elementType) {
              var innerPropTypes = Component2.propTypes;
              if (innerPropTypes) {
                checkPropTypes(
                  innerPropTypes,
                  nextProps,
                  // Resolved props
                  "prop",
                  getComponentNameFromType(Component2)
                );
              }
            }
          }
          var render3 = Component2.render;
          var ref = workInProgress2.ref;
          var nextChildren;
          var hasId;
          prepareToReadContext(workInProgress2, renderLanes2);
          {
            markComponentRenderStarted(workInProgress2);
          }
          {
            ReactCurrentOwner$1.current = workInProgress2;
            setIsRendering(true);
            nextChildren = renderWithHooks(current2, workInProgress2, render3, nextProps, ref, renderLanes2);
            hasId = checkDidRenderIdHook();
            if (workInProgress2.mode & StrictLegacyMode) {
              setIsStrictModeForDevtools(true);
              try {
                nextChildren = renderWithHooks(current2, workInProgress2, render3, nextProps, ref, renderLanes2);
                hasId = checkDidRenderIdHook();
              } finally {
                setIsStrictModeForDevtools(false);
              }
            }
            setIsRendering(false);
          }
          {
            markComponentRenderStopped();
          }
          if (current2 !== null && !didReceiveUpdate) {
            bailoutHooks(current2, workInProgress2, renderLanes2);
            return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
          }
          if (getIsHydrating() && hasId) {
            pushMaterializedTreeId(workInProgress2);
          }
          workInProgress2.flags |= PerformedWork;
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function updateMemoComponent(current2, workInProgress2, Component2, nextProps, renderLanes2) {
          if (current2 === null) {
            var type = Component2.type;
            if (isSimpleFunctionComponent(type) && Component2.compare === null && // SimpleMemoComponent codepath doesn't resolve outer props either.
            Component2.defaultProps === void 0) {
              var resolvedType = type;
              {
                resolvedType = resolveFunctionForHotReloading(type);
              }
              workInProgress2.tag = SimpleMemoComponent;
              workInProgress2.type = resolvedType;
              {
                validateFunctionComponentInDev(workInProgress2, type);
              }
              return updateSimpleMemoComponent(current2, workInProgress2, resolvedType, nextProps, renderLanes2);
            }
            {
              var innerPropTypes = type.propTypes;
              if (innerPropTypes) {
                checkPropTypes(
                  innerPropTypes,
                  nextProps,
                  // Resolved props
                  "prop",
                  getComponentNameFromType(type)
                );
              }
            }
            var child = createFiberFromTypeAndProps(Component2.type, null, nextProps, workInProgress2, workInProgress2.mode, renderLanes2);
            child.ref = workInProgress2.ref;
            child.return = workInProgress2;
            workInProgress2.child = child;
            return child;
          }
          {
            var _type = Component2.type;
            var _innerPropTypes = _type.propTypes;
            if (_innerPropTypes) {
              checkPropTypes(
                _innerPropTypes,
                nextProps,
                // Resolved props
                "prop",
                getComponentNameFromType(_type)
              );
            }
          }
          var currentChild = current2.child;
          var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current2, renderLanes2);
          if (!hasScheduledUpdateOrContext) {
            var prevProps = currentChild.memoizedProps;
            var compare = Component2.compare;
            compare = compare !== null ? compare : shallowEqual;
            if (compare(prevProps, nextProps) && current2.ref === workInProgress2.ref) {
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
          }
          workInProgress2.flags |= PerformedWork;
          var newChild = createWorkInProgress(currentChild, nextProps);
          newChild.ref = workInProgress2.ref;
          newChild.return = workInProgress2;
          workInProgress2.child = newChild;
          return newChild;
        }
        function updateSimpleMemoComponent(current2, workInProgress2, Component2, nextProps, renderLanes2) {
          {
            if (workInProgress2.type !== workInProgress2.elementType) {
              var outerMemoType = workInProgress2.elementType;
              if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
                var lazyComponent = outerMemoType;
                var payload = lazyComponent.Ja;
                var init = lazyComponent.G;
                try {
                  outerMemoType = init(payload);
                } catch (x) {
                  outerMemoType = null;
                }
                var outerPropTypes = outerMemoType && outerMemoType.propTypes;
                if (outerPropTypes) {
                  checkPropTypes(
                    outerPropTypes,
                    nextProps,
                    // Resolved (SimpleMemoComponent has no defaultProps)
                    "prop",
                    getComponentNameFromType(outerMemoType)
                  );
                }
              }
            }
          }
          if (current2 !== null) {
            var prevProps = current2.memoizedProps;
            if (shallowEqual(prevProps, nextProps) && current2.ref === workInProgress2.ref && // Prevent bailout if the implementation changed due to hot reload.
            workInProgress2.type === current2.type) {
              didReceiveUpdate = false;
              workInProgress2.pendingProps = nextProps = prevProps;
              if (!checkScheduledUpdateOrContext(current2, renderLanes2)) {
                workInProgress2.lanes = current2.lanes;
                return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
              } else if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                didReceiveUpdate = true;
              }
            }
          }
          return updateFunctionComponent(current2, workInProgress2, Component2, nextProps, renderLanes2);
        }
        function updateOffscreenComponent(current2, workInProgress2, renderLanes2) {
          var nextProps = workInProgress2.pendingProps;
          var nextChildren = nextProps.children;
          var prevState = current2 !== null ? current2.memoizedState : null;
          if (nextProps.mode === "hidden" || enableLegacyHidden) {
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              var nextState = {
                baseLanes: NoLanes,
                cachePool: null,
                transitions: null
              };
              workInProgress2.memoizedState = nextState;
              pushRenderLanes(workInProgress2, renderLanes2);
            } else if (!includesSomeLane(renderLanes2, OffscreenLane)) {
              var spawnedCachePool = null;
              var nextBaseLanes;
              if (prevState !== null) {
                var prevBaseLanes = prevState.baseLanes;
                nextBaseLanes = mergeLanes(prevBaseLanes, renderLanes2);
              } else {
                nextBaseLanes = renderLanes2;
              }
              workInProgress2.lanes = workInProgress2.childLanes = laneToLanes(OffscreenLane);
              var _nextState = {
                baseLanes: nextBaseLanes,
                cachePool: spawnedCachePool,
                transitions: null
              };
              workInProgress2.memoizedState = _nextState;
              workInProgress2.updateQueue = null;
              pushRenderLanes(workInProgress2, nextBaseLanes);
              return null;
            } else {
              var _nextState2 = {
                baseLanes: NoLanes,
                cachePool: null,
                transitions: null
              };
              workInProgress2.memoizedState = _nextState2;
              var subtreeRenderLanes2 = prevState !== null ? prevState.baseLanes : renderLanes2;
              pushRenderLanes(workInProgress2, subtreeRenderLanes2);
            }
          } else {
            var _subtreeRenderLanes;
            if (prevState !== null) {
              _subtreeRenderLanes = mergeLanes(prevState.baseLanes, renderLanes2);
              workInProgress2.memoizedState = null;
            } else {
              _subtreeRenderLanes = renderLanes2;
            }
            pushRenderLanes(workInProgress2, _subtreeRenderLanes);
          }
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function updateFragment(current2, workInProgress2, renderLanes2) {
          var nextChildren = workInProgress2.pendingProps;
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function updateMode(current2, workInProgress2, renderLanes2) {
          var nextChildren = workInProgress2.pendingProps.children;
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function updateProfiler(current2, workInProgress2, renderLanes2) {
          {
            workInProgress2.flags |= Update;
            {
              var stateNode = workInProgress2.stateNode;
              stateNode.effectDuration = 0;
              stateNode.passiveEffectDuration = 0;
            }
          }
          var nextProps = workInProgress2.pendingProps;
          var nextChildren = nextProps.children;
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function markRef(current2, workInProgress2) {
          var ref = workInProgress2.ref;
          if (current2 === null && ref !== null || current2 !== null && current2.ref !== ref) {
            workInProgress2.flags |= Ref;
            {
              workInProgress2.flags |= RefStatic;
            }
          }
        }
        function updateFunctionComponent(current2, workInProgress2, Component2, nextProps, renderLanes2) {
          {
            if (workInProgress2.type !== workInProgress2.elementType) {
              var innerPropTypes = Component2.propTypes;
              if (innerPropTypes) {
                checkPropTypes(
                  innerPropTypes,
                  nextProps,
                  // Resolved props
                  "prop",
                  getComponentNameFromType(Component2)
                );
              }
            }
          }
          var context;
          {
            var unmaskedContext = getUnmaskedContext(workInProgress2, Component2, true);
            context = getMaskedContext(workInProgress2, unmaskedContext);
          }
          var nextChildren;
          var hasId;
          prepareToReadContext(workInProgress2, renderLanes2);
          {
            markComponentRenderStarted(workInProgress2);
          }
          {
            ReactCurrentOwner$1.current = workInProgress2;
            setIsRendering(true);
            nextChildren = renderWithHooks(current2, workInProgress2, Component2, nextProps, context, renderLanes2);
            hasId = checkDidRenderIdHook();
            if (workInProgress2.mode & StrictLegacyMode) {
              setIsStrictModeForDevtools(true);
              try {
                nextChildren = renderWithHooks(current2, workInProgress2, Component2, nextProps, context, renderLanes2);
                hasId = checkDidRenderIdHook();
              } finally {
                setIsStrictModeForDevtools(false);
              }
            }
            setIsRendering(false);
          }
          {
            markComponentRenderStopped();
          }
          if (current2 !== null && !didReceiveUpdate) {
            bailoutHooks(current2, workInProgress2, renderLanes2);
            return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
          }
          if (getIsHydrating() && hasId) {
            pushMaterializedTreeId(workInProgress2);
          }
          workInProgress2.flags |= PerformedWork;
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function updateClassComponent(current2, workInProgress2, Component2, nextProps, renderLanes2) {
          {
            switch (shouldError(workInProgress2)) {
              case false: {
                var _instance = workInProgress2.stateNode;
                var ctor = workInProgress2.type;
                var tempInstance = new ctor(workInProgress2.memoizedProps, _instance.context);
                var state = tempInstance.state;
                _instance.updater.enqueueSetState(_instance, state, null);
                break;
              }
              case true: {
                workInProgress2.flags |= DidCapture;
                workInProgress2.flags |= ShouldCapture;
                var error$1 = new Error("Simulated error coming from DevTools");
                var lane = pickArbitraryLane(renderLanes2);
                workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
                var update = createClassErrorUpdate(workInProgress2, createCapturedValueAtFiber(error$1, workInProgress2), lane);
                enqueueCapturedUpdate(workInProgress2, update);
                break;
              }
            }
            if (workInProgress2.type !== workInProgress2.elementType) {
              var innerPropTypes = Component2.propTypes;
              if (innerPropTypes) {
                checkPropTypes(
                  innerPropTypes,
                  nextProps,
                  // Resolved props
                  "prop",
                  getComponentNameFromType(Component2)
                );
              }
            }
          }
          var hasContext;
          if (isContextProvider(Component2)) {
            hasContext = true;
            pushContextProvider(workInProgress2);
          } else {
            hasContext = false;
          }
          prepareToReadContext(workInProgress2, renderLanes2);
          var instance = workInProgress2.stateNode;
          var shouldUpdate;
          if (instance === null) {
            resetSuspendedCurrentOnMountInLegacyMode(current2, workInProgress2);
            constructClassInstance(workInProgress2, Component2, nextProps);
            mountClassInstance(workInProgress2, Component2, nextProps, renderLanes2);
            shouldUpdate = true;
          } else if (current2 === null) {
            shouldUpdate = resumeMountClassInstance(workInProgress2, Component2, nextProps, renderLanes2);
          } else {
            shouldUpdate = updateClassInstance(current2, workInProgress2, Component2, nextProps, renderLanes2);
          }
          var nextUnitOfWork = finishClassComponent(current2, workInProgress2, Component2, shouldUpdate, hasContext, renderLanes2);
          {
            var inst = workInProgress2.stateNode;
            if (shouldUpdate && inst.props !== nextProps) {
              if (!didWarnAboutReassigningProps) {
                error("It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.", getComponentNameFromFiber(workInProgress2) || "a component");
              }
              didWarnAboutReassigningProps = true;
            }
          }
          return nextUnitOfWork;
        }
        function finishClassComponent(current2, workInProgress2, Component2, shouldUpdate, hasContext, renderLanes2) {
          markRef(current2, workInProgress2);
          var didCaptureError = (workInProgress2.flags & DidCapture) !== NoFlags;
          if (!shouldUpdate && !didCaptureError) {
            if (hasContext) {
              invalidateContextProvider(workInProgress2, Component2, false);
            }
            return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
          }
          var instance = workInProgress2.stateNode;
          ReactCurrentOwner$1.current = workInProgress2;
          var nextChildren;
          if (didCaptureError && typeof Component2.getDerivedStateFromError !== "function") {
            nextChildren = null;
            {
              stopProfilerTimerIfRunning();
            }
          } else {
            {
              markComponentRenderStarted(workInProgress2);
            }
            {
              setIsRendering(true);
              nextChildren = instance.render();
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  instance.render();
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
          }
          workInProgress2.flags |= PerformedWork;
          if (current2 !== null && didCaptureError) {
            forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2);
          } else {
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          }
          workInProgress2.memoizedState = instance.state;
          if (hasContext) {
            invalidateContextProvider(workInProgress2, Component2, true);
          }
          return workInProgress2.child;
        }
        function pushHostRootContext(workInProgress2) {
          var root2 = workInProgress2.stateNode;
          if (root2.pendingContext) {
            pushTopLevelContextObject(workInProgress2, root2.pendingContext, root2.pendingContext !== root2.context);
          } else if (root2.context) {
            pushTopLevelContextObject(workInProgress2, root2.context, false);
          }
          pushHostContainer(workInProgress2, root2.containerInfo);
        }
        function updateHostRoot(current2, workInProgress2, renderLanes2) {
          pushHostRootContext(workInProgress2);
          if (current2 === null) {
            throw new Error("Should have a current fiber. This is a bug in React.");
          }
          var nextProps = workInProgress2.pendingProps;
          var prevState = workInProgress2.memoizedState;
          var prevChildren = prevState.element;
          cloneUpdateQueue(current2, workInProgress2);
          processUpdateQueue(workInProgress2, nextProps, null, renderLanes2);
          var nextState = workInProgress2.memoizedState;
          var root2 = workInProgress2.stateNode;
          var nextChildren = nextState.element;
          if (prevState.isDehydrated) {
            var overrideState = {
              element: nextChildren,
              isDehydrated: false,
              cache: nextState.cache,
              pendingSuspenseBoundaries: nextState.pendingSuspenseBoundaries,
              transitions: nextState.transitions
            };
            var updateQueue = workInProgress2.updateQueue;
            updateQueue.baseState = overrideState;
            workInProgress2.memoizedState = overrideState;
            if (workInProgress2.flags & ForceClientRender) {
              var recoverableError = createCapturedValueAtFiber(new Error("There was an error while hydrating. Because the error happened outside of a Suspense boundary, the entire root will switch to client rendering."), workInProgress2);
              return mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, recoverableError);
            } else if (nextChildren !== prevChildren) {
              var _recoverableError = createCapturedValueAtFiber(new Error("This root received an early update, before anything was able hydrate. Switched the entire root to client rendering."), workInProgress2);
              return mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, _recoverableError);
            } else {
              enterHydrationState(workInProgress2);
              var child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
              workInProgress2.child = child;
              var node = child;
              while (node) {
                node.flags = node.flags & ~Placement | Hydrating;
                node = node.sibling;
              }
            }
          } else {
            resetHydrationState();
            if (nextChildren === prevChildren) {
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          }
          return workInProgress2.child;
        }
        function mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, recoverableError) {
          resetHydrationState();
          queueHydrationError(recoverableError);
          workInProgress2.flags |= ForceClientRender;
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function updateHostComponent(current2, workInProgress2, renderLanes2) {
          pushHostContext(workInProgress2);
          if (current2 === null) {
            tryToClaimNextHydratableInstance(workInProgress2);
          }
          var type = workInProgress2.type;
          var nextProps = workInProgress2.pendingProps;
          var prevProps = current2 !== null ? current2.memoizedProps : null;
          var nextChildren = nextProps.children;
          var isDirectTextChild = shouldSetTextContent(type, nextProps);
          if (isDirectTextChild) {
            nextChildren = null;
          } else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {
            workInProgress2.flags |= ContentReset;
          }
          markRef(current2, workInProgress2);
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function updateHostText(current2, workInProgress2) {
          if (current2 === null) {
            tryToClaimNextHydratableInstance(workInProgress2);
          }
          return null;
        }
        function mountLazyComponent(_current, workInProgress2, elementType, renderLanes2) {
          resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
          var props = workInProgress2.pendingProps;
          var lazyComponent = elementType;
          var payload = lazyComponent.Ja;
          var init = lazyComponent.G;
          var Component2 = init(payload);
          workInProgress2.type = Component2;
          var resolvedTag = workInProgress2.tag = resolveLazyComponentTag(Component2);
          var resolvedProps = resolveDefaultProps(Component2, props);
          var child;
          switch (resolvedTag) {
            case FunctionComponent: {
              {
                validateFunctionComponentInDev(workInProgress2, Component2);
                workInProgress2.type = Component2 = resolveFunctionForHotReloading(Component2);
              }
              child = updateFunctionComponent(null, workInProgress2, Component2, resolvedProps, renderLanes2);
              return child;
            }
            case ClassComponent: {
              {
                workInProgress2.type = Component2 = resolveClassForHotReloading(Component2);
              }
              child = updateClassComponent(null, workInProgress2, Component2, resolvedProps, renderLanes2);
              return child;
            }
            case ForwardRef: {
              {
                workInProgress2.type = Component2 = resolveForwardRefForHotReloading(Component2);
              }
              child = updateForwardRef(null, workInProgress2, Component2, resolvedProps, renderLanes2);
              return child;
            }
            case MemoComponent: {
              {
                if (workInProgress2.type !== workInProgress2.elementType) {
                  var outerPropTypes = Component2.propTypes;
                  if (outerPropTypes) {
                    checkPropTypes(
                      outerPropTypes,
                      resolvedProps,
                      // Resolved for outer only
                      "prop",
                      getComponentNameFromType(Component2)
                    );
                  }
                }
              }
              child = updateMemoComponent(
                null,
                workInProgress2,
                Component2,
                resolveDefaultProps(Component2.type, resolvedProps),
                // The inner type can have defaults too
                renderLanes2
              );
              return child;
            }
          }
          var hint = "";
          {
            if (Component2 !== null && typeof Component2 === "object" && Component2.$$typeof === REACT_LAZY_TYPE) {
              hint = " Did you wrap a component in React.lazy() more than once?";
            }
          }
          throw new Error("Element type is invalid. Received a promise that resolves to: " + Component2 + ". " + ("Lazy element type must resolve to a class or function." + hint));
        }
        function mountIncompleteClassComponent(_current, workInProgress2, Component2, nextProps, renderLanes2) {
          resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
          workInProgress2.tag = ClassComponent;
          var hasContext;
          if (isContextProvider(Component2)) {
            hasContext = true;
            pushContextProvider(workInProgress2);
          } else {
            hasContext = false;
          }
          prepareToReadContext(workInProgress2, renderLanes2);
          constructClassInstance(workInProgress2, Component2, nextProps);
          mountClassInstance(workInProgress2, Component2, nextProps, renderLanes2);
          return finishClassComponent(null, workInProgress2, Component2, true, hasContext, renderLanes2);
        }
        function mountIndeterminateComponent(_current, workInProgress2, Component2, renderLanes2) {
          resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
          var props = workInProgress2.pendingProps;
          var context;
          {
            var unmaskedContext = getUnmaskedContext(workInProgress2, Component2, false);
            context = getMaskedContext(workInProgress2, unmaskedContext);
          }
          prepareToReadContext(workInProgress2, renderLanes2);
          var value;
          var hasId;
          {
            markComponentRenderStarted(workInProgress2);
          }
          {
            if (Component2.prototype && typeof Component2.prototype.render === "function") {
              var componentName = getComponentNameFromType(Component2) || "Unknown";
              if (!didWarnAboutBadClass[componentName]) {
                error("The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.", componentName, componentName);
                didWarnAboutBadClass[componentName] = true;
              }
            }
            if (workInProgress2.mode & StrictLegacyMode) {
              ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, null);
            }
            setIsRendering(true);
            ReactCurrentOwner$1.current = workInProgress2;
            value = renderWithHooks(null, workInProgress2, Component2, props, context, renderLanes2);
            hasId = checkDidRenderIdHook();
            setIsRendering(false);
          }
          {
            markComponentRenderStopped();
          }
          workInProgress2.flags |= PerformedWork;
          {
            if (typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0) {
              var _componentName = getComponentNameFromType(Component2) || "Unknown";
              if (!didWarnAboutModulePatternComponent[_componentName]) {
                error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName, _componentName, _componentName);
                didWarnAboutModulePatternComponent[_componentName] = true;
              }
            }
          }
          if (
            // Run these checks in production only if the flag is off.
            // Eventually we'll delete this branch altogether.
            typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0
          ) {
            {
              var _componentName2 = getComponentNameFromType(Component2) || "Unknown";
              if (!didWarnAboutModulePatternComponent[_componentName2]) {
                error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName2, _componentName2, _componentName2);
                didWarnAboutModulePatternComponent[_componentName2] = true;
              }
            }
            workInProgress2.tag = ClassComponent;
            workInProgress2.memoizedState = null;
            workInProgress2.updateQueue = null;
            var hasContext = false;
            if (isContextProvider(Component2)) {
              hasContext = true;
              pushContextProvider(workInProgress2);
            } else {
              hasContext = false;
            }
            workInProgress2.memoizedState = value.state !== null && value.state !== void 0 ? value.state : null;
            initializeUpdateQueue(workInProgress2);
            adoptClassInstance(workInProgress2, value);
            mountClassInstance(workInProgress2, Component2, props, renderLanes2);
            return finishClassComponent(null, workInProgress2, Component2, true, hasContext, renderLanes2);
          } else {
            workInProgress2.tag = FunctionComponent;
            {
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  value = renderWithHooks(null, workInProgress2, Component2, props, context, renderLanes2);
                  hasId = checkDidRenderIdHook();
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
            }
            if (getIsHydrating() && hasId) {
              pushMaterializedTreeId(workInProgress2);
            }
            reconcileChildren(null, workInProgress2, value, renderLanes2);
            {
              validateFunctionComponentInDev(workInProgress2, Component2);
            }
            return workInProgress2.child;
          }
        }
        function validateFunctionComponentInDev(workInProgress2, Component2) {
          {
            if (Component2) {
              if (Component2.childContextTypes) {
                error("%s(...): childContextTypes cannot be defined on a function component.", Component2.displayName || Component2.name || "Component");
              }
            }
            if (workInProgress2.ref !== null) {
              var info = "";
              var ownerName = getCurrentFiberOwnerNameInDevOrNull();
              if (ownerName) {
                info += "\n\nCheck the render method of `" + ownerName + "`.";
              }
              var warningKey = ownerName || "";
              var debugSource = workInProgress2.$a;
              if (debugSource) {
                warningKey = debugSource.fileName + ":" + debugSource.lineNumber;
              }
              if (!didWarnAboutFunctionRefs[warningKey]) {
                didWarnAboutFunctionRefs[warningKey] = true;
                error("Function components cannot be given refs. Attempts to access this ref will fail. Did you mean to use React.forwardRef()?%s", info);
              }
            }
            if (typeof Component2.getDerivedStateFromProps === "function") {
              var _componentName3 = getComponentNameFromType(Component2) || "Unknown";
              if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]) {
                error("%s: Function components do not support getDerivedStateFromProps.", _componentName3);
                didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true;
              }
            }
            if (typeof Component2.contextType === "object" && Component2.contextType !== null) {
              var _componentName4 = getComponentNameFromType(Component2) || "Unknown";
              if (!didWarnAboutContextTypeOnFunctionComponent[_componentName4]) {
                error("%s: Function components do not support contextType.", _componentName4);
                didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true;
              }
            }
          }
        }
        var SUSPENDED_MARKER = {
          dehydrated: null,
          treeContext: null,
          retryLane: NoLane
        };
        function mountSuspenseOffscreenState(renderLanes2) {
          return {
            baseLanes: renderLanes2,
            cachePool: getSuspendedCache(),
            transitions: null
          };
        }
        function updateSuspenseOffscreenState(prevOffscreenState, renderLanes2) {
          var cachePool = null;
          return {
            baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes2),
            cachePool,
            transitions: prevOffscreenState.transitions
          };
        }
        function shouldRemainOnFallback(suspenseContext, current2, workInProgress2, renderLanes2) {
          if (current2 !== null) {
            var suspenseState = current2.memoizedState;
            if (suspenseState === null) {
              return false;
            }
          }
          return hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
        }
        function getRemainingWorkInPrimaryTree(current2, renderLanes2) {
          return removeLanes(current2.childLanes, renderLanes2);
        }
        function updateSuspenseComponent(current2, workInProgress2, renderLanes2) {
          var nextProps = workInProgress2.pendingProps;
          {
            if (shouldSuspend(workInProgress2)) {
              workInProgress2.flags |= DidCapture;
            }
          }
          var suspenseContext = suspenseStackCursor.current;
          var showFallback = false;
          var didSuspend = (workInProgress2.flags & DidCapture) !== NoFlags;
          if (didSuspend || shouldRemainOnFallback(suspenseContext, current2)) {
            showFallback = true;
            workInProgress2.flags &= ~DidCapture;
          } else {
            if (current2 === null || current2.memoizedState !== null) {
              {
                suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext);
              }
            }
          }
          suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
          pushSuspenseContext(workInProgress2, suspenseContext);
          if (current2 === null) {
            tryToClaimNextHydratableInstance(workInProgress2);
            var suspenseState = workInProgress2.memoizedState;
            if (suspenseState !== null) {
              var dehydrated = suspenseState.dehydrated;
              if (dehydrated !== null) {
                return mountDehydratedSuspenseComponent(workInProgress2, dehydrated);
              }
            }
            var nextPrimaryChildren = nextProps.children;
            var nextFallbackChildren = nextProps.fallback;
            if (showFallback) {
              var fallbackFragment = mountSuspenseFallbackChildren(workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
              var primaryChildFragment = workInProgress2.child;
              primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes2);
              workInProgress2.memoizedState = SUSPENDED_MARKER;
              return fallbackFragment;
            } else {
              return mountSuspensePrimaryChildren(workInProgress2, nextPrimaryChildren);
            }
          } else {
            var prevState = current2.memoizedState;
            if (prevState !== null) {
              var _dehydrated = prevState.dehydrated;
              if (_dehydrated !== null) {
                return updateDehydratedSuspenseComponent(current2, workInProgress2, didSuspend, nextProps, _dehydrated, prevState, renderLanes2);
              }
            }
            if (showFallback) {
              var _nextFallbackChildren = nextProps.fallback;
              var _nextPrimaryChildren = nextProps.children;
              var fallbackChildFragment = updateSuspenseFallbackChildren(current2, workInProgress2, _nextPrimaryChildren, _nextFallbackChildren, renderLanes2);
              var _primaryChildFragment2 = workInProgress2.child;
              var prevOffscreenState = current2.child.memoizedState;
              _primaryChildFragment2.memoizedState = prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes2) : updateSuspenseOffscreenState(prevOffscreenState, renderLanes2);
              _primaryChildFragment2.childLanes = getRemainingWorkInPrimaryTree(current2, renderLanes2);
              workInProgress2.memoizedState = SUSPENDED_MARKER;
              return fallbackChildFragment;
            } else {
              var _nextPrimaryChildren2 = nextProps.children;
              var _primaryChildFragment3 = updateSuspensePrimaryChildren(current2, workInProgress2, _nextPrimaryChildren2, renderLanes2);
              workInProgress2.memoizedState = null;
              return _primaryChildFragment3;
            }
          }
        }
        function mountSuspensePrimaryChildren(workInProgress2, primaryChildren, renderLanes2) {
          var mode = workInProgress2.mode;
          var primaryChildProps = {
            mode: "visible",
            children: primaryChildren
          };
          var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
          primaryChildFragment.return = workInProgress2;
          workInProgress2.child = primaryChildFragment;
          return primaryChildFragment;
        }
        function mountSuspenseFallbackChildren(workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
          var mode = workInProgress2.mode;
          var progressedPrimaryFragment = workInProgress2.child;
          var primaryChildProps = {
            mode: "hidden",
            children: primaryChildren
          };
          var primaryChildFragment;
          var fallbackChildFragment;
          if ((mode & ConcurrentMode) === NoMode && progressedPrimaryFragment !== null) {
            primaryChildFragment = progressedPrimaryFragment;
            primaryChildFragment.childLanes = NoLanes;
            primaryChildFragment.pendingProps = primaryChildProps;
            if (workInProgress2.mode & ProfileMode) {
              primaryChildFragment.actualDuration = 0;
              primaryChildFragment.actualStartTime = -1;
              primaryChildFragment.selfBaseDuration = 0;
              primaryChildFragment.treeBaseDuration = 0;
            }
            fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
          } else {
            primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
            fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
          }
          primaryChildFragment.return = workInProgress2;
          fallbackChildFragment.return = workInProgress2;
          primaryChildFragment.sibling = fallbackChildFragment;
          workInProgress2.child = primaryChildFragment;
          return fallbackChildFragment;
        }
        function mountWorkInProgressOffscreenFiber(offscreenProps, mode, renderLanes2) {
          return createFiberFromOffscreen(offscreenProps, mode, NoLanes, null);
        }
        function updateWorkInProgressOffscreenFiber(current2, offscreenProps) {
          return createWorkInProgress(current2, offscreenProps);
        }
        function updateSuspensePrimaryChildren(current2, workInProgress2, primaryChildren, renderLanes2) {
          var currentPrimaryChildFragment = current2.child;
          var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
          var primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, {
            mode: "visible",
            children: primaryChildren
          });
          if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
            primaryChildFragment.lanes = renderLanes2;
          }
          primaryChildFragment.return = workInProgress2;
          primaryChildFragment.sibling = null;
          if (currentFallbackChildFragment !== null) {
            var deletions = workInProgress2.deletions;
            if (deletions === null) {
              workInProgress2.deletions = [currentFallbackChildFragment];
              workInProgress2.flags |= ChildDeletion;
            } else {
              deletions.push(currentFallbackChildFragment);
            }
          }
          workInProgress2.child = primaryChildFragment;
          return primaryChildFragment;
        }
        function updateSuspenseFallbackChildren(current2, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
          var mode = workInProgress2.mode;
          var currentPrimaryChildFragment = current2.child;
          var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
          var primaryChildProps = {
            mode: "hidden",
            children: primaryChildren
          };
          var primaryChildFragment;
          if (
            // In legacy mode, we commit the primary tree as if it successfully
            // completed, even though it's in an inconsistent state.
            (mode & ConcurrentMode) === NoMode && // Make sure we're on the second pass, i.e. the primary child fragment was
            // already cloned. In legacy mode, the only case where this isn't true is
            // when DevTools forces us to display a fallback; we skip the first render
            // pass entirely and go straight to rendering the fallback. (In Concurrent
            // Mode, SuspenseList can also trigger this scenario, but this is a legacy-
            // only codepath.)
            workInProgress2.child !== currentPrimaryChildFragment
          ) {
            var progressedPrimaryFragment = workInProgress2.child;
            primaryChildFragment = progressedPrimaryFragment;
            primaryChildFragment.childLanes = NoLanes;
            primaryChildFragment.pendingProps = primaryChildProps;
            if (workInProgress2.mode & ProfileMode) {
              primaryChildFragment.actualDuration = 0;
              primaryChildFragment.actualStartTime = -1;
              primaryChildFragment.selfBaseDuration = currentPrimaryChildFragment.selfBaseDuration;
              primaryChildFragment.treeBaseDuration = currentPrimaryChildFragment.treeBaseDuration;
            }
            workInProgress2.deletions = null;
          } else {
            primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, primaryChildProps);
            primaryChildFragment.subtreeFlags = currentPrimaryChildFragment.subtreeFlags & StaticMask;
          }
          var fallbackChildFragment;
          if (currentFallbackChildFragment !== null) {
            fallbackChildFragment = createWorkInProgress(currentFallbackChildFragment, fallbackChildren);
          } else {
            fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
            fallbackChildFragment.flags |= Placement;
          }
          fallbackChildFragment.return = workInProgress2;
          primaryChildFragment.return = workInProgress2;
          primaryChildFragment.sibling = fallbackChildFragment;
          workInProgress2.child = primaryChildFragment;
          return fallbackChildFragment;
        }
        function retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, recoverableError) {
          if (recoverableError !== null) {
            queueHydrationError(recoverableError);
          }
          reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
          var nextProps = workInProgress2.pendingProps;
          var primaryChildren = nextProps.children;
          var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress2, primaryChildren);
          primaryChildFragment.flags |= Placement;
          workInProgress2.memoizedState = null;
          return primaryChildFragment;
        }
        function mountSuspenseFallbackAfterRetryWithoutHydrating(current2, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
          var fiberMode = workInProgress2.mode;
          var primaryChildProps = {
            mode: "visible",
            children: primaryChildren
          };
          var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, fiberMode);
          var fallbackChildFragment = createFiberFromFragment(fallbackChildren, fiberMode, renderLanes2, null);
          fallbackChildFragment.flags |= Placement;
          primaryChildFragment.return = workInProgress2;
          fallbackChildFragment.return = workInProgress2;
          primaryChildFragment.sibling = fallbackChildFragment;
          workInProgress2.child = primaryChildFragment;
          if ((workInProgress2.mode & ConcurrentMode) !== NoMode) {
            reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
          }
          return fallbackChildFragment;
        }
        function mountDehydratedSuspenseComponent(workInProgress2, suspenseInstance, renderLanes2) {
          if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
            {
              error("Cannot hydrate Suspense in legacy mode. Switch from ReactDOM.hydrate(element, container) to ReactDOMClient.hydrateRoot(container, <App />).render(element) or remove the Suspense components from the server rendered components.");
            }
            workInProgress2.lanes = laneToLanes(SyncLane);
          } else if (isSuspenseInstanceFallback(suspenseInstance)) {
            workInProgress2.lanes = laneToLanes(DefaultHydrationLane);
          } else {
            workInProgress2.lanes = laneToLanes(OffscreenLane);
          }
          return null;
        }
        function updateDehydratedSuspenseComponent(current2, workInProgress2, didSuspend, nextProps, suspenseInstance, suspenseState, renderLanes2) {
          if (!didSuspend) {
            warnIfHydrating();
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              return retrySuspenseComponentWithoutHydrating(
                current2,
                workInProgress2,
                renderLanes2,
                // TODO: When we delete legacy mode, we should make this error argument
                // required — every concurrent mode path that causes hydration to
                // de-opt to client rendering should have an error message.
                null
              );
            }
            if (isSuspenseInstanceFallback(suspenseInstance)) {
              var digest, message, stack;
              {
                var _getSuspenseInstanceF = getSuspenseInstanceFallbackErrorDetails(suspenseInstance);
                digest = _getSuspenseInstanceF.digest;
                message = _getSuspenseInstanceF.message;
                stack = _getSuspenseInstanceF.stack;
              }
              var error2;
              if (message) {
                error2 = new Error(message);
              } else {
                error2 = new Error("The server could not finish this Suspense boundary, likely due to an error during server rendering. Switched to client rendering.");
              }
              var capturedValue = createCapturedValue(error2, digest, stack);
              return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, capturedValue);
            }
            var hasContextChanged2 = includesSomeLane(renderLanes2, current2.childLanes);
            if (didReceiveUpdate || hasContextChanged2) {
              var root2 = getWorkInProgressRoot();
              if (root2 !== null) {
                var attemptHydrationAtLane = getBumpedLaneForHydration(root2, renderLanes2);
                if (attemptHydrationAtLane !== NoLane && attemptHydrationAtLane !== suspenseState.retryLane) {
                  suspenseState.retryLane = attemptHydrationAtLane;
                  var eventTime = NoTimestamp;
                  enqueueConcurrentRenderForLane(current2, attemptHydrationAtLane);
                  scheduleUpdateOnFiber(root2, current2, attemptHydrationAtLane, eventTime);
                }
              }
              renderDidSuspendDelayIfPossible();
              var _capturedValue = createCapturedValue(new Error("This Suspense boundary received an update before it finished hydrating. This caused the boundary to switch to client rendering. The usual way to fix this is to wrap the original update in startTransition."));
              return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, _capturedValue);
            } else if (isSuspenseInstancePending(suspenseInstance)) {
              workInProgress2.flags |= DidCapture;
              workInProgress2.child = current2.child;
              var retry = retryDehydratedSuspenseBoundary.bind(null, current2);
              registerSuspenseInstanceRetry(suspenseInstance, retry);
              return null;
            } else {
              reenterHydrationStateFromDehydratedSuspenseInstance(workInProgress2, suspenseInstance, suspenseState.treeContext);
              var primaryChildren = nextProps.children;
              var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress2, primaryChildren);
              primaryChildFragment.flags |= Hydrating;
              return primaryChildFragment;
            }
          } else {
            if (workInProgress2.flags & ForceClientRender) {
              workInProgress2.flags &= ~ForceClientRender;
              var _capturedValue2 = createCapturedValue(new Error("There was an error while hydrating this Suspense boundary. Switched to client rendering."));
              return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, _capturedValue2);
            } else if (workInProgress2.memoizedState !== null) {
              workInProgress2.child = current2.child;
              workInProgress2.flags |= DidCapture;
              return null;
            } else {
              var nextPrimaryChildren = nextProps.children;
              var nextFallbackChildren = nextProps.fallback;
              var fallbackChildFragment = mountSuspenseFallbackAfterRetryWithoutHydrating(current2, workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
              var _primaryChildFragment4 = workInProgress2.child;
              _primaryChildFragment4.memoizedState = mountSuspenseOffscreenState(renderLanes2);
              workInProgress2.memoizedState = SUSPENDED_MARKER;
              return fallbackChildFragment;
            }
          }
        }
        function scheduleSuspenseWorkOnFiber(fiber, renderLanes2, propagationRoot) {
          fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
          var alternate = fiber.alternate;
          if (alternate !== null) {
            alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
          }
          scheduleContextWorkOnParentPath(fiber.return, renderLanes2, propagationRoot);
        }
        function propagateSuspenseContextChange(workInProgress2, firstChild, renderLanes2) {
          var node = firstChild;
          while (node !== null) {
            if (node.tag === SuspenseComponent) {
              var state = node.memoizedState;
              if (state !== null) {
                scheduleSuspenseWorkOnFiber(node, renderLanes2, workInProgress2);
              }
            } else if (node.tag === SuspenseListComponent) {
              scheduleSuspenseWorkOnFiber(node, renderLanes2, workInProgress2);
            } else if (node.child !== null) {
              node.child.return = node;
              node = node.child;
              continue;
            }
            if (node === workInProgress2) {
              return;
            }
            while (node.sibling === null) {
              if (node.return === null || node.return === workInProgress2) {
                return;
              }
              node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
          }
        }
        function findLastContentRow(firstChild) {
          var row = firstChild;
          var lastContentRow = null;
          while (row !== null) {
            var currentRow = row.alternate;
            if (currentRow !== null && findFirstSuspended(currentRow) === null) {
              lastContentRow = row;
            }
            row = row.sibling;
          }
          return lastContentRow;
        }
        function validateRevealOrder(revealOrder) {
          {
            if (revealOrder !== void 0 && revealOrder !== "forwards" && revealOrder !== "backwards" && revealOrder !== "together" && !didWarnAboutRevealOrder[revealOrder]) {
              didWarnAboutRevealOrder[revealOrder] = true;
              if (typeof revealOrder === "string") {
                switch (revealOrder.toLowerCase()) {
                  case "together":
                  case "forwards":
                  case "backwards": {
                    error('"%s" is not a valid value for revealOrder on <SuspenseList />. Use lowercase "%s" instead.', revealOrder, revealOrder.toLowerCase());
                    break;
                  }
                  case "forward":
                  case "backward": {
                    error('"%s" is not a valid value for revealOrder on <SuspenseList />. React uses the -s suffix in the spelling. Use "%ss" instead.', revealOrder, revealOrder.toLowerCase());
                    break;
                  }
                  default:
                    error('"%s" is not a supported revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                    break;
                }
              } else {
                error('%s is not a supported value for revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
              }
            }
          }
        }
        function validateTailOptions(tailMode, revealOrder) {
          {
            if (tailMode !== void 0 && !didWarnAboutTailOptions[tailMode]) {
              if (tailMode !== "collapsed" && tailMode !== "hidden") {
                didWarnAboutTailOptions[tailMode] = true;
                error('"%s" is not a supported value for tail on <SuspenseList />. Did you mean "collapsed" or "hidden"?', tailMode);
              } else if (revealOrder !== "forwards" && revealOrder !== "backwards") {
                didWarnAboutTailOptions[tailMode] = true;
                error('<SuspenseList tail="%s" /> is only valid if revealOrder is "forwards" or "backwards". Did you mean to specify revealOrder="forwards"?', tailMode);
              }
            }
          }
        }
        function validateSuspenseListNestedChild(childSlot, index2) {
          {
            var isAnArray = isArray(childSlot);
            var isIterable = !isAnArray && typeof getIteratorFn(childSlot) === "function";
            if (isAnArray || isIterable) {
              var type = isAnArray ? "array" : "iterable";
              error("A nested %s was passed to row #%s in <SuspenseList />. Wrap it in an additional SuspenseList to configure its revealOrder: <SuspenseList revealOrder=...> ... <SuspenseList revealOrder=...>{%s}</SuspenseList> ... </SuspenseList>", type, index2, type);
              return false;
            }
          }
          return true;
        }
        function validateSuspenseListChildren(children, revealOrder) {
          {
            if ((revealOrder === "forwards" || revealOrder === "backwards") && children !== void 0 && children !== null && children !== false) {
              if (isArray(children)) {
                for (var i = 0; i < children.length; i++) {
                  if (!validateSuspenseListNestedChild(children[i], i)) {
                    return;
                  }
                }
              } else {
                var iteratorFn = getIteratorFn(children);
                if (typeof iteratorFn === "function") {
                  var childrenIterator = iteratorFn.call(children);
                  if (childrenIterator) {
                    var step = childrenIterator.next();
                    var _i = 0;
                    for (; !step.done; step = childrenIterator.next()) {
                      if (!validateSuspenseListNestedChild(step.value, _i)) {
                        return;
                      }
                      _i++;
                    }
                  }
                } else {
                  error('A single row was passed to a <SuspenseList revealOrder="%s" />. This is not useful since it needs multiple rows. Did you mean to pass multiple children or an array?', revealOrder);
                }
              }
            }
          }
        }
        function initSuspenseListRenderState(workInProgress2, isBackwards, tail, lastContentRow, tailMode) {
          var renderState = workInProgress2.memoizedState;
          if (renderState === null) {
            workInProgress2.memoizedState = {
              isBackwards,
              rendering: null,
              renderingStartTime: 0,
              last: lastContentRow,
              tail,
              tailMode
            };
          } else {
            renderState.isBackwards = isBackwards;
            renderState.rendering = null;
            renderState.renderingStartTime = 0;
            renderState.last = lastContentRow;
            renderState.tail = tail;
            renderState.tailMode = tailMode;
          }
        }
        function updateSuspenseListComponent(current2, workInProgress2, renderLanes2) {
          var nextProps = workInProgress2.pendingProps;
          var revealOrder = nextProps.revealOrder;
          var tailMode = nextProps.tail;
          var newChildren = nextProps.children;
          validateRevealOrder(revealOrder);
          validateTailOptions(tailMode, revealOrder);
          validateSuspenseListChildren(newChildren, revealOrder);
          reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
          var suspenseContext = suspenseStackCursor.current;
          var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
          if (shouldForceFallback) {
            suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
            workInProgress2.flags |= DidCapture;
          } else {
            var didSuspendBefore = current2 !== null && (current2.flags & DidCapture) !== NoFlags;
            if (didSuspendBefore) {
              propagateSuspenseContextChange(workInProgress2, workInProgress2.child, renderLanes2);
            }
            suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
          }
          pushSuspenseContext(workInProgress2, suspenseContext);
          if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
            workInProgress2.memoizedState = null;
          } else {
            switch (revealOrder) {
              case "forwards": {
                var lastContentRow = findLastContentRow(workInProgress2.child);
                var tail;
                if (lastContentRow === null) {
                  tail = workInProgress2.child;
                  workInProgress2.child = null;
                } else {
                  tail = lastContentRow.sibling;
                  lastContentRow.sibling = null;
                }
                initSuspenseListRenderState(
                  workInProgress2,
                  false,
                  // isBackwards
                  tail,
                  lastContentRow,
                  tailMode
                );
                break;
              }
              case "backwards": {
                var _tail = null;
                var row = workInProgress2.child;
                workInProgress2.child = null;
                while (row !== null) {
                  var currentRow = row.alternate;
                  if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                    workInProgress2.child = row;
                    break;
                  }
                  var nextRow = row.sibling;
                  row.sibling = _tail;
                  _tail = row;
                  row = nextRow;
                }
                initSuspenseListRenderState(
                  workInProgress2,
                  true,
                  // isBackwards
                  _tail,
                  null,
                  // last
                  tailMode
                );
                break;
              }
              case "together": {
                initSuspenseListRenderState(
                  workInProgress2,
                  false,
                  // isBackwards
                  null,
                  // tail
                  null,
                  // last
                  void 0
                );
                break;
              }
              default: {
                workInProgress2.memoizedState = null;
              }
            }
          }
          return workInProgress2.child;
        }
        function updatePortalComponent(current2, workInProgress2, renderLanes2) {
          pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
          var nextChildren = workInProgress2.pendingProps;
          if (current2 === null) {
            workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
          } else {
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          }
          return workInProgress2.child;
        }
        var hasWarnedAboutUsingNoValuePropOnContextProvider = false;
        function updateContextProvider(current2, workInProgress2, renderLanes2) {
          var providerType = workInProgress2.type;
          var context = providerType.Y;
          var newProps = workInProgress2.pendingProps;
          var oldProps = workInProgress2.memoizedProps;
          var newValue = newProps.value;
          {
            if (!("value" in newProps)) {
              if (!hasWarnedAboutUsingNoValuePropOnContextProvider) {
                hasWarnedAboutUsingNoValuePropOnContextProvider = true;
                error("The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?");
              }
            }
            var providerPropTypes = workInProgress2.type.propTypes;
            if (providerPropTypes) {
              checkPropTypes(providerPropTypes, newProps, "prop", "Context.Provider");
            }
          }
          pushProvider(workInProgress2, context, newValue);
          {
            if (oldProps !== null) {
              var oldValue = oldProps.value;
              if (objectIs(oldValue, newValue)) {
                if (oldProps.children === newProps.children && !hasContextChanged()) {
                  return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                }
              } else {
                propagateContextChange(workInProgress2, context, renderLanes2);
              }
            }
          }
          var newChildren = newProps.children;
          reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
          return workInProgress2.child;
        }
        var hasWarnedAboutUsingContextAsConsumer = false;
        function updateContextConsumer(current2, workInProgress2, renderLanes2) {
          var context = workInProgress2.type;
          {
            if (context.Y === void 0) {
              if (context !== context.Consumer) {
                if (!hasWarnedAboutUsingContextAsConsumer) {
                  hasWarnedAboutUsingContextAsConsumer = true;
                  error("Rendering <Context> directly is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                }
              }
            } else {
              context = context.Y;
            }
          }
          var newProps = workInProgress2.pendingProps;
          var render3 = newProps.children;
          {
            if (typeof render3 !== "function") {
              error("A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it.");
            }
          }
          prepareToReadContext(workInProgress2, renderLanes2);
          var newValue = readContext(context);
          {
            markComponentRenderStarted(workInProgress2);
          }
          var newChildren;
          {
            ReactCurrentOwner$1.current = workInProgress2;
            setIsRendering(true);
            newChildren = render3(newValue);
            setIsRendering(false);
          }
          {
            markComponentRenderStopped();
          }
          workInProgress2.flags |= PerformedWork;
          reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
          return workInProgress2.child;
        }
        function markWorkInProgressReceivedUpdate() {
          didReceiveUpdate = true;
        }
        function resetSuspendedCurrentOnMountInLegacyMode(current2, workInProgress2) {
          if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
            if (current2 !== null) {
              current2.alternate = null;
              workInProgress2.alternate = null;
              workInProgress2.flags |= Placement;
            }
          }
        }
        function bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2) {
          if (current2 !== null) {
            workInProgress2.dependencies = current2.dependencies;
          }
          {
            stopProfilerTimerIfRunning();
          }
          markSkippedUpdateLanes(workInProgress2.lanes);
          if (!includesSomeLane(renderLanes2, workInProgress2.childLanes)) {
            {
              return null;
            }
          }
          cloneChildFibers(current2, workInProgress2);
          return workInProgress2.child;
        }
        function remountFiber(current2, oldWorkInProgress, newWorkInProgress) {
          {
            var returnFiber = oldWorkInProgress.return;
            if (returnFiber === null) {
              throw new Error("Cannot swap the root fiber.");
            }
            current2.alternate = null;
            oldWorkInProgress.alternate = null;
            newWorkInProgress.index = oldWorkInProgress.index;
            newWorkInProgress.sibling = oldWorkInProgress.sibling;
            newWorkInProgress.return = oldWorkInProgress.return;
            newWorkInProgress.ref = oldWorkInProgress.ref;
            if (oldWorkInProgress === returnFiber.child) {
              returnFiber.child = newWorkInProgress;
            } else {
              var prevSibling = returnFiber.child;
              if (prevSibling === null) {
                throw new Error("Expected parent to have a child.");
              }
              while (prevSibling.sibling !== oldWorkInProgress) {
                prevSibling = prevSibling.sibling;
                if (prevSibling === null) {
                  throw new Error("Expected to find the previous sibling.");
                }
              }
              prevSibling.sibling = newWorkInProgress;
            }
            var deletions = returnFiber.deletions;
            if (deletions === null) {
              returnFiber.deletions = [current2];
              returnFiber.flags |= ChildDeletion;
            } else {
              deletions.push(current2);
            }
            newWorkInProgress.flags |= Placement;
            return newWorkInProgress;
          }
        }
        function checkScheduledUpdateOrContext(current2, renderLanes2) {
          var updateLanes = current2.lanes;
          if (includesSomeLane(updateLanes, renderLanes2)) {
            return true;
          }
          return false;
        }
        function attemptEarlyBailoutIfNoScheduledUpdate(current2, workInProgress2, renderLanes2) {
          switch (workInProgress2.tag) {
            case HostRoot:
              pushHostRootContext(workInProgress2);
              var root2 = workInProgress2.stateNode;
              resetHydrationState();
              break;
            case HostComponent:
              pushHostContext(workInProgress2);
              break;
            case ClassComponent: {
              var Component2 = workInProgress2.type;
              if (isContextProvider(Component2)) {
                pushContextProvider(workInProgress2);
              }
              break;
            }
            case HostPortal:
              pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
              break;
            case ContextProvider: {
              var newValue = workInProgress2.memoizedProps.value;
              var context = workInProgress2.type.Y;
              pushProvider(workInProgress2, context, newValue);
              break;
            }
            case Profiler:
              {
                var hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
                if (hasChildWork) {
                  workInProgress2.flags |= Update;
                }
                {
                  var stateNode = workInProgress2.stateNode;
                  stateNode.effectDuration = 0;
                  stateNode.passiveEffectDuration = 0;
                }
              }
              break;
            case SuspenseComponent: {
              var state = workInProgress2.memoizedState;
              if (state !== null) {
                if (state.dehydrated !== null) {
                  pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                  workInProgress2.flags |= DidCapture;
                  return null;
                }
                var primaryChildFragment = workInProgress2.child;
                var primaryChildLanes = primaryChildFragment.childLanes;
                if (includesSomeLane(renderLanes2, primaryChildLanes)) {
                  return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
                } else {
                  pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                  var child = bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                  if (child !== null) {
                    return child.sibling;
                  } else {
                    return null;
                  }
                }
              } else {
                pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
              }
              break;
            }
            case SuspenseListComponent: {
              var didSuspendBefore = (current2.flags & DidCapture) !== NoFlags;
              var _hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
              if (didSuspendBefore) {
                if (_hasChildWork) {
                  return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
                }
                workInProgress2.flags |= DidCapture;
              }
              var renderState = workInProgress2.memoizedState;
              if (renderState !== null) {
                renderState.rendering = null;
                renderState.tail = null;
                renderState.lastEffect = null;
              }
              pushSuspenseContext(workInProgress2, suspenseStackCursor.current);
              if (_hasChildWork) {
                break;
              } else {
                return null;
              }
            }
            case OffscreenComponent:
            case LegacyHiddenComponent: {
              workInProgress2.lanes = NoLanes;
              return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
            }
          }
          return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
        }
        function beginWork(current2, workInProgress2, renderLanes2) {
          {
            if (workInProgress2.yc && current2 !== null) {
              return remountFiber(current2, workInProgress2, createFiberFromTypeAndProps(workInProgress2.type, workInProgress2.key, workInProgress2.pendingProps, workInProgress2.qa || null, workInProgress2.mode, workInProgress2.lanes));
            }
          }
          if (current2 !== null) {
            var oldProps = current2.memoizedProps;
            var newProps = workInProgress2.pendingProps;
            if (oldProps !== newProps || hasContextChanged() || // Force a re-render if the implementation changed due to hot reload:
            workInProgress2.type !== current2.type) {
              didReceiveUpdate = true;
            } else {
              var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current2, renderLanes2);
              if (!hasScheduledUpdateOrContext && // If this is the second pass of an error or suspense boundary, there
              // may not be work scheduled on `current`, so we check for this flag.
              (workInProgress2.flags & DidCapture) === NoFlags) {
                didReceiveUpdate = false;
                return attemptEarlyBailoutIfNoScheduledUpdate(current2, workInProgress2, renderLanes2);
              }
              if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                didReceiveUpdate = true;
              } else {
                didReceiveUpdate = false;
              }
            }
          } else {
            didReceiveUpdate = false;
            if (getIsHydrating() && isForkedChild(workInProgress2)) {
              var slotIndex = workInProgress2.index;
              var numberOfForks = getForksAtLevel();
              pushTreeId(workInProgress2, numberOfForks, slotIndex);
            }
          }
          workInProgress2.lanes = NoLanes;
          switch (workInProgress2.tag) {
            case IndeterminateComponent: {
              return mountIndeterminateComponent(current2, workInProgress2, workInProgress2.type, renderLanes2);
            }
            case LazyComponent: {
              var elementType = workInProgress2.elementType;
              return mountLazyComponent(current2, workInProgress2, elementType, renderLanes2);
            }
            case FunctionComponent: {
              var Component2 = workInProgress2.type;
              var unresolvedProps = workInProgress2.pendingProps;
              var resolvedProps = workInProgress2.elementType === Component2 ? unresolvedProps : resolveDefaultProps(Component2, unresolvedProps);
              return updateFunctionComponent(current2, workInProgress2, Component2, resolvedProps, renderLanes2);
            }
            case ClassComponent: {
              var _Component = workInProgress2.type;
              var _unresolvedProps = workInProgress2.pendingProps;
              var _resolvedProps = workInProgress2.elementType === _Component ? _unresolvedProps : resolveDefaultProps(_Component, _unresolvedProps);
              return updateClassComponent(current2, workInProgress2, _Component, _resolvedProps, renderLanes2);
            }
            case HostRoot:
              return updateHostRoot(current2, workInProgress2, renderLanes2);
            case HostComponent:
              return updateHostComponent(current2, workInProgress2, renderLanes2);
            case HostText:
              return updateHostText(current2, workInProgress2);
            case SuspenseComponent:
              return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
            case HostPortal:
              return updatePortalComponent(current2, workInProgress2, renderLanes2);
            case ForwardRef: {
              var type = workInProgress2.type;
              var _unresolvedProps2 = workInProgress2.pendingProps;
              var _resolvedProps2 = workInProgress2.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);
              return updateForwardRef(current2, workInProgress2, type, _resolvedProps2, renderLanes2);
            }
            case Fragment:
              return updateFragment(current2, workInProgress2, renderLanes2);
            case Mode:
              return updateMode(current2, workInProgress2, renderLanes2);
            case Profiler:
              return updateProfiler(current2, workInProgress2, renderLanes2);
            case ContextProvider:
              return updateContextProvider(current2, workInProgress2, renderLanes2);
            case ContextConsumer:
              return updateContextConsumer(current2, workInProgress2, renderLanes2);
            case MemoComponent: {
              var _type2 = workInProgress2.type;
              var _unresolvedProps3 = workInProgress2.pendingProps;
              var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);
              {
                if (workInProgress2.type !== workInProgress2.elementType) {
                  var outerPropTypes = _type2.propTypes;
                  if (outerPropTypes) {
                    checkPropTypes(
                      outerPropTypes,
                      _resolvedProps3,
                      // Resolved for outer only
                      "prop",
                      getComponentNameFromType(_type2)
                    );
                  }
                }
              }
              _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);
              return updateMemoComponent(current2, workInProgress2, _type2, _resolvedProps3, renderLanes2);
            }
            case SimpleMemoComponent: {
              return updateSimpleMemoComponent(current2, workInProgress2, workInProgress2.type, workInProgress2.pendingProps, renderLanes2);
            }
            case IncompleteClassComponent: {
              var _Component2 = workInProgress2.type;
              var _unresolvedProps4 = workInProgress2.pendingProps;
              var _resolvedProps4 = workInProgress2.elementType === _Component2 ? _unresolvedProps4 : resolveDefaultProps(_Component2, _unresolvedProps4);
              return mountIncompleteClassComponent(current2, workInProgress2, _Component2, _resolvedProps4, renderLanes2);
            }
            case SuspenseListComponent: {
              return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
            }
            case ScopeComponent: {
              break;
            }
            case OffscreenComponent: {
              return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
            }
          }
          throw new Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
        }
        function markUpdate(workInProgress2) {
          workInProgress2.flags |= Update;
        }
        function markRef$1(workInProgress2) {
          workInProgress2.flags |= Ref;
          {
            workInProgress2.flags |= RefStatic;
          }
        }
        var appendAllChildren;
        var updateHostContainer;
        var updateHostComponent$1;
        var updateHostText$1;
        {
          appendAllChildren = function(parent, workInProgress2, needsVisibilityToggle, isHidden) {
            var node = workInProgress2.child;
            while (node !== null) {
              if (node.tag === HostComponent || node.tag === HostText) {
                appendInitialChild(parent, node.stateNode);
              } else if (node.tag === HostPortal)
                ;
              else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === workInProgress2) {
                return;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === workInProgress2) {
                  return;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
          };
          updateHostContainer = function(current2, workInProgress2) {
          };
          updateHostComponent$1 = function(current2, workInProgress2, type, newProps, rootContainerInstance) {
            var oldProps = current2.memoizedProps;
            if (oldProps === newProps) {
              return;
            }
            var instance = workInProgress2.stateNode;
            var currentHostContext = getHostContext();
            var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext);
            workInProgress2.updateQueue = updatePayload;
            if (updatePayload) {
              markUpdate(workInProgress2);
            }
          };
          updateHostText$1 = function(current2, workInProgress2, oldText, newText) {
            if (oldText !== newText) {
              markUpdate(workInProgress2);
            }
          };
        }
        function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
          if (getIsHydrating()) {
            return;
          }
          switch (renderState.tailMode) {
            case "hidden": {
              var tailNode = renderState.tail;
              var lastTailNode = null;
              while (tailNode !== null) {
                if (tailNode.alternate !== null) {
                  lastTailNode = tailNode;
                }
                tailNode = tailNode.sibling;
              }
              if (lastTailNode === null) {
                renderState.tail = null;
              } else {
                lastTailNode.sibling = null;
              }
              break;
            }
            case "collapsed": {
              var _tailNode = renderState.tail;
              var _lastTailNode = null;
              while (_tailNode !== null) {
                if (_tailNode.alternate !== null) {
                  _lastTailNode = _tailNode;
                }
                _tailNode = _tailNode.sibling;
              }
              if (_lastTailNode === null) {
                if (!hasRenderedATailFallback && renderState.tail !== null) {
                  renderState.tail.sibling = null;
                } else {
                  renderState.tail = null;
                }
              } else {
                _lastTailNode.sibling = null;
              }
              break;
            }
          }
        }
        function bubbleProperties(completedWork) {
          var didBailout = completedWork.alternate !== null && completedWork.alternate.child === completedWork.child;
          var newChildLanes = NoLanes;
          var subtreeFlags = NoFlags;
          if (!didBailout) {
            if ((completedWork.mode & ProfileMode) !== NoMode) {
              var actualDuration = completedWork.actualDuration;
              var treeBaseDuration = completedWork.selfBaseDuration;
              var child = completedWork.child;
              while (child !== null) {
                newChildLanes = mergeLanes(newChildLanes, mergeLanes(child.lanes, child.childLanes));
                subtreeFlags |= child.subtreeFlags;
                subtreeFlags |= child.flags;
                actualDuration += child.actualDuration;
                treeBaseDuration += child.treeBaseDuration;
                child = child.sibling;
              }
              completedWork.actualDuration = actualDuration;
              completedWork.treeBaseDuration = treeBaseDuration;
            } else {
              var _child = completedWork.child;
              while (_child !== null) {
                newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child.lanes, _child.childLanes));
                subtreeFlags |= _child.subtreeFlags;
                subtreeFlags |= _child.flags;
                _child.return = completedWork;
                _child = _child.sibling;
              }
            }
            completedWork.subtreeFlags |= subtreeFlags;
          } else {
            if ((completedWork.mode & ProfileMode) !== NoMode) {
              var _treeBaseDuration = completedWork.selfBaseDuration;
              var _child2 = completedWork.child;
              while (_child2 !== null) {
                newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child2.lanes, _child2.childLanes));
                subtreeFlags |= _child2.subtreeFlags & StaticMask;
                subtreeFlags |= _child2.flags & StaticMask;
                _treeBaseDuration += _child2.treeBaseDuration;
                _child2 = _child2.sibling;
              }
              completedWork.treeBaseDuration = _treeBaseDuration;
            } else {
              var _child3 = completedWork.child;
              while (_child3 !== null) {
                newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child3.lanes, _child3.childLanes));
                subtreeFlags |= _child3.subtreeFlags & StaticMask;
                subtreeFlags |= _child3.flags & StaticMask;
                _child3.return = completedWork;
                _child3 = _child3.sibling;
              }
            }
            completedWork.subtreeFlags |= subtreeFlags;
          }
          completedWork.childLanes = newChildLanes;
          return didBailout;
        }
        function completeDehydratedSuspenseBoundary(current2, workInProgress2, nextState) {
          if (hasUnhydratedTailNodes() && (workInProgress2.mode & ConcurrentMode) !== NoMode && (workInProgress2.flags & DidCapture) === NoFlags) {
            warnIfUnhydratedTailNodes(workInProgress2);
            resetHydrationState();
            workInProgress2.flags |= ForceClientRender | Incomplete | ShouldCapture;
            return false;
          }
          var wasHydrated = popHydrationState(workInProgress2);
          if (nextState !== null && nextState.dehydrated !== null) {
            if (current2 === null) {
              if (!wasHydrated) {
                throw new Error("A dehydrated suspense component was completed without a hydrated node. This is probably a bug in React.");
              }
              prepareToHydrateHostSuspenseInstance(workInProgress2);
              bubbleProperties(workInProgress2);
              {
                if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                  var isTimedOutSuspense = nextState !== null;
                  if (isTimedOutSuspense) {
                    var primaryChildFragment = workInProgress2.child;
                    if (primaryChildFragment !== null) {
                      workInProgress2.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                    }
                  }
                }
              }
              return false;
            } else {
              resetHydrationState();
              if ((workInProgress2.flags & DidCapture) === NoFlags) {
                workInProgress2.memoizedState = null;
              }
              workInProgress2.flags |= Update;
              bubbleProperties(workInProgress2);
              {
                if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                  var _isTimedOutSuspense = nextState !== null;
                  if (_isTimedOutSuspense) {
                    var _primaryChildFragment = workInProgress2.child;
                    if (_primaryChildFragment !== null) {
                      workInProgress2.treeBaseDuration -= _primaryChildFragment.treeBaseDuration;
                    }
                  }
                }
              }
              return false;
            }
          } else {
            upgradeHydrationErrorsToRecoverable();
            return true;
          }
        }
        function completeWork(current2, workInProgress2, renderLanes2) {
          var newProps = workInProgress2.pendingProps;
          popTreeContext(workInProgress2);
          switch (workInProgress2.tag) {
            case IndeterminateComponent:
            case LazyComponent:
            case SimpleMemoComponent:
            case FunctionComponent:
            case ForwardRef:
            case Fragment:
            case Mode:
            case Profiler:
            case ContextConsumer:
            case MemoComponent:
              bubbleProperties(workInProgress2);
              return null;
            case ClassComponent: {
              var Component2 = workInProgress2.type;
              if (isContextProvider(Component2)) {
                popContext(workInProgress2);
              }
              bubbleProperties(workInProgress2);
              return null;
            }
            case HostRoot: {
              var fiberRoot = workInProgress2.stateNode;
              popHostContainer(workInProgress2);
              popTopLevelContextObject(workInProgress2);
              resetWorkInProgressVersions();
              if (fiberRoot.pendingContext) {
                fiberRoot.context = fiberRoot.pendingContext;
                fiberRoot.pendingContext = null;
              }
              if (current2 === null || current2.child === null) {
                var wasHydrated = popHydrationState(workInProgress2);
                if (wasHydrated) {
                  markUpdate(workInProgress2);
                } else {
                  if (current2 !== null) {
                    var prevState = current2.memoizedState;
                    if (
                      // Check if this is a client root
                      !prevState.isDehydrated || // Check if we reverted to client rendering (e.g. due to an error)
                      (workInProgress2.flags & ForceClientRender) !== NoFlags
                    ) {
                      workInProgress2.flags |= Snapshot;
                      upgradeHydrationErrorsToRecoverable();
                    }
                  }
                }
              }
              updateHostContainer(current2, workInProgress2);
              bubbleProperties(workInProgress2);
              return null;
            }
            case HostComponent: {
              popHostContext(workInProgress2);
              var rootContainerInstance = getRootHostContainer();
              var type = workInProgress2.type;
              if (current2 !== null && workInProgress2.stateNode != null) {
                updateHostComponent$1(current2, workInProgress2, type, newProps, rootContainerInstance);
                if (current2.ref !== workInProgress2.ref) {
                  markRef$1(workInProgress2);
                }
              } else {
                if (!newProps) {
                  if (workInProgress2.stateNode === null) {
                    throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                  }
                  bubbleProperties(workInProgress2);
                  return null;
                }
                var currentHostContext = getHostContext();
                var _wasHydrated = popHydrationState(workInProgress2);
                if (_wasHydrated) {
                  if (prepareToHydrateHostInstance(workInProgress2, rootContainerInstance, currentHostContext)) {
                    markUpdate(workInProgress2);
                  }
                } else {
                  var instance = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress2);
                  appendAllChildren(instance, workInProgress2, false, false);
                  workInProgress2.stateNode = instance;
                  if (finalizeInitialChildren(instance, type, newProps, rootContainerInstance)) {
                    markUpdate(workInProgress2);
                  }
                }
                if (workInProgress2.ref !== null) {
                  markRef$1(workInProgress2);
                }
              }
              bubbleProperties(workInProgress2);
              return null;
            }
            case HostText: {
              var newText = newProps;
              if (current2 && workInProgress2.stateNode != null) {
                var oldText = current2.memoizedProps;
                updateHostText$1(current2, workInProgress2, oldText, newText);
              } else {
                if (typeof newText !== "string") {
                  if (workInProgress2.stateNode === null) {
                    throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                  }
                }
                var _rootContainerInstance = getRootHostContainer();
                var _currentHostContext = getHostContext();
                var _wasHydrated2 = popHydrationState(workInProgress2);
                if (_wasHydrated2) {
                  if (prepareToHydrateHostTextInstance(workInProgress2)) {
                    markUpdate(workInProgress2);
                  }
                } else {
                  workInProgress2.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress2);
                }
              }
              bubbleProperties(workInProgress2);
              return null;
            }
            case SuspenseComponent: {
              popSuspenseContext(workInProgress2);
              var nextState = workInProgress2.memoizedState;
              if (current2 === null || current2.memoizedState !== null && current2.memoizedState.dehydrated !== null) {
                var fallthroughToNormalSuspensePath = completeDehydratedSuspenseBoundary(current2, workInProgress2, nextState);
                if (!fallthroughToNormalSuspensePath) {
                  if (workInProgress2.flags & ShouldCapture) {
                    return workInProgress2;
                  } else {
                    return null;
                  }
                }
              }
              if ((workInProgress2.flags & DidCapture) !== NoFlags) {
                workInProgress2.lanes = renderLanes2;
                if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                  transferActualDuration(workInProgress2);
                }
                return workInProgress2;
              }
              var nextDidTimeout = nextState !== null;
              var prevDidTimeout = current2 !== null && current2.memoizedState !== null;
              if (nextDidTimeout !== prevDidTimeout) {
                if (nextDidTimeout) {
                  var _offscreenFiber2 = workInProgress2.child;
                  _offscreenFiber2.flags |= Visibility;
                  if ((workInProgress2.mode & ConcurrentMode) !== NoMode) {
                    var hasInvisibleChildContext = current2 === null && (workInProgress2.memoizedProps.unstable_avoidThisFallback !== true || !enableSuspenseAvoidThisFallback);
                    if (hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext)) {
                      renderDidSuspend();
                    } else {
                      renderDidSuspendDelayIfPossible();
                    }
                  }
                }
              }
              var wakeables = workInProgress2.updateQueue;
              if (wakeables !== null) {
                workInProgress2.flags |= Update;
              }
              bubbleProperties(workInProgress2);
              {
                if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                  if (nextDidTimeout) {
                    var primaryChildFragment = workInProgress2.child;
                    if (primaryChildFragment !== null) {
                      workInProgress2.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                    }
                  }
                }
              }
              return null;
            }
            case HostPortal:
              popHostContainer(workInProgress2);
              updateHostContainer(current2, workInProgress2);
              if (current2 === null) {
                preparePortalMount(workInProgress2.stateNode.containerInfo);
              }
              bubbleProperties(workInProgress2);
              return null;
            case ContextProvider:
              var context = workInProgress2.type.Y;
              popProvider(context, workInProgress2);
              bubbleProperties(workInProgress2);
              return null;
            case IncompleteClassComponent: {
              var _Component = workInProgress2.type;
              if (isContextProvider(_Component)) {
                popContext(workInProgress2);
              }
              bubbleProperties(workInProgress2);
              return null;
            }
            case SuspenseListComponent: {
              popSuspenseContext(workInProgress2);
              var renderState = workInProgress2.memoizedState;
              if (renderState === null) {
                bubbleProperties(workInProgress2);
                return null;
              }
              var didSuspendAlready = (workInProgress2.flags & DidCapture) !== NoFlags;
              var renderedTail = renderState.rendering;
              if (renderedTail === null) {
                if (!didSuspendAlready) {
                  var cannotBeSuspended = renderHasNotSuspendedYet() && (current2 === null || (current2.flags & DidCapture) === NoFlags);
                  if (!cannotBeSuspended) {
                    var row = workInProgress2.child;
                    while (row !== null) {
                      var suspended = findFirstSuspended(row);
                      if (suspended !== null) {
                        didSuspendAlready = true;
                        workInProgress2.flags |= DidCapture;
                        cutOffTailIfNeeded(renderState, false);
                        var newThenables = suspended.updateQueue;
                        if (newThenables !== null) {
                          workInProgress2.updateQueue = newThenables;
                          workInProgress2.flags |= Update;
                        }
                        workInProgress2.subtreeFlags = NoFlags;
                        resetChildFibers(workInProgress2, renderLanes2);
                        pushSuspenseContext(workInProgress2, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback));
                        return workInProgress2.child;
                      }
                      row = row.sibling;
                    }
                  }
                  if (renderState.tail !== null && now() > getRenderTargetTime()) {
                    workInProgress2.flags |= DidCapture;
                    didSuspendAlready = true;
                    cutOffTailIfNeeded(renderState, false);
                    workInProgress2.lanes = SomeRetryLane;
                  }
                } else {
                  cutOffTailIfNeeded(renderState, false);
                }
              } else {
                if (!didSuspendAlready) {
                  var _suspended = findFirstSuspended(renderedTail);
                  if (_suspended !== null) {
                    workInProgress2.flags |= DidCapture;
                    didSuspendAlready = true;
                    var _newThenables = _suspended.updateQueue;
                    if (_newThenables !== null) {
                      workInProgress2.updateQueue = _newThenables;
                      workInProgress2.flags |= Update;
                    }
                    cutOffTailIfNeeded(renderState, true);
                    if (renderState.tail === null && renderState.tailMode === "hidden" && !renderedTail.alternate && !getIsHydrating()) {
                      bubbleProperties(workInProgress2);
                      return null;
                    }
                  } else if (
                    // The time it took to render last row is greater than the remaining
                    // time we have to render. So rendering one more row would likely
                    // exceed it.
                    now() * 2 - renderState.renderingStartTime > getRenderTargetTime() && renderLanes2 !== OffscreenLane
                  ) {
                    workInProgress2.flags |= DidCapture;
                    didSuspendAlready = true;
                    cutOffTailIfNeeded(renderState, false);
                    workInProgress2.lanes = SomeRetryLane;
                  }
                }
                if (renderState.isBackwards) {
                  renderedTail.sibling = workInProgress2.child;
                  workInProgress2.child = renderedTail;
                } else {
                  var previousSibling = renderState.last;
                  if (previousSibling !== null) {
                    previousSibling.sibling = renderedTail;
                  } else {
                    workInProgress2.child = renderedTail;
                  }
                  renderState.last = renderedTail;
                }
              }
              if (renderState.tail !== null) {
                var next = renderState.tail;
                renderState.rendering = next;
                renderState.tail = next.sibling;
                renderState.renderingStartTime = now();
                next.sibling = null;
                var suspenseContext = suspenseStackCursor.current;
                if (didSuspendAlready) {
                  suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
                } else {
                  suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
                }
                pushSuspenseContext(workInProgress2, suspenseContext);
                return next;
              }
              bubbleProperties(workInProgress2);
              return null;
            }
            case ScopeComponent: {
              break;
            }
            case OffscreenComponent:
            case LegacyHiddenComponent: {
              popRenderLanes(workInProgress2);
              var _nextState = workInProgress2.memoizedState;
              var nextIsHidden = _nextState !== null;
              if (current2 !== null) {
                var _prevState = current2.memoizedState;
                var prevIsHidden = _prevState !== null;
                if (prevIsHidden !== nextIsHidden && // LegacyHidden doesn't do any hiding — it only pre-renders.
                !enableLegacyHidden) {
                  workInProgress2.flags |= Visibility;
                }
              }
              if (!nextIsHidden || (workInProgress2.mode & ConcurrentMode) === NoMode) {
                bubbleProperties(workInProgress2);
              } else {
                if (includesSomeLane(subtreeRenderLanes, OffscreenLane)) {
                  bubbleProperties(workInProgress2);
                  {
                    if (workInProgress2.subtreeFlags & (Placement | Update)) {
                      workInProgress2.flags |= Visibility;
                    }
                  }
                }
              }
              return null;
            }
            case CacheComponent: {
              return null;
            }
            case TracingMarkerComponent: {
              return null;
            }
          }
          throw new Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
        }
        function unwindWork(current2, workInProgress2, renderLanes2) {
          popTreeContext(workInProgress2);
          switch (workInProgress2.tag) {
            case ClassComponent: {
              var Component2 = workInProgress2.type;
              if (isContextProvider(Component2)) {
                popContext(workInProgress2);
              }
              var flags = workInProgress2.flags;
              if (flags & ShouldCapture) {
                workInProgress2.flags = flags & ~ShouldCapture | DidCapture;
                if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                  transferActualDuration(workInProgress2);
                }
                return workInProgress2;
              }
              return null;
            }
            case HostRoot: {
              var root2 = workInProgress2.stateNode;
              popHostContainer(workInProgress2);
              popTopLevelContextObject(workInProgress2);
              resetWorkInProgressVersions();
              var _flags = workInProgress2.flags;
              if ((_flags & ShouldCapture) !== NoFlags && (_flags & DidCapture) === NoFlags) {
                workInProgress2.flags = _flags & ~ShouldCapture | DidCapture;
                return workInProgress2;
              }
              return null;
            }
            case HostComponent: {
              popHostContext(workInProgress2);
              return null;
            }
            case SuspenseComponent: {
              popSuspenseContext(workInProgress2);
              var suspenseState = workInProgress2.memoizedState;
              if (suspenseState !== null && suspenseState.dehydrated !== null) {
                if (workInProgress2.alternate === null) {
                  throw new Error("Threw in newly mounted dehydrated component. This is likely a bug in React. Please file an issue.");
                }
                resetHydrationState();
              }
              var _flags2 = workInProgress2.flags;
              if (_flags2 & ShouldCapture) {
                workInProgress2.flags = _flags2 & ~ShouldCapture | DidCapture;
                if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                  transferActualDuration(workInProgress2);
                }
                return workInProgress2;
              }
              return null;
            }
            case SuspenseListComponent: {
              popSuspenseContext(workInProgress2);
              return null;
            }
            case HostPortal:
              popHostContainer(workInProgress2);
              return null;
            case ContextProvider:
              var context = workInProgress2.type.Y;
              popProvider(context, workInProgress2);
              return null;
            case OffscreenComponent:
            case LegacyHiddenComponent:
              popRenderLanes(workInProgress2);
              return null;
            case CacheComponent:
              return null;
            default:
              return null;
          }
        }
        function unwindInterruptedWork(current2, interruptedWork, renderLanes2) {
          popTreeContext(interruptedWork);
          switch (interruptedWork.tag) {
            case ClassComponent: {
              var childContextTypes = interruptedWork.type.childContextTypes;
              if (childContextTypes !== null && childContextTypes !== void 0) {
                popContext(interruptedWork);
              }
              break;
            }
            case HostRoot: {
              var root2 = interruptedWork.stateNode;
              popHostContainer(interruptedWork);
              popTopLevelContextObject(interruptedWork);
              resetWorkInProgressVersions();
              break;
            }
            case HostComponent: {
              popHostContext(interruptedWork);
              break;
            }
            case HostPortal:
              popHostContainer(interruptedWork);
              break;
            case SuspenseComponent:
              popSuspenseContext(interruptedWork);
              break;
            case SuspenseListComponent:
              popSuspenseContext(interruptedWork);
              break;
            case ContextProvider:
              var context = interruptedWork.type.Y;
              popProvider(context, interruptedWork);
              break;
            case OffscreenComponent:
            case LegacyHiddenComponent:
              popRenderLanes(interruptedWork);
              break;
          }
        }
        var didWarnAboutUndefinedSnapshotBeforeUpdate = null;
        {
          didWarnAboutUndefinedSnapshotBeforeUpdate = /* @__PURE__ */ new Set();
        }
        var offscreenSubtreeIsHidden = false;
        var offscreenSubtreeWasHidden = false;
        var PossiblyWeakSet = typeof WeakSet === "function" ? WeakSet : Set;
        var nextEffect = null;
        var inProgressLanes = null;
        var inProgressRoot = null;
        function reportUncaughtErrorInDEV(error2) {
          {
            invokeGuardedCallback(null, function() {
              throw error2;
            });
            clearCaughtError();
          }
        }
        var callComponentWillUnmountWithTimer = function(current2, instance) {
          instance.props = current2.memoizedProps;
          instance.state = current2.memoizedState;
          if (current2.mode & ProfileMode) {
            try {
              startLayoutEffectTimer();
              instance.componentWillUnmount();
            } finally {
              recordLayoutEffectDuration(current2);
            }
          } else {
            instance.componentWillUnmount();
          }
        };
        function safelyCallCommitHookLayoutEffectListMount(current2, nearestMountedAncestor) {
          try {
            commitHookEffectListMount(Layout, current2);
          } catch (error2) {
            captureCommitPhaseError(current2, nearestMountedAncestor, error2);
          }
        }
        function safelyCallComponentWillUnmount(current2, nearestMountedAncestor, instance) {
          try {
            callComponentWillUnmountWithTimer(current2, instance);
          } catch (error2) {
            captureCommitPhaseError(current2, nearestMountedAncestor, error2);
          }
        }
        function safelyCallComponentDidMount(current2, nearestMountedAncestor, instance) {
          try {
            instance.componentDidMount();
          } catch (error2) {
            captureCommitPhaseError(current2, nearestMountedAncestor, error2);
          }
        }
        function safelyAttachRef(current2, nearestMountedAncestor) {
          try {
            commitAttachRef(current2);
          } catch (error2) {
            captureCommitPhaseError(current2, nearestMountedAncestor, error2);
          }
        }
        function safelyDetachRef(current2, nearestMountedAncestor) {
          var ref = current2.ref;
          if (ref !== null) {
            if (typeof ref === "function") {
              var retVal;
              try {
                if (enableProfilerTimer && enableProfilerCommitHooks && current2.mode & ProfileMode) {
                  try {
                    startLayoutEffectTimer();
                    retVal = ref(null);
                  } finally {
                    recordLayoutEffectDuration(current2);
                  }
                } else {
                  retVal = ref(null);
                }
              } catch (error2) {
                captureCommitPhaseError(current2, nearestMountedAncestor, error2);
              }
              {
                if (typeof retVal === "function") {
                  error("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", getComponentNameFromFiber(current2));
                }
              }
            } else {
              ref.current = null;
            }
          }
        }
        function safelyCallDestroy(current2, nearestMountedAncestor, destroy) {
          try {
            destroy();
          } catch (error2) {
            captureCommitPhaseError(current2, nearestMountedAncestor, error2);
          }
        }
        var focusedInstanceHandle = null;
        var shouldFireAfterActiveInstanceBlur = false;
        function commitBeforeMutationEffects(root2, firstChild) {
          focusedInstanceHandle = prepareForCommit(root2.containerInfo);
          nextEffect = firstChild;
          commitBeforeMutationEffects_begin();
          var shouldFire = shouldFireAfterActiveInstanceBlur;
          shouldFireAfterActiveInstanceBlur = false;
          focusedInstanceHandle = null;
          return shouldFire;
        }
        function commitBeforeMutationEffects_begin() {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            var child = fiber.child;
            if ((fiber.subtreeFlags & BeforeMutationMask) !== NoFlags && child !== null) {
              child.return = fiber;
              nextEffect = child;
            } else {
              commitBeforeMutationEffects_complete();
            }
          }
        }
        function commitBeforeMutationEffects_complete() {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            setCurrentFiber(fiber);
            try {
              commitBeforeMutationEffectsOnFiber(fiber);
            } catch (error2) {
              captureCommitPhaseError(fiber, fiber.return, error2);
            }
            resetCurrentFiber();
            var sibling = fiber.sibling;
            if (sibling !== null) {
              sibling.return = fiber.return;
              nextEffect = sibling;
              return;
            }
            nextEffect = fiber.return;
          }
        }
        function commitBeforeMutationEffectsOnFiber(finishedWork) {
          var current2 = finishedWork.alternate;
          var flags = finishedWork.flags;
          if ((flags & Snapshot) !== NoFlags) {
            setCurrentFiber(finishedWork);
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                break;
              }
              case ClassComponent: {
                if (current2 !== null) {
                  var prevProps = current2.memoizedProps;
                  var prevState = current2.memoizedState;
                  var instance = finishedWork.stateNode;
                  {
                    if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                      if (instance.props !== finishedWork.memoizedProps) {
                        error("Expected %s props to match memoized props before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                      }
                      if (instance.state !== finishedWork.memoizedState) {
                        error("Expected %s state to match memoized state before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                      }
                    }
                  }
                  var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);
                  {
                    var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;
                    if (snapshot === void 0 && !didWarnSet.has(finishedWork.type)) {
                      didWarnSet.add(finishedWork.type);
                      error("%s.getSnapshotBeforeUpdate(): A snapshot value (or null) must be returned. You have returned undefined.", getComponentNameFromFiber(finishedWork));
                    }
                  }
                  instance.Ij = snapshot;
                }
                break;
              }
              case HostRoot: {
                {
                  var root2 = finishedWork.stateNode;
                  clearContainer(root2.containerInfo);
                }
                break;
              }
              case HostComponent:
              case HostText:
              case HostPortal:
              case IncompleteClassComponent:
                break;
              default: {
                throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            resetCurrentFiber();
          }
        }
        function commitHookEffectListUnmount(flags, finishedWork, nearestMountedAncestor) {
          var updateQueue = finishedWork.updateQueue;
          var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
          if (lastEffect !== null) {
            var firstEffect = lastEffect.next;
            var effect = firstEffect;
            do {
              if ((effect.tag & flags) === flags) {
                var destroy = effect.destroy;
                effect.destroy = void 0;
                if (destroy !== void 0) {
                  {
                    if ((flags & Passive$1) !== NoFlags$1) {
                      markComponentPassiveEffectUnmountStarted(finishedWork);
                    } else if ((flags & Layout) !== NoFlags$1) {
                      markComponentLayoutEffectUnmountStarted(finishedWork);
                    }
                  }
                  {
                    if ((flags & Insertion) !== NoFlags$1) {
                      setIsRunningInsertionEffect(true);
                    }
                  }
                  safelyCallDestroy(finishedWork, nearestMountedAncestor, destroy);
                  {
                    if ((flags & Insertion) !== NoFlags$1) {
                      setIsRunningInsertionEffect(false);
                    }
                  }
                  {
                    if ((flags & Passive$1) !== NoFlags$1) {
                      markComponentPassiveEffectUnmountStopped();
                    } else if ((flags & Layout) !== NoFlags$1) {
                      markComponentLayoutEffectUnmountStopped();
                    }
                  }
                }
              }
              effect = effect.next;
            } while (effect !== firstEffect);
          }
        }
        function commitHookEffectListMount(flags, finishedWork) {
          var updateQueue = finishedWork.updateQueue;
          var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
          if (lastEffect !== null) {
            var firstEffect = lastEffect.next;
            var effect = firstEffect;
            do {
              if ((effect.tag & flags) === flags) {
                {
                  if ((flags & Passive$1) !== NoFlags$1) {
                    markComponentPassiveEffectMountStarted(finishedWork);
                  } else if ((flags & Layout) !== NoFlags$1) {
                    markComponentLayoutEffectMountStarted(finishedWork);
                  }
                }
                var create = effect.create;
                {
                  if ((flags & Insertion) !== NoFlags$1) {
                    setIsRunningInsertionEffect(true);
                  }
                }
                effect.destroy = create();
                {
                  if ((flags & Insertion) !== NoFlags$1) {
                    setIsRunningInsertionEffect(false);
                  }
                }
                {
                  if ((flags & Passive$1) !== NoFlags$1) {
                    markComponentPassiveEffectMountStopped();
                  } else if ((flags & Layout) !== NoFlags$1) {
                    markComponentLayoutEffectMountStopped();
                  }
                }
                {
                  var destroy = effect.destroy;
                  if (destroy !== void 0 && typeof destroy !== "function") {
                    var hookName = void 0;
                    if ((effect.tag & Layout) !== NoFlags) {
                      hookName = "useLayoutEffect";
                    } else if ((effect.tag & Insertion) !== NoFlags) {
                      hookName = "useInsertionEffect";
                    } else {
                      hookName = "useEffect";
                    }
                    var addendum = void 0;
                    if (destroy === null) {
                      addendum = " You returned null. If your effect does not require clean up, return undefined (or nothing).";
                    } else if (typeof destroy.then === "function") {
                      addendum = "\n\nIt looks like you wrote " + hookName + "(async () => ...) or returned a Promise. Instead, write the async function inside your effect and call it immediately:\n\n" + hookName + "(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching";
                    } else {
                      addendum = " You returned: " + destroy;
                    }
                    error("%s must not return anything besides a function, which is used for clean-up.%s", hookName, addendum);
                  }
                }
              }
              effect = effect.next;
            } while (effect !== firstEffect);
          }
        }
        function commitPassiveEffectDurations(finishedRoot, finishedWork) {
          {
            if ((finishedWork.flags & Update) !== NoFlags) {
              switch (finishedWork.tag) {
                case Profiler: {
                  var passiveEffectDuration = finishedWork.stateNode.passiveEffectDuration;
                  var _finishedWork$memoize = finishedWork.memoizedProps, id = _finishedWork$memoize.id, onPostCommit = _finishedWork$memoize.onPostCommit;
                  var commitTime2 = getCommitTime();
                  var phase = finishedWork.alternate === null ? "mount" : "update";
                  {
                    if (isCurrentUpdateNested()) {
                      phase = "nested-update";
                    }
                  }
                  if (typeof onPostCommit === "function") {
                    onPostCommit(id, phase, passiveEffectDuration, commitTime2);
                  }
                  var parentFiber = finishedWork.return;
                  outer:
                    while (parentFiber !== null) {
                      switch (parentFiber.tag) {
                        case HostRoot:
                          var root2 = parentFiber.stateNode;
                          root2.passiveEffectDuration += passiveEffectDuration;
                          break outer;
                        case Profiler:
                          var parentStateNode = parentFiber.stateNode;
                          parentStateNode.passiveEffectDuration += passiveEffectDuration;
                          break outer;
                      }
                      parentFiber = parentFiber.return;
                    }
                  break;
                }
              }
            }
          }
        }
        function commitLayoutEffectOnFiber(finishedRoot, current2, finishedWork, committedLanes) {
          if ((finishedWork.flags & LayoutMask) !== NoFlags) {
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                if (!offscreenSubtreeWasHidden) {
                  if (finishedWork.mode & ProfileMode) {
                    try {
                      startLayoutEffectTimer();
                      commitHookEffectListMount(Layout | HasEffect, finishedWork);
                    } finally {
                      recordLayoutEffectDuration(finishedWork);
                    }
                  } else {
                    commitHookEffectListMount(Layout | HasEffect, finishedWork);
                  }
                }
                break;
              }
              case ClassComponent: {
                var instance = finishedWork.stateNode;
                if (finishedWork.flags & Update) {
                  if (!offscreenSubtreeWasHidden) {
                    if (current2 === null) {
                      {
                        if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                          if (instance.props !== finishedWork.memoizedProps) {
                            error("Expected %s props to match memoized props before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                          }
                          if (instance.state !== finishedWork.memoizedState) {
                            error("Expected %s state to match memoized state before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                          }
                        }
                      }
                      if (finishedWork.mode & ProfileMode) {
                        try {
                          startLayoutEffectTimer();
                          instance.componentDidMount();
                        } finally {
                          recordLayoutEffectDuration(finishedWork);
                        }
                      } else {
                        instance.componentDidMount();
                      }
                    } else {
                      var prevProps = finishedWork.elementType === finishedWork.type ? current2.memoizedProps : resolveDefaultProps(finishedWork.type, current2.memoizedProps);
                      var prevState = current2.memoizedState;
                      {
                        if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                          if (instance.props !== finishedWork.memoizedProps) {
                            error("Expected %s props to match memoized props before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                          }
                          if (instance.state !== finishedWork.memoizedState) {
                            error("Expected %s state to match memoized state before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                          }
                        }
                      }
                      if (finishedWork.mode & ProfileMode) {
                        try {
                          startLayoutEffectTimer();
                          instance.componentDidUpdate(prevProps, prevState, instance.Ij);
                        } finally {
                          recordLayoutEffectDuration(finishedWork);
                        }
                      } else {
                        instance.componentDidUpdate(prevProps, prevState, instance.Ij);
                      }
                    }
                  }
                }
                var updateQueue = finishedWork.updateQueue;
                if (updateQueue !== null) {
                  {
                    if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                      if (instance.props !== finishedWork.memoizedProps) {
                        error("Expected %s props to match memoized props before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                      }
                      if (instance.state !== finishedWork.memoizedState) {
                        error("Expected %s state to match memoized state before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                      }
                    }
                  }
                  commitUpdateQueue(finishedWork, updateQueue, instance);
                }
                break;
              }
              case HostRoot: {
                var _updateQueue = finishedWork.updateQueue;
                if (_updateQueue !== null) {
                  var _instance = null;
                  if (finishedWork.child !== null) {
                    switch (finishedWork.child.tag) {
                      case HostComponent:
                        _instance = getPublicInstance(finishedWork.child.stateNode);
                        break;
                      case ClassComponent:
                        _instance = finishedWork.child.stateNode;
                        break;
                    }
                  }
                  commitUpdateQueue(finishedWork, _updateQueue, _instance);
                }
                break;
              }
              case HostComponent: {
                var _instance2 = finishedWork.stateNode;
                if (current2 === null && finishedWork.flags & Update) {
                  var type = finishedWork.type;
                  var props = finishedWork.memoizedProps;
                  commitMount(_instance2, type, props);
                }
                break;
              }
              case HostText: {
                break;
              }
              case HostPortal: {
                break;
              }
              case Profiler: {
                {
                  var _finishedWork$memoize2 = finishedWork.memoizedProps, onCommit = _finishedWork$memoize2.onCommit, onRender = _finishedWork$memoize2.onRender;
                  var effectDuration = finishedWork.stateNode.effectDuration;
                  var commitTime2 = getCommitTime();
                  var phase = current2 === null ? "mount" : "update";
                  {
                    if (isCurrentUpdateNested()) {
                      phase = "nested-update";
                    }
                  }
                  if (typeof onRender === "function") {
                    onRender(finishedWork.memoizedProps.id, phase, finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, commitTime2);
                  }
                  {
                    if (typeof onCommit === "function") {
                      onCommit(finishedWork.memoizedProps.id, phase, effectDuration, commitTime2);
                    }
                    enqueuePendingPassiveProfilerEffect(finishedWork);
                    var parentFiber = finishedWork.return;
                    outer:
                      while (parentFiber !== null) {
                        switch (parentFiber.tag) {
                          case HostRoot:
                            var root2 = parentFiber.stateNode;
                            root2.effectDuration += effectDuration;
                            break outer;
                          case Profiler:
                            var parentStateNode = parentFiber.stateNode;
                            parentStateNode.effectDuration += effectDuration;
                            break outer;
                        }
                        parentFiber = parentFiber.return;
                      }
                  }
                }
                break;
              }
              case SuspenseComponent: {
                commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
                break;
              }
              case SuspenseListComponent:
              case IncompleteClassComponent:
              case ScopeComponent:
              case OffscreenComponent:
              case LegacyHiddenComponent:
              case TracingMarkerComponent: {
                break;
              }
              default:
                throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          if (!offscreenSubtreeWasHidden) {
            {
              if (finishedWork.flags & Ref) {
                commitAttachRef(finishedWork);
              }
            }
          }
        }
        function reappearLayoutEffectsOnFiber(node) {
          switch (node.tag) {
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent: {
              if (node.mode & ProfileMode) {
                try {
                  startLayoutEffectTimer();
                  safelyCallCommitHookLayoutEffectListMount(node, node.return);
                } finally {
                  recordLayoutEffectDuration(node);
                }
              } else {
                safelyCallCommitHookLayoutEffectListMount(node, node.return);
              }
              break;
            }
            case ClassComponent: {
              var instance = node.stateNode;
              if (typeof instance.componentDidMount === "function") {
                safelyCallComponentDidMount(node, node.return, instance);
              }
              safelyAttachRef(node, node.return);
              break;
            }
            case HostComponent: {
              safelyAttachRef(node, node.return);
              break;
            }
          }
        }
        function hideOrUnhideAllChildren(finishedWork, isHidden) {
          var hostSubtreeRoot = null;
          {
            var node = finishedWork;
            while (true) {
              if (node.tag === HostComponent) {
                if (hostSubtreeRoot === null) {
                  hostSubtreeRoot = node;
                  try {
                    var instance = node.stateNode;
                    if (isHidden) {
                      hideInstance(instance);
                    } else {
                      unhideInstance(node.stateNode, node.memoizedProps);
                    }
                  } catch (error2) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                  }
                }
              } else if (node.tag === HostText) {
                if (hostSubtreeRoot === null) {
                  try {
                    var _instance3 = node.stateNode;
                    if (isHidden) {
                      hideTextInstance(_instance3);
                    } else {
                      unhideTextInstance(_instance3, node.memoizedProps);
                    }
                  } catch (error2) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                  }
                }
              } else if ((node.tag === OffscreenComponent || node.tag === LegacyHiddenComponent) && node.memoizedState !== null && node !== finishedWork)
                ;
              else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === finishedWork) {
                return;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === finishedWork) {
                  return;
                }
                if (hostSubtreeRoot === node) {
                  hostSubtreeRoot = null;
                }
                node = node.return;
              }
              if (hostSubtreeRoot === node) {
                hostSubtreeRoot = null;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
          }
        }
        function commitAttachRef(finishedWork) {
          var ref = finishedWork.ref;
          if (ref !== null) {
            var instance = finishedWork.stateNode;
            var instanceToUse;
            switch (finishedWork.tag) {
              case HostComponent:
                instanceToUse = getPublicInstance(instance);
                break;
              default:
                instanceToUse = instance;
            }
            if (typeof ref === "function") {
              var retVal;
              if (finishedWork.mode & ProfileMode) {
                try {
                  startLayoutEffectTimer();
                  retVal = ref(instanceToUse);
                } finally {
                  recordLayoutEffectDuration(finishedWork);
                }
              } else {
                retVal = ref(instanceToUse);
              }
              {
                if (typeof retVal === "function") {
                  error("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", getComponentNameFromFiber(finishedWork));
                }
              }
            } else {
              {
                if (!ref.hasOwnProperty("current")) {
                  error("Unexpected ref object provided for %s. Use either a ref-setter function or React.createRef().", getComponentNameFromFiber(finishedWork));
                }
              }
              ref.current = instanceToUse;
            }
          }
        }
        function detachFiberMutation(fiber) {
          var alternate = fiber.alternate;
          if (alternate !== null) {
            alternate.return = null;
          }
          fiber.return = null;
        }
        function detachFiberAfterEffects(fiber) {
          var alternate = fiber.alternate;
          if (alternate !== null) {
            fiber.alternate = null;
            detachFiberAfterEffects(alternate);
          }
          {
            fiber.child = null;
            fiber.deletions = null;
            fiber.sibling = null;
            if (fiber.tag === HostComponent) {
              var hostInstance = fiber.stateNode;
              if (hostInstance !== null) {
                detachDeletedInstance(hostInstance);
              }
            }
            fiber.stateNode = null;
            {
              fiber.qa = null;
            }
            {
              fiber.return = null;
              fiber.dependencies = null;
              fiber.memoizedProps = null;
              fiber.memoizedState = null;
              fiber.pendingProps = null;
              fiber.stateNode = null;
              fiber.updateQueue = null;
            }
          }
        }
        function getHostParentFiber(fiber) {
          var parent = fiber.return;
          while (parent !== null) {
            if (isHostParent(parent)) {
              return parent;
            }
            parent = parent.return;
          }
          throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
        }
        function isHostParent(fiber) {
          return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
        }
        function getHostSibling(fiber) {
          var node = fiber;
          siblings:
            while (true) {
              while (node.sibling === null) {
                if (node.return === null || isHostParent(node.return)) {
                  return null;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
              while (node.tag !== HostComponent && node.tag !== HostText && node.tag !== DehydratedFragment) {
                if (node.flags & Placement) {
                  continue siblings;
                }
                if (node.child === null || node.tag === HostPortal) {
                  continue siblings;
                } else {
                  node.child.return = node;
                  node = node.child;
                }
              }
              if (!(node.flags & Placement)) {
                return node.stateNode;
              }
            }
        }
        function commitPlacement(finishedWork) {
          var parentFiber = getHostParentFiber(finishedWork);
          switch (parentFiber.tag) {
            case HostComponent: {
              var parent = parentFiber.stateNode;
              if (parentFiber.flags & ContentReset) {
                resetTextContent(parent);
                parentFiber.flags &= ~ContentReset;
              }
              var before = getHostSibling(finishedWork);
              insertOrAppendPlacementNode(finishedWork, before, parent);
              break;
            }
            case HostRoot:
            case HostPortal: {
              var _parent = parentFiber.stateNode.containerInfo;
              var _before = getHostSibling(finishedWork);
              insertOrAppendPlacementNodeIntoContainer(finishedWork, _before, _parent);
              break;
            }
            default:
              throw new Error("Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.");
          }
        }
        function insertOrAppendPlacementNodeIntoContainer(node, before, parent) {
          var tag = node.tag;
          var isHost = tag === HostComponent || tag === HostText;
          if (isHost) {
            var stateNode = node.stateNode;
            if (before) {
              insertInContainerBefore(parent, stateNode, before);
            } else {
              appendChildToContainer(parent, stateNode);
            }
          } else if (tag === HostPortal)
            ;
          else {
            var child = node.child;
            if (child !== null) {
              insertOrAppendPlacementNodeIntoContainer(child, before, parent);
              var sibling = child.sibling;
              while (sibling !== null) {
                insertOrAppendPlacementNodeIntoContainer(sibling, before, parent);
                sibling = sibling.sibling;
              }
            }
          }
        }
        function insertOrAppendPlacementNode(node, before, parent) {
          var tag = node.tag;
          var isHost = tag === HostComponent || tag === HostText;
          if (isHost) {
            var stateNode = node.stateNode;
            if (before) {
              insertBefore(parent, stateNode, before);
            } else {
              appendChild(parent, stateNode);
            }
          } else if (tag === HostPortal)
            ;
          else {
            var child = node.child;
            if (child !== null) {
              insertOrAppendPlacementNode(child, before, parent);
              var sibling = child.sibling;
              while (sibling !== null) {
                insertOrAppendPlacementNode(sibling, before, parent);
                sibling = sibling.sibling;
              }
            }
          }
        }
        var hostParent = null;
        var hostParentIsContainer = false;
        function commitDeletionEffects(root2, returnFiber, deletedFiber) {
          {
            var parent = returnFiber;
            findParent:
              while (parent !== null) {
                switch (parent.tag) {
                  case HostComponent: {
                    hostParent = parent.stateNode;
                    hostParentIsContainer = false;
                    break findParent;
                  }
                  case HostRoot: {
                    hostParent = parent.stateNode.containerInfo;
                    hostParentIsContainer = true;
                    break findParent;
                  }
                  case HostPortal: {
                    hostParent = parent.stateNode.containerInfo;
                    hostParentIsContainer = true;
                    break findParent;
                  }
                }
                parent = parent.return;
              }
            if (hostParent === null) {
              throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
            }
            commitDeletionEffectsOnFiber(root2, returnFiber, deletedFiber);
            hostParent = null;
            hostParentIsContainer = false;
          }
          detachFiberMutation(deletedFiber);
        }
        function recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, parent) {
          var child = parent.child;
          while (child !== null) {
            commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, child);
            child = child.sibling;
          }
        }
        function commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, deletedFiber) {
          onCommitUnmount(deletedFiber);
          switch (deletedFiber.tag) {
            case HostComponent: {
              if (!offscreenSubtreeWasHidden) {
                safelyDetachRef(deletedFiber, nearestMountedAncestor);
              }
            }
            case HostText: {
              {
                var prevHostParent = hostParent;
                var prevHostParentIsContainer = hostParentIsContainer;
                hostParent = null;
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                hostParent = prevHostParent;
                hostParentIsContainer = prevHostParentIsContainer;
                if (hostParent !== null) {
                  if (hostParentIsContainer) {
                    removeChildFromContainer(hostParent, deletedFiber.stateNode);
                  } else {
                    removeChild(hostParent, deletedFiber.stateNode);
                  }
                }
              }
              return;
            }
            case DehydratedFragment: {
              {
                if (hostParent !== null) {
                  if (hostParentIsContainer) {
                    clearSuspenseBoundaryFromContainer(hostParent, deletedFiber.stateNode);
                  } else {
                    clearSuspenseBoundary(hostParent, deletedFiber.stateNode);
                  }
                }
              }
              return;
            }
            case HostPortal: {
              {
                var _prevHostParent = hostParent;
                var _prevHostParentIsContainer = hostParentIsContainer;
                hostParent = deletedFiber.stateNode.containerInfo;
                hostParentIsContainer = true;
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                hostParent = _prevHostParent;
                hostParentIsContainer = _prevHostParentIsContainer;
              }
              return;
            }
            case FunctionComponent:
            case ForwardRef:
            case MemoComponent:
            case SimpleMemoComponent: {
              if (!offscreenSubtreeWasHidden) {
                var updateQueue = deletedFiber.updateQueue;
                if (updateQueue !== null) {
                  var lastEffect = updateQueue.lastEffect;
                  if (lastEffect !== null) {
                    var firstEffect = lastEffect.next;
                    var effect = firstEffect;
                    do {
                      var _effect = effect, destroy = _effect.destroy, tag = _effect.tag;
                      if (destroy !== void 0) {
                        if ((tag & Insertion) !== NoFlags$1) {
                          safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                        } else if ((tag & Layout) !== NoFlags$1) {
                          {
                            markComponentLayoutEffectUnmountStarted(deletedFiber);
                          }
                          if (deletedFiber.mode & ProfileMode) {
                            startLayoutEffectTimer();
                            safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                            recordLayoutEffectDuration(deletedFiber);
                          } else {
                            safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                          }
                          {
                            markComponentLayoutEffectUnmountStopped();
                          }
                        }
                      }
                      effect = effect.next;
                    } while (effect !== firstEffect);
                  }
                }
              }
              recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
              return;
            }
            case ClassComponent: {
              if (!offscreenSubtreeWasHidden) {
                safelyDetachRef(deletedFiber, nearestMountedAncestor);
                var instance = deletedFiber.stateNode;
                if (typeof instance.componentWillUnmount === "function") {
                  safelyCallComponentWillUnmount(deletedFiber, nearestMountedAncestor, instance);
                }
              }
              recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
              return;
            }
            case ScopeComponent: {
              recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
              return;
            }
            case OffscreenComponent: {
              if (
                // TODO: Remove this dead flag
                deletedFiber.mode & ConcurrentMode
              ) {
                var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || deletedFiber.memoizedState !== null;
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
              } else {
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
              }
              break;
            }
            default: {
              recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
              return;
            }
          }
        }
        function commitSuspenseCallback(finishedWork) {
          var newState = finishedWork.memoizedState;
        }
        function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {
          var newState = finishedWork.memoizedState;
          if (newState === null) {
            var current2 = finishedWork.alternate;
            if (current2 !== null) {
              var prevState = current2.memoizedState;
              if (prevState !== null) {
                var suspenseInstance = prevState.dehydrated;
                if (suspenseInstance !== null) {
                  commitHydratedSuspenseInstance(suspenseInstance);
                }
              }
            }
          }
        }
        function attachSuspenseRetryListeners(finishedWork) {
          var wakeables = finishedWork.updateQueue;
          if (wakeables !== null) {
            finishedWork.updateQueue = null;
            var retryCache = finishedWork.stateNode;
            if (retryCache === null) {
              retryCache = finishedWork.stateNode = new PossiblyWeakSet();
            }
            wakeables.forEach(function(wakeable) {
              var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);
              if (!retryCache.has(wakeable)) {
                retryCache.add(wakeable);
                {
                  if (isDevToolsPresent) {
                    if (inProgressLanes !== null && inProgressRoot !== null) {
                      restorePendingUpdaters(inProgressRoot, inProgressLanes);
                    } else {
                      throw Error("Expected finished root and lanes to be set. This is a bug in React.");
                    }
                  }
                }
                wakeable.then(retry, retry);
              }
            });
          }
        }
        function commitMutationEffects(root2, finishedWork, committedLanes) {
          inProgressLanes = committedLanes;
          inProgressRoot = root2;
          setCurrentFiber(finishedWork);
          commitMutationEffectsOnFiber(finishedWork, root2);
          setCurrentFiber(finishedWork);
          inProgressLanes = null;
          inProgressRoot = null;
        }
        function recursivelyTraverseMutationEffects(root2, parentFiber, lanes) {
          var deletions = parentFiber.deletions;
          if (deletions !== null) {
            for (var i = 0; i < deletions.length; i++) {
              var childToDelete = deletions[i];
              try {
                commitDeletionEffects(root2, parentFiber, childToDelete);
              } catch (error2) {
                captureCommitPhaseError(childToDelete, parentFiber, error2);
              }
            }
          }
          var prevDebugFiber = getCurrentFiber();
          if (parentFiber.subtreeFlags & MutationMask) {
            var child = parentFiber.child;
            while (child !== null) {
              setCurrentFiber(child);
              commitMutationEffectsOnFiber(child, root2);
              child = child.sibling;
            }
          }
          setCurrentFiber(prevDebugFiber);
        }
        function commitMutationEffectsOnFiber(finishedWork, root2, lanes) {
          var current2 = finishedWork.alternate;
          var flags = finishedWork.flags;
          switch (finishedWork.tag) {
            case FunctionComponent:
            case ForwardRef:
            case MemoComponent:
            case SimpleMemoComponent: {
              recursivelyTraverseMutationEffects(root2, finishedWork);
              commitReconciliationEffects(finishedWork);
              if (flags & Update) {
                try {
                  commitHookEffectListUnmount(Insertion | HasEffect, finishedWork, finishedWork.return);
                  commitHookEffectListMount(Insertion | HasEffect, finishedWork);
                } catch (error2) {
                  captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                }
                if (finishedWork.mode & ProfileMode) {
                  try {
                    startLayoutEffectTimer();
                    commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);
                  } catch (error2) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                  }
                  recordLayoutEffectDuration(finishedWork);
                } else {
                  try {
                    commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);
                  } catch (error2) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                  }
                }
              }
              return;
            }
            case ClassComponent: {
              recursivelyTraverseMutationEffects(root2, finishedWork);
              commitReconciliationEffects(finishedWork);
              if (flags & Ref) {
                if (current2 !== null) {
                  safelyDetachRef(current2, current2.return);
                }
              }
              return;
            }
            case HostComponent: {
              recursivelyTraverseMutationEffects(root2, finishedWork);
              commitReconciliationEffects(finishedWork);
              if (flags & Ref) {
                if (current2 !== null) {
                  safelyDetachRef(current2, current2.return);
                }
              }
              {
                if (finishedWork.flags & ContentReset) {
                  var instance = finishedWork.stateNode;
                  try {
                    resetTextContent(instance);
                  } catch (error2) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                  }
                }
                if (flags & Update) {
                  var _instance4 = finishedWork.stateNode;
                  if (_instance4 != null) {
                    var newProps = finishedWork.memoizedProps;
                    var oldProps = current2 !== null ? current2.memoizedProps : newProps;
                    var type = finishedWork.type;
                    var updatePayload = finishedWork.updateQueue;
                    finishedWork.updateQueue = null;
                    if (updatePayload !== null) {
                      try {
                        commitUpdate(_instance4, updatePayload, type, oldProps, newProps, finishedWork);
                      } catch (error2) {
                        captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                      }
                    }
                  }
                }
              }
              return;
            }
            case HostText: {
              recursivelyTraverseMutationEffects(root2, finishedWork);
              commitReconciliationEffects(finishedWork);
              if (flags & Update) {
                {
                  if (finishedWork.stateNode === null) {
                    throw new Error("This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.");
                  }
                  var textInstance = finishedWork.stateNode;
                  var newText = finishedWork.memoizedProps;
                  var oldText = current2 !== null ? current2.memoizedProps : newText;
                  try {
                    commitTextUpdate(textInstance, oldText, newText);
                  } catch (error2) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                  }
                }
              }
              return;
            }
            case HostRoot: {
              recursivelyTraverseMutationEffects(root2, finishedWork);
              commitReconciliationEffects(finishedWork);
              if (flags & Update) {
                {
                  if (current2 !== null) {
                    var prevRootState = current2.memoizedState;
                    if (prevRootState.isDehydrated) {
                      try {
                        commitHydratedContainer(root2.containerInfo);
                      } catch (error2) {
                        captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                      }
                    }
                  }
                }
              }
              return;
            }
            case HostPortal: {
              recursivelyTraverseMutationEffects(root2, finishedWork);
              commitReconciliationEffects(finishedWork);
              return;
            }
            case SuspenseComponent: {
              recursivelyTraverseMutationEffects(root2, finishedWork);
              commitReconciliationEffects(finishedWork);
              var offscreenFiber = finishedWork.child;
              if (offscreenFiber.flags & Visibility) {
                var offscreenInstance = offscreenFiber.stateNode;
                var newState = offscreenFiber.memoizedState;
                var isHidden = newState !== null;
                offscreenInstance.isHidden = isHidden;
                if (isHidden) {
                  var wasHidden = offscreenFiber.alternate !== null && offscreenFiber.alternate.memoizedState !== null;
                  if (!wasHidden) {
                    markCommitTimeOfFallback();
                  }
                }
              }
              if (flags & Update) {
                try {
                  commitSuspenseCallback(finishedWork);
                } catch (error2) {
                  captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                }
                attachSuspenseRetryListeners(finishedWork);
              }
              return;
            }
            case OffscreenComponent: {
              var _wasHidden = current2 !== null && current2.memoizedState !== null;
              if (
                // TODO: Remove this dead flag
                finishedWork.mode & ConcurrentMode
              ) {
                var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || _wasHidden;
                recursivelyTraverseMutationEffects(root2, finishedWork);
                offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
              } else {
                recursivelyTraverseMutationEffects(root2, finishedWork);
              }
              commitReconciliationEffects(finishedWork);
              if (flags & Visibility) {
                var _offscreenInstance = finishedWork.stateNode;
                var _newState = finishedWork.memoizedState;
                var _isHidden = _newState !== null;
                var offscreenBoundary = finishedWork;
                _offscreenInstance.isHidden = _isHidden;
                {
                  if (_isHidden) {
                    if (!_wasHidden) {
                      if ((offscreenBoundary.mode & ConcurrentMode) !== NoMode) {
                        nextEffect = offscreenBoundary;
                        var offscreenChild = offscreenBoundary.child;
                        while (offscreenChild !== null) {
                          nextEffect = offscreenChild;
                          disappearLayoutEffects_begin(offscreenChild);
                          offscreenChild = offscreenChild.sibling;
                        }
                      }
                    }
                  }
                }
                {
                  hideOrUnhideAllChildren(offscreenBoundary, _isHidden);
                }
              }
              return;
            }
            case SuspenseListComponent: {
              recursivelyTraverseMutationEffects(root2, finishedWork);
              commitReconciliationEffects(finishedWork);
              if (flags & Update) {
                attachSuspenseRetryListeners(finishedWork);
              }
              return;
            }
            case ScopeComponent: {
              return;
            }
            default: {
              recursivelyTraverseMutationEffects(root2, finishedWork);
              commitReconciliationEffects(finishedWork);
              return;
            }
          }
        }
        function commitReconciliationEffects(finishedWork) {
          var flags = finishedWork.flags;
          if (flags & Placement) {
            try {
              commitPlacement(finishedWork);
            } catch (error2) {
              captureCommitPhaseError(finishedWork, finishedWork.return, error2);
            }
            finishedWork.flags &= ~Placement;
          }
          if (flags & Hydrating) {
            finishedWork.flags &= ~Hydrating;
          }
        }
        function commitLayoutEffects(finishedWork, root2, committedLanes) {
          inProgressLanes = committedLanes;
          inProgressRoot = root2;
          nextEffect = finishedWork;
          commitLayoutEffects_begin(finishedWork, root2, committedLanes);
          inProgressLanes = null;
          inProgressRoot = null;
        }
        function commitLayoutEffects_begin(subtreeRoot, root2, committedLanes) {
          var isModernRoot = (subtreeRoot.mode & ConcurrentMode) !== NoMode;
          while (nextEffect !== null) {
            var fiber = nextEffect;
            var firstChild = fiber.child;
            if (fiber.tag === OffscreenComponent && isModernRoot) {
              var isHidden = fiber.memoizedState !== null;
              var newOffscreenSubtreeIsHidden = isHidden || offscreenSubtreeIsHidden;
              if (newOffscreenSubtreeIsHidden) {
                commitLayoutMountEffects_complete(subtreeRoot, root2, committedLanes);
                continue;
              } else {
                var current2 = fiber.alternate;
                var wasHidden = current2 !== null && current2.memoizedState !== null;
                var newOffscreenSubtreeWasHidden = wasHidden || offscreenSubtreeWasHidden;
                var prevOffscreenSubtreeIsHidden = offscreenSubtreeIsHidden;
                var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                offscreenSubtreeIsHidden = newOffscreenSubtreeIsHidden;
                offscreenSubtreeWasHidden = newOffscreenSubtreeWasHidden;
                if (offscreenSubtreeWasHidden && !prevOffscreenSubtreeWasHidden) {
                  nextEffect = fiber;
                  reappearLayoutEffects_begin(fiber);
                }
                var child = firstChild;
                while (child !== null) {
                  nextEffect = child;
                  commitLayoutEffects_begin(
                    child,
                    // New root; bubble back up to here and stop.
                    root2,
                    committedLanes
                  );
                  child = child.sibling;
                }
                nextEffect = fiber;
                offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden;
                offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                commitLayoutMountEffects_complete(subtreeRoot, root2, committedLanes);
                continue;
              }
            }
            if ((fiber.subtreeFlags & LayoutMask) !== NoFlags && firstChild !== null) {
              firstChild.return = fiber;
              nextEffect = firstChild;
            } else {
              commitLayoutMountEffects_complete(subtreeRoot, root2, committedLanes);
            }
          }
        }
        function commitLayoutMountEffects_complete(subtreeRoot, root2, committedLanes) {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            if ((fiber.flags & LayoutMask) !== NoFlags) {
              var current2 = fiber.alternate;
              setCurrentFiber(fiber);
              try {
                commitLayoutEffectOnFiber(root2, current2, fiber, committedLanes);
              } catch (error2) {
                captureCommitPhaseError(fiber, fiber.return, error2);
              }
              resetCurrentFiber();
            }
            if (fiber === subtreeRoot) {
              nextEffect = null;
              return;
            }
            var sibling = fiber.sibling;
            if (sibling !== null) {
              sibling.return = fiber.return;
              nextEffect = sibling;
              return;
            }
            nextEffect = fiber.return;
          }
        }
        function disappearLayoutEffects_begin(subtreeRoot) {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            var firstChild = fiber.child;
            switch (fiber.tag) {
              case FunctionComponent:
              case ForwardRef:
              case MemoComponent:
              case SimpleMemoComponent: {
                if (fiber.mode & ProfileMode) {
                  try {
                    startLayoutEffectTimer();
                    commitHookEffectListUnmount(Layout, fiber, fiber.return);
                  } finally {
                    recordLayoutEffectDuration(fiber);
                  }
                } else {
                  commitHookEffectListUnmount(Layout, fiber, fiber.return);
                }
                break;
              }
              case ClassComponent: {
                safelyDetachRef(fiber, fiber.return);
                var instance = fiber.stateNode;
                if (typeof instance.componentWillUnmount === "function") {
                  safelyCallComponentWillUnmount(fiber, fiber.return, instance);
                }
                break;
              }
              case HostComponent: {
                safelyDetachRef(fiber, fiber.return);
                break;
              }
              case OffscreenComponent: {
                var isHidden = fiber.memoizedState !== null;
                if (isHidden) {
                  disappearLayoutEffects_complete(subtreeRoot);
                  continue;
                }
                break;
              }
            }
            if (firstChild !== null) {
              firstChild.return = fiber;
              nextEffect = firstChild;
            } else {
              disappearLayoutEffects_complete(subtreeRoot);
            }
          }
        }
        function disappearLayoutEffects_complete(subtreeRoot) {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            if (fiber === subtreeRoot) {
              nextEffect = null;
              return;
            }
            var sibling = fiber.sibling;
            if (sibling !== null) {
              sibling.return = fiber.return;
              nextEffect = sibling;
              return;
            }
            nextEffect = fiber.return;
          }
        }
        function reappearLayoutEffects_begin(subtreeRoot) {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            var firstChild = fiber.child;
            if (fiber.tag === OffscreenComponent) {
              var isHidden = fiber.memoizedState !== null;
              if (isHidden) {
                reappearLayoutEffects_complete(subtreeRoot);
                continue;
              }
            }
            if (firstChild !== null) {
              firstChild.return = fiber;
              nextEffect = firstChild;
            } else {
              reappearLayoutEffects_complete(subtreeRoot);
            }
          }
        }
        function reappearLayoutEffects_complete(subtreeRoot) {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            setCurrentFiber(fiber);
            try {
              reappearLayoutEffectsOnFiber(fiber);
            } catch (error2) {
              captureCommitPhaseError(fiber, fiber.return, error2);
            }
            resetCurrentFiber();
            if (fiber === subtreeRoot) {
              nextEffect = null;
              return;
            }
            var sibling = fiber.sibling;
            if (sibling !== null) {
              sibling.return = fiber.return;
              nextEffect = sibling;
              return;
            }
            nextEffect = fiber.return;
          }
        }
        function commitPassiveMountEffects(root2, finishedWork, committedLanes, committedTransitions) {
          nextEffect = finishedWork;
          commitPassiveMountEffects_begin(finishedWork, root2, committedLanes, committedTransitions);
        }
        function commitPassiveMountEffects_begin(subtreeRoot, root2, committedLanes, committedTransitions) {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            var firstChild = fiber.child;
            if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && firstChild !== null) {
              firstChild.return = fiber;
              nextEffect = firstChild;
            } else {
              commitPassiveMountEffects_complete(subtreeRoot, root2, committedLanes, committedTransitions);
            }
          }
        }
        function commitPassiveMountEffects_complete(subtreeRoot, root2, committedLanes, committedTransitions) {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            if ((fiber.flags & Passive) !== NoFlags) {
              setCurrentFiber(fiber);
              try {
                commitPassiveMountOnFiber(root2, fiber, committedLanes, committedTransitions);
              } catch (error2) {
                captureCommitPhaseError(fiber, fiber.return, error2);
              }
              resetCurrentFiber();
            }
            if (fiber === subtreeRoot) {
              nextEffect = null;
              return;
            }
            var sibling = fiber.sibling;
            if (sibling !== null) {
              sibling.return = fiber.return;
              nextEffect = sibling;
              return;
            }
            nextEffect = fiber.return;
          }
        }
        function commitPassiveMountOnFiber(finishedRoot, finishedWork, committedLanes, committedTransitions) {
          switch (finishedWork.tag) {
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent: {
              if (finishedWork.mode & ProfileMode) {
                startPassiveEffectTimer();
                try {
                  commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
                } finally {
                  recordPassiveEffectDuration(finishedWork);
                }
              } else {
                commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
              }
              break;
            }
          }
        }
        function commitPassiveUnmountEffects(firstChild) {
          nextEffect = firstChild;
          commitPassiveUnmountEffects_begin();
        }
        function commitPassiveUnmountEffects_begin() {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            var child = fiber.child;
            if ((nextEffect.flags & ChildDeletion) !== NoFlags) {
              var deletions = fiber.deletions;
              if (deletions !== null) {
                for (var i = 0; i < deletions.length; i++) {
                  var fiberToDelete = deletions[i];
                  nextEffect = fiberToDelete;
                  commitPassiveUnmountEffectsInsideOfDeletedTree_begin(fiberToDelete, fiber);
                }
                {
                  var previousFiber = fiber.alternate;
                  if (previousFiber !== null) {
                    var detachedChild = previousFiber.child;
                    if (detachedChild !== null) {
                      previousFiber.child = null;
                      do {
                        var detachedSibling = detachedChild.sibling;
                        detachedChild.sibling = null;
                        detachedChild = detachedSibling;
                      } while (detachedChild !== null);
                    }
                  }
                }
                nextEffect = fiber;
              }
            }
            if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && child !== null) {
              child.return = fiber;
              nextEffect = child;
            } else {
              commitPassiveUnmountEffects_complete();
            }
          }
        }
        function commitPassiveUnmountEffects_complete() {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            if ((fiber.flags & Passive) !== NoFlags) {
              setCurrentFiber(fiber);
              commitPassiveUnmountOnFiber(fiber);
              resetCurrentFiber();
            }
            var sibling = fiber.sibling;
            if (sibling !== null) {
              sibling.return = fiber.return;
              nextEffect = sibling;
              return;
            }
            nextEffect = fiber.return;
          }
        }
        function commitPassiveUnmountOnFiber(finishedWork) {
          switch (finishedWork.tag) {
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent: {
              if (finishedWork.mode & ProfileMode) {
                startPassiveEffectTimer();
                commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
                recordPassiveEffectDuration(finishedWork);
              } else {
                commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
              }
              break;
            }
          }
        }
        function commitPassiveUnmountEffectsInsideOfDeletedTree_begin(deletedSubtreeRoot, nearestMountedAncestor) {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            setCurrentFiber(fiber);
            commitPassiveUnmountInsideDeletedTreeOnFiber(fiber, nearestMountedAncestor);
            resetCurrentFiber();
            var child = fiber.child;
            if (child !== null) {
              child.return = fiber;
              nextEffect = child;
            } else {
              commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot);
            }
          }
        }
        function commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot) {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            var sibling = fiber.sibling;
            var returnFiber = fiber.return;
            {
              detachFiberAfterEffects(fiber);
              if (fiber === deletedSubtreeRoot) {
                nextEffect = null;
                return;
              }
            }
            if (sibling !== null) {
              sibling.return = returnFiber;
              nextEffect = sibling;
              return;
            }
            nextEffect = returnFiber;
          }
        }
        function commitPassiveUnmountInsideDeletedTreeOnFiber(current2, nearestMountedAncestor) {
          switch (current2.tag) {
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent: {
              if (current2.mode & ProfileMode) {
                startPassiveEffectTimer();
                commitHookEffectListUnmount(Passive$1, current2, nearestMountedAncestor);
                recordPassiveEffectDuration(current2);
              } else {
                commitHookEffectListUnmount(Passive$1, current2, nearestMountedAncestor);
              }
              break;
            }
          }
        }
        function invokeLayoutEffectMountInDEV(fiber) {
          {
            switch (fiber.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                try {
                  commitHookEffectListMount(Layout | HasEffect, fiber);
                } catch (error2) {
                  captureCommitPhaseError(fiber, fiber.return, error2);
                }
                break;
              }
              case ClassComponent: {
                var instance = fiber.stateNode;
                try {
                  instance.componentDidMount();
                } catch (error2) {
                  captureCommitPhaseError(fiber, fiber.return, error2);
                }
                break;
              }
            }
          }
        }
        function invokePassiveEffectMountInDEV(fiber) {
          {
            switch (fiber.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                try {
                  commitHookEffectListMount(Passive$1 | HasEffect, fiber);
                } catch (error2) {
                  captureCommitPhaseError(fiber, fiber.return, error2);
                }
                break;
              }
            }
          }
        }
        function invokeLayoutEffectUnmountInDEV(fiber) {
          {
            switch (fiber.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                try {
                  commitHookEffectListUnmount(Layout | HasEffect, fiber, fiber.return);
                } catch (error2) {
                  captureCommitPhaseError(fiber, fiber.return, error2);
                }
                break;
              }
              case ClassComponent: {
                var instance = fiber.stateNode;
                if (typeof instance.componentWillUnmount === "function") {
                  safelyCallComponentWillUnmount(fiber, fiber.return, instance);
                }
                break;
              }
            }
          }
        }
        function invokePassiveEffectUnmountInDEV(fiber) {
          {
            switch (fiber.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                try {
                  commitHookEffectListUnmount(Passive$1 | HasEffect, fiber, fiber.return);
                } catch (error2) {
                  captureCommitPhaseError(fiber, fiber.return, error2);
                }
              }
            }
          }
        }
        var COMPONENT_TYPE = 0;
        var HAS_PSEUDO_CLASS_TYPE = 1;
        var ROLE_TYPE = 2;
        var TEST_NAME_TYPE = 3;
        var TEXT_TYPE = 4;
        if (typeof Symbol === "function" && Symbol.for) {
          var symbolFor = Symbol.for;
          COMPONENT_TYPE = symbolFor("selector.component");
          HAS_PSEUDO_CLASS_TYPE = symbolFor("selector.has_pseudo_class");
          ROLE_TYPE = symbolFor("selector.role");
          TEST_NAME_TYPE = symbolFor("selector.test_id");
          TEXT_TYPE = symbolFor("selector.text");
        }
        var commitHooks = [];
        function onCommitRoot$1() {
          {
            commitHooks.forEach(function(commitHook) {
              return commitHook();
            });
          }
        }
        var ReactCurrentActQueue = ReactSharedInternals.ReactCurrentActQueue;
        function isLegacyActEnvironment(fiber) {
          {
            var isReactActEnvironmentGlobal = (
              // $FlowExpectedError – Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global
              typeof IS_REACT_ACT_ENVIRONMENT !== "undefined" ? IS_REACT_ACT_ENVIRONMENT : void 0
            );
            var jestIsDefined = typeof jest !== "undefined";
            return jestIsDefined && isReactActEnvironmentGlobal !== false;
          }
        }
        function isConcurrentActEnvironment() {
          {
            var isReactActEnvironmentGlobal = (
              // $FlowExpectedError – Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global
              typeof IS_REACT_ACT_ENVIRONMENT !== "undefined" ? IS_REACT_ACT_ENVIRONMENT : void 0
            );
            if (!isReactActEnvironmentGlobal && ReactCurrentActQueue.current !== null) {
              error("The current testing environment is not configured to support act(...)");
            }
            return isReactActEnvironmentGlobal;
          }
        }
        var ceil = Math.ceil;
        var ReactCurrentDispatcher$2 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner, ReactCurrentBatchConfig$3 = ReactSharedInternals.ReactCurrentBatchConfig, ReactCurrentActQueue$1 = ReactSharedInternals.ReactCurrentActQueue;
        var NoContext = (
          /*             */
          0
        );
        var BatchedContext = (
          /*               */
          1
        );
        var RenderContext = (
          /*                */
          2
        );
        var CommitContext = (
          /*                */
          4
        );
        var RootInProgress = 0;
        var RootFatalErrored = 1;
        var RootErrored = 2;
        var RootSuspended = 3;
        var RootSuspendedWithDelay = 4;
        var RootCompleted = 5;
        var RootDidNotComplete = 6;
        var executionContext = NoContext;
        var workInProgressRoot = null;
        var workInProgress = null;
        var workInProgressRootRenderLanes = NoLanes;
        var subtreeRenderLanes = NoLanes;
        var subtreeRenderLanesCursor = createCursor(NoLanes);
        var workInProgressRootExitStatus = RootInProgress;
        var workInProgressRootFatalError = null;
        var workInProgressRootIncludedLanes = NoLanes;
        var workInProgressRootSkippedLanes = NoLanes;
        var workInProgressRootInterleavedUpdatedLanes = NoLanes;
        var workInProgressRootPingedLanes = NoLanes;
        var workInProgressRootConcurrentErrors = null;
        var workInProgressRootRecoverableErrors = null;
        var globalMostRecentFallbackTime = 0;
        var FALLBACK_THROTTLE_MS = 500;
        var workInProgressRootRenderTargetTime = Infinity;
        var RENDER_TIMEOUT_MS = 500;
        var workInProgressTransitions = null;
        function resetRenderTimer() {
          workInProgressRootRenderTargetTime = now() + RENDER_TIMEOUT_MS;
        }
        function getRenderTargetTime() {
          return workInProgressRootRenderTargetTime;
        }
        var hasUncaughtError = false;
        var firstUncaughtError = null;
        var legacyErrorBoundariesThatAlreadyFailed = null;
        var rootDoesHavePassiveEffects = false;
        var rootWithPendingPassiveEffects = null;
        var pendingPassiveEffectsLanes = NoLanes;
        var pendingPassiveProfilerEffects = [];
        var pendingPassiveTransitions = null;
        var NESTED_UPDATE_LIMIT = 50;
        var nestedUpdateCount = 0;
        var rootWithNestedUpdates = null;
        var isFlushingPassiveEffects = false;
        var didScheduleUpdateDuringPassiveEffects = false;
        var NESTED_PASSIVE_UPDATE_LIMIT = 50;
        var nestedPassiveUpdateCount = 0;
        var rootWithPassiveNestedUpdates = null;
        var currentEventTime = NoTimestamp;
        var currentEventTransitionLane = NoLanes;
        var isRunningInsertionEffect = false;
        function getWorkInProgressRoot() {
          return workInProgressRoot;
        }
        function requestEventTime() {
          if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
            return now();
          }
          if (currentEventTime !== NoTimestamp) {
            return currentEventTime;
          }
          currentEventTime = now();
          return currentEventTime;
        }
        function requestUpdateLane(fiber) {
          var mode = fiber.mode;
          if ((mode & ConcurrentMode) === NoMode) {
            return SyncLane;
          } else if ((executionContext & RenderContext) !== NoContext && workInProgressRootRenderLanes !== NoLanes) {
            return pickArbitraryLane(workInProgressRootRenderLanes);
          }
          var isTransition = requestCurrentTransition() !== NoTransition;
          if (isTransition) {
            if (ReactCurrentBatchConfig$3.transition !== null) {
              var transition = ReactCurrentBatchConfig$3.transition;
              if (!transition._a) {
                transition._a = /* @__PURE__ */ new Set();
              }
              transition._a.add(fiber);
            }
            if (currentEventTransitionLane === NoLane) {
              currentEventTransitionLane = claimNextTransitionLane();
            }
            return currentEventTransitionLane;
          }
          var updateLane = getCurrentUpdatePriority();
          if (updateLane !== NoLane) {
            return updateLane;
          }
          var eventLane = getCurrentEventPriority();
          return eventLane;
        }
        function requestRetryLane(fiber) {
          var mode = fiber.mode;
          if ((mode & ConcurrentMode) === NoMode) {
            return SyncLane;
          }
          return claimNextRetryLane();
        }
        function scheduleUpdateOnFiber(root2, fiber, lane, eventTime) {
          checkForNestedUpdates();
          {
            if (isRunningInsertionEffect) {
              error("useInsertionEffect must not schedule updates.");
            }
          }
          {
            if (isFlushingPassiveEffects) {
              didScheduleUpdateDuringPassiveEffects = true;
            }
          }
          markRootUpdated(root2, lane, eventTime);
          if ((executionContext & RenderContext) !== NoLanes && root2 === workInProgressRoot) {
            warnAboutRenderPhaseUpdatesInDEV(fiber);
          } else {
            {
              if (isDevToolsPresent) {
                addFiberToLanesMap(root2, fiber, lane);
              }
            }
            warnIfUpdatesNotWrappedWithActDEV(fiber);
            if (root2 === workInProgressRoot) {
              if ((executionContext & RenderContext) === NoContext) {
                workInProgressRootInterleavedUpdatedLanes = mergeLanes(workInProgressRootInterleavedUpdatedLanes, lane);
              }
              if (workInProgressRootExitStatus === RootSuspendedWithDelay) {
                markRootSuspended$1(root2, workInProgressRootRenderLanes);
              }
            }
            ensureRootIsScheduled(root2, eventTime);
            if (lane === SyncLane && executionContext === NoContext && (fiber.mode & ConcurrentMode) === NoMode && // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.
            !ReactCurrentActQueue$1.isBatchingLegacy) {
              resetRenderTimer();
              flushSyncCallbacksOnlyInLegacyMode();
            }
          }
        }
        function scheduleInitialHydrationOnRoot(root2, lane, eventTime) {
          var current2 = root2.current;
          current2.lanes = lane;
          markRootUpdated(root2, lane, eventTime);
          ensureRootIsScheduled(root2, eventTime);
        }
        function isUnsafeClassRenderPhaseUpdate(fiber) {
          return (
            // TODO: Remove outdated deferRenderPhaseUpdateToNextBatch experiment. We
            // decided not to enable it.
            (executionContext & RenderContext) !== NoContext
          );
        }
        function ensureRootIsScheduled(root2, currentTime) {
          var existingCallbackNode = root2.callbackNode;
          markStarvedLanesAsExpired(root2, currentTime);
          var nextLanes = getNextLanes(root2, root2 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
          if (nextLanes === NoLanes) {
            if (existingCallbackNode !== null) {
              cancelCallback$1(existingCallbackNode);
            }
            root2.callbackNode = null;
            root2.callbackPriority = NoLane;
            return;
          }
          var newCallbackPriority = getHighestPriorityLane(nextLanes);
          var existingCallbackPriority = root2.callbackPriority;
          if (existingCallbackPriority === newCallbackPriority && // Special case related to `act`. If the currently scheduled task is a
          // Scheduler task, rather than an `act` task, cancel it and re-scheduled
          // on the `act` queue.
          !(ReactCurrentActQueue$1.current !== null && existingCallbackNode !== fakeActCallbackNode)) {
            {
              if (existingCallbackNode == null && existingCallbackPriority !== SyncLane) {
                error("Expected scheduled callback to exist. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            return;
          }
          if (existingCallbackNode != null) {
            cancelCallback$1(existingCallbackNode);
          }
          var newCallbackNode;
          if (newCallbackPriority === SyncLane) {
            if (root2.tag === LegacyRoot) {
              if (ReactCurrentActQueue$1.isBatchingLegacy !== null) {
                ReactCurrentActQueue$1.didScheduleLegacyUpdate = true;
              }
              scheduleLegacySyncCallback(performSyncWorkOnRoot.bind(null, root2));
            } else {
              scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root2));
            }
            {
              if (ReactCurrentActQueue$1.current !== null) {
                ReactCurrentActQueue$1.current.push(flushSyncCallbacks);
              } else {
                scheduleMicrotask(function() {
                  if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
                    flushSyncCallbacks();
                  }
                });
              }
            }
            newCallbackNode = null;
          } else {
            var schedulerPriorityLevel;
            switch (lanesToEventPriority(nextLanes)) {
              case DiscreteEventPriority:
                schedulerPriorityLevel = ImmediatePriority;
                break;
              case ContinuousEventPriority:
                schedulerPriorityLevel = UserBlockingPriority;
                break;
              case DefaultEventPriority:
                schedulerPriorityLevel = NormalPriority;
                break;
              case IdleEventPriority:
                schedulerPriorityLevel = IdlePriority;
                break;
              default:
                schedulerPriorityLevel = NormalPriority;
                break;
            }
            newCallbackNode = scheduleCallback$1(schedulerPriorityLevel, performConcurrentWorkOnRoot.bind(null, root2));
          }
          root2.callbackPriority = newCallbackPriority;
          root2.callbackNode = newCallbackNode;
        }
        function performConcurrentWorkOnRoot(root2, didTimeout) {
          {
            resetNestedUpdateFlag();
          }
          currentEventTime = NoTimestamp;
          currentEventTransitionLane = NoLanes;
          if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
            throw new Error("Should not already be working.");
          }
          var originalCallbackNode = root2.callbackNode;
          var didFlushPassiveEffects = flushPassiveEffects();
          if (didFlushPassiveEffects) {
            if (root2.callbackNode !== originalCallbackNode) {
              return null;
            }
          }
          var lanes = getNextLanes(root2, root2 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
          if (lanes === NoLanes) {
            return null;
          }
          var shouldTimeSlice = !includesBlockingLane(root2, lanes) && !includesExpiredLane(root2, lanes) && !didTimeout;
          var exitStatus = shouldTimeSlice ? renderRootConcurrent(root2, lanes) : renderRootSync(root2, lanes);
          if (exitStatus !== RootInProgress) {
            if (exitStatus === RootErrored) {
              var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root2);
              if (errorRetryLanes !== NoLanes) {
                lanes = errorRetryLanes;
                exitStatus = recoverFromConcurrentError(root2, errorRetryLanes);
              }
            }
            if (exitStatus === RootFatalErrored) {
              var fatalError = workInProgressRootFatalError;
              prepareFreshStack(root2, NoLanes);
              markRootSuspended$1(root2, lanes);
              ensureRootIsScheduled(root2, now());
              throw fatalError;
            }
            if (exitStatus === RootDidNotComplete) {
              markRootSuspended$1(root2, lanes);
            } else {
              var renderWasConcurrent = !includesBlockingLane(root2, lanes);
              var finishedWork = root2.current.alternate;
              if (renderWasConcurrent && !isRenderConsistentWithExternalStores(finishedWork)) {
                exitStatus = renderRootSync(root2, lanes);
                if (exitStatus === RootErrored) {
                  var _errorRetryLanes = getLanesToRetrySynchronouslyOnError(root2);
                  if (_errorRetryLanes !== NoLanes) {
                    lanes = _errorRetryLanes;
                    exitStatus = recoverFromConcurrentError(root2, _errorRetryLanes);
                  }
                }
                if (exitStatus === RootFatalErrored) {
                  var _fatalError = workInProgressRootFatalError;
                  prepareFreshStack(root2, NoLanes);
                  markRootSuspended$1(root2, lanes);
                  ensureRootIsScheduled(root2, now());
                  throw _fatalError;
                }
              }
              root2.finishedWork = finishedWork;
              root2.finishedLanes = lanes;
              finishConcurrentRender(root2, exitStatus, lanes);
            }
          }
          ensureRootIsScheduled(root2, now());
          if (root2.callbackNode === originalCallbackNode) {
            return performConcurrentWorkOnRoot.bind(null, root2);
          }
          return null;
        }
        function recoverFromConcurrentError(root2, errorRetryLanes) {
          var errorsFromFirstAttempt = workInProgressRootConcurrentErrors;
          if (isRootDehydrated(root2)) {
            var rootWorkInProgress = prepareFreshStack(root2, errorRetryLanes);
            rootWorkInProgress.flags |= ForceClientRender;
            {
              errorHydratingContainer(root2.containerInfo);
            }
          }
          var exitStatus = renderRootSync(root2, errorRetryLanes);
          if (exitStatus !== RootErrored) {
            var errorsFromSecondAttempt = workInProgressRootRecoverableErrors;
            workInProgressRootRecoverableErrors = errorsFromFirstAttempt;
            if (errorsFromSecondAttempt !== null) {
              queueRecoverableErrors(errorsFromSecondAttempt);
            }
          }
          return exitStatus;
        }
        function queueRecoverableErrors(errors) {
          if (workInProgressRootRecoverableErrors === null) {
            workInProgressRootRecoverableErrors = errors;
          } else {
            workInProgressRootRecoverableErrors.push.apply(workInProgressRootRecoverableErrors, errors);
          }
        }
        function finishConcurrentRender(root2, exitStatus, lanes) {
          switch (exitStatus) {
            case RootInProgress:
            case RootFatalErrored: {
              throw new Error("Root did not complete. This is a bug in React.");
            }
            case RootErrored: {
              commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
              break;
            }
            case RootSuspended: {
              markRootSuspended$1(root2, lanes);
              if (includesOnlyRetries(lanes) && // do not delay if we're inside an act() scope
              !shouldForceFlushFallbacksInDEV()) {
                var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now();
                if (msUntilTimeout > 10) {
                  var nextLanes = getNextLanes(root2, NoLanes);
                  if (nextLanes !== NoLanes) {
                    break;
                  }
                  var suspendedLanes = root2.suspendedLanes;
                  if (!isSubsetOfLanes(suspendedLanes, lanes)) {
                    var eventTime = requestEventTime();
                    markRootPinged(root2, suspendedLanes);
                    break;
                  }
                  root2.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root2, workInProgressRootRecoverableErrors, workInProgressTransitions), msUntilTimeout);
                  break;
                }
              }
              commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
              break;
            }
            case RootSuspendedWithDelay: {
              markRootSuspended$1(root2, lanes);
              if (includesOnlyTransitions(lanes)) {
                break;
              }
              if (!shouldForceFlushFallbacksInDEV()) {
                var mostRecentEventTime = getMostRecentEventTime(root2, lanes);
                var eventTimeMs = mostRecentEventTime;
                var timeElapsedMs = now() - eventTimeMs;
                var _msUntilTimeout = jnd(timeElapsedMs) - timeElapsedMs;
                if (_msUntilTimeout > 10) {
                  root2.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root2, workInProgressRootRecoverableErrors, workInProgressTransitions), _msUntilTimeout);
                  break;
                }
              }
              commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
              break;
            }
            case RootCompleted: {
              commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
              break;
            }
            default: {
              throw new Error("Unknown root exit status.");
            }
          }
        }
        function isRenderConsistentWithExternalStores(finishedWork) {
          var node = finishedWork;
          while (true) {
            if (node.flags & StoreConsistency) {
              var updateQueue = node.updateQueue;
              if (updateQueue !== null) {
                var checks = updateQueue.stores;
                if (checks !== null) {
                  for (var i = 0; i < checks.length; i++) {
                    var check = checks[i];
                    var getSnapshot = check.getSnapshot;
                    var renderedValue = check.value;
                    try {
                      if (!objectIs(getSnapshot(), renderedValue)) {
                        return false;
                      }
                    } catch (error2) {
                      return false;
                    }
                  }
                }
              }
            }
            var child = node.child;
            if (node.subtreeFlags & StoreConsistency && child !== null) {
              child.return = node;
              node = child;
              continue;
            }
            if (node === finishedWork) {
              return true;
            }
            while (node.sibling === null) {
              if (node.return === null || node.return === finishedWork) {
                return true;
              }
              node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
          }
          return true;
        }
        function markRootSuspended$1(root2, suspendedLanes) {
          suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes);
          suspendedLanes = removeLanes(suspendedLanes, workInProgressRootInterleavedUpdatedLanes);
          markRootSuspended(root2, suspendedLanes);
        }
        function performSyncWorkOnRoot(root2) {
          {
            syncNestedUpdateFlag();
          }
          if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
            throw new Error("Should not already be working.");
          }
          flushPassiveEffects();
          var lanes = getNextLanes(root2, NoLanes);
          if (!includesSomeLane(lanes, SyncLane)) {
            ensureRootIsScheduled(root2, now());
            return null;
          }
          var exitStatus = renderRootSync(root2, lanes);
          if (root2.tag !== LegacyRoot && exitStatus === RootErrored) {
            var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root2);
            if (errorRetryLanes !== NoLanes) {
              lanes = errorRetryLanes;
              exitStatus = recoverFromConcurrentError(root2, errorRetryLanes);
            }
          }
          if (exitStatus === RootFatalErrored) {
            var fatalError = workInProgressRootFatalError;
            prepareFreshStack(root2, NoLanes);
            markRootSuspended$1(root2, lanes);
            ensureRootIsScheduled(root2, now());
            throw fatalError;
          }
          if (exitStatus === RootDidNotComplete) {
            throw new Error("Root did not complete. This is a bug in React.");
          }
          var finishedWork = root2.current.alternate;
          root2.finishedWork = finishedWork;
          root2.finishedLanes = lanes;
          commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
          ensureRootIsScheduled(root2, now());
          return null;
        }
        function flushRoot(root2, lanes) {
          if (lanes !== NoLanes) {
            markRootEntangled(root2, mergeLanes(lanes, SyncLane));
            ensureRootIsScheduled(root2, now());
            if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
              resetRenderTimer();
              flushSyncCallbacks();
            }
          }
        }
        function batchedUpdates$1(fn, a) {
          var prevExecutionContext = executionContext;
          executionContext |= BatchedContext;
          try {
            return fn(a);
          } finally {
            executionContext = prevExecutionContext;
            if (executionContext === NoContext && // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.
            !ReactCurrentActQueue$1.isBatchingLegacy) {
              resetRenderTimer();
              flushSyncCallbacksOnlyInLegacyMode();
            }
          }
        }
        function discreteUpdates(fn, a, b, c, d) {
          var previousPriority = getCurrentUpdatePriority();
          var prevTransition = ReactCurrentBatchConfig$3.transition;
          try {
            ReactCurrentBatchConfig$3.transition = null;
            setCurrentUpdatePriority(DiscreteEventPriority);
            return fn(a, b, c, d);
          } finally {
            setCurrentUpdatePriority(previousPriority);
            ReactCurrentBatchConfig$3.transition = prevTransition;
            if (executionContext === NoContext) {
              resetRenderTimer();
            }
          }
        }
        function flushSync(fn) {
          if (rootWithPendingPassiveEffects !== null && rootWithPendingPassiveEffects.tag === LegacyRoot && (executionContext & (RenderContext | CommitContext)) === NoContext) {
            flushPassiveEffects();
          }
          var prevExecutionContext = executionContext;
          executionContext |= BatchedContext;
          var prevTransition = ReactCurrentBatchConfig$3.transition;
          var previousPriority = getCurrentUpdatePriority();
          try {
            ReactCurrentBatchConfig$3.transition = null;
            setCurrentUpdatePriority(DiscreteEventPriority);
            if (fn) {
              return fn();
            } else {
              return void 0;
            }
          } finally {
            setCurrentUpdatePriority(previousPriority);
            ReactCurrentBatchConfig$3.transition = prevTransition;
            executionContext = prevExecutionContext;
            if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
              flushSyncCallbacks();
            }
          }
        }
        function isAlreadyRendering() {
          return (executionContext & (RenderContext | CommitContext)) !== NoContext;
        }
        function pushRenderLanes(fiber, lanes) {
          push(subtreeRenderLanesCursor, subtreeRenderLanes, fiber);
          subtreeRenderLanes = mergeLanes(subtreeRenderLanes, lanes);
          workInProgressRootIncludedLanes = mergeLanes(workInProgressRootIncludedLanes, lanes);
        }
        function popRenderLanes(fiber) {
          subtreeRenderLanes = subtreeRenderLanesCursor.current;
          pop(subtreeRenderLanesCursor, fiber);
        }
        function prepareFreshStack(root2, lanes) {
          root2.finishedWork = null;
          root2.finishedLanes = NoLanes;
          var timeoutHandle = root2.timeoutHandle;
          if (timeoutHandle !== noTimeout) {
            root2.timeoutHandle = noTimeout;
            cancelTimeout(timeoutHandle);
          }
          if (workInProgress !== null) {
            var interruptedWork = workInProgress.return;
            while (interruptedWork !== null) {
              var current2 = interruptedWork.alternate;
              unwindInterruptedWork(current2, interruptedWork);
              interruptedWork = interruptedWork.return;
            }
          }
          workInProgressRoot = root2;
          var rootWorkInProgress = createWorkInProgress(root2.current, null);
          workInProgress = rootWorkInProgress;
          workInProgressRootRenderLanes = subtreeRenderLanes = workInProgressRootIncludedLanes = lanes;
          workInProgressRootExitStatus = RootInProgress;
          workInProgressRootFatalError = null;
          workInProgressRootSkippedLanes = NoLanes;
          workInProgressRootInterleavedUpdatedLanes = NoLanes;
          workInProgressRootPingedLanes = NoLanes;
          workInProgressRootConcurrentErrors = null;
          workInProgressRootRecoverableErrors = null;
          finishQueueingConcurrentUpdates();
          {
            ReactStrictModeWarnings.discardPendingWarnings();
          }
          return rootWorkInProgress;
        }
        function handleError(root2, thrownValue) {
          do {
            var erroredWork = workInProgress;
            try {
              resetContextDependencies();
              resetHooksAfterThrow();
              resetCurrentFiber();
              ReactCurrentOwner$2.current = null;
              if (erroredWork === null || erroredWork.return === null) {
                workInProgressRootExitStatus = RootFatalErrored;
                workInProgressRootFatalError = thrownValue;
                workInProgress = null;
                return;
              }
              if (enableProfilerTimer && erroredWork.mode & ProfileMode) {
                stopProfilerTimerIfRunningAndRecordDelta(erroredWork, true);
              }
              if (enableSchedulingProfiler) {
                markComponentRenderStopped();
                if (thrownValue !== null && typeof thrownValue === "object" && typeof thrownValue.then === "function") {
                  var wakeable = thrownValue;
                  markComponentSuspended(erroredWork, wakeable, workInProgressRootRenderLanes);
                } else {
                  markComponentErrored(erroredWork, thrownValue, workInProgressRootRenderLanes);
                }
              }
              throwException(root2, erroredWork.return, erroredWork, thrownValue, workInProgressRootRenderLanes);
              completeUnitOfWork(erroredWork);
            } catch (yetAnotherThrownValue) {
              thrownValue = yetAnotherThrownValue;
              if (workInProgress === erroredWork && erroredWork !== null) {
                erroredWork = erroredWork.return;
                workInProgress = erroredWork;
              } else {
                erroredWork = workInProgress;
              }
              continue;
            }
            return;
          } while (true);
        }
        function pushDispatcher() {
          var prevDispatcher = ReactCurrentDispatcher$2.current;
          ReactCurrentDispatcher$2.current = ContextOnlyDispatcher;
          if (prevDispatcher === null) {
            return ContextOnlyDispatcher;
          } else {
            return prevDispatcher;
          }
        }
        function popDispatcher(prevDispatcher) {
          ReactCurrentDispatcher$2.current = prevDispatcher;
        }
        function markCommitTimeOfFallback() {
          globalMostRecentFallbackTime = now();
        }
        function markSkippedUpdateLanes(lane) {
          workInProgressRootSkippedLanes = mergeLanes(lane, workInProgressRootSkippedLanes);
        }
        function renderDidSuspend() {
          if (workInProgressRootExitStatus === RootInProgress) {
            workInProgressRootExitStatus = RootSuspended;
          }
        }
        function renderDidSuspendDelayIfPossible() {
          if (workInProgressRootExitStatus === RootInProgress || workInProgressRootExitStatus === RootSuspended || workInProgressRootExitStatus === RootErrored) {
            workInProgressRootExitStatus = RootSuspendedWithDelay;
          }
          if (workInProgressRoot !== null && (includesNonIdleWork(workInProgressRootSkippedLanes) || includesNonIdleWork(workInProgressRootInterleavedUpdatedLanes))) {
            markRootSuspended$1(workInProgressRoot, workInProgressRootRenderLanes);
          }
        }
        function renderDidError(error2) {
          if (workInProgressRootExitStatus !== RootSuspendedWithDelay) {
            workInProgressRootExitStatus = RootErrored;
          }
          if (workInProgressRootConcurrentErrors === null) {
            workInProgressRootConcurrentErrors = [error2];
          } else {
            workInProgressRootConcurrentErrors.push(error2);
          }
        }
        function renderHasNotSuspendedYet() {
          return workInProgressRootExitStatus === RootInProgress;
        }
        function renderRootSync(root2, lanes) {
          var prevExecutionContext = executionContext;
          executionContext |= RenderContext;
          var prevDispatcher = pushDispatcher();
          if (workInProgressRoot !== root2 || workInProgressRootRenderLanes !== lanes) {
            {
              if (isDevToolsPresent) {
                var memoizedUpdaters = root2.memoizedUpdaters;
                if (memoizedUpdaters.size > 0) {
                  restorePendingUpdaters(root2, workInProgressRootRenderLanes);
                  memoizedUpdaters.clear();
                }
                movePendingFibersToMemoized(root2, lanes);
              }
            }
            workInProgressTransitions = getTransitionsForLanes();
            prepareFreshStack(root2, lanes);
          }
          {
            markRenderStarted(lanes);
          }
          do {
            try {
              workLoopSync();
              break;
            } catch (thrownValue) {
              handleError(root2, thrownValue);
            }
          } while (true);
          resetContextDependencies();
          executionContext = prevExecutionContext;
          popDispatcher(prevDispatcher);
          if (workInProgress !== null) {
            throw new Error("Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.");
          }
          {
            markRenderStopped();
          }
          workInProgressRoot = null;
          workInProgressRootRenderLanes = NoLanes;
          return workInProgressRootExitStatus;
        }
        function workLoopSync() {
          while (workInProgress !== null) {
            performUnitOfWork(workInProgress);
          }
        }
        function renderRootConcurrent(root2, lanes) {
          var prevExecutionContext = executionContext;
          executionContext |= RenderContext;
          var prevDispatcher = pushDispatcher();
          if (workInProgressRoot !== root2 || workInProgressRootRenderLanes !== lanes) {
            {
              if (isDevToolsPresent) {
                var memoizedUpdaters = root2.memoizedUpdaters;
                if (memoizedUpdaters.size > 0) {
                  restorePendingUpdaters(root2, workInProgressRootRenderLanes);
                  memoizedUpdaters.clear();
                }
                movePendingFibersToMemoized(root2, lanes);
              }
            }
            workInProgressTransitions = getTransitionsForLanes();
            resetRenderTimer();
            prepareFreshStack(root2, lanes);
          }
          {
            markRenderStarted(lanes);
          }
          do {
            try {
              workLoopConcurrent();
              break;
            } catch (thrownValue) {
              handleError(root2, thrownValue);
            }
          } while (true);
          resetContextDependencies();
          popDispatcher(prevDispatcher);
          executionContext = prevExecutionContext;
          if (workInProgress !== null) {
            {
              markRenderYielded();
            }
            return RootInProgress;
          } else {
            {
              markRenderStopped();
            }
            workInProgressRoot = null;
            workInProgressRootRenderLanes = NoLanes;
            return workInProgressRootExitStatus;
          }
        }
        function workLoopConcurrent() {
          while (workInProgress !== null && !shouldYield()) {
            performUnitOfWork(workInProgress);
          }
        }
        function performUnitOfWork(unitOfWork) {
          var current2 = unitOfWork.alternate;
          setCurrentFiber(unitOfWork);
          var next;
          if ((unitOfWork.mode & ProfileMode) !== NoMode) {
            startProfilerTimer(unitOfWork);
            next = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
            stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);
          } else {
            next = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
          }
          resetCurrentFiber();
          unitOfWork.memoizedProps = unitOfWork.pendingProps;
          if (next === null) {
            completeUnitOfWork(unitOfWork);
          } else {
            workInProgress = next;
          }
          ReactCurrentOwner$2.current = null;
        }
        function completeUnitOfWork(unitOfWork) {
          var completedWork = unitOfWork;
          do {
            var current2 = completedWork.alternate;
            var returnFiber = completedWork.return;
            if ((completedWork.flags & Incomplete) === NoFlags) {
              setCurrentFiber(completedWork);
              var next = void 0;
              if ((completedWork.mode & ProfileMode) === NoMode) {
                next = completeWork(current2, completedWork, subtreeRenderLanes);
              } else {
                startProfilerTimer(completedWork);
                next = completeWork(current2, completedWork, subtreeRenderLanes);
                stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
              }
              resetCurrentFiber();
              if (next !== null) {
                workInProgress = next;
                return;
              }
            } else {
              var _next = unwindWork(current2, completedWork);
              if (_next !== null) {
                _next.flags &= HostEffectMask;
                workInProgress = _next;
                return;
              }
              if ((completedWork.mode & ProfileMode) !== NoMode) {
                stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
                var actualDuration = completedWork.actualDuration;
                var child = completedWork.child;
                while (child !== null) {
                  actualDuration += child.actualDuration;
                  child = child.sibling;
                }
                completedWork.actualDuration = actualDuration;
              }
              if (returnFiber !== null) {
                returnFiber.flags |= Incomplete;
                returnFiber.subtreeFlags = NoFlags;
                returnFiber.deletions = null;
              } else {
                workInProgressRootExitStatus = RootDidNotComplete;
                workInProgress = null;
                return;
              }
            }
            var siblingFiber = completedWork.sibling;
            if (siblingFiber !== null) {
              workInProgress = siblingFiber;
              return;
            }
            completedWork = returnFiber;
            workInProgress = completedWork;
          } while (completedWork !== null);
          if (workInProgressRootExitStatus === RootInProgress) {
            workInProgressRootExitStatus = RootCompleted;
          }
        }
        function commitRoot(root2, recoverableErrors, transitions) {
          var previousUpdateLanePriority = getCurrentUpdatePriority();
          var prevTransition = ReactCurrentBatchConfig$3.transition;
          try {
            ReactCurrentBatchConfig$3.transition = null;
            setCurrentUpdatePriority(DiscreteEventPriority);
            commitRootImpl(root2, recoverableErrors, transitions, previousUpdateLanePriority);
          } finally {
            ReactCurrentBatchConfig$3.transition = prevTransition;
            setCurrentUpdatePriority(previousUpdateLanePriority);
          }
          return null;
        }
        function commitRootImpl(root2, recoverableErrors, transitions, renderPriorityLevel) {
          do {
            flushPassiveEffects();
          } while (rootWithPendingPassiveEffects !== null);
          flushRenderPhaseStrictModeWarningsInDEV();
          if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
            throw new Error("Should not already be working.");
          }
          var finishedWork = root2.finishedWork;
          var lanes = root2.finishedLanes;
          {
            markCommitStarted(lanes);
          }
          if (finishedWork === null) {
            {
              markCommitStopped();
            }
            return null;
          } else {
            {
              if (lanes === NoLanes) {
                error("root.finishedLanes should not be empty during a commit. This is a bug in React.");
              }
            }
          }
          root2.finishedWork = null;
          root2.finishedLanes = NoLanes;
          if (finishedWork === root2.current) {
            throw new Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.");
          }
          root2.callbackNode = null;
          root2.callbackPriority = NoLane;
          var remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes);
          markRootFinished(root2, remainingLanes);
          if (root2 === workInProgressRoot) {
            workInProgressRoot = null;
            workInProgress = null;
            workInProgressRootRenderLanes = NoLanes;
          }
          if ((finishedWork.subtreeFlags & PassiveMask) !== NoFlags || (finishedWork.flags & PassiveMask) !== NoFlags) {
            if (!rootDoesHavePassiveEffects) {
              rootDoesHavePassiveEffects = true;
              pendingPassiveTransitions = transitions;
              scheduleCallback$1(NormalPriority, function() {
                flushPassiveEffects();
                return null;
              });
            }
          }
          var subtreeHasEffects = (finishedWork.subtreeFlags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;
          var rootHasEffect = (finishedWork.flags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;
          if (subtreeHasEffects || rootHasEffect) {
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            ReactCurrentBatchConfig$3.transition = null;
            var previousPriority = getCurrentUpdatePriority();
            setCurrentUpdatePriority(DiscreteEventPriority);
            var prevExecutionContext = executionContext;
            executionContext |= CommitContext;
            ReactCurrentOwner$2.current = null;
            var shouldFireAfterActiveInstanceBlur2 = commitBeforeMutationEffects(root2, finishedWork);
            {
              recordCommitTime();
            }
            commitMutationEffects(root2, finishedWork, lanes);
            resetAfterCommit(root2.containerInfo);
            root2.current = finishedWork;
            {
              markLayoutEffectsStarted(lanes);
            }
            commitLayoutEffects(finishedWork, root2, lanes);
            {
              markLayoutEffectsStopped();
            }
            requestPaint();
            executionContext = prevExecutionContext;
            setCurrentUpdatePriority(previousPriority);
            ReactCurrentBatchConfig$3.transition = prevTransition;
          } else {
            root2.current = finishedWork;
            {
              recordCommitTime();
            }
          }
          var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;
          if (rootDoesHavePassiveEffects) {
            rootDoesHavePassiveEffects = false;
            rootWithPendingPassiveEffects = root2;
            pendingPassiveEffectsLanes = lanes;
          } else {
            {
              nestedPassiveUpdateCount = 0;
              rootWithPassiveNestedUpdates = null;
            }
          }
          remainingLanes = root2.pendingLanes;
          if (remainingLanes === NoLanes) {
            legacyErrorBoundariesThatAlreadyFailed = null;
          }
          {
            if (!rootDidHavePassiveEffects) {
              commitDoubleInvokeEffectsInDEV(root2.current, false);
            }
          }
          onCommitRoot(finishedWork.stateNode, renderPriorityLevel);
          {
            if (isDevToolsPresent) {
              root2.memoizedUpdaters.clear();
            }
          }
          {
            onCommitRoot$1();
          }
          ensureRootIsScheduled(root2, now());
          if (recoverableErrors !== null) {
            var onRecoverableError = root2.onRecoverableError;
            for (var i = 0; i < recoverableErrors.length; i++) {
              var recoverableError = recoverableErrors[i];
              var componentStack = recoverableError.stack;
              var digest = recoverableError.digest;
              onRecoverableError(recoverableError.value, {
                componentStack,
                digest
              });
            }
          }
          if (hasUncaughtError) {
            hasUncaughtError = false;
            var error$1 = firstUncaughtError;
            firstUncaughtError = null;
            throw error$1;
          }
          if (includesSomeLane(pendingPassiveEffectsLanes, SyncLane) && root2.tag !== LegacyRoot) {
            flushPassiveEffects();
          }
          remainingLanes = root2.pendingLanes;
          if (includesSomeLane(remainingLanes, SyncLane)) {
            {
              markNestedUpdateScheduled();
            }
            if (root2 === rootWithNestedUpdates) {
              nestedUpdateCount++;
            } else {
              nestedUpdateCount = 0;
              rootWithNestedUpdates = root2;
            }
          } else {
            nestedUpdateCount = 0;
          }
          flushSyncCallbacks();
          {
            markCommitStopped();
          }
          return null;
        }
        function flushPassiveEffects() {
          if (rootWithPendingPassiveEffects !== null) {
            var renderPriority = lanesToEventPriority(pendingPassiveEffectsLanes);
            var priority = lowerEventPriority(DefaultEventPriority, renderPriority);
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            var previousPriority = getCurrentUpdatePriority();
            try {
              ReactCurrentBatchConfig$3.transition = null;
              setCurrentUpdatePriority(priority);
              return flushPassiveEffectsImpl();
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$3.transition = prevTransition;
            }
          }
          return false;
        }
        function enqueuePendingPassiveProfilerEffect(fiber) {
          {
            pendingPassiveProfilerEffects.push(fiber);
            if (!rootDoesHavePassiveEffects) {
              rootDoesHavePassiveEffects = true;
              scheduleCallback$1(NormalPriority, function() {
                flushPassiveEffects();
                return null;
              });
            }
          }
        }
        function flushPassiveEffectsImpl() {
          if (rootWithPendingPassiveEffects === null) {
            return false;
          }
          var transitions = pendingPassiveTransitions;
          pendingPassiveTransitions = null;
          var root2 = rootWithPendingPassiveEffects;
          var lanes = pendingPassiveEffectsLanes;
          rootWithPendingPassiveEffects = null;
          pendingPassiveEffectsLanes = NoLanes;
          if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
            throw new Error("Cannot flush passive effects while already rendering.");
          }
          {
            isFlushingPassiveEffects = true;
            didScheduleUpdateDuringPassiveEffects = false;
          }
          {
            markPassiveEffectsStarted(lanes);
          }
          var prevExecutionContext = executionContext;
          executionContext |= CommitContext;
          commitPassiveUnmountEffects(root2.current);
          commitPassiveMountEffects(root2, root2.current, lanes, transitions);
          {
            var profilerEffects = pendingPassiveProfilerEffects;
            pendingPassiveProfilerEffects = [];
            for (var i = 0; i < profilerEffects.length; i++) {
              var _fiber = profilerEffects[i];
              commitPassiveEffectDurations(root2, _fiber);
            }
          }
          {
            markPassiveEffectsStopped();
          }
          {
            commitDoubleInvokeEffectsInDEV(root2.current, true);
          }
          executionContext = prevExecutionContext;
          flushSyncCallbacks();
          {
            if (didScheduleUpdateDuringPassiveEffects) {
              if (root2 === rootWithPassiveNestedUpdates) {
                nestedPassiveUpdateCount++;
              } else {
                nestedPassiveUpdateCount = 0;
                rootWithPassiveNestedUpdates = root2;
              }
            } else {
              nestedPassiveUpdateCount = 0;
            }
            isFlushingPassiveEffects = false;
            didScheduleUpdateDuringPassiveEffects = false;
          }
          onPostCommitRoot(root2);
          {
            var stateNode = root2.current.stateNode;
            stateNode.effectDuration = 0;
            stateNode.passiveEffectDuration = 0;
          }
          return true;
        }
        function isAlreadyFailedLegacyErrorBoundary(instance) {
          return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
        }
        function markLegacyErrorBoundaryAsFailed(instance) {
          if (legacyErrorBoundariesThatAlreadyFailed === null) {
            legacyErrorBoundariesThatAlreadyFailed = /* @__PURE__ */ new Set([instance]);
          } else {
            legacyErrorBoundariesThatAlreadyFailed.add(instance);
          }
        }
        function prepareToThrowUncaughtError(error2) {
          if (!hasUncaughtError) {
            hasUncaughtError = true;
            firstUncaughtError = error2;
          }
        }
        var onUncaughtError = prepareToThrowUncaughtError;
        function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error2) {
          var errorInfo = createCapturedValueAtFiber(error2, sourceFiber);
          var update = createRootErrorUpdate(rootFiber, errorInfo, SyncLane);
          var root2 = enqueueUpdate(rootFiber, update, SyncLane);
          var eventTime = requestEventTime();
          if (root2 !== null) {
            markRootUpdated(root2, SyncLane, eventTime);
            ensureRootIsScheduled(root2, eventTime);
          }
        }
        function captureCommitPhaseError(sourceFiber, nearestMountedAncestor, error$1) {
          {
            reportUncaughtErrorInDEV(error$1);
            setIsRunningInsertionEffect(false);
          }
          if (sourceFiber.tag === HostRoot) {
            captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error$1);
            return;
          }
          var fiber = null;
          {
            fiber = nearestMountedAncestor;
          }
          while (fiber !== null) {
            if (fiber.tag === HostRoot) {
              captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error$1);
              return;
            } else if (fiber.tag === ClassComponent) {
              var ctor = fiber.type;
              var instance = fiber.stateNode;
              if (typeof ctor.getDerivedStateFromError === "function" || typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance)) {
                var errorInfo = createCapturedValueAtFiber(error$1, sourceFiber);
                var update = createClassErrorUpdate(fiber, errorInfo, SyncLane);
                var root2 = enqueueUpdate(fiber, update, SyncLane);
                var eventTime = requestEventTime();
                if (root2 !== null) {
                  markRootUpdated(root2, SyncLane, eventTime);
                  ensureRootIsScheduled(root2, eventTime);
                }
                return;
              }
            }
            fiber = fiber.return;
          }
          {
            error("Internal React error: Attempted to capture a commit phase error inside a detached tree. This indicates a bug in React. Likely causes include deleting the same fiber more than once, committing an already-finished tree, or an inconsistent return pointer.\n\nError message:\n\n%s", error$1);
          }
        }
        function pingSuspendedRoot(root2, wakeable, pingedLanes) {
          var pingCache = root2.pingCache;
          if (pingCache !== null) {
            pingCache.delete(wakeable);
          }
          var eventTime = requestEventTime();
          markRootPinged(root2, pingedLanes);
          warnIfSuspenseResolutionNotWrappedWithActDEV(root2);
          if (workInProgressRoot === root2 && isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes)) {
            if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && includesOnlyRetries(workInProgressRootRenderLanes) && now() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) {
              prepareFreshStack(root2, NoLanes);
            } else {
              workInProgressRootPingedLanes = mergeLanes(workInProgressRootPingedLanes, pingedLanes);
            }
          }
          ensureRootIsScheduled(root2, eventTime);
        }
        function retryTimedOutBoundary(boundaryFiber, retryLane) {
          if (retryLane === NoLane) {
            retryLane = requestRetryLane(boundaryFiber);
          }
          var eventTime = requestEventTime();
          var root2 = enqueueConcurrentRenderForLane(boundaryFiber, retryLane);
          if (root2 !== null) {
            markRootUpdated(root2, retryLane, eventTime);
            ensureRootIsScheduled(root2, eventTime);
          }
        }
        function retryDehydratedSuspenseBoundary(boundaryFiber) {
          var suspenseState = boundaryFiber.memoizedState;
          var retryLane = NoLane;
          if (suspenseState !== null) {
            retryLane = suspenseState.retryLane;
          }
          retryTimedOutBoundary(boundaryFiber, retryLane);
        }
        function resolveRetryWakeable(boundaryFiber, wakeable) {
          var retryLane = NoLane;
          var retryCache;
          switch (boundaryFiber.tag) {
            case SuspenseComponent:
              retryCache = boundaryFiber.stateNode;
              var suspenseState = boundaryFiber.memoizedState;
              if (suspenseState !== null) {
                retryLane = suspenseState.retryLane;
              }
              break;
            case SuspenseListComponent:
              retryCache = boundaryFiber.stateNode;
              break;
            default:
              throw new Error("Pinged unknown suspense boundary type. This is probably a bug in React.");
          }
          if (retryCache !== null) {
            retryCache.delete(wakeable);
          }
          retryTimedOutBoundary(boundaryFiber, retryLane);
        }
        function jnd(timeElapsed) {
          return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3e3 ? 3e3 : timeElapsed < 4320 ? 4320 : ceil(timeElapsed / 1960) * 1960;
        }
        function checkForNestedUpdates() {
          if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
            nestedUpdateCount = 0;
            rootWithNestedUpdates = null;
            throw new Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");
          }
          {
            if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {
              nestedPassiveUpdateCount = 0;
              rootWithPassiveNestedUpdates = null;
              error("Maximum update depth exceeded. This can happen when a component calls setState inside useEffect, but useEffect either doesn't have a dependency array, or one of the dependencies changes on every render.");
            }
          }
        }
        function flushRenderPhaseStrictModeWarningsInDEV() {
          {
            ReactStrictModeWarnings.flushLegacyContextWarning();
            {
              ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
            }
          }
        }
        function commitDoubleInvokeEffectsInDEV(fiber, hasPassiveEffects) {
          {
            setCurrentFiber(fiber);
            invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectUnmountInDEV);
            if (hasPassiveEffects) {
              invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectUnmountInDEV);
            }
            invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectMountInDEV);
            if (hasPassiveEffects) {
              invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectMountInDEV);
            }
            resetCurrentFiber();
          }
        }
        function invokeEffectsInDev(firstChild, fiberFlags, invokeEffectFn) {
          {
            var current2 = firstChild;
            var subtreeRoot = null;
            while (current2 !== null) {
              var primarySubtreeFlag = current2.subtreeFlags & fiberFlags;
              if (current2 !== subtreeRoot && current2.child !== null && primarySubtreeFlag !== NoFlags) {
                current2 = current2.child;
              } else {
                if ((current2.flags & fiberFlags) !== NoFlags) {
                  invokeEffectFn(current2);
                }
                if (current2.sibling !== null) {
                  current2 = current2.sibling;
                } else {
                  current2 = subtreeRoot = current2.return;
                }
              }
            }
          }
        }
        var didWarnStateUpdateForNotYetMountedComponent = null;
        function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {
          {
            if ((executionContext & RenderContext) !== NoContext) {
              return;
            }
            if (!(fiber.mode & ConcurrentMode)) {
              return;
            }
            var tag = fiber.tag;
            if (tag !== IndeterminateComponent && tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent) {
              return;
            }
            var componentName = getComponentNameFromFiber(fiber) || "ReactComponent";
            if (didWarnStateUpdateForNotYetMountedComponent !== null) {
              if (didWarnStateUpdateForNotYetMountedComponent.has(componentName)) {
                return;
              }
              didWarnStateUpdateForNotYetMountedComponent.add(componentName);
            } else {
              didWarnStateUpdateForNotYetMountedComponent = /* @__PURE__ */ new Set([componentName]);
            }
            var previousFiber = current;
            try {
              setCurrentFiber(fiber);
              error("Can't perform a React state update on a component that hasn't mounted yet. This indicates that you have a side-effect in your render function that asynchronously later calls tries to update the component. Move this work to useEffect instead.");
            } finally {
              if (previousFiber) {
                setCurrentFiber(fiber);
              } else {
                resetCurrentFiber();
              }
            }
          }
        }
        var beginWork$1;
        {
          var dummyFiber = null;
          beginWork$1 = function(current2, unitOfWork, lanes) {
            var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);
            try {
              return beginWork(current2, unitOfWork, lanes);
            } catch (originalError) {
              if (didSuspendOrErrorWhileHydratingDEV() || originalError !== null && typeof originalError === "object" && typeof originalError.then === "function") {
                throw originalError;
              }
              resetContextDependencies();
              resetHooksAfterThrow();
              unwindInterruptedWork(current2, unitOfWork);
              assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);
              if (unitOfWork.mode & ProfileMode) {
                startProfilerTimer(unitOfWork);
              }
              invokeGuardedCallback(null, beginWork, null, current2, unitOfWork, lanes);
              if (hasCaughtError()) {
                var replayError = clearCaughtError();
                if (typeof replayError === "object" && replayError !== null && replayError.Se && typeof originalError === "object" && originalError !== null && !originalError.Se) {
                  originalError.Se = true;
                }
              }
              throw originalError;
            }
          };
        }
        var didWarnAboutUpdateInRender = false;
        var didWarnAboutUpdateInRenderForAnotherComponent;
        {
          didWarnAboutUpdateInRenderForAnotherComponent = /* @__PURE__ */ new Set();
        }
        function warnAboutRenderPhaseUpdatesInDEV(fiber) {
          {
            if (isRendering && !getIsUpdatingOpaqueValueInRenderPhaseInDEV()) {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  var renderingComponentName = workInProgress && getComponentNameFromFiber(workInProgress) || "Unknown";
                  var dedupeKey = renderingComponentName;
                  if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {
                    didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);
                    var setStateComponentName = getComponentNameFromFiber(fiber) || "Unknown";
                    error("Cannot update a component (`%s`) while rendering a different component (`%s`). To locate the bad setState() call inside `%s`, follow the stack trace as described in https://reactjs.org/link/setstate-in-render", setStateComponentName, renderingComponentName, renderingComponentName);
                  }
                  break;
                }
                case ClassComponent: {
                  if (!didWarnAboutUpdateInRender) {
                    error("Cannot update during an existing state transition (such as within `render`). Render methods should be a pure function of props and state.");
                    didWarnAboutUpdateInRender = true;
                  }
                  break;
                }
              }
            }
          }
        }
        function restorePendingUpdaters(root2, lanes) {
          {
            if (isDevToolsPresent) {
              var memoizedUpdaters = root2.memoizedUpdaters;
              memoizedUpdaters.forEach(function(schedulingFiber) {
                addFiberToLanesMap(root2, schedulingFiber, lanes);
              });
            }
          }
        }
        var fakeActCallbackNode = {};
        function scheduleCallback$1(priorityLevel, callback) {
          {
            var actQueue = ReactCurrentActQueue$1.current;
            if (actQueue !== null) {
              actQueue.push(callback);
              return fakeActCallbackNode;
            } else {
              return scheduleCallback(priorityLevel, callback);
            }
          }
        }
        function cancelCallback$1(callbackNode) {
          if (callbackNode === fakeActCallbackNode) {
            return;
          }
          return cancelCallback(callbackNode);
        }
        function shouldForceFlushFallbacksInDEV() {
          return ReactCurrentActQueue$1.current !== null;
        }
        function warnIfUpdatesNotWrappedWithActDEV(fiber) {
          {
            if (fiber.mode & ConcurrentMode) {
              if (!isConcurrentActEnvironment()) {
                return;
              }
            } else {
              if (!isLegacyActEnvironment()) {
                return;
              }
              if (executionContext !== NoContext) {
                return;
              }
              if (fiber.tag !== FunctionComponent && fiber.tag !== ForwardRef && fiber.tag !== SimpleMemoComponent) {
                return;
              }
            }
            if (ReactCurrentActQueue$1.current === null) {
              var previousFiber = current;
              try {
                setCurrentFiber(fiber);
                error("An update to %s inside a test was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act", getComponentNameFromFiber(fiber));
              } finally {
                if (previousFiber) {
                  setCurrentFiber(fiber);
                } else {
                  resetCurrentFiber();
                }
              }
            }
          }
        }
        function warnIfSuspenseResolutionNotWrappedWithActDEV(root2) {
          {
            if (root2.tag !== LegacyRoot && isConcurrentActEnvironment() && ReactCurrentActQueue$1.current === null) {
              error("A suspended resource finished loading inside a test, but the event was not wrapped in act(...).\n\nWhen testing, code that resolves suspended data should be wrapped into act(...):\n\nact(() => {\n  /* finish loading suspended data */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act");
            }
          }
        }
        function setIsRunningInsertionEffect(isRunning) {
          {
            isRunningInsertionEffect = isRunning;
          }
        }
        var resolveFamily = null;
        var failedBoundaries = null;
        var setRefreshHandler = function(handler) {
          {
            resolveFamily = handler;
          }
        };
        function resolveFunctionForHotReloading(type) {
          {
            if (resolveFamily === null) {
              return type;
            }
            var family = resolveFamily(type);
            if (family === void 0) {
              return type;
            }
            return family.current;
          }
        }
        function resolveClassForHotReloading(type) {
          return resolveFunctionForHotReloading(type);
        }
        function resolveForwardRefForHotReloading(type) {
          {
            if (resolveFamily === null) {
              return type;
            }
            var family = resolveFamily(type);
            if (family === void 0) {
              if (type !== null && type !== void 0 && typeof type.render === "function") {
                var currentRender = resolveFunctionForHotReloading(type.render);
                if (type.render !== currentRender) {
                  var syntheticType = {
                    $$typeof: REACT_FORWARD_REF_TYPE,
                    render: currentRender
                  };
                  if (type.displayName !== void 0) {
                    syntheticType.displayName = type.displayName;
                  }
                  return syntheticType;
                }
              }
              return type;
            }
            return family.current;
          }
        }
        function isCompatibleFamilyForHotReloading(fiber, element) {
          {
            if (resolveFamily === null) {
              return false;
            }
            var prevType = fiber.elementType;
            var nextType = element.type;
            var needsCompareFamilies = false;
            var $$typeofNextType = typeof nextType === "object" && nextType !== null ? nextType.$$typeof : null;
            switch (fiber.tag) {
              case ClassComponent: {
                if (typeof nextType === "function") {
                  needsCompareFamilies = true;
                }
                break;
              }
              case FunctionComponent: {
                if (typeof nextType === "function") {
                  needsCompareFamilies = true;
                } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                  needsCompareFamilies = true;
                }
                break;
              }
              case ForwardRef: {
                if ($$typeofNextType === REACT_FORWARD_REF_TYPE) {
                  needsCompareFamilies = true;
                } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                  needsCompareFamilies = true;
                }
                break;
              }
              case MemoComponent:
              case SimpleMemoComponent: {
                if ($$typeofNextType === REACT_MEMO_TYPE) {
                  needsCompareFamilies = true;
                } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                  needsCompareFamilies = true;
                }
                break;
              }
              default:
                return false;
            }
            if (needsCompareFamilies) {
              var prevFamily = resolveFamily(prevType);
              if (prevFamily !== void 0 && prevFamily === resolveFamily(nextType)) {
                return true;
              }
            }
            return false;
          }
        }
        function markFailedErrorBoundaryForHotReloading(fiber) {
          {
            if (resolveFamily === null) {
              return;
            }
            if (typeof WeakSet !== "function") {
              return;
            }
            if (failedBoundaries === null) {
              failedBoundaries = /* @__PURE__ */ new WeakSet();
            }
            failedBoundaries.add(fiber);
          }
        }
        var scheduleRefresh = function(root2, update) {
          {
            if (resolveFamily === null) {
              return;
            }
            var staleFamilies = update.staleFamilies, updatedFamilies = update.updatedFamilies;
            flushPassiveEffects();
            flushSync(function() {
              scheduleFibersWithFamiliesRecursively(root2.current, updatedFamilies, staleFamilies);
            });
          }
        };
        var scheduleRoot = function(root2, element) {
          {
            if (root2.context !== emptyContextObject) {
              return;
            }
            flushPassiveEffects();
            flushSync(function() {
              updateContainer(element, root2, null, null);
            });
          }
        };
        function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
          {
            var alternate = fiber.alternate, child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
            var candidateType = null;
            switch (tag) {
              case FunctionComponent:
              case SimpleMemoComponent:
              case ClassComponent:
                candidateType = type;
                break;
              case ForwardRef:
                candidateType = type.render;
                break;
            }
            if (resolveFamily === null) {
              throw new Error("Expected resolveFamily to be set during hot reload.");
            }
            var needsRender = false;
            var needsRemount = false;
            if (candidateType !== null) {
              var family = resolveFamily(candidateType);
              if (family !== void 0) {
                if (staleFamilies.has(family)) {
                  needsRemount = true;
                } else if (updatedFamilies.has(family)) {
                  if (tag === ClassComponent) {
                    needsRemount = true;
                  } else {
                    needsRender = true;
                  }
                }
              }
            }
            if (failedBoundaries !== null) {
              if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) {
                needsRemount = true;
              }
            }
            if (needsRemount) {
              fiber.yc = true;
            }
            if (needsRemount || needsRender) {
              var _root = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (_root !== null) {
                scheduleUpdateOnFiber(_root, fiber, SyncLane, NoTimestamp);
              }
            }
            if (child !== null && !needsRemount) {
              scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);
            }
            if (sibling !== null) {
              scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);
            }
          }
        }
        var findHostInstancesForRefresh = function(root2, families) {
          {
            var hostInstances = /* @__PURE__ */ new Set();
            var types = new Set(families.map(function(family) {
              return family.current;
            }));
            findHostInstancesForMatchingFibersRecursively(root2.current, types, hostInstances);
            return hostInstances;
          }
        };
        function findHostInstancesForMatchingFibersRecursively(fiber, types, hostInstances) {
          {
            var child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
            var candidateType = null;
            switch (tag) {
              case FunctionComponent:
              case SimpleMemoComponent:
              case ClassComponent:
                candidateType = type;
                break;
              case ForwardRef:
                candidateType = type.render;
                break;
            }
            var didMatch = false;
            if (candidateType !== null) {
              if (types.has(candidateType)) {
                didMatch = true;
              }
            }
            if (didMatch) {
              findHostInstancesForFiberShallowly(fiber, hostInstances);
            } else {
              if (child !== null) {
                findHostInstancesForMatchingFibersRecursively(child, types, hostInstances);
              }
            }
            if (sibling !== null) {
              findHostInstancesForMatchingFibersRecursively(sibling, types, hostInstances);
            }
          }
        }
        function findHostInstancesForFiberShallowly(fiber, hostInstances) {
          {
            var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);
            if (foundHostInstances) {
              return;
            }
            var node = fiber;
            while (true) {
              switch (node.tag) {
                case HostComponent:
                  hostInstances.add(node.stateNode);
                  return;
                case HostPortal:
                  hostInstances.add(node.stateNode.containerInfo);
                  return;
                case HostRoot:
                  hostInstances.add(node.stateNode.containerInfo);
                  return;
              }
              if (node.return === null) {
                throw new Error("Expected to reach root first.");
              }
              node = node.return;
            }
          }
        }
        function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {
          {
            var node = fiber;
            var foundHostInstances = false;
            while (true) {
              if (node.tag === HostComponent) {
                foundHostInstances = true;
                hostInstances.add(node.stateNode);
              } else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === fiber) {
                return foundHostInstances;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === fiber) {
                  return foundHostInstances;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
          }
          return false;
        }
        var hasBadMapPolyfill;
        {
          hasBadMapPolyfill = false;
          try {
            var nonExtensibleObject = Object.preventExtensions({});
            /* @__PURE__ */ new Map([[nonExtensibleObject, null]]);
            /* @__PURE__ */ new Set([nonExtensibleObject]);
          } catch (e) {
            hasBadMapPolyfill = true;
          }
        }
        function FiberNode(tag, pendingProps, key, mode) {
          this.tag = tag;
          this.key = key;
          this.elementType = null;
          this.type = null;
          this.stateNode = null;
          this.return = null;
          this.child = null;
          this.sibling = null;
          this.index = 0;
          this.ref = null;
          this.pendingProps = pendingProps;
          this.memoizedProps = null;
          this.updateQueue = null;
          this.memoizedState = null;
          this.dependencies = null;
          this.mode = mode;
          this.flags = NoFlags;
          this.subtreeFlags = NoFlags;
          this.deletions = null;
          this.lanes = NoLanes;
          this.childLanes = NoLanes;
          this.alternate = null;
          {
            this.actualDuration = Number.NaN;
            this.actualStartTime = Number.NaN;
            this.selfBaseDuration = Number.NaN;
            this.treeBaseDuration = Number.NaN;
            this.actualDuration = 0;
            this.actualStartTime = -1;
            this.selfBaseDuration = 0;
            this.treeBaseDuration = 0;
          }
          {
            this.$a = null;
            this.qa = null;
            this.yc = false;
            this.xc = null;
            if (!hasBadMapPolyfill && typeof Object.preventExtensions === "function") {
              Object.preventExtensions(this);
            }
          }
        }
        var createFiber = function(tag, pendingProps, key, mode) {
          return new FiberNode(tag, pendingProps, key, mode);
        };
        function shouldConstruct$1(Component2) {
          var prototype = Component2.prototype;
          return !!(prototype && prototype.isReactComponent);
        }
        function isSimpleFunctionComponent(type) {
          return typeof type === "function" && !shouldConstruct$1(type) && type.defaultProps === void 0;
        }
        function resolveLazyComponentTag(Component2) {
          if (typeof Component2 === "function") {
            return shouldConstruct$1(Component2) ? ClassComponent : FunctionComponent;
          } else if (Component2 !== void 0 && Component2 !== null) {
            var $$typeof = Component2.$$typeof;
            if ($$typeof === REACT_FORWARD_REF_TYPE) {
              return ForwardRef;
            }
            if ($$typeof === REACT_MEMO_TYPE) {
              return MemoComponent;
            }
          }
          return IndeterminateComponent;
        }
        function createWorkInProgress(current2, pendingProps) {
          var workInProgress2 = current2.alternate;
          if (workInProgress2 === null) {
            workInProgress2 = createFiber(current2.tag, pendingProps, current2.key, current2.mode);
            workInProgress2.elementType = current2.elementType;
            workInProgress2.type = current2.type;
            workInProgress2.stateNode = current2.stateNode;
            {
              workInProgress2.$a = current2.$a;
              workInProgress2.qa = current2.qa;
              workInProgress2.xc = current2.xc;
            }
            workInProgress2.alternate = current2;
            current2.alternate = workInProgress2;
          } else {
            workInProgress2.pendingProps = pendingProps;
            workInProgress2.type = current2.type;
            workInProgress2.flags = NoFlags;
            workInProgress2.subtreeFlags = NoFlags;
            workInProgress2.deletions = null;
            {
              workInProgress2.actualDuration = 0;
              workInProgress2.actualStartTime = -1;
            }
          }
          workInProgress2.flags = current2.flags & StaticMask;
          workInProgress2.childLanes = current2.childLanes;
          workInProgress2.lanes = current2.lanes;
          workInProgress2.child = current2.child;
          workInProgress2.memoizedProps = current2.memoizedProps;
          workInProgress2.memoizedState = current2.memoizedState;
          workInProgress2.updateQueue = current2.updateQueue;
          var currentDependencies = current2.dependencies;
          workInProgress2.dependencies = currentDependencies === null ? null : {
            lanes: currentDependencies.lanes,
            firstContext: currentDependencies.firstContext
          };
          workInProgress2.sibling = current2.sibling;
          workInProgress2.index = current2.index;
          workInProgress2.ref = current2.ref;
          {
            workInProgress2.selfBaseDuration = current2.selfBaseDuration;
            workInProgress2.treeBaseDuration = current2.treeBaseDuration;
          }
          {
            workInProgress2.yc = current2.yc;
            switch (workInProgress2.tag) {
              case IndeterminateComponent:
              case FunctionComponent:
              case SimpleMemoComponent:
                workInProgress2.type = resolveFunctionForHotReloading(current2.type);
                break;
              case ClassComponent:
                workInProgress2.type = resolveClassForHotReloading(current2.type);
                break;
              case ForwardRef:
                workInProgress2.type = resolveForwardRefForHotReloading(current2.type);
                break;
            }
          }
          return workInProgress2;
        }
        function resetWorkInProgress(workInProgress2, renderLanes2) {
          workInProgress2.flags &= StaticMask | Placement;
          var current2 = workInProgress2.alternate;
          if (current2 === null) {
            workInProgress2.childLanes = NoLanes;
            workInProgress2.lanes = renderLanes2;
            workInProgress2.child = null;
            workInProgress2.subtreeFlags = NoFlags;
            workInProgress2.memoizedProps = null;
            workInProgress2.memoizedState = null;
            workInProgress2.updateQueue = null;
            workInProgress2.dependencies = null;
            workInProgress2.stateNode = null;
            {
              workInProgress2.selfBaseDuration = 0;
              workInProgress2.treeBaseDuration = 0;
            }
          } else {
            workInProgress2.childLanes = current2.childLanes;
            workInProgress2.lanes = current2.lanes;
            workInProgress2.child = current2.child;
            workInProgress2.subtreeFlags = NoFlags;
            workInProgress2.deletions = null;
            workInProgress2.memoizedProps = current2.memoizedProps;
            workInProgress2.memoizedState = current2.memoizedState;
            workInProgress2.updateQueue = current2.updateQueue;
            workInProgress2.type = current2.type;
            var currentDependencies = current2.dependencies;
            workInProgress2.dependencies = currentDependencies === null ? null : {
              lanes: currentDependencies.lanes,
              firstContext: currentDependencies.firstContext
            };
            {
              workInProgress2.selfBaseDuration = current2.selfBaseDuration;
              workInProgress2.treeBaseDuration = current2.treeBaseDuration;
            }
          }
          return workInProgress2;
        }
        function createHostRootFiber(tag, isStrictMode, concurrentUpdatesByDefaultOverride) {
          var mode;
          if (tag === ConcurrentRoot) {
            mode = ConcurrentMode;
            if (isStrictMode === true) {
              mode |= StrictLegacyMode;
              {
                mode |= StrictEffectsMode;
              }
            }
          } else {
            mode = NoMode;
          }
          if (isDevToolsPresent) {
            mode |= ProfileMode;
          }
          return createFiber(HostRoot, null, null, mode);
        }
        function createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes) {
          var fiberTag = IndeterminateComponent;
          var resolvedType = type;
          if (typeof type === "function") {
            if (shouldConstruct$1(type)) {
              fiberTag = ClassComponent;
              {
                resolvedType = resolveClassForHotReloading(resolvedType);
              }
            } else {
              {
                resolvedType = resolveFunctionForHotReloading(resolvedType);
              }
            }
          } else if (typeof type === "string") {
            fiberTag = HostComponent;
          } else {
            getTag:
              switch (type) {
                case REACT_FRAGMENT_TYPE:
                  return createFiberFromFragment(pendingProps.children, mode, lanes, key);
                case REACT_STRICT_MODE_TYPE:
                  fiberTag = Mode;
                  mode |= StrictLegacyMode;
                  if ((mode & ConcurrentMode) !== NoMode) {
                    mode |= StrictEffectsMode;
                  }
                  break;
                case REACT_PROFILER_TYPE:
                  return createFiberFromProfiler(pendingProps, mode, lanes, key);
                case REACT_SUSPENSE_TYPE:
                  return createFiberFromSuspense(pendingProps, mode, lanes, key);
                case REACT_SUSPENSE_LIST_TYPE:
                  return createFiberFromSuspenseList(pendingProps, mode, lanes, key);
                case REACT_OFFSCREEN_TYPE:
                  return createFiberFromOffscreen(pendingProps, mode, lanes, key);
                case REACT_LEGACY_HIDDEN_TYPE:
                case REACT_SCOPE_TYPE:
                case REACT_CACHE_TYPE:
                case REACT_TRACING_MARKER_TYPE:
                case REACT_DEBUG_TRACING_MODE_TYPE:
                default: {
                  if (typeof type === "object" && type !== null) {
                    switch (type.$$typeof) {
                      case REACT_PROVIDER_TYPE:
                        fiberTag = ContextProvider;
                        break getTag;
                      case REACT_CONTEXT_TYPE:
                        fiberTag = ContextConsumer;
                        break getTag;
                      case REACT_FORWARD_REF_TYPE:
                        fiberTag = ForwardRef;
                        {
                          resolvedType = resolveForwardRefForHotReloading(resolvedType);
                        }
                        break getTag;
                      case REACT_MEMO_TYPE:
                        fiberTag = MemoComponent;
                        break getTag;
                      case REACT_LAZY_TYPE:
                        fiberTag = LazyComponent;
                        resolvedType = null;
                        break getTag;
                    }
                  }
                  var info = "";
                  {
                    if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                      info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
                    }
                    var ownerName = owner ? getComponentNameFromFiber(owner) : null;
                    if (ownerName) {
                      info += "\n\nCheck the render method of `" + ownerName + "`.";
                    }
                  }
                  throw new Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) " + ("but got: " + (type == null ? type : typeof type) + "." + info));
                }
              }
          }
          var fiber = createFiber(fiberTag, pendingProps, key, mode);
          fiber.elementType = type;
          fiber.type = resolvedType;
          fiber.lanes = lanes;
          {
            fiber.qa = owner;
          }
          return fiber;
        }
        function createFiberFromElement(element, mode, lanes) {
          var owner = null;
          {
            owner = element.T;
          }
          var type = element.type;
          var key = element.key;
          var pendingProps = element.props;
          var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes);
          {
            fiber.$a = element.pb;
            fiber.qa = element.T;
          }
          return fiber;
        }
        function createFiberFromFragment(elements, mode, lanes, key) {
          var fiber = createFiber(Fragment, elements, key, mode);
          fiber.lanes = lanes;
          return fiber;
        }
        function createFiberFromProfiler(pendingProps, mode, lanes, key) {
          {
            if (typeof pendingProps.id !== "string") {
              error('Profiler must specify an "id" of type `string` as a prop. Received the type `%s` instead.', typeof pendingProps.id);
            }
          }
          var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode);
          fiber.elementType = REACT_PROFILER_TYPE;
          fiber.lanes = lanes;
          {
            fiber.stateNode = {
              effectDuration: 0,
              passiveEffectDuration: 0
            };
          }
          return fiber;
        }
        function createFiberFromSuspense(pendingProps, mode, lanes, key) {
          var fiber = createFiber(SuspenseComponent, pendingProps, key, mode);
          fiber.elementType = REACT_SUSPENSE_TYPE;
          fiber.lanes = lanes;
          return fiber;
        }
        function createFiberFromSuspenseList(pendingProps, mode, lanes, key) {
          var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);
          fiber.elementType = REACT_SUSPENSE_LIST_TYPE;
          fiber.lanes = lanes;
          return fiber;
        }
        function createFiberFromOffscreen(pendingProps, mode, lanes, key) {
          var fiber = createFiber(OffscreenComponent, pendingProps, key, mode);
          fiber.elementType = REACT_OFFSCREEN_TYPE;
          fiber.lanes = lanes;
          var primaryChildInstance = {
            isHidden: false
          };
          fiber.stateNode = primaryChildInstance;
          return fiber;
        }
        function createFiberFromText(content, mode, lanes) {
          var fiber = createFiber(HostText, content, null, mode);
          fiber.lanes = lanes;
          return fiber;
        }
        function createFiberFromHostInstanceForDeletion() {
          var fiber = createFiber(HostComponent, null, null, NoMode);
          fiber.elementType = "DELETED";
          return fiber;
        }
        function createFiberFromDehydratedFragment(dehydratedNode) {
          var fiber = createFiber(DehydratedFragment, null, null, NoMode);
          fiber.stateNode = dehydratedNode;
          return fiber;
        }
        function createFiberFromPortal(portal, mode, lanes) {
          var pendingProps = portal.children !== null ? portal.children : [];
          var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
          fiber.lanes = lanes;
          fiber.stateNode = {
            containerInfo: portal.containerInfo,
            pendingChildren: null,
            // Used by persistent updates
            implementation: portal.implementation
          };
          return fiber;
        }
        function assignFiberPropertiesInDEV(target, source) {
          if (target === null) {
            target = createFiber(IndeterminateComponent, null, null, NoMode);
          }
          target.tag = source.tag;
          target.key = source.key;
          target.elementType = source.elementType;
          target.type = source.type;
          target.stateNode = source.stateNode;
          target.return = source.return;
          target.child = source.child;
          target.sibling = source.sibling;
          target.index = source.index;
          target.ref = source.ref;
          target.pendingProps = source.pendingProps;
          target.memoizedProps = source.memoizedProps;
          target.updateQueue = source.updateQueue;
          target.memoizedState = source.memoizedState;
          target.dependencies = source.dependencies;
          target.mode = source.mode;
          target.flags = source.flags;
          target.subtreeFlags = source.subtreeFlags;
          target.deletions = source.deletions;
          target.lanes = source.lanes;
          target.childLanes = source.childLanes;
          target.alternate = source.alternate;
          {
            target.actualDuration = source.actualDuration;
            target.actualStartTime = source.actualStartTime;
            target.selfBaseDuration = source.selfBaseDuration;
            target.treeBaseDuration = source.treeBaseDuration;
          }
          target.$a = source.$a;
          target.qa = source.qa;
          target.yc = source.yc;
          target.xc = source.xc;
          return target;
        }
        function FiberRootNode(containerInfo, tag, hydrate2, identifierPrefix, onRecoverableError) {
          this.tag = tag;
          this.containerInfo = containerInfo;
          this.pendingChildren = null;
          this.current = null;
          this.pingCache = null;
          this.finishedWork = null;
          this.timeoutHandle = noTimeout;
          this.context = null;
          this.pendingContext = null;
          this.callbackNode = null;
          this.callbackPriority = NoLane;
          this.eventTimes = createLaneMap(NoLanes);
          this.expirationTimes = createLaneMap(NoTimestamp);
          this.pendingLanes = NoLanes;
          this.suspendedLanes = NoLanes;
          this.pingedLanes = NoLanes;
          this.expiredLanes = NoLanes;
          this.mutableReadLanes = NoLanes;
          this.finishedLanes = NoLanes;
          this.entangledLanes = NoLanes;
          this.entanglements = createLaneMap(NoLanes);
          this.identifierPrefix = identifierPrefix;
          this.onRecoverableError = onRecoverableError;
          {
            this.mutableSourceEagerHydrationData = null;
          }
          {
            this.effectDuration = 0;
            this.passiveEffectDuration = 0;
          }
          {
            this.memoizedUpdaters = /* @__PURE__ */ new Set();
            var pendingUpdatersLaneMap = this.pendingUpdatersLaneMap = [];
            for (var _i = 0; _i < TotalLanes; _i++) {
              pendingUpdatersLaneMap.push(/* @__PURE__ */ new Set());
            }
          }
          {
            switch (tag) {
              case ConcurrentRoot:
                this.Hp = hydrate2 ? "hydrateRoot()" : "createRoot()";
                break;
              case LegacyRoot:
                this.Hp = hydrate2 ? "hydrate()" : "render()";
                break;
            }
          }
        }
        function createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
          var root2 = new FiberRootNode(containerInfo, tag, hydrate2, identifierPrefix, onRecoverableError);
          var uninitializedFiber = createHostRootFiber(tag, isStrictMode);
          root2.current = uninitializedFiber;
          uninitializedFiber.stateNode = root2;
          {
            var _initialState = {
              element: initialChildren,
              isDehydrated: hydrate2,
              cache: null,
              // not enabled yet
              transitions: null,
              pendingSuspenseBoundaries: null
            };
            uninitializedFiber.memoizedState = _initialState;
          }
          initializeUpdateQueue(uninitializedFiber);
          return root2;
        }
        var ReactVersion = "18.2.0";
        function createPortal(children, containerInfo, implementation) {
          var key = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
          {
            checkKeyStringCoercion(key);
          }
          return {
            // This tag allow us to uniquely identify this as a React Portal
            $$typeof: REACT_PORTAL_TYPE,
            key: key == null ? null : "" + key,
            children,
            containerInfo,
            implementation
          };
        }
        var didWarnAboutNestedUpdates;
        var didWarnAboutFindNodeInStrictMode;
        {
          didWarnAboutNestedUpdates = false;
          didWarnAboutFindNodeInStrictMode = {};
        }
        function getContextForSubtree(parentComponent) {
          if (!parentComponent) {
            return emptyContextObject;
          }
          var fiber = get(parentComponent);
          var parentContext = findCurrentUnmaskedContext(fiber);
          if (fiber.tag === ClassComponent) {
            var Component2 = fiber.type;
            if (isContextProvider(Component2)) {
              return processChildContext(fiber, Component2, parentContext);
            }
          }
          return parentContext;
        }
        function findHostInstanceWithWarning(component, methodName) {
          {
            var fiber = get(component);
            if (fiber === void 0) {
              if (typeof component.render === "function") {
                throw new Error("Unable to find node on an unmounted component.");
              } else {
                var keys = Object.keys(component).join(",");
                throw new Error("Argument appears to not be a ReactComponent. Keys: " + keys);
              }
            }
            var hostFiber = findCurrentHostFiber(fiber);
            if (hostFiber === null) {
              return null;
            }
            if (hostFiber.mode & StrictLegacyMode) {
              var componentName = getComponentNameFromFiber(fiber) || "Component";
              if (!didWarnAboutFindNodeInStrictMode[componentName]) {
                didWarnAboutFindNodeInStrictMode[componentName] = true;
                var previousFiber = current;
                try {
                  setCurrentFiber(hostFiber);
                  if (fiber.mode & StrictLegacyMode) {
                    error("%s is deprecated in StrictMode. %s was passed an instance of %s which is inside StrictMode. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                  } else {
                    error("%s is deprecated in StrictMode. %s was passed an instance of %s which renders StrictMode children. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                  }
                } finally {
                  if (previousFiber) {
                    setCurrentFiber(previousFiber);
                  } else {
                    resetCurrentFiber();
                  }
                }
              }
            }
            return hostFiber.stateNode;
          }
        }
        function createContainer(containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
          var hydrate2 = false;
          var initialChildren = null;
          return createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
        }
        function createHydrationContainer(initialChildren, callback, containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
          var hydrate2 = true;
          var root2 = createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
          root2.context = getContextForSubtree(null);
          var current2 = root2.current;
          var eventTime = requestEventTime();
          var lane = requestUpdateLane(current2);
          var update = createUpdate(eventTime, lane);
          update.callback = callback !== void 0 && callback !== null ? callback : null;
          enqueueUpdate(current2, update, lane);
          scheduleInitialHydrationOnRoot(root2, lane, eventTime);
          return root2;
        }
        function updateContainer(element, container, parentComponent, callback) {
          {
            onScheduleRoot(container, element);
          }
          var current$1 = container.current;
          var eventTime = requestEventTime();
          var lane = requestUpdateLane(current$1);
          {
            markRenderScheduled(lane);
          }
          var context = getContextForSubtree(parentComponent);
          if (container.context === null) {
            container.context = context;
          } else {
            container.pendingContext = context;
          }
          {
            if (isRendering && current !== null && !didWarnAboutNestedUpdates) {
              didWarnAboutNestedUpdates = true;
              error("Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate.\n\nCheck the render method of %s.", getComponentNameFromFiber(current) || "Unknown");
            }
          }
          var update = createUpdate(eventTime, lane);
          update.payload = {
            element
          };
          callback = callback === void 0 ? null : callback;
          if (callback !== null) {
            {
              if (typeof callback !== "function") {
                error("render(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callback);
              }
            }
            update.callback = callback;
          }
          var root2 = enqueueUpdate(current$1, update, lane);
          if (root2 !== null) {
            scheduleUpdateOnFiber(root2, current$1, lane, eventTime);
            entangleTransitions(root2, current$1, lane);
          }
          return lane;
        }
        function getPublicRootInstance(container) {
          var containerFiber = container.current;
          if (!containerFiber.child) {
            return null;
          }
          switch (containerFiber.child.tag) {
            case HostComponent:
              return getPublicInstance(containerFiber.child.stateNode);
            default:
              return containerFiber.child.stateNode;
          }
        }
        function attemptSynchronousHydration$1(fiber) {
          switch (fiber.tag) {
            case HostRoot: {
              var root2 = fiber.stateNode;
              if (isRootDehydrated(root2)) {
                var lanes = getHighestPriorityPendingLanes(root2);
                flushRoot(root2, lanes);
              }
              break;
            }
            case SuspenseComponent: {
              flushSync(function() {
                var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (root3 !== null) {
                  var eventTime = requestEventTime();
                  scheduleUpdateOnFiber(root3, fiber, SyncLane, eventTime);
                }
              });
              var retryLane = SyncLane;
              markRetryLaneIfNotHydrated(fiber, retryLane);
              break;
            }
          }
        }
        function markRetryLaneImpl(fiber, retryLane) {
          var suspenseState = fiber.memoizedState;
          if (suspenseState !== null && suspenseState.dehydrated !== null) {
            suspenseState.retryLane = higherPriorityLane(suspenseState.retryLane, retryLane);
          }
        }
        function markRetryLaneIfNotHydrated(fiber, retryLane) {
          markRetryLaneImpl(fiber, retryLane);
          var alternate = fiber.alternate;
          if (alternate) {
            markRetryLaneImpl(alternate, retryLane);
          }
        }
        function attemptContinuousHydration$1(fiber) {
          if (fiber.tag !== SuspenseComponent) {
            return;
          }
          var lane = SelectiveHydrationLane;
          var root2 = enqueueConcurrentRenderForLane(fiber, lane);
          if (root2 !== null) {
            var eventTime = requestEventTime();
            scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
          }
          markRetryLaneIfNotHydrated(fiber, lane);
        }
        function attemptHydrationAtCurrentPriority$1(fiber) {
          if (fiber.tag !== SuspenseComponent) {
            return;
          }
          var lane = requestUpdateLane(fiber);
          var root2 = enqueueConcurrentRenderForLane(fiber, lane);
          if (root2 !== null) {
            var eventTime = requestEventTime();
            scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
          }
          markRetryLaneIfNotHydrated(fiber, lane);
        }
        function findHostInstanceWithNoPortals(fiber) {
          var hostFiber = findCurrentHostFiberWithNoPortals(fiber);
          if (hostFiber === null) {
            return null;
          }
          return hostFiber.stateNode;
        }
        var shouldErrorImpl = function(fiber) {
          return null;
        };
        function shouldError(fiber) {
          return shouldErrorImpl(fiber);
        }
        var shouldSuspendImpl = function(fiber) {
          return false;
        };
        function shouldSuspend(fiber) {
          return shouldSuspendImpl(fiber);
        }
        var overrideHookState = null;
        var overrideHookStateDeletePath = null;
        var overrideHookStateRenamePath = null;
        var overrideProps = null;
        var overridePropsDeletePath = null;
        var overridePropsRenamePath = null;
        var scheduleUpdate = null;
        var setErrorHandler = null;
        var setSuspenseHandler = null;
        {
          var copyWithDeleteImpl = function(obj, path, index2) {
            var key = path[index2];
            var updated = isArray(obj) ? obj.slice() : assign({}, obj);
            if (index2 + 1 === path.length) {
              if (isArray(updated)) {
                updated.splice(key, 1);
              } else {
                delete updated[key];
              }
              return updated;
            }
            updated[key] = copyWithDeleteImpl(obj[key], path, index2 + 1);
            return updated;
          };
          var copyWithDelete = function(obj, path) {
            return copyWithDeleteImpl(obj, path, 0);
          };
          var copyWithRenameImpl = function(obj, oldPath, newPath, index2) {
            var oldKey = oldPath[index2];
            var updated = isArray(obj) ? obj.slice() : assign({}, obj);
            if (index2 + 1 === oldPath.length) {
              var newKey = newPath[index2];
              updated[newKey] = updated[oldKey];
              if (isArray(updated)) {
                updated.splice(oldKey, 1);
              } else {
                delete updated[oldKey];
              }
            } else {
              updated[oldKey] = copyWithRenameImpl(
                // $FlowFixMe number or string is fine here
                obj[oldKey],
                oldPath,
                newPath,
                index2 + 1
              );
            }
            return updated;
          };
          var copyWithRename = function(obj, oldPath, newPath) {
            if (oldPath.length !== newPath.length) {
              warn("copyWithRename() expects paths of the same length");
              return;
            } else {
              for (var i = 0; i < newPath.length - 1; i++) {
                if (oldPath[i] !== newPath[i]) {
                  warn("copyWithRename() expects paths to be the same except for the deepest key");
                  return;
                }
              }
            }
            return copyWithRenameImpl(obj, oldPath, newPath, 0);
          };
          var copyWithSetImpl = function(obj, path, index2, value) {
            if (index2 >= path.length) {
              return value;
            }
            var key = path[index2];
            var updated = isArray(obj) ? obj.slice() : assign({}, obj);
            updated[key] = copyWithSetImpl(obj[key], path, index2 + 1, value);
            return updated;
          };
          var copyWithSet = function(obj, path, value) {
            return copyWithSetImpl(obj, path, 0, value);
          };
          var findHook = function(fiber, id) {
            var currentHook2 = fiber.memoizedState;
            while (currentHook2 !== null && id > 0) {
              currentHook2 = currentHook2.next;
              id--;
            }
            return currentHook2;
          };
          overrideHookState = function(fiber, id, path, value) {
            var hook = findHook(fiber, id);
            if (hook !== null) {
              var newState = copyWithSet(hook.memoizedState, path, value);
              hook.memoizedState = newState;
              hook.baseState = newState;
              fiber.memoizedProps = assign({}, fiber.memoizedProps);
              var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
              }
            }
          };
          overrideHookStateDeletePath = function(fiber, id, path) {
            var hook = findHook(fiber, id);
            if (hook !== null) {
              var newState = copyWithDelete(hook.memoizedState, path);
              hook.memoizedState = newState;
              hook.baseState = newState;
              fiber.memoizedProps = assign({}, fiber.memoizedProps);
              var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
              }
            }
          };
          overrideHookStateRenamePath = function(fiber, id, oldPath, newPath) {
            var hook = findHook(fiber, id);
            if (hook !== null) {
              var newState = copyWithRename(hook.memoizedState, oldPath, newPath);
              hook.memoizedState = newState;
              hook.baseState = newState;
              fiber.memoizedProps = assign({}, fiber.memoizedProps);
              var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
              }
            }
          };
          overrideProps = function(fiber, path, value) {
            fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);
            if (fiber.alternate) {
              fiber.alternate.pendingProps = fiber.pendingProps;
            }
            var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
            if (root2 !== null) {
              scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
            }
          };
          overridePropsDeletePath = function(fiber, path) {
            fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path);
            if (fiber.alternate) {
              fiber.alternate.pendingProps = fiber.pendingProps;
            }
            var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
            if (root2 !== null) {
              scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
            }
          };
          overridePropsRenamePath = function(fiber, oldPath, newPath) {
            fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath);
            if (fiber.alternate) {
              fiber.alternate.pendingProps = fiber.pendingProps;
            }
            var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
            if (root2 !== null) {
              scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
            }
          };
          scheduleUpdate = function(fiber) {
            var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
            if (root2 !== null) {
              scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
            }
          };
          setErrorHandler = function(newShouldErrorImpl) {
            shouldErrorImpl = newShouldErrorImpl;
          };
          setSuspenseHandler = function(newShouldSuspendImpl) {
            shouldSuspendImpl = newShouldSuspendImpl;
          };
        }
        function findHostInstanceByFiber(fiber) {
          var hostFiber = findCurrentHostFiber(fiber);
          if (hostFiber === null) {
            return null;
          }
          return hostFiber.stateNode;
        }
        function emptyFindFiberByHostInstance(instance) {
          return null;
        }
        function getCurrentFiberForDevTools() {
          return current;
        }
        function injectIntoDevTools(devToolsConfig) {
          var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
          var ReactCurrentDispatcher2 = ReactSharedInternals.ReactCurrentDispatcher;
          return injectInternals({
            bundleType: devToolsConfig.bundleType,
            version: devToolsConfig.version,
            rendererPackageName: devToolsConfig.rendererPackageName,
            rendererConfig: devToolsConfig.rendererConfig,
            overrideHookState,
            overrideHookStateDeletePath,
            overrideHookStateRenamePath,
            overrideProps,
            overridePropsDeletePath,
            overridePropsRenamePath,
            setErrorHandler,
            setSuspenseHandler,
            scheduleUpdate,
            currentDispatcherRef: ReactCurrentDispatcher2,
            findHostInstanceByFiber,
            findFiberByHostInstance: findFiberByHostInstance || emptyFindFiberByHostInstance,
            // React Refresh
            findHostInstancesForRefresh,
            scheduleRefresh,
            scheduleRoot,
            setRefreshHandler,
            // Enables DevTools to append owner stacks to error messages in DEV mode.
            getCurrentFiber: getCurrentFiberForDevTools,
            // Enables DevTools to detect reconciler version rather than renderer version
            // which may not match for third party renderers.
            reconcilerVersion: ReactVersion
          });
        }
        var defaultOnRecoverableError = typeof reportError === "function" ? (
          // In modern browsers, reportError will dispatch an error event,
          // emulating an uncaught JavaScript error.
          reportError
        ) : function(error2) {
          console["error"](error2);
        };
        function ReactDOMRoot(internalRoot) {
          this.Te = internalRoot;
        }
        ReactDOMHydrationRoot.prototype.render = ReactDOMRoot.prototype.render = function(children) {
          var root2 = this.Te;
          if (root2 === null) {
            throw new Error("Cannot update an unmounted root.");
          }
          {
            if (typeof arguments[1] === "function") {
              error("render(...): does not support the second callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
            } else if (isValidContainer(arguments[1])) {
              error("You passed a container to the second argument of root.render(...). You don't need to pass it again since you already passed it to create the root.");
            } else if (typeof arguments[1] !== "undefined") {
              error("You passed a second argument to root.render(...) but it only accepts one argument.");
            }
            var container = root2.containerInfo;
            if (container.nodeType !== COMMENT_NODE) {
              var hostInstance = findHostInstanceWithNoPortals(root2.current);
              if (hostInstance) {
                if (hostInstance.parentNode !== container) {
                  error("render(...): It looks like the React-rendered content of the root container was removed without using React. This is not supported and will cause errors. Instead, call root.unmount() to empty a root's container.");
                }
              }
            }
          }
          updateContainer(children, root2, null, null);
        };
        ReactDOMHydrationRoot.prototype.unmount = ReactDOMRoot.prototype.unmount = function() {
          {
            if (typeof arguments[0] === "function") {
              error("unmount(...): does not support a callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
            }
          }
          var root2 = this.Te;
          if (root2 !== null) {
            this.Te = null;
            var container = root2.containerInfo;
            {
              if (isAlreadyRendering()) {
                error("Attempted to synchronously unmount a root while React was already rendering. React cannot finish unmounting the root until the current render has completed, which may lead to a race condition.");
              }
            }
            flushSync(function() {
              updateContainer(null, root2, null, null);
            });
            unmarkContainerAsRoot(container);
          }
        };
        function createRoot(container, options2) {
          if (!isValidContainer(container)) {
            throw new Error("createRoot(...): Target container is not a DOM element.");
          }
          warnIfReactDOMContainerInDEV(container);
          var isStrictMode = false;
          var concurrentUpdatesByDefaultOverride = false;
          var identifierPrefix = "";
          var onRecoverableError = defaultOnRecoverableError;
          var transitionCallbacks = null;
          if (options2 !== null && options2 !== void 0) {
            {
              if (options2.hydrate) {
                warn("hydrate through createRoot is deprecated. Use ReactDOMClient.hydrateRoot(container, <App />) instead.");
              } else {
                if (typeof options2 === "object" && options2 !== null && options2.$$typeof === REACT_ELEMENT_TYPE) {
                  error("You passed a JSX element to createRoot. You probably meant to call root.render instead. Example usage:\n\n  let root = createRoot(domContainer);\n  root.render(<App />);");
                }
              }
            }
            if (options2.unstable_strictMode === true) {
              isStrictMode = true;
            }
            if (options2.identifierPrefix !== void 0) {
              identifierPrefix = options2.identifierPrefix;
            }
            if (options2.onRecoverableError !== void 0) {
              onRecoverableError = options2.onRecoverableError;
            }
            if (options2.transitionCallbacks !== void 0) {
              transitionCallbacks = options2.transitionCallbacks;
            }
          }
          var root2 = createContainer(container, ConcurrentRoot, null, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
          markContainerAsRoot(root2.current, container);
          var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
          listenToAllSupportedEvents(rootContainerElement);
          return new ReactDOMRoot(root2);
        }
        function ReactDOMHydrationRoot(internalRoot) {
          this.Te = internalRoot;
        }
        function scheduleHydration(target) {
          if (target) {
            queueExplicitHydrationTarget(target);
          }
        }
        ReactDOMHydrationRoot.prototype.unstable_scheduleHydration = scheduleHydration;
        function hydrateRoot(container, initialChildren, options2) {
          if (!isValidContainer(container)) {
            throw new Error("hydrateRoot(...): Target container is not a DOM element.");
          }
          warnIfReactDOMContainerInDEV(container);
          {
            if (initialChildren === void 0) {
              error("Must provide initial children as second argument to hydrateRoot. Example usage: hydrateRoot(domContainer, <App />)");
            }
          }
          var hydrationCallbacks = options2 != null ? options2 : null;
          var mutableSources = options2 != null && options2.hydratedSources || null;
          var isStrictMode = false;
          var concurrentUpdatesByDefaultOverride = false;
          var identifierPrefix = "";
          var onRecoverableError = defaultOnRecoverableError;
          if (options2 !== null && options2 !== void 0) {
            if (options2.unstable_strictMode === true) {
              isStrictMode = true;
            }
            if (options2.identifierPrefix !== void 0) {
              identifierPrefix = options2.identifierPrefix;
            }
            if (options2.onRecoverableError !== void 0) {
              onRecoverableError = options2.onRecoverableError;
            }
          }
          var root2 = createHydrationContainer(initialChildren, null, container, ConcurrentRoot, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
          markContainerAsRoot(root2.current, container);
          listenToAllSupportedEvents(container);
          if (mutableSources) {
            for (var i = 0; i < mutableSources.length; i++) {
              var mutableSource = mutableSources[i];
              registerMutableSourceForHydration(root2, mutableSource);
            }
          }
          return new ReactDOMHydrationRoot(root2);
        }
        function isValidContainer(node) {
          return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || !disableCommentsAsDOMContainers));
        }
        function isValidContainerLegacy(node) {
          return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || node.nodeType === COMMENT_NODE && node.nodeValue === " react-mount-point-unstable "));
        }
        function warnIfReactDOMContainerInDEV(container) {
          {
            if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === "BODY") {
              error("createRoot(): Creating roots directly with document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try using a container element created for your app.");
            }
            if (isContainerMarkedAsRoot(container)) {
              if (container.Aa) {
                error("You are calling ReactDOMClient.createRoot() on a container that was previously passed to ReactDOM.render(). This is not supported.");
              } else {
                error("You are calling ReactDOMClient.createRoot() on a container that has already been passed to createRoot() before. Instead, call root.render() on the existing root instead if you want to update it.");
              }
            }
          }
        }
        var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;
        var topLevelUpdateWarnings;
        {
          topLevelUpdateWarnings = function(container) {
            if (container.Aa && container.nodeType !== COMMENT_NODE) {
              var hostInstance = findHostInstanceWithNoPortals(container.Aa.current);
              if (hostInstance) {
                if (hostInstance.parentNode !== container) {
                  error("render(...): It looks like the React-rendered content of this container was removed without using React. This is not supported and will cause errors. Instead, call ReactDOM.unmountComponentAtNode to empty a container.");
                }
              }
            }
            var isRootRenderedBySomeReact = !!container.Aa;
            var rootEl = getReactRootElementInContainer(container);
            var hasNonRootReactChild = !!(rootEl && getInstanceFromNode(rootEl));
            if (hasNonRootReactChild && !isRootRenderedBySomeReact) {
              error("render(...): Replacing React-rendered children with a new root component. If you intended to update the children of this node, you should instead have the existing children update their state and render the new components instead of calling ReactDOM.render.");
            }
            if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === "BODY") {
              error("render(): Rendering components directly into document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try rendering into a container element created for your app.");
            }
          };
        }
        function getReactRootElementInContainer(container) {
          if (!container) {
            return null;
          }
          if (container.nodeType === DOCUMENT_NODE) {
            return container.documentElement;
          } else {
            return container.firstChild;
          }
        }
        function noopOnRecoverableError() {
        }
        function legacyCreateRootFromDOMContainer(container, initialChildren, parentComponent, callback, isHydrationContainer) {
          if (isHydrationContainer) {
            if (typeof callback === "function") {
              var originalCallback = callback;
              callback = function() {
                var instance = getPublicRootInstance(root2);
                originalCallback.call(instance);
              };
            }
            var root2 = createHydrationContainer(
              initialChildren,
              callback,
              container,
              LegacyRoot,
              null,
              // hydrationCallbacks
              false,
              // isStrictMode
              false,
              // concurrentUpdatesByDefaultOverride,
              "",
              // identifierPrefix
              noopOnRecoverableError
            );
            container.Aa = root2;
            markContainerAsRoot(root2.current, container);
            var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
            listenToAllSupportedEvents(rootContainerElement);
            flushSync();
            return root2;
          } else {
            var rootSibling;
            while (rootSibling = container.lastChild) {
              container.removeChild(rootSibling);
            }
            if (typeof callback === "function") {
              var _originalCallback = callback;
              callback = function() {
                var instance = getPublicRootInstance(_root);
                _originalCallback.call(instance);
              };
            }
            var _root = createContainer(
              container,
              LegacyRoot,
              null,
              // hydrationCallbacks
              false,
              // isStrictMode
              false,
              // concurrentUpdatesByDefaultOverride,
              "",
              // identifierPrefix
              noopOnRecoverableError
            );
            container.Aa = _root;
            markContainerAsRoot(_root.current, container);
            var _rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
            listenToAllSupportedEvents(_rootContainerElement);
            flushSync(function() {
              updateContainer(initialChildren, _root, parentComponent, callback);
            });
            return _root;
          }
        }
        function warnOnInvalidCallback$1(callback, callerName) {
          {
            if (callback !== null && typeof callback !== "function") {
              error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
            }
          }
        }
        function legacyRenderSubtreeIntoContainer(parentComponent, children, container, forceHydrate, callback) {
          {
            topLevelUpdateWarnings(container);
            warnOnInvalidCallback$1(callback === void 0 ? null : callback, "render");
          }
          var maybeRoot = container.Aa;
          var root2;
          if (!maybeRoot) {
            root2 = legacyCreateRootFromDOMContainer(container, children, parentComponent, callback, forceHydrate);
          } else {
            root2 = maybeRoot;
            if (typeof callback === "function") {
              var originalCallback = callback;
              callback = function() {
                var instance = getPublicRootInstance(root2);
                originalCallback.call(instance);
              };
            }
            updateContainer(children, root2, parentComponent, callback);
          }
          return getPublicRootInstance(root2);
        }
        function findDOMNode(componentOrElement) {
          {
            var owner = ReactCurrentOwner$3.current;
            if (owner !== null && owner.stateNode !== null) {
              var warnedAboutRefsInRender = owner.stateNode._g;
              if (!warnedAboutRefsInRender) {
                error("%s is accessing findDOMNode inside its render(). render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentNameFromType(owner.type) || "A component");
              }
              owner.stateNode._g = true;
            }
          }
          if (componentOrElement == null) {
            return null;
          }
          if (componentOrElement.nodeType === ELEMENT_NODE) {
            return componentOrElement;
          }
          {
            return findHostInstanceWithWarning(componentOrElement, "findDOMNode");
          }
        }
        function hydrate(element, container, callback) {
          {
            error("ReactDOM.hydrate is no longer supported in React 18. Use hydrateRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
          }
          if (!isValidContainerLegacy(container)) {
            throw new Error("Target container is not a DOM element.");
          }
          {
            var isModernRoot = isContainerMarkedAsRoot(container) && container.Aa === void 0;
            if (isModernRoot) {
              error("You are calling ReactDOM.hydrate() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call hydrateRoot(container, element)?");
            }
          }
          return legacyRenderSubtreeIntoContainer(null, element, container, true, callback);
        }
        function render2(element, container, callback) {
          {
            error("ReactDOM.render is no longer supported in React 18. Use createRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
          }
          if (!isValidContainerLegacy(container)) {
            throw new Error("Target container is not a DOM element.");
          }
          {
            var isModernRoot = isContainerMarkedAsRoot(container) && container.Aa === void 0;
            if (isModernRoot) {
              error("You are calling ReactDOM.render() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.render(element)?");
            }
          }
          return legacyRenderSubtreeIntoContainer(null, element, container, false, callback);
        }
        function unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
          {
            error("ReactDOM.unstable_renderSubtreeIntoContainer() is no longer supported in React 18. Consider using a portal instead. Until you switch to the createRoot API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
          }
          if (!isValidContainerLegacy(containerNode)) {
            throw new Error("Target container is not a DOM element.");
          }
          if (parentComponent == null || !has(parentComponent)) {
            throw new Error("parentComponent must be a valid React Component");
          }
          return legacyRenderSubtreeIntoContainer(parentComponent, element, containerNode, false, callback);
        }
        function unmountComponentAtNode2(container) {
          if (!isValidContainerLegacy(container)) {
            throw new Error("unmountComponentAtNode(...): Target container is not a DOM element.");
          }
          {
            var isModernRoot = isContainerMarkedAsRoot(container) && container.Aa === void 0;
            if (isModernRoot) {
              error("You are calling ReactDOM.unmountComponentAtNode() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.unmount()?");
            }
          }
          if (container.Aa) {
            {
              var rootEl = getReactRootElementInContainer(container);
              var renderedByDifferentReact = rootEl && !getInstanceFromNode(rootEl);
              if (renderedByDifferentReact) {
                error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by another copy of React.");
              }
            }
            flushSync(function() {
              legacyRenderSubtreeIntoContainer(null, null, container, false, function() {
                container.Aa = null;
                unmarkContainerAsRoot(container);
              });
            });
            return true;
          } else {
            {
              var _rootEl = getReactRootElementInContainer(container);
              var hasNonRootReactChild = !!(_rootEl && getInstanceFromNode(_rootEl));
              var isContainerReactRoot = container.nodeType === ELEMENT_NODE && isValidContainerLegacy(container.parentNode) && !!container.parentNode.Aa;
              if (hasNonRootReactChild) {
                error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by React and is not a top-level container. %s", isContainerReactRoot ? "You may have accidentally passed in a React root node instead of its container." : "Instead, have the parent component update its state and rerender in order to remove this component.");
              }
            }
            return false;
          }
        }
        setAttemptSynchronousHydration(attemptSynchronousHydration$1);
        setAttemptContinuousHydration(attemptContinuousHydration$1);
        setAttemptHydrationAtCurrentPriority(attemptHydrationAtCurrentPriority$1);
        setGetCurrentUpdatePriority(getCurrentUpdatePriority);
        setAttemptHydrationAtPriority(runWithPriority);
        {
          if (typeof Map !== "function" || // $FlowIssue Flow incorrectly thinks Map has no prototype
          Map.prototype == null || typeof Map.prototype.forEach !== "function" || typeof Set !== "function" || // $FlowIssue Flow incorrectly thinks Set has no prototype
          Set.prototype == null || typeof Set.prototype.clear !== "function" || typeof Set.prototype.forEach !== "function") {
            error("React depends on Map and Set built-in types. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
          }
        }
        setRestoreImplementation(restoreControlledState$3);
        setBatchingImplementation(batchedUpdates$1, discreteUpdates, flushSync);
        function createPortal$1(children, container) {
          var key = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
          if (!isValidContainer(container)) {
            throw new Error("Target container is not a DOM element.");
          }
          return createPortal(children, container, null, key);
        }
        function renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
          return unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback);
        }
        var Internals = {
          usingClientEntryPoint: false,
          // Keep in sync with ReactTestUtils.js.
          // This is an array for better minification.
          Events: [getInstanceFromNode, getNodeFromInstance, getFiberCurrentPropsFromNode, enqueueStateRestore, restoreStateIfNeeded, batchedUpdates$1]
        };
        function createRoot$1(container, options2) {
          {
            if (!Internals.usingClientEntryPoint && true) {
              error('You are importing createRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".');
            }
          }
          return createRoot(container, options2);
        }
        function hydrateRoot$1(container, initialChildren, options2) {
          {
            if (!Internals.usingClientEntryPoint && true) {
              error('You are importing hydrateRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".');
            }
          }
          return hydrateRoot(container, initialChildren, options2);
        }
        function flushSync$1(fn) {
          {
            if (isAlreadyRendering()) {
              error("flushSync was called from inside a lifecycle method. React cannot flush when React is already rendering. Consider moving this call to a scheduler task or micro task.");
            }
          }
          return flushSync(fn);
        }
        var foundDevTools = injectIntoDevTools({
          findFiberByHostInstance: getClosestInstanceFromNode,
          bundleType: 1,
          version: ReactVersion,
          rendererPackageName: "react-dom"
        });
        {
          if (!foundDevTools && canUseDOM && window.top === window.self) {
            if (navigator.userAgent.indexOf("Chrome") > -1 && navigator.userAgent.indexOf("Edge") === -1 || navigator.userAgent.indexOf("Firefox") > -1) {
              var protocol = window.location.protocol;
              if (/^(https?|file):$/.test(protocol)) {
                console.info("%cDownload the React DevTools for a better development experience: https://reactjs.org/link/react-devtools" + (protocol === "file:" ? "\nYou might need to use a local HTTP server (instead of file://): https://reactjs.org/link/react-devtools-faq" : ""), "font-weight:bold");
              }
            }
          }
        }
        exports.Ej = Internals;
        exports.createPortal = createPortal$1;
        exports.createRoot = createRoot$1;
        exports.findDOMNode = findDOMNode;
        exports.flushSync = flushSync$1;
        exports.hydrate = hydrate;
        exports.hydrateRoot = hydrateRoot$1;
        exports.render = render2;
        exports.unmountComponentAtNode = unmountComponentAtNode2;
        exports.unstable_batchedUpdates = batchedUpdates$1;
        exports.unstable_renderSubtreeIntoContainer = renderSubtreeIntoContainer;
        exports.version = ReactVersion;
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
          __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
        }
      })();
    }
  }
});

// node_modules/react-dom/index.js
var require_react_dom = __commonJS({
  "node_modules/react-dom/index.js"(exports, module) {
    "use strict";
    function checkDCE() {
      if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined" || typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== "function") {
        return;
      }
      if (true) {
        throw new Error("^_^");
      }
      try {
        __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(checkDCE);
      } catch (err) {
        console.error(err);
      }
    }
    if (false) {
      checkDCE();
      module.exports = null;
    } else {
      module.exports = require_react_dom_development();
    }
  }
});

// node_modules/devextreme/cjs/viz/components/consts.js
var require_consts = __commonJS({
  "node_modules/devextreme/cjs/viz/components/consts.js"(exports, module) {
    "use strict";
    exports.default = void 0;
    var _default = {
      events: {
        mouseover: "mouseover",
        mouseout: "mouseout",
        mousemove: "mousemove",
        touchstart: "touchstart",
        touchmove: "touchmove",
        touchend: "touchend",
        mousedown: "mousedown",
        mouseup: "mouseup",
        click: "click",
        selectSeries: "selectseries",
        deselectSeries: "deselectseries",
        selectPoint: "selectpoint",
        deselectPoint: "deselectpoint",
        showPointTooltip: "showpointtooltip",
        hidePointTooltip: "hidepointtooltip"
      },
      states: {
        hover: "hover",
        normal: "normal",
        selection: "selection",
        normalMark: 0,
        hoverMark: 1,
        selectedMark: 2,
        applyHover: "applyHover",
        applySelected: "applySelected",
        resetItem: "resetItem"
      },
      radialLabelIndent: 30,
      pieLabelSpacing: 10,
      pieSeriesSpacing: 4
    };
    exports.default = _default;
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/devextreme/cjs/core/utils/type.js
var require_type = __commonJS({
  "node_modules/devextreme/cjs/core/utils/type.js"(exports) {
    "use strict";
    exports.type = exports.isWindow = exports.isString = exports.isRenderer = exports.isPromise = exports.isPrimitive = exports.isPlainObject = exports.isObject = exports.isNumeric = exports.isFunction = exports.isExponential = exports.isEvent = exports.isEmptyObject = exports.isDefined = exports.isDeferred = exports.isDate = exports.isBoolean = void 0;
    function _typeof(obj) {
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    var types = {
      "[object Array]": "array",
      "[object Date]": "date",
      "[object Object]": "object",
      "[object String]": "string"
    };
    var type = function(object) {
      if (null === object) {
        return "null";
      }
      var typeOfObject = Object.prototype.toString.call(object);
      return "object" === _typeof(object) ? types[typeOfObject] || "object" : _typeof(object);
    };
    exports.type = type;
    var isBoolean = function(object) {
      return "boolean" === typeof object;
    };
    exports.isBoolean = isBoolean;
    var isExponential = function(value) {
      return isNumeric(value) && -1 !== value.toString().indexOf("e");
    };
    exports.isExponential = isExponential;
    var isDate = function(object) {
      return "date" === type(object);
    };
    exports.isDate = isDate;
    var isDefined = function(object) {
      return null !== object && void 0 !== object;
    };
    exports.isDefined = isDefined;
    var isFunction = function(object) {
      return "function" === typeof object;
    };
    exports.isFunction = isFunction;
    var isString = function(object) {
      return "string" === typeof object;
    };
    exports.isString = isString;
    var isNumeric = function(object) {
      return "number" === typeof object && isFinite(object) || !isNaN(object - parseFloat(object));
    };
    exports.isNumeric = isNumeric;
    var isObject = function(object) {
      return "object" === type(object);
    };
    exports.isObject = isObject;
    var isEmptyObject = function(object) {
      var property;
      for (property in object) {
        return false;
      }
      return true;
    };
    exports.isEmptyObject = isEmptyObject;
    var isPlainObject = function(object) {
      if (!object || "object" !== type(object)) {
        return false;
      }
      var proto = Object.getPrototypeOf(object);
      if (!proto) {
        return true;
      }
      var ctor = Object.hasOwnProperty.call(proto, "constructor") && proto.constructor;
      return "function" === typeof ctor && Object.toString.call(ctor) === Object.toString.call(Object);
    };
    exports.isPlainObject = isPlainObject;
    var isPrimitive = function(value) {
      return -1 === ["object", "array", "function"].indexOf(type(value));
    };
    exports.isPrimitive = isPrimitive;
    var isWindow = function(object) {
      return null != object && object === object.window;
    };
    exports.isWindow = isWindow;
    var isRenderer = function(object) {
      return !!object && !!(object.jquery || object.dxRenderer);
    };
    exports.isRenderer = isRenderer;
    var isPromise = function(object) {
      return !!object && isFunction(object.then);
    };
    exports.isPromise = isPromise;
    var isDeferred = function(object) {
      return !!object && isFunction(object.done) && isFunction(object.fail);
    };
    exports.isDeferred = isDeferred;
    var isEvent = function(object) {
      return !!(object && object.preventDefault);
    };
    exports.isEvent = isEvent;
  }
});

// node_modules/devextreme/cjs/core/utils/extend.js
var require_extend = __commonJS({
  "node_modules/devextreme/cjs/core/utils/extend.js"(exports) {
    "use strict";
    exports.extendFromObject = exports.extend = void 0;
    var _type = require_type();
    var extendFromObject = function(target, source, overrideExistingValues) {
      target = target || {};
      for (var prop in source) {
        if (Object.prototype.hasOwnProperty.call(source, prop)) {
          var value = source[prop];
          if (!(prop in target) || overrideExistingValues) {
            target[prop] = value;
          }
        }
      }
      return target;
    };
    exports.extendFromObject = extendFromObject;
    var extend = function extend2(target) {
      target = target || {};
      var i = 1;
      var deep = false;
      if ("boolean" === typeof target) {
        deep = target;
        target = arguments[1] || {};
        i++;
      }
      for (; i < arguments.length; i++) {
        var source = arguments[i];
        if (null == source) {
          continue;
        }
        for (var key in source) {
          var targetValue = target[key];
          var sourceValue = source[key];
          var sourceValueIsArray = false;
          var clone = void 0;
          if ("__proto__" === key || "constructor" === key || target === sourceValue) {
            continue;
          }
          if (deep && sourceValue && ((0, _type.isPlainObject)(sourceValue) || (sourceValueIsArray = Array.isArray(sourceValue)))) {
            if (sourceValueIsArray) {
              clone = targetValue && Array.isArray(targetValue) ? targetValue : [];
            } else {
              clone = targetValue && (0, _type.isPlainObject)(targetValue) ? targetValue : {};
            }
            target[key] = extend2(deep, clone, sourceValue);
          } else if (void 0 !== sourceValue) {
            target[key] = sourceValue;
          }
        }
      }
      return target;
    };
    exports.extend = extend;
  }
});

// node_modules/devextreme/cjs/core/utils/console.js
var require_console = __commonJS({
  "node_modules/devextreme/cjs/core/utils/console.js"(exports) {
    "use strict";
    exports.logger = exports.debug = void 0;
    var _type = require_type();
    var noop = function() {
    };
    var getConsoleMethod = function(method) {
      if ("undefined" === typeof console || !(0, _type.isFunction)(console[method])) {
        return noop;
      }
      return console[method].bind(console);
    };
    var logger = {
      log: getConsoleMethod("log"),
      info: getConsoleMethod("info"),
      warn: getConsoleMethod("warn"),
      error: getConsoleMethod("error")
    };
    exports.logger = logger;
    var debug = function() {
      function assert(condition, message) {
        if (!condition) {
          throw new Error(message);
        }
      }
      return {
        assert,
        assertParam: function(parameter, message) {
          assert(null !== parameter && void 0 !== parameter, message);
        }
      };
    }();
    exports.debug = debug;
  }
});

// node_modules/devextreme/cjs/core/utils/string.js
var require_string = __commonJS({
  "node_modules/devextreme/cjs/core/utils/string.js"(exports) {
    "use strict";
    exports.encodeHtml = void 0;
    exports.format = format;
    exports.replaceAll = exports.quadToObject = exports.isEmpty = void 0;
    var _type = require_type();
    function _typeof(obj) {
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    var encodeHtml = function() {
      var encodeRegExp = [new RegExp("&", "g"), new RegExp('"', "g"), new RegExp("'", "g"), new RegExp("<", "g"), new RegExp(">", "g")];
      return function(str) {
        return String(str).replace(encodeRegExp[0], "&amp;").replace(encodeRegExp[1], "&quot;").replace(encodeRegExp[2], "&#39;").replace(encodeRegExp[3], "&lt;").replace(encodeRegExp[4], "&gt;");
      };
    }();
    exports.encodeHtml = encodeHtml;
    var splitQuad = function(raw) {
      switch (_typeof(raw)) {
        case "string":
          return raw.split(/\s+/, 4);
        case "object":
          return [raw.x || raw.h || raw.left, raw.y || raw.v || raw.top, raw.x || raw.h || raw.right, raw.y || raw.v || raw.bottom];
        case "number":
          return [raw];
        default:
          return raw;
      }
    };
    var quadToObject = function(raw) {
      var quad = splitQuad(raw);
      var left = parseInt(quad && quad[0], 10);
      var top = parseInt(quad && quad[1], 10);
      var right = parseInt(quad && quad[2], 10);
      var bottom = parseInt(quad && quad[3], 10);
      if (!isFinite(left)) {
        left = 0;
      }
      if (!isFinite(top)) {
        top = left;
      }
      if (!isFinite(right)) {
        right = left;
      }
      if (!isFinite(bottom)) {
        bottom = top;
      }
      return {
        top,
        right,
        bottom,
        left
      };
    };
    exports.quadToObject = quadToObject;
    function format(template) {
      for (var _len = arguments.length, values = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        values[_key - 1] = arguments[_key];
      }
      if ((0, _type.isFunction)(template)) {
        return template.apply(void 0, values);
      }
      values.forEach(function(value, index) {
        if ((0, _type.isString)(value)) {
          value = value.replace(/\$/g, "$$$$");
        }
        var placeholderReg = new RegExp("\\{" + index + "\\}", "gm");
        template = template.replace(placeholderReg, value);
      });
      return template;
    }
    var replaceAll = function(text, searchToken, replacementToken) {
      return text.replace(new RegExp("(" + (str = searchToken, (str + "").replace(/([+*?.[^\]$(){}><|=!:])/g, "\\$1")) + ")", "gi"), replacementToken);
      var str;
    };
    exports.replaceAll = replaceAll;
    var isEmpty = function() {
      var SPACE_REGEXP = /\s/g;
      return function(text) {
        return !text || !text.replace(SPACE_REGEXP, "");
      };
    }();
    exports.isEmpty = isEmpty;
  }
});

// node_modules/devextreme/cjs/core/version.js
var require_version = __commonJS({
  "node_modules/devextreme/cjs/core/version.js"(exports) {
    "use strict";
    exports.version = void 0;
    var version = "23.1.4";
    exports.version = version;
  }
});

// node_modules/devextreme/cjs/core/utils/error.js
var require_error = __commonJS({
  "node_modules/devextreme/cjs/core/utils/error.js"(exports, module) {
    "use strict";
    exports.default = _default;
    var _extend = require_extend();
    var _console = require_console();
    var _string = require_string();
    var _version = require_version();
    var ERROR_URL = "http://js.devexpress.com/error/" + _version.version.split(".").slice(0, 2).join("_") + "/";
    function _default(baseErrors, errors) {
      var exports2 = {
        ERROR_MESSAGES: (0, _extend.extend)(errors, baseErrors),
        Error: function() {
          return makeError([].slice.call(arguments));
        },
        log: function(id) {
          var method = "log";
          if (/^E\d+$/.test(id)) {
            method = "error";
          } else if (/^W\d+$/.test(id)) {
            method = "warn";
          }
          _console.logger[method]("log" === method ? id : combineMessage([].slice.call(arguments)));
        }
      };
      function combineMessage(args) {
        var id = args[0];
        args = args.slice(1);
        return formatMessage(id, formatDetails(id, args));
      }
      function formatDetails(id, args) {
        args = [exports2.ERROR_MESSAGES[id]].concat(args);
        return _string.format.apply(this, args).replace(/\.*\s*?$/, "");
      }
      function formatMessage(id, details) {
        return _string.format.apply(this, ["{0} - {1}. See:\n{2}", id, details, getErrorUrl(id)]);
      }
      function makeError(args) {
        var id = args[0];
        args = args.slice(1);
        var details = formatDetails(id, args);
        var url = getErrorUrl(id);
        var message = formatMessage(id, details);
        return (0, _extend.extend)(new Error(message), {
          oy: id,
          py: details,
          url
        });
      }
      function getErrorUrl(id) {
        return ERROR_URL + id;
      }
      return exports2;
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/devextreme/cjs/core/errors.js
var require_errors = __commonJS({
  "node_modules/devextreme/cjs/core/errors.js"(exports, module) {
    "use strict";
    exports.default = void 0;
    var _error = _interopRequireDefault(require_error());
    function _interopRequireDefault(obj) {
      return obj && obj.j ? obj : {
        default: obj
      };
    }
    var _default = (0, _error.default)({
      E0001: "Method is not implemented",
      E0002: "Member name collision: {0}",
      E0003: "A class must be instantiated using the 'new' keyword",
      E0004: "The NAME property of the component is not specified",
      E0005: "Unknown device",
      E0006: "Unknown endpoint key is requested",
      E0007: "'Invalidate' method is called outside the update transaction",
      E0008: "Type of the option name is not appropriate to create an action",
      E0009: "Component '{0}' has not been initialized for an element",
      E0010: "Animation configuration with the '{0}' type requires '{1}' configuration as {2}",
      E0011: "Unknown animation type '{0}'",
      E0012: "jQuery version is too old. Please upgrade jQuery to 1.10.0 or later",
      E0013: "KnockoutJS version is too old. Please upgrade KnockoutJS to 2.3.0 or later",
      E0014: "The 'release' method shouldn't be called for an unlocked Lock object",
      E0015: "Queued task returned an unexpected result",
      E0017: "Event namespace is not defined",
      E0018: "DevExpress.ui.DevExpressPopup widget is required",
      E0020: "Template engine '{0}' is not supported",
      E0021: "Unknown theme is set: {0}",
      E0022: "LINK[rel=DevExpress-theme] tags must go before DevExpress included scripts",
      E0023: "Template name is not specified",
      E0024: "DevExtreme bundle already included",
      E0025: "Unexpected argument type",
      E0100: "Unknown validation type is detected",
      E0101: "Misconfigured range validation rule is detected",
      E0102: "Misconfigured comparison validation rule is detected",
      E0103: "validationCallback of an asynchronous rule should return a jQuery or a native promise",
      E0110: "Unknown validation group is detected",
      E0120: "Adapter for a DevExpressValidator component cannot be configured",
      E0121: "The 'customItem' parameter of the 'onCustomItemCreating' function is empty or contains invalid data. Assign a custom object or a Promise that is resolved after the item is created.",
      W0000: "'{0}' is deprecated in {1}. {2}",
      W0001: "{0} - '{1}' option is deprecated in {2}. {3}",
      W0002: "{0} - '{1}' method is deprecated in {2}. {3}",
      W0003: "{0} - '{1}' property is deprecated in {2}. {3}",
      W0004: "Timeout for theme loading is over: {0}",
      W0005: "'{0}' event is deprecated in {1}. {2}",
      W0006: "Invalid recurrence rule: '{0}'",
      W0007: "'{0}' Globalize culture is not defined",
      W0008: "Invalid view name: '{0}'",
      W0009: "Invalid time zone name: '{0}'",
      W0010: "{0} is deprecated in {1}. {2}",
      W0011: "Number parsing is invoked while the parser is not defined",
      W0012: "Date parsing is invoked while the parser is not defined",
      W0013: "'{0}' file is deprecated in {1}. {2}",
      W0014: "{0} - '{1}' type is deprecated in {2}. {3}",
      W0015: "Instead of returning a value from the '{0}' function, write it into the '{1}' field of the function's parameter.",
      W0016: 'The "{0}" option does not accept the "{1}" value since v{2}. {3}.',
      W0017: 'Setting the "{0}" property with a function is deprecated since v21.2',
      W0018: 'Setting the "position" property with a function is deprecated since v21.2'
    });
    exports.default = _default;
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/devextreme/cjs/core/config.js
var require_config = __commonJS({
  "node_modules/devextreme/cjs/core/config.js"(exports, module) {
    "use strict";
    exports.default = void 0;
    var _extend = require_extend();
    var _errors = _interopRequireDefault(require_errors());
    function _interopRequireDefault(obj) {
      return obj && obj.j ? obj : {
        default: obj
      };
    }
    var config = {
      rtlEnabled: false,
      defaultCurrency: "USD",
      defaultUseCurrencyAccountingStyle: true,
      oDataFilterToLower: true,
      serverDecimalSeparator: ".",
      decimalSeparator: ".",
      thousandsSeparator: ",",
      forceIsoDateParsing: true,
      wrapActionsBeforeExecute: true,
      useLegacyStoreResult: false,
      useJQuery: void 0,
      editorStylingMode: void 0,
      useLegacyVisibleIndex: false,
      floatingActionButtonConfig: {
        icon: "add",
        closeIcon: "close",
        label: "",
        position: {
          at: "right bottom",
          my: "right bottom",
          offset: {
            x: -16,
            y: -16
          }
        },
        maxSpeedDialActionCount: 5,
        shading: false,
        direction: "auto"
      },
      optionsParser: function(optionsString) {
        if ("{" !== optionsString.trim().charAt(0)) {
          optionsString = "{" + optionsString + "}";
        }
        try {
          return JSON.parse(optionsString);
        } catch (ex) {
          try {
            return JSON.parse(normalizeToJSONString(optionsString));
          } catch (exNormalize) {
            throw _errors.default.Error("E3018", ex, optionsString);
          }
        }
      }
    };
    var normalizeToJSONString = function(optionsString) {
      return optionsString.replace(/'/g, '"').replace(/,\s*([\]}])/g, "$1").replace(/([{,])\s*([^":\s]+)\s*:/g, '$1"$2":');
    };
    var deprecatedFields = ["decimalSeparator", "thousandsSeparator"];
    var configMethod = function() {
      if (!arguments.length) {
        return config;
      }
      var newConfig = arguments.length <= 0 ? void 0 : arguments[0];
      deprecatedFields.forEach(function(deprecatedField) {
        if (newConfig[deprecatedField]) {
          var message = "Now, the ".concat(deprecatedField, " is selected based on the specified locale.");
          _errors.default.log("W0003", "config", deprecatedField, "19.2", message);
        }
      });
      (0, _extend.extend)(config, newConfig);
    };
    if ("undefined" !== typeof DevExpress && DevExpress.config) {
      configMethod(DevExpress.config);
    }
    var _default = configMethod;
    exports.default = _default;
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/devextreme/cjs/core/class.js
var require_class = __commonJS({
  "node_modules/devextreme/cjs/core/class.js"(exports, module) {
    "use strict";
    exports.default = void 0;
    var _errors = _interopRequireDefault(require_errors());
    var _type = require_type();
    function _interopRequireDefault(obj) {
      return obj && obj.j ? obj : {
        default: obj
      };
    }
    var wrapOverridden = function(baseProto, methodName, method) {
      return function() {
        var prevCallBase = this.callBase;
        this.callBase = baseProto[methodName];
        try {
          return method.apply(this, arguments);
        } finally {
          this.callBase = prevCallBase;
        }
      };
    };
    var clonePrototype = function(obj) {
      var func = function() {
      };
      func.prototype = obj.prototype;
      return new func();
    };
    var redefine = function(members) {
      var overridden;
      var memberName;
      var member;
      if (!members) {
        return this;
      }
      for (memberName in members) {
        member = members[memberName];
        overridden = "function" === typeof this.prototype[memberName] && "function" === typeof member;
        this.prototype[memberName] = overridden ? wrapOverridden(this.parent.prototype, memberName, member) : member;
      }
      return this;
    };
    var include = function() {
      var classObj = this;
      var argument;
      var name;
      var i;
      var hasClassObjOwnProperty = Object.prototype.hasOwnProperty.bind(classObj);
      var isES6Class = !hasClassObjOwnProperty("_includedCtors") && !hasClassObjOwnProperty("_includedPostCtors");
      if (isES6Class) {
        classObj.zc = classObj.zc.slice(0);
        classObj.Ac = classObj.Ac.slice(0);
      }
      for (i = 0; i < arguments.length; i++) {
        argument = arguments[i];
        if (argument.ctor) {
          classObj.zc.push(argument.ctor);
        }
        if (argument.postCtor) {
          classObj.Ac.push(argument.postCtor);
        }
        for (name in argument) {
          if ("ctor" === name || "postCtor" === name || "default" === name) {
            continue;
          }
          classObj.prototype[name] = argument[name];
        }
      }
      return classObj;
    };
    var subclassOf = function(parentClass) {
      var hasParentProperty = Object.prototype.hasOwnProperty.bind(this)("parent");
      var isES6Class = !hasParentProperty && this.parent;
      if (isES6Class) {
        var baseClass = Object.getPrototypeOf(this);
        return baseClass === parentClass || baseClass.subclassOf(parentClass);
      } else {
        if (this.parent === parentClass) {
          return true;
        }
        if (!this.parent || !this.parent.subclassOf) {
          return false;
        }
        return this.parent.subclassOf(parentClass);
      }
    };
    var abstract = function() {
      throw _errors.default.Error("E0001");
    };
    var copyStatic = function() {
      var hasOwn = Object.prototype.hasOwnProperty;
      return function(source, destination) {
        for (var key in source) {
          if (!hasOwn.call(source, key)) {
            return;
          }
          destination[key] = source[key];
        }
      };
    }();
    var classImpl = function() {
    };
    classImpl.inherit = function(members) {
      var inheritor = function() {
        if (!this || (0, _type.isWindow)(this) || "function" !== typeof this.constructor) {
          throw _errors.default.Error("E0003");
        }
        var instance = this;
        var ctor = instance.ctor;
        var includedCtors = instance.constructor.zc;
        var includedPostCtors = instance.constructor.Ac;
        var i;
        for (i = 0; i < includedCtors.length; i++) {
          includedCtors[i].call(instance);
        }
        if (ctor) {
          ctor.apply(instance, arguments);
        }
        for (i = 0; i < includedPostCtors.length; i++) {
          includedPostCtors[i].call(instance);
        }
      };
      inheritor.prototype = clonePrototype(this);
      copyStatic(this, inheritor);
      inheritor.inherit = this.inherit;
      inheritor.abstract = abstract;
      inheritor.redefine = redefine;
      inheritor.include = include;
      inheritor.subclassOf = subclassOf;
      inheritor.parent = this;
      inheritor.zc = this.zc ? this.zc.slice(0) : [];
      inheritor.Ac = this.Ac ? this.Ac.slice(0) : [];
      inheritor.prototype.constructor = inheritor;
      inheritor.redefine(members);
      return inheritor;
    };
    classImpl.abstract = abstract;
    var _default = classImpl;
    exports.default = _default;
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/devextreme/cjs/core/guid.js
var require_guid = __commonJS({
  "node_modules/devextreme/cjs/core/guid.js"(exports, module) {
    "use strict";
    exports.default = void 0;
    var _class = _interopRequireDefault(require_class());
    function _interopRequireDefault(obj) {
      return obj && obj.j ? obj : {
        default: obj
      };
    }
    var Guid = _class.default.inherit({
      ctor: function(value) {
        if (value) {
          value = String(value);
        }
        this.$g = this.Ip(value || this.Jp());
      },
      Ip: function(value) {
        value = value.replace(/[^a-f0-9]/gi, "").toLowerCase();
        while (value.length < 32) {
          value += "0";
        }
        return [value.substr(0, 8), value.substr(8, 4), value.substr(12, 4), value.substr(16, 4), value.substr(20, 12)].join("-");
      },
      Jp: function() {
        var value = "";
        for (var i = 0; i < 32; i++) {
          value += Math.round(15 * Math.random()).toString(16);
        }
        return value;
      },
      toString: function() {
        return this.$g;
      },
      valueOf: function() {
        return this.$g;
      },
      toJSON: function() {
        return this.$g;
      }
    });
    var _default = Guid;
    exports.default = _default;
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/devextreme/cjs/core/utils/callbacks.js
var require_callbacks = __commonJS({
  "node_modules/devextreme/cjs/core/utils/callbacks.js"(exports, module) {
    "use strict";
    exports.default = void 0;
    var Callback = function(options) {
      this.e = options || {};
      this.Ed = [];
      this.Kp = [];
      this.Fd = false;
      this.Jj = false;
      this.Kj = [];
    };
    Callback.prototype.Lj = function(context, args) {
      var firingIndexes = this.Kj;
      var list = this.Ed;
      var stopOnFalse = this.e.stopOnFalse;
      var step = firingIndexes.length;
      for (firingIndexes[step] = 0; firingIndexes[step] < list.length; firingIndexes[step]++) {
        var result = list[firingIndexes[step]].apply(context, args);
        if (false === result && stopOnFalse) {
          break;
        }
      }
      firingIndexes.pop();
    };
    Callback.prototype.add = function(fn) {
      if ("function" === typeof fn && (!this.e.unique || !this.has(fn))) {
        this.Ed.push(fn);
      }
      return this;
    };
    Callback.prototype.remove = function(fn) {
      var list = this.Ed;
      var firingIndexes = this.Kj;
      var index = list.indexOf(fn);
      if (index > -1) {
        list.splice(index, 1);
        if (this.Fd && firingIndexes.length) {
          for (var step = 0; step < firingIndexes.length; step++) {
            if (index <= firingIndexes[step]) {
              firingIndexes[step]--;
            }
          }
        }
      }
      return this;
    };
    Callback.prototype.has = function(fn) {
      var list = this.Ed;
      return fn ? list.indexOf(fn) > -1 : !!list.length;
    };
    Callback.prototype.empty = function(fn) {
      this.Ed = [];
      return this;
    };
    Callback.prototype.fireWith = function(context, args) {
      var queue = this.Kp;
      args = args || [];
      args = args.slice ? args.slice() : args;
      if (this.e.syncStrategy) {
        this.Fd = true;
        this.Lj(context, args);
      } else {
        queue.push([context, args]);
        if (this.Fd) {
          return;
        }
        this.Fd = true;
        while (queue.length) {
          var memory = queue.shift();
          this.Lj(memory[0], memory[1]);
        }
      }
      this.Fd = false;
      this.Jj = true;
      return this;
    };
    Callback.prototype.fire = function() {
      this.fireWith(this, arguments);
    };
    Callback.prototype.fired = function() {
      return this.Jj;
    };
    var Callbacks = function(options) {
      return new Callback(options);
    };
    var _default = Callbacks;
    exports.default = _default;
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/devextreme/cjs/core/utils/deferred.js
var require_deferred = __commonJS({
  "node_modules/devextreme/cjs/core/utils/deferred.js"(exports) {
    "use strict";
    exports.Deferred = Deferred;
    exports.fromPromise = fromPromise;
    exports.setStrategy = setStrategy;
    exports.when = when;
    var _type = require_type();
    var _extend = require_extend();
    var _callbacks = _interopRequireDefault(require_callbacks());
    function _interopRequireDefault(obj) {
      return obj && obj.j ? obj : {
        default: obj
      };
    }
    var deferredConfig = [{
      method: "resolve",
      handler: "done",
      state: "resolved"
    }, {
      method: "reject",
      handler: "fail",
      state: "rejected"
    }, {
      method: "notify",
      handler: "progress"
    }];
    var _DeferredObj = function() {
      var that = this;
      this.ab = "pending";
      this.bb = {};
      deferredConfig.forEach(function(config) {
        var methodName = config.method;
        this[methodName + "Callbacks"] = (0, _callbacks.default)();
        this[methodName] = function() {
          return this[methodName + "With"](this.bb, arguments);
        }.bind(this);
        this.bb[config.handler] = function(handler) {
          if (!handler) {
            return this;
          }
          var callbacks = that[methodName + "Callbacks"];
          if (callbacks.fired()) {
            handler.apply(that[methodName + "Context"], that[methodName + "Args"]);
          } else {
            callbacks.add(function(context, args) {
              handler.apply(context, args);
            }.bind(this));
          }
          return this;
        };
      }.bind(this));
      this.bb.always = function(handler) {
        return this.done(handler).fail(handler);
      };
      this.bb.catch = function(handler) {
        return this.then(null, handler);
      };
      this.bb.then = function(resolve, reject) {
        var result = new _DeferredObj();
        ["done", "fail"].forEach(function(method) {
          var callback = "done" === method ? resolve : reject;
          this[method](function() {
            if (!callback) {
              result["done" === method ? "resolve" : "reject"].apply(this, arguments);
              return;
            }
            var callbackResult = callback && callback.apply(this, arguments);
            if ((0, _type.isDeferred)(callbackResult)) {
              callbackResult.done(result.resolve).fail(result.reject);
            } else if ((0, _type.isPromise)(callbackResult)) {
              callbackResult.then(result.resolve, result.reject);
            } else {
              result.resolve.apply(this, (0, _type.isDefined)(callbackResult) ? [callbackResult] : arguments);
            }
          });
        }.bind(this));
        return result.promise();
      };
      this.bb.state = function() {
        return that.ab;
      };
      this.bb.promise = function(args) {
        return args ? (0, _extend.extend)(args, that.bb) : that.bb;
      };
      this.bb.promise(this);
    };
    deferredConfig.forEach(function(config) {
      var methodName = config.method;
      var state = config.state;
      _DeferredObj.prototype[methodName + "With"] = function(context, args) {
        var callbacks = this[methodName + "Callbacks"];
        if ("pending" === this.state()) {
          this[methodName + "Args"] = args;
          this[methodName + "Context"] = context;
          if (state) {
            this.ab = state;
          }
          callbacks.fire(context, args);
        }
        return this;
      };
    });
    function fromPromise(promise, context) {
      if ((0, _type.isDeferred)(promise)) {
        return promise;
      } else if ((0, _type.isPromise)(promise)) {
        var d = new _DeferredObj();
        promise.then(function() {
          d.resolveWith.apply(d, [context].concat([
            [].slice.call(arguments)
          ]));
        }, function() {
          d.rejectWith.apply(d, [context].concat([
            [].slice.call(arguments)
          ]));
        });
        return d;
      }
      return new _DeferredObj().resolveWith(context, [promise]);
    }
    var whenFunc = function() {
      if (1 === arguments.length) {
        return fromPromise(arguments[0]);
      }
      var values = [].slice.call(arguments);
      var contexts = [];
      var resolvedCount = 0;
      var deferred = new _DeferredObj();
      var updateState = function(i2) {
        return function(value) {
          contexts[i2] = this;
          values[i2] = arguments.length > 1 ? [].slice.call(arguments) : value;
          resolvedCount++;
          if (resolvedCount === values.length) {
            deferred.resolveWith(contexts, values);
          }
        };
      };
      for (var i = 0; i < values.length; i++) {
        if ((0, _type.isDeferred)(values[i])) {
          values[i].promise().done(updateState(i)).fail(deferred.reject);
        } else {
          resolvedCount++;
        }
      }
      if (resolvedCount === values.length) {
        deferred.resolveWith(contexts, values);
      }
      return deferred.promise();
    };
    function setStrategy(value) {
      _DeferredObj = value.Deferred;
      whenFunc = value.when;
    }
    function Deferred() {
      return new _DeferredObj();
    }
    function when() {
      return whenFunc.apply(this, arguments);
    }
  }
});

// node_modules/devextreme/cjs/core/utils/iterator.js
var require_iterator = __commonJS({
  "node_modules/devextreme/cjs/core/utils/iterator.js"(exports) {
    "use strict";
    exports.reverseEach = exports.map = exports.each = void 0;
    var map = function(values, callback) {
      if (Array.isArray(values)) {
        return values.map(callback);
      }
      var result = [];
      for (var key in values) {
        result.push(callback(values[key], key));
      }
      return result;
    };
    exports.map = map;
    var each = function(values, callback) {
      if (!values) {
        return;
      }
      if ("length" in values) {
        for (var i = 0; i < values.length; i++) {
          if (false === callback.call(values[i], i, values[i])) {
            break;
          }
        }
      } else {
        for (var key in values) {
          if (false === callback.call(values[key], key, values[key])) {
            break;
          }
        }
      }
      return values;
    };
    exports.each = each;
    var reverseEach = function(array, callback) {
      if (!array || !("length" in array) || 0 === array.length) {
        return;
      }
      for (var i = array.length - 1; i >= 0; i--) {
        if (false === callback.call(array[i], i, array[i])) {
          break;
        }
      }
    };
    exports.reverseEach = reverseEach;
  }
});

// node_modules/devextreme/cjs/core/utils/dependency_injector.js
var require_dependency_injector = __commonJS({
  "node_modules/devextreme/cjs/core/utils/dependency_injector.js"(exports, module) {
    "use strict";
    exports.default = _default;
    var _extend = require_extend();
    var _type = require_type();
    var _iterator = require_iterator();
    var _class = _interopRequireDefault(require_class());
    function _interopRequireDefault(obj) {
      return obj && obj.j ? obj : {
        default: obj
      };
    }
    function _default(object) {
      var BaseClass = _class.default.inherit(object);
      var InjectedClass = BaseClass;
      var instance = new InjectedClass(object);
      var initialFields = {};
      var injectFields = function(injectionObject, initial) {
        (0, _iterator.each)(injectionObject, function(key) {
          if ((0, _type.isFunction)(instance[key])) {
            if (initial || !object[key]) {
              object[key] = function() {
                return instance[key].apply(object, arguments);
              };
            }
          } else {
            if (initial) {
              initialFields[key] = object[key];
            }
            object[key] = instance[key];
          }
        });
      };
      injectFields(object, true);
      object.inject = function(injectionObject) {
        InjectedClass = InjectedClass.inherit(injectionObject);
        instance = new InjectedClass();
        injectFields(injectionObject);
      };
      object.resetInjection = function() {
        (0, _extend.extend)(object, initialFields);
        InjectedClass = BaseClass;
        instance = new BaseClass();
      };
      return object;
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/devextreme/cjs/core/utils/variable_wrapper.js
var require_variable_wrapper = __commonJS({
  "node_modules/devextreme/cjs/core/utils/variable_wrapper.js"(exports, module) {
    "use strict";
    exports.default = void 0;
    var _console = require_console();
    var _dependency_injector = _interopRequireDefault(require_dependency_injector());
    function _interopRequireDefault(obj) {
      return obj && obj.j ? obj : {
        default: obj
      };
    }
    var _default = (0, _dependency_injector.default)({
      isWrapped: function() {
        return false;
      },
      isWritableWrapped: function() {
        return false;
      },
      wrap: function(value) {
        return value;
      },
      unwrap: function(value) {
        return value;
      },
      assign: function() {
        _console.logger.error("Method 'assign' should not be used for not wrapped variables. Use 'isWrapped' method for ensuring.");
      }
    });
    exports.default = _default;
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/devextreme/cjs/core/utils/object.js
var require_object = __commonJS({
  "node_modules/devextreme/cjs/core/utils/object.js"(exports) {
    "use strict";
    exports.orderEach = exports.deepExtendArraySafe = exports.clone = void 0;
    var _type = require_type();
    var _variable_wrapper = _interopRequireDefault(require_variable_wrapper());
    function _interopRequireDefault(obj) {
      return obj && obj.j ? obj : {
        default: obj
      };
    }
    var clone = function() {
      function Clone() {
      }
      return function(obj) {
        Clone.prototype = obj;
        return new Clone();
      };
    }();
    exports.clone = clone;
    var orderEach = function(map, func) {
      var keys = [];
      var key;
      var i;
      for (key in map) {
        if (Object.prototype.hasOwnProperty.call(map, key)) {
          keys.push(key);
        }
      }
      keys.sort(function(x, y) {
        var isNumberX = (0, _type.isNumeric)(x);
        var isNumberY = (0, _type.isNumeric)(y);
        if (isNumberX && isNumberY) {
          return x - y;
        }
        if (isNumberX && !isNumberY) {
          return -1;
        }
        if (!isNumberX && isNumberY) {
          return 1;
        }
        if (x < y) {
          return -1;
        }
        if (x > y) {
          return 1;
        }
        return 0;
      });
      for (i = 0; i < keys.length; i++) {
        key = keys[i];
        func(key, map[key]);
      }
    };
    exports.orderEach = orderEach;
    var assignValueToProperty = function(target, property, value, assignByReference) {
      if (!assignByReference && _variable_wrapper.default.isWrapped(target[property])) {
        _variable_wrapper.default.assign(target[property], value);
      } else {
        target[property] = value;
      }
    };
    var deepExtendArraySafe = function deepExtendArraySafe2(target, changes, extendComplexObject, assignByReference) {
      var prevValue;
      var newValue;
      for (var name in changes) {
        prevValue = target[name];
        newValue = changes[name];
        if ("__proto__" === name || "constructor" === name || target === newValue) {
          continue;
        }
        if ((0, _type.isPlainObject)(newValue)) {
          var goDeeper = extendComplexObject ? (0, _type.isObject)(prevValue) : (0, _type.isPlainObject)(prevValue);
          newValue = deepExtendArraySafe2(goDeeper ? prevValue : {}, newValue, extendComplexObject, assignByReference);
        }
        if (void 0 !== newValue && prevValue !== newValue) {
          assignValueToProperty(target, name, newValue, assignByReference);
        }
      }
      return target;
    };
    exports.deepExtendArraySafe = deepExtendArraySafe;
  }
});

// node_modules/devextreme/cjs/core/utils/data.js
var require_data = __commonJS({
  "node_modules/devextreme/cjs/core/utils/data.js"(exports) {
    "use strict";
    exports.toComparable = exports.getPathParts = exports.compileSetter = exports.compileGetter = void 0;
    var _errors = _interopRequireDefault(require_errors());
    var _class = _interopRequireDefault(require_class());
    var _object = require_object();
    var _type = require_type();
    var _iterator = require_iterator();
    var _variable_wrapper = _interopRequireDefault(require_variable_wrapper());
    function _interopRequireDefault(obj) {
      return obj && obj.j ? obj : {
        default: obj
      };
    }
    var unwrapVariable = _variable_wrapper.default.unwrap;
    var isWrapped = _variable_wrapper.default.isWrapped;
    var assign = _variable_wrapper.default.assign;
    var bracketsToDots = function(expr) {
      return expr.replace(/\[/g, ".").replace(/\]/g, "");
    };
    var getPathParts = function(name) {
      return bracketsToDots(name).split(".");
    };
    exports.getPathParts = getPathParts;
    var readPropValue = function(obj, propName, options) {
      options = options || {};
      if ("this" === propName) {
        return unwrap(obj, options);
      }
      return unwrap(obj[propName], options);
    };
    var assignPropValue = function(obj, propName, value, options) {
      if ("this" === propName) {
        throw new _errors.default.Error("E4016");
      }
      var propValue = obj[propName];
      if (options.unwrapObservables && isWrapped(propValue)) {
        assign(propValue, value);
      } else {
        obj[propName] = value;
      }
    };
    var prepareOptions = function(options) {
      options = options || {};
      options.unwrapObservables = void 0 !== options.unwrapObservables ? options.unwrapObservables : true;
      return options;
    };
    function unwrap(value, options) {
      return options.unwrapObservables ? unwrapVariable(value) : value;
    }
    var compileGetter = function(expr) {
      if (arguments.length > 1) {
        expr = [].slice.call(arguments);
      }
      if (!expr || "this" === expr) {
        return function(obj) {
          return obj;
        };
      }
      if ("string" === typeof expr) {
        var path = getPathParts(expr);
        return function(obj, options) {
          options = prepareOptions(options);
          var functionAsIs = options.functionsAsIs;
          var hasDefaultValue = "defaultValue" in options;
          var current = unwrap(obj, options);
          for (var i = 0; i < path.length; i++) {
            if (!current) {
              if (null == current && hasDefaultValue) {
                return options.defaultValue;
              }
              break;
            }
            var pathPart = path[i];
            if (hasDefaultValue && (0, _type.isObject)(current) && !(pathPart in current)) {
              return options.defaultValue;
            }
            var next = unwrap(current[pathPart], options);
            if (!functionAsIs && (0, _type.isFunction)(next)) {
              next = next.call(current);
            }
            current = next;
          }
          return current;
        };
      }
      if (Array.isArray(expr)) {
        return combineGetters(expr);
      }
      if ((0, _type.isFunction)(expr)) {
        return expr;
      }
    };
    exports.compileGetter = compileGetter;
    function combineGetters(getters) {
      var compiledGetters = {};
      for (var i = 0, l = getters.length; i < l; i++) {
        var getter = getters[i];
        compiledGetters[getter] = compileGetter(getter);
      }
      return function(obj, options) {
        var result;
        (0, _iterator.each)(compiledGetters, function(name) {
          var value = this(obj, options);
          if (void 0 === value) {
            return;
          }
          var current = result || (result = {});
          var path = name.split(".");
          var last = path.length - 1;
          for (var _i = 0; _i < last; _i++) {
            var pathItem = path[_i];
            if (!(pathItem in current)) {
              current[pathItem] = {};
            }
            current = current[pathItem];
          }
          current[path[last]] = value;
        });
        return result;
      };
    }
    var ensurePropValueDefined = function(obj, propName, value, options) {
      if ((0, _type.isDefined)(value)) {
        return value;
      }
      var newValue = {};
      assignPropValue(obj, propName, newValue, options);
      return newValue;
    };
    var compileSetter = function(expr) {
      expr = getPathParts(expr || "this");
      var lastLevelIndex = expr.length - 1;
      return function(obj, value, options) {
        options = prepareOptions(options);
        var currentValue = unwrap(obj, options);
        expr.forEach(function(propertyName, levelIndex) {
          var propertyValue = readPropValue(currentValue, propertyName, options);
          var isPropertyFunc = !options.functionsAsIs && (0, _type.isFunction)(propertyValue) && !isWrapped(propertyValue);
          if (levelIndex === lastLevelIndex) {
            if (options.merge && (0, _type.isPlainObject)(value) && (!(0, _type.isDefined)(propertyValue) || (0, _type.isPlainObject)(propertyValue))) {
              propertyValue = ensurePropValueDefined(currentValue, propertyName, propertyValue, options);
              (0, _object.deepExtendArraySafe)(propertyValue, value, false, true);
            } else if (isPropertyFunc) {
              currentValue[propertyName](value);
            } else {
              assignPropValue(currentValue, propertyName, value, options);
            }
          } else {
            propertyValue = ensurePropValueDefined(currentValue, propertyName, propertyValue, options);
            if (isPropertyFunc) {
              propertyValue = propertyValue.call(currentValue);
            }
            currentValue = propertyValue;
          }
        });
      };
    };
    exports.compileSetter = compileSetter;
    var toComparable = function(value, caseSensitive) {
      var options = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {};
      if (value instanceof Date) {
        return value.getTime();
      }
      if (value && value instanceof _class.default && value.valueOf) {
        return value.valueOf();
      }
      if (!caseSensitive && "string" === typeof value) {
        var _options$collatorOpti;
        if ("base" === (null === options || void 0 === options ? void 0 : null === (_options$collatorOpti = options.collatorOptions) || void 0 === _options$collatorOpti ? void 0 : _options$collatorOpti.sensitivity)) {
          var REMOVE_DIACRITICAL_MARKS_REGEXP = /[\u0300-\u036f]/g;
          value = value.normalize("NFD").replace(REMOVE_DIACRITICAL_MARKS_REGEXP, "");
        }
        return null !== options && void 0 !== options && options.locale ? value.toLocaleLowerCase(options.locale) : value.toLowerCase();
      }
      return value;
    };
    exports.toComparable = toComparable;
  }
});

// node_modules/devextreme/cjs/core/utils/common.js
var require_common = __commonJS({
  "node_modules/devextreme/cjs/core/utils/common.js"(exports) {
    "use strict";
    exports.splitPair = exports.pairToObject = exports.normalizeKey = exports.noop = exports.grep = exports.getKeyHash = exports.findBestMatches = exports.executeAsync = exports.escapeRegExp = exports.equalByValue = exports.ensureDefined = exports.denormalizeKey = exports.deferUpdater = exports.deferUpdate = exports.deferRenderer = exports.deferRender = exports.asyncNoop = exports.applyServerDecimalSeparator = void 0;
    var _config = _interopRequireDefault(require_config());
    var _guid = _interopRequireDefault(require_guid());
    var _deferred = require_deferred();
    var _data = require_data();
    var _iterator = require_iterator();
    var _type = require_type();
    function _interopRequireDefault(obj) {
      return obj && obj.j ? obj : {
        default: obj
      };
    }
    function _extends() {
      _extends = Object.assign ? Object.assign.bind() : function(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends.apply(this, arguments);
    }
    var ensureDefined = function(value, defaultValue) {
      return (0, _type.isDefined)(value) ? value : defaultValue;
    };
    exports.ensureDefined = ensureDefined;
    var executeAsync = function(action, context) {
      var deferred = new _deferred.Deferred();
      var normalizedContext = context || this;
      var task = {
        promise: deferred.promise(),
        abort: function() {
          clearTimeout(timerId);
          deferred.rejectWith(normalizedContext);
        }
      };
      var callback = function() {
        var result = action.call(normalizedContext);
        if (result && result.done && (0, _type.isFunction)(result.done)) {
          result.done(function() {
            deferred.resolveWith(normalizedContext);
          });
        } else {
          deferred.resolveWith(normalizedContext);
        }
      };
      var timerId = (arguments[2] || setTimeout)(callback, "number" === typeof context ? context : 0);
      return task;
    };
    exports.executeAsync = executeAsync;
    var delayedFuncs = [];
    var delayedNames = [];
    var delayedDeferreds = [];
    var executingName;
    var deferExecute = function(name, func, deferred) {
      if (executingName && executingName !== name) {
        delayedFuncs.push(func);
        delayedNames.push(name);
        deferred = deferred || new _deferred.Deferred();
        delayedDeferreds.push(deferred);
        return deferred;
      } else {
        var oldExecutingName = executingName;
        var currentDelayedCount = delayedDeferreds.length;
        executingName = name;
        var result = func();
        if (!result) {
          if (delayedDeferreds.length > currentDelayedCount) {
            result = _deferred.when.apply(this, delayedDeferreds.slice(currentDelayedCount));
          } else if (deferred) {
            deferred.resolve();
          }
        }
        executingName = oldExecutingName;
        if (deferred && result && result.done) {
          result.done(deferred.resolve).fail(deferred.reject);
        }
        if (!executingName && delayedFuncs.length) {
          ("render" === delayedNames.shift() ? deferRender : deferUpdate)(delayedFuncs.shift(), delayedDeferreds.shift());
        }
        return result || (0, _deferred.when)();
      }
    };
    var deferRender = function(func, deferred) {
      return deferExecute("render", func, deferred);
    };
    exports.deferRender = deferRender;
    var deferUpdate = function(func, deferred) {
      return deferExecute("update", func, deferred);
    };
    exports.deferUpdate = deferUpdate;
    var deferRenderer = function(func) {
      return function() {
        var that = this;
        return deferExecute("render", function() {
          return func.call(that);
        });
      };
    };
    exports.deferRenderer = deferRenderer;
    var deferUpdater = function(func) {
      return function() {
        var that = this;
        return deferExecute("update", function() {
          return func.call(that);
        });
      };
    };
    exports.deferUpdater = deferUpdater;
    var findBestMatches = function(targetFilter, items, mapFn) {
      var bestMatches = [];
      var maxMatchCount = 0;
      (0, _iterator.each)(items, function(index, itemSrc) {
        var matchCount = 0;
        var item = mapFn ? mapFn(itemSrc) : itemSrc;
        (0, _iterator.each)(targetFilter, function(paramName, targetValue) {
          var value = item[paramName];
          if (void 0 === value) {
            return;
          }
          if (match(value, targetValue)) {
            matchCount++;
            return;
          }
          matchCount = -1;
          return false;
        });
        if (matchCount < maxMatchCount) {
          return;
        }
        if (matchCount > maxMatchCount) {
          bestMatches.length = 0;
          maxMatchCount = matchCount;
        }
        bestMatches.push(itemSrc);
      });
      return bestMatches;
    };
    exports.findBestMatches = findBestMatches;
    var match = function(value, targetValue) {
      if (Array.isArray(value) && Array.isArray(targetValue)) {
        var mismatch = false;
        (0, _iterator.each)(value, function(index, valueItem) {
          if (valueItem !== targetValue[index]) {
            mismatch = true;
            return false;
          }
        });
        if (mismatch) {
          return false;
        }
        return true;
      }
      if (value === targetValue) {
        return true;
      }
      return false;
    };
    var splitPair = function(raw) {
      var _raw$x, _raw$y;
      switch ((0, _type.type)(raw)) {
        case "string":
          return raw.split(/\s+/, 2);
        case "object":
          return [null !== (_raw$x = raw.x) && void 0 !== _raw$x ? _raw$x : raw.h, null !== (_raw$y = raw.y) && void 0 !== _raw$y ? _raw$y : raw.v];
        case "number":
          return [raw];
        case "array":
          return raw;
        default:
          return null;
      }
    };
    exports.splitPair = splitPair;
    var normalizeKey = function(id) {
      var key = (0, _type.isString)(id) ? id : id.toString();
      var arr = key.match(/[^a-zA-Z0-9_]/g);
      arr && (0, _iterator.each)(arr, function(_, sign) {
        key = key.replace(sign, "__" + sign.charCodeAt() + "__");
      });
      return key;
    };
    exports.normalizeKey = normalizeKey;
    var denormalizeKey = function(key) {
      var arr = key.match(/__\d+__/g);
      arr && arr.forEach(function(char) {
        var charCode = parseInt(char.replace("__", ""));
        key = key.replace(char, String.fromCharCode(charCode));
      });
      return key;
    };
    exports.denormalizeKey = denormalizeKey;
    var pairToObject = function(raw, preventRound) {
      var pair = splitPair(raw);
      var h = preventRound ? parseFloat(pair && pair[0]) : parseInt(pair && pair[0], 10);
      var v = preventRound ? parseFloat(pair && pair[1]) : parseInt(pair && pair[1], 10);
      if (!isFinite(h)) {
        h = 0;
      }
      if (!isFinite(v)) {
        v = h;
      }
      return {
        h,
        v
      };
    };
    exports.pairToObject = pairToObject;
    var getKeyHash = function(key) {
      if (key instanceof _guid.default) {
        return key.toString();
      } else if ((0, _type.isObject)(key) || Array.isArray(key)) {
        try {
          var keyHash = JSON.stringify(key);
          return "{}" === keyHash ? key : keyHash;
        } catch (e) {
          return key;
        }
      }
      return key;
    };
    exports.getKeyHash = getKeyHash;
    var escapeRegExp = function(string) {
      return string.replace(/[[\]{}\-()*+?.\\^$|\s]/g, "\\$&");
    };
    exports.escapeRegExp = escapeRegExp;
    var applyServerDecimalSeparator = function(value) {
      var separator = (0, _config.default)().serverDecimalSeparator;
      if ((0, _type.isDefined)(value)) {
        value = value.toString().replace(".", separator);
      }
      return value;
    };
    exports.applyServerDecimalSeparator = applyServerDecimalSeparator;
    var noop = function() {
    };
    exports.noop = noop;
    var asyncNoop = function() {
      return new _deferred.Deferred().resolve().promise();
    };
    exports.asyncNoop = asyncNoop;
    var grep = function(elements, checkFunction, invert) {
      var result = [];
      var check;
      var expectedCheck = !invert;
      for (var i = 0; i < elements.length; i++) {
        check = !!checkFunction(elements[i], i);
        if (check === expectedCheck) {
          result.push(elements[i]);
        }
      }
      return result;
    };
    exports.grep = grep;
    var compareArrays = function(array1, array2, depth, options) {
      if (array1.length !== array2.length) {
        return false;
      }
      return !array1.some(function(item, idx) {
        return !compareByValue(item, array2[idx], depth + 1, _extends({}, options, {
          strict: true
        }));
      });
    };
    var compareObjects = function(object1, object2, depth, options) {
      var keys1 = Object.keys(object1);
      var keys2 = Object.keys(object2);
      if (keys1.length !== keys2.length) {
        return false;
      }
      var keys2Set = new Set(keys2);
      return !keys1.some(function(key) {
        return !keys2Set.has(key) || !compareByValue(object1[key], object2[key], depth + 1, options);
      });
    };
    var DEFAULT_EQUAL_BY_VALUE_OPTS = {
      maxDepth: 3,
      strict: true
    };
    var compareByValue = function(value1, value2, depth, options) {
      var strict = options.strict, maxDepth = options.maxDepth;
      var comparable1 = (0, _data.toComparable)(value1, true);
      var comparable2 = (0, _data.toComparable)(value2, true);
      var comparisonResult = strict ? comparable1 === comparable2 : comparable1 == comparable2;
      switch (true) {
        case comparisonResult:
        case depth >= maxDepth:
          return true;
        case ((0, _type.isObject)(comparable1) && (0, _type.isObject)(comparable2)):
          return compareObjects(comparable1, comparable2, depth, options);
        case (Array.isArray(comparable1) && Array.isArray(comparable2)):
          return compareArrays(comparable1, comparable2, depth, options);
        default:
          return false;
      }
    };
    var equalByValue = function(value1, value2) {
      var options = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : DEFAULT_EQUAL_BY_VALUE_OPTS;
      var compareOptions = _extends({}, DEFAULT_EQUAL_BY_VALUE_OPTS, options);
      return compareByValue(value1, value2, 0, compareOptions);
    };
    exports.equalByValue = equalByValue;
  }
});

// node_modules/devextreme/cjs/core/utils/math.js
var require_math = __commonJS({
  "node_modules/devextreme/cjs/core/utils/math.js"(exports) {
    "use strict";
    exports.adjust = adjust;
    exports.fitIntoRange = void 0;
    exports.getExponent = getExponent;
    exports.getExponentLength = getExponentLength;
    exports.getPrecision = getPrecision;
    exports.getRemainderByDivision = getRemainderByDivision;
    exports.getRoot = getRoot;
    exports.inRange = void 0;
    exports.multiplyInExponentialForm = multiplyInExponentialForm;
    exports.roundFloatPart = roundFloatPart;
    exports.sign = void 0;
    exports.solveCubicEquation = solveCubicEquation;
    exports.trunc = trunc;
    var _type = require_type();
    var sign = function(value) {
      if (0 === value) {
        return 0;
      }
      return value / Math.abs(value);
    };
    exports.sign = sign;
    var fitIntoRange = function(value, minValue, maxValue) {
      var isMinValueUndefined = !minValue && 0 !== minValue;
      var isMaxValueUndefined = !maxValue && 0 !== maxValue;
      isMinValueUndefined && (minValue = !isMaxValueUndefined ? Math.min(value, maxValue) : value);
      isMaxValueUndefined && (maxValue = !isMinValueUndefined ? Math.max(value, minValue) : value);
      return Math.min(Math.max(value, minValue), maxValue);
    };
    exports.fitIntoRange = fitIntoRange;
    var inRange = function(value, minValue, maxValue) {
      return value >= minValue && value <= maxValue;
    };
    exports.inRange = inRange;
    function getExponent(value) {
      return Math.abs(parseInt(value.toExponential().split("e")[1]));
    }
    function getExponentialNotation(value) {
      var parts = value.toExponential().split("e");
      var mantissa = parseFloat(parts[0]);
      var exponent = parseInt(parts[1]);
      return {
        exponent,
        mantissa
      };
    }
    function multiplyInExponentialForm(value, exponentShift) {
      var exponentialNotation = getExponentialNotation(value);
      return parseFloat("".concat(exponentialNotation.mantissa, "e").concat(exponentialNotation.exponent + exponentShift));
    }
    function _isEdgeBug() {
      return "0.000300" !== 3e-4.toPrecision(3);
    }
    function adjust(value, interval) {
      var precision = getPrecision(interval || 0) + 2;
      var separatedValue = value.toString().split(".");
      var sourceValue = value;
      var absValue = Math.abs(value);
      var separatedAdjustedValue;
      var isExponentValue = (0, _type.isExponential)(value);
      var integerPart = absValue > 1 ? 10 : 0;
      if (1 === separatedValue.length) {
        return value;
      }
      if (!isExponentValue) {
        if ((0, _type.isExponential)(interval)) {
          precision = separatedValue[0].length + getExponent(interval);
        }
        value = absValue;
        value = value - Math.floor(value) + integerPart;
      }
      precision = _isEdgeBug() && getExponent(value) > 6 || precision > 7 ? 15 : 7;
      if (!isExponentValue) {
        separatedAdjustedValue = parseFloat(value.toPrecision(precision)).toString().split(".");
        if (separatedAdjustedValue[0] === integerPart.toString()) {
          return parseFloat(separatedValue[0] + "." + separatedAdjustedValue[1]);
        }
      }
      return parseFloat(sourceValue.toPrecision(precision));
    }
    function getPrecision(value) {
      var str = value.toString();
      if (str.indexOf(".") < 0) {
        return 0;
      }
      var mantissa = str.split(".");
      var positionOfDelimiter = mantissa[1].indexOf("e");
      return positionOfDelimiter >= 0 ? positionOfDelimiter : mantissa[1].length;
    }
    function getRoot(x, n) {
      if (x < 0 && n % 2 !== 1) {
        return NaN;
      }
      var y = Math.pow(Math.abs(x), 1 / n);
      return n % 2 === 1 && x < 0 ? -y : y;
    }
    function solveCubicEquation(a, b, c, d) {
      if (Math.abs(a) < 1e-8) {
        a = b;
        b = c;
        c = d;
        if (Math.abs(a) < 1e-8) {
          a = b;
          b = c;
          if (Math.abs(a) < 1e-8) {
            return [];
          }
          return [-b / a];
        }
        var D2 = b * b - 4 * a * c;
        if (Math.abs(D2) < 1e-8) {
          return [-b / (2 * a)];
        } else if (D2 > 0) {
          return [(-b + Math.sqrt(D2)) / (2 * a), (-b - Math.sqrt(D2)) / (2 * a)];
        }
        return [];
      }
      var p = (3 * a * c - b * b) / (3 * a * a);
      var q = (2 * b * b * b - 9 * a * b * c + 27 * a * a * d) / (27 * a * a * a);
      var roots;
      var u;
      if (Math.abs(p) < 1e-8) {
        roots = [getRoot(-q, 3)];
      } else if (Math.abs(q) < 1e-8) {
        roots = [0].concat(p < 0 ? [Math.sqrt(-p), -Math.sqrt(-p)] : []);
      } else {
        var D3 = q * q / 4 + p * p * p / 27;
        if (Math.abs(D3) < 1e-8) {
          roots = [-1.5 * q / p, 3 * q / p];
        } else if (D3 > 0) {
          u = getRoot(-q / 2 - Math.sqrt(D3), 3);
          roots = [u - p / (3 * u)];
        } else {
          u = 2 * Math.sqrt(-p / 3);
          var t = Math.acos(3 * q / p / u) / 3;
          var k = 2 * Math.PI / 3;
          roots = [u * Math.cos(t), u * Math.cos(t - k), u * Math.cos(t - 2 * k)];
        }
      }
      for (var i = 0; i < roots.length; i++) {
        roots[i] -= b / (3 * a);
      }
      return roots;
    }
    function trunc(value) {
      return Math.trunc ? Math.trunc(value) : value > 0 ? Math.floor(value) : Math.ceil(value);
    }
    function getRemainderByDivision(dividend, divider, digitsCount) {
      if (divider === parseInt(divider)) {
        return dividend % divider;
      }
      var quotient = roundFloatPart(dividend / divider, digitsCount);
      return (quotient - parseInt(quotient)) * divider;
    }
    function getExponentLength(value) {
      var _valueString$split$;
      var valueString = value.toString();
      return (null === (_valueString$split$ = valueString.split(".")[1]) || void 0 === _valueString$split$ ? void 0 : _valueString$split$.length) || parseInt(valueString.split("e-")[1]) || 0;
    }
    function roundFloatPart(value) {
      var digitsCount = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0;
      return parseFloat(value.toFixed(digitsCount));
    }
  }
});

// node_modules/devextreme/cjs/core/utils/inflector.js
var require_inflector = __commonJS({
  "node_modules/devextreme/cjs/core/utils/inflector.js"(exports) {
    "use strict";
    exports.underscore = exports.titleize = exports.humanize = exports.dasherize = exports.captionize = exports.camelize = void 0;
    var _iterator = require_iterator();
    var _normalize = function(text) {
      if (void 0 === text || null === text) {
        return "";
      }
      return String(text);
    };
    var _upperCaseFirst = function(text) {
      return _normalize(text).charAt(0).toUpperCase() + text.substr(1);
    };
    var _chop = function(text) {
      return _normalize(text).replace(/([a-z\d])([A-Z])/g, "$1 $2").split(/[\s_-]+/);
    };
    var dasherize = function(text) {
      return (0, _iterator.map)(_chop(text), function(p) {
        return p.toLowerCase();
      }).join("-");
    };
    exports.dasherize = dasherize;
    var underscore = function(text) {
      return dasherize(text).replace(/-/g, "_");
    };
    exports.underscore = underscore;
    var camelize = function(text, upperFirst) {
      return (0, _iterator.map)(_chop(text), function(p, i) {
        p = p.toLowerCase();
        if (upperFirst || i > 0) {
          p = _upperCaseFirst(p);
        }
        return p;
      }).join("");
    };
    exports.camelize = camelize;
    var humanize = function(text) {
      return _upperCaseFirst(dasherize(text).replace(/-/g, " "));
    };
    exports.humanize = humanize;
    var titleize = function(text) {
      return (0, _iterator.map)(_chop(text), function(p) {
        return _upperCaseFirst(p.toLowerCase());
      }).join(" ");
    };
    exports.titleize = titleize;
    var DIGIT_CHARS = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9"];
    var captionize = function(name) {
      var captionList = [];
      var i;
      var char;
      var isPrevCharNewWord = false;
      var isNewWord = false;
      for (i = 0; i < name.length; i++) {
        char = name.charAt(i);
        isNewWord = char === char.toUpperCase() && "-" !== char && ")" !== char && "/" !== char || char in DIGIT_CHARS;
        if ("_" === char || "." === char) {
          char = " ";
          isNewWord = true;
        } else if (0 === i) {
          char = char.toUpperCase();
          isNewWord = true;
        } else if (!isPrevCharNewWord && isNewWord) {
          if (captionList.length > 0) {
            captionList.push(" ");
          }
        }
        captionList.push(char);
        isPrevCharNewWord = isNewWord;
      }
      return captionList.join("");
    };
    exports.captionize = captionize;
  }
});

// node_modules/devextreme/cjs/renovation/ui/common/utils/date/toMilliseconds.js
var require_toMilliseconds = __commonJS({
  "node_modules/devextreme/cjs/renovation/ui/common/utils/date/toMilliseconds.js"(exports) {
    "use strict";
    exports.toMilliseconds = toMilliseconds;
    var timeIntervals = {
      millisecond: 1,
      second: 1e3,
      minute: 6e4,
      hour: 36e5,
      day: 864e5,
      week: 6048e5,
      month: 2592e6,
      quarter: 7776e6,
      year: 31536e6
    };
    function toMilliseconds(value) {
      return timeIntervals[value];
    }
  }
});

// node_modules/devextreme/cjs/renovation/ui/common/utils/date/index.js
var require_date = __commonJS({
  "node_modules/devextreme/cjs/renovation/ui/common/utils/date/index.js"(exports) {
    "use strict";
    var _toMilliseconds = require_toMilliseconds();
    Object.keys(_toMilliseconds).forEach(function(key) {
      if ("default" === key || "__esModule" === key) {
        return;
      }
      if (key in exports && exports[key] === _toMilliseconds[key]) {
        return;
      }
      Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
          return _toMilliseconds[key];
        }
      });
    });
  }
});

// node_modules/devextreme/cjs/core/utils/date.js
var require_date2 = __commonJS({
  "node_modules/devextreme/cjs/core/utils/date.js"(exports, module) {
    "use strict";
    exports.default = void 0;
    var _type = require_type();
    var _math = require_math();
    var _iterator = require_iterator();
    var _inflector = require_inflector();
    var _index = require_date();
    function _construct(Parent, args, Class) {
      if (_isNativeReflectConstruct()) {
        _construct = Reflect.construct.bind();
      } else {
        _construct = function(Parent2, args2, Class2) {
          var a = [null];
          a.push.apply(a, args2);
          var Constructor = Function.bind.apply(Parent2, a);
          var instance = new Constructor();
          if (Class2) {
            _setPrototypeOf(instance, Class2.prototype);
          }
          return instance;
        };
      }
      return _construct.apply(null, arguments);
    }
    function _isNativeReflectConstruct() {
      if ("undefined" === typeof Reflect || !Reflect.construct) {
        return false;
      }
      if (Reflect.construct.sham) {
        return false;
      }
      if ("function" === typeof Proxy) {
        return true;
      }
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    function _setPrototypeOf(o, p) {
      _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(o2, p2) {
        o2.__proto__ = p2;
        return o2;
      };
      return _setPrototypeOf(o, p);
    }
    var DAYS_IN_WEEK = 7;
    var THURSDAY_WEEK_NUMBER = 4;
    var SUNDAY_WEEK_NUMBER = 7;
    var USUAL_WEEK_COUNT_IN_YEAR = 52;
    var dateUnitIntervals = ["millisecond", "second", "minute", "hour", "day", "week", "month", "quarter", "year"];
    var getDatesInterval = function(startDate, endDate, intervalUnit) {
      var delta = endDate.getTime() - startDate.getTime();
      var millisecondCount = (0, _index.toMilliseconds)(intervalUnit) || 1;
      return Math.floor(delta / millisecondCount);
    };
    var getNextDateUnit = function(unit, withWeeks) {
      var interval = getDateUnitInterval(unit);
      switch (interval) {
        case "millisecond":
          return "second";
        case "second":
          return "minute";
        case "minute":
          return "hour";
        case "hour":
          return "day";
        case "day":
          return withWeeks ? "week" : "month";
        case "week":
          return "month";
        case "month":
          return "quarter";
        case "quarter":
        case "year":
          return "year";
        default:
          return 0;
      }
    };
    var convertMillisecondsToDateUnits = function(value) {
      var i;
      var dateUnitCount;
      var dateUnitInterval;
      var dateUnitIntervals2 = ["millisecond", "second", "minute", "hour", "day", "month", "year"];
      var result = {};
      for (i = dateUnitIntervals2.length - 1; i >= 0; i--) {
        dateUnitInterval = dateUnitIntervals2[i];
        dateUnitCount = Math.floor(value / (0, _index.toMilliseconds)(dateUnitInterval));
        if (dateUnitCount > 0) {
          result[dateUnitInterval + "s"] = dateUnitCount;
          value -= convertDateUnitToMilliseconds(dateUnitInterval, dateUnitCount);
        }
      }
      return result;
    };
    var dateToMilliseconds = function(tickInterval) {
      var milliseconds = 0;
      if ((0, _type.isObject)(tickInterval)) {
        (0, _iterator.each)(tickInterval, function(key, value) {
          milliseconds += convertDateUnitToMilliseconds(key.substr(0, key.length - 1), value);
        });
      }
      if ((0, _type.isString)(tickInterval)) {
        milliseconds = convertDateUnitToMilliseconds(tickInterval, 1);
      }
      return milliseconds;
    };
    function convertDateUnitToMilliseconds(dateUnit, count) {
      return (0, _index.toMilliseconds)(dateUnit) * count;
    }
    function getDateUnitInterval(tickInterval) {
      var maxInterval = -1;
      var i;
      if ((0, _type.isString)(tickInterval)) {
        return tickInterval;
      }
      if ((0, _type.isObject)(tickInterval)) {
        (0, _iterator.each)(tickInterval, function(key, value) {
          for (i = 0; i < dateUnitIntervals.length; i++) {
            if (value && (key === dateUnitIntervals[i] + "s" || key === dateUnitIntervals[i]) && maxInterval < i) {
              maxInterval = i;
            }
          }
        });
        return dateUnitIntervals[maxInterval];
      }
      return "";
    }
    var tickIntervalToFormatMap = {
      millisecond: "millisecond",
      second: "longtime",
      minute: "shorttime",
      hour: "shorttime",
      day: "day",
      week: "day",
      month: "month",
      quarter: "quarter",
      year: "year"
    };
    function getDateFormatByTickInterval(tickInterval) {
      return tickIntervalToFormatMap[getDateUnitInterval(tickInterval)] || "";
    }
    var getQuarter = function(month) {
      return Math.floor(month / 3);
    };
    var getFirstQuarterMonth = function(month) {
      return 3 * getQuarter(month);
    };
    function correctDateWithUnitBeginning(date, dateInterval, withCorrection, firstDayOfWeek) {
      date = new Date(date.getTime());
      var oldDate = new Date(date.getTime());
      var firstQuarterMonth;
      var month;
      var dateUnitInterval = getDateUnitInterval(dateInterval);
      switch (dateUnitInterval) {
        case "second":
          date = new Date(1e3 * Math.floor(oldDate.getTime() / 1e3));
          break;
        case "minute":
          date = new Date(6e4 * Math.floor(oldDate.getTime() / 6e4));
          break;
        case "hour":
          date = new Date(36e5 * Math.floor(oldDate.getTime() / 36e5));
          break;
        case "year":
          date.setMonth(0);
        case "month":
          date.setDate(1);
        case "day":
          date.setHours(0, 0, 0, 0);
          break;
        case "week":
          date = getFirstWeekDate(date, firstDayOfWeek || 0);
          date.setHours(0, 0, 0, 0);
          break;
        case "quarter":
          firstQuarterMonth = getFirstQuarterMonth(date.getMonth());
          month = date.getMonth();
          date.setDate(1);
          date.setHours(0, 0, 0, 0);
          if (month !== firstQuarterMonth) {
            date.setMonth(firstQuarterMonth);
          }
      }
      if (withCorrection && "hour" !== dateUnitInterval && "minute" !== dateUnitInterval && "second" !== dateUnitInterval) {
        fixTimezoneGap(oldDate, date);
      }
      return date;
    }
    function trimTime(date) {
      return correctDateWithUnitBeginning(date, "day");
    }
    var setToDayEnd = function(date) {
      var result = trimTime(date);
      result.setDate(result.getDate() + 1);
      return new Date(result.getTime() - 1);
    };
    var getDatesDifferences = function(date1, date2) {
      var counter = 0;
      var differences = {
        year: date1.getFullYear() !== date2.getFullYear(),
        month: date1.getMonth() !== date2.getMonth(),
        day: date1.getDate() !== date2.getDate(),
        hour: date1.getHours() !== date2.getHours(),
        minute: date1.getMinutes() !== date2.getMinutes(),
        second: date1.getSeconds() !== date2.getSeconds(),
        millisecond: date1.getMilliseconds() !== date2.getMilliseconds()
      };
      (0, _iterator.each)(differences, function(key, value) {
        if (value) {
          counter++;
        }
      });
      if (0 === counter && 0 !== getTimezonesDifference(date1, date2)) {
        differences.hour = true;
        counter++;
      }
      differences.count = counter;
      return differences;
    };
    function addDateInterval(value, interval, dir) {
      var result = new Date(value.getTime());
      var intervalObject = (0, _type.isString)(interval) ? getDateIntervalByString(interval.toLowerCase()) : (0, _type.isNumeric)(interval) ? convertMillisecondsToDateUnits(interval) : interval;
      if (intervalObject.years) {
        result.setFullYear(result.getFullYear() + intervalObject.years * dir);
      }
      if (intervalObject.quarters) {
        result.setMonth(result.getMonth() + 3 * intervalObject.quarters * dir);
      }
      if (intervalObject.months) {
        result.setMonth(result.getMonth() + intervalObject.months * dir);
      }
      if (intervalObject.weeks) {
        result.setDate(result.getDate() + 7 * intervalObject.weeks * dir);
      }
      if (intervalObject.days) {
        result.setDate(result.getDate() + intervalObject.days * dir);
      }
      if (intervalObject.hours) {
        result.setTime(result.getTime() + 36e5 * intervalObject.hours * dir);
      }
      if (intervalObject.minutes) {
        result.setTime(result.getTime() + 6e4 * intervalObject.minutes * dir);
      }
      if (intervalObject.seconds) {
        result.setTime(result.getTime() + 1e3 * intervalObject.seconds * dir);
      }
      if (intervalObject.milliseconds) {
        result.setTime(result.getTime() + intervalObject.milliseconds * dir);
      }
      return result;
    }
    var addInterval = function(value, interval, isNegative) {
      var dir = isNegative ? -1 : 1;
      return (0, _type.isDate)(value) ? addDateInterval(value, interval, dir) : (0, _math.adjust)(value + interval * dir, interval);
    };
    var getSequenceByInterval = function(min, max, interval) {
      var intervals = [];
      var cur;
      intervals.push((0, _type.isDate)(min) ? new Date(min.getTime()) : min);
      cur = min;
      while (cur < max) {
        cur = addInterval(cur, interval);
        intervals.push(cur);
      }
      return intervals;
    };
    var getViewFirstCellDate = function(viewType, date) {
      if ("month" === viewType) {
        return createDateWithFullYear(date.getFullYear(), date.getMonth(), 1);
      }
      if ("year" === viewType) {
        return createDateWithFullYear(date.getFullYear(), 0, date.getDate());
      }
      if ("decade" === viewType) {
        return createDateWithFullYear(getFirstYearInDecade(date), date.getMonth(), date.getDate());
      }
      if ("century" === viewType) {
        return createDateWithFullYear(getFirstDecadeInCentury(date), date.getMonth(), date.getDate());
      }
    };
    var getViewLastCellDate = function(viewType, date) {
      if ("month" === viewType) {
        return createDateWithFullYear(date.getFullYear(), date.getMonth(), getLastMonthDay(date));
      }
      if ("year" === viewType) {
        return createDateWithFullYear(date.getFullYear(), 11, date.getDate());
      }
      if ("decade" === viewType) {
        return createDateWithFullYear(getFirstYearInDecade(date) + 9, date.getMonth(), date.getDate());
      }
      if ("century" === viewType) {
        return createDateWithFullYear(getFirstDecadeInCentury(date) + 90, date.getMonth(), date.getDate());
      }
    };
    var getViewMinBoundaryDate = function(viewType, date) {
      var resultDate = createDateWithFullYear(date.getFullYear(), date.getMonth(), 1);
      if ("month" === viewType) {
        return resultDate;
      }
      resultDate.setMonth(0);
      if ("year" === viewType) {
        return resultDate;
      }
      if ("decade" === viewType) {
        resultDate.setFullYear(getFirstYearInDecade(date));
      }
      if ("century" === viewType) {
        resultDate.setFullYear(getFirstDecadeInCentury(date));
      }
      return resultDate;
    };
    var getViewMaxBoundaryDate = function(viewType, date) {
      var resultDate = new Date(date);
      resultDate.setDate(getLastMonthDay(date));
      if ("month" === viewType) {
        return resultDate;
      }
      resultDate.setMonth(11);
      resultDate.setDate(getLastMonthDay(resultDate));
      if ("year" === viewType) {
        return resultDate;
      }
      if ("decade" === viewType) {
        resultDate.setFullYear(getFirstYearInDecade(date) + 9);
      }
      if ("century" === viewType) {
        resultDate.setFullYear(getFirstDecadeInCentury(date) + 99);
      }
      return resultDate;
    };
    function getLastMonthDay(date) {
      var resultDate = createDateWithFullYear(date.getFullYear(), date.getMonth() + 1, 0);
      return resultDate.getDate();
    }
    var getViewUp = function(typeView) {
      switch (typeView) {
        case "month":
          return "year";
        case "year":
          return "decade";
        case "decade":
          return "century";
      }
    };
    var getViewDown = function(typeView) {
      switch (typeView) {
        case "century":
          return "decade";
        case "decade":
          return "year";
        case "year":
          return "month";
      }
    };
    var getDifferenceInMonth = function(typeView) {
      var difference = 1;
      if ("year" === typeView) {
        difference = 12;
      }
      if ("decade" === typeView) {
        difference = 120;
      }
      if ("century" === typeView) {
        difference = 1200;
      }
      return difference;
    };
    var getDifferenceInMonthForCells = function(typeView) {
      var difference = 1;
      if ("decade" === typeView) {
        difference = 12;
      }
      if ("century" === typeView) {
        difference = 120;
      }
      return difference;
    };
    function getDateIntervalByString(intervalString) {
      var result = {};
      switch (intervalString) {
        case "year":
          result.years = 1;
          break;
        case "month":
          result.months = 1;
          break;
        case "quarter":
          result.months = 3;
          break;
        case "week":
          result.weeks = 1;
          break;
        case "day":
          result.days = 1;
          break;
        case "hour":
          result.hours = 1;
          break;
        case "minute":
          result.minutes = 1;
          break;
        case "second":
          result.seconds = 1;
          break;
        case "millisecond":
          result.milliseconds = 1;
      }
      return result;
    }
    function sameDate(date1, date2) {
      return sameMonthAndYear(date1, date2) && date1.getDate() === date2.getDate();
    }
    function sameMonthAndYear(date1, date2) {
      return sameYear(date1, date2) && date1.getMonth() === date2.getMonth();
    }
    function sameYear(date1, date2) {
      return date1 && date2 && date1.getFullYear() === date2.getFullYear();
    }
    function sameHoursAndMinutes(date1, date2) {
      return date1 && date2 && date1.getHours() === date2.getHours() && date1.getMinutes() === date2.getMinutes();
    }
    var sameDecade = function(date1, date2) {
      if (!(0, _type.isDefined)(date1) || !(0, _type.isDefined)(date2)) {
        return;
      }
      var startDecadeDate1 = date1.getFullYear() - date1.getFullYear() % 10;
      var startDecadeDate2 = date2.getFullYear() - date2.getFullYear() % 10;
      return date1 && date2 && startDecadeDate1 === startDecadeDate2;
    };
    var sameCentury = function(date1, date2) {
      if (!(0, _type.isDefined)(date1) || !(0, _type.isDefined)(date2)) {
        return;
      }
      var startCenturyDate1 = date1.getFullYear() - date1.getFullYear() % 100;
      var startCenturyDate2 = date2.getFullYear() - date2.getFullYear() % 100;
      return date1 && date2 && startCenturyDate1 === startCenturyDate2;
    };
    function getFirstDecadeInCentury(date) {
      return date && date.getFullYear() - date.getFullYear() % 100;
    }
    function getFirstYearInDecade(date) {
      return date && date.getFullYear() - date.getFullYear() % 10;
    }
    var getShortDateFormat = function() {
      return "yyyy/MM/dd";
    };
    var getFirstMonthDate = function(date) {
      if (!(0, _type.isDefined)(date)) {
        return;
      }
      return createDateWithFullYear(date.getFullYear(), date.getMonth(), 1);
    };
    var getLastMonthDate = function(date) {
      if (!(0, _type.isDefined)(date)) {
        return;
      }
      return createDateWithFullYear(date.getFullYear(), date.getMonth() + 1, 0);
    };
    function getFirstWeekDate(date, firstDayOfWeek) {
      var delta = (date.getDay() - firstDayOfWeek + DAYS_IN_WEEK) % DAYS_IN_WEEK;
      var result = new Date(date);
      result.setDate(date.getDate() - delta);
      return result;
    }
    function getUTCTime(date) {
      return Date.UTC(date.getFullYear(), date.getMonth(), date.getDate());
    }
    function getDayNumber(date) {
      var ms = getUTCTime(date) - getUTCTime(getFirstDateInYear(date.getFullYear()));
      return 1 + Math.floor(ms / (0, _index.toMilliseconds)("day"));
    }
    function getFirstDateInYear(year) {
      return new Date(year, 0, 1);
    }
    function getLastDateInYear(year) {
      return new Date(year, 11, 31);
    }
    function getDayWeekNumber(date, firstDayOfWeek) {
      var day = date.getDay() - firstDayOfWeek + 1;
      if (day <= 0) {
        day += DAYS_IN_WEEK;
      }
      return day;
    }
    function getWeekNumber(date, firstDayOfWeek, rule) {
      var firstWeekDayInYear = getDayWeekNumber(getFirstDateInYear(date.getFullYear()), firstDayOfWeek);
      var lastWeekDayInYear = getDayWeekNumber(getLastDateInYear(date.getFullYear()), firstDayOfWeek);
      var daysInFirstWeek = DAYS_IN_WEEK - firstWeekDayInYear + 1;
      var weekNumber = Math.ceil((getDayNumber(date) - daysInFirstWeek) / 7);
      switch (rule) {
        case "fullWeek":
          if (daysInFirstWeek === DAYS_IN_WEEK) {
            weekNumber++;
          }
          if (0 === weekNumber) {
            var lastDateInPreviousYear = getLastDateInYear(date.getFullYear() - 1);
            return getWeekNumber(lastDateInPreviousYear, firstDayOfWeek, rule);
          }
          return weekNumber;
        case "firstDay":
          if (daysInFirstWeek > 0) {
            weekNumber++;
          }
          var isSunday = firstWeekDayInYear === SUNDAY_WEEK_NUMBER || lastWeekDayInYear === SUNDAY_WEEK_NUMBER;
          if (weekNumber > USUAL_WEEK_COUNT_IN_YEAR && !isSunday || 54 === weekNumber) {
            weekNumber = 1;
          }
          return weekNumber;
        case "firstFourDays":
          if (daysInFirstWeek > 3) {
            weekNumber++;
          }
          var isThursday = firstWeekDayInYear === THURSDAY_WEEK_NUMBER || lastWeekDayInYear === THURSDAY_WEEK_NUMBER;
          if (weekNumber > USUAL_WEEK_COUNT_IN_YEAR && !isThursday) {
            weekNumber = 1;
          }
          if (0 === weekNumber) {
            var _lastDateInPreviousYear = getLastDateInYear(date.getFullYear() - 1);
            return getWeekNumber(_lastDateInPreviousYear, firstDayOfWeek, rule);
          }
          return weekNumber;
      }
    }
    var normalizeDateByWeek = function(date, currentDate) {
      var differenceInDays = dateUtils.getDatesInterval(date, currentDate, "day");
      var resultDate = new Date(date);
      if (differenceInDays >= 6) {
        resultDate = new Date(resultDate.setDate(resultDate.getDate() + 7));
      }
      return resultDate;
    };
    var dateInRange = function(date, min, max, format) {
      if ("date" === format) {
        min = min && dateUtils.correctDateWithUnitBeginning(min, "day");
        max = max && dateUtils.correctDateWithUnitBeginning(max, "day");
        date = date && dateUtils.correctDateWithUnitBeginning(date, "day");
      }
      return normalizeDate(date, min, max) === date;
    };
    var intervalsOverlap = function(options) {
      var firstMin = options.firstMin, firstMax = options.firstMax, secondMin = options.secondMin, secondMax = options.secondMax;
      return firstMin <= secondMin && secondMin <= firstMax || firstMin > secondMin && firstMin < secondMax || firstMin < secondMax && firstMax > secondMax;
    };
    var dateTimeFromDecimal = function(number) {
      var hours = Math.floor(number);
      var minutes = number % 1 * 60;
      return {
        hours,
        minutes
      };
    };
    var roundDateByStartDayHour = function(date, startDayHour) {
      var startTime = this.dateTimeFromDecimal(startDayHour);
      var result = new Date(date);
      if (date.getHours() === startTime.hours && date.getMinutes() < startTime.minutes || date.getHours() < startTime.hours) {
        result.setHours(startTime.hours, startTime.minutes, 0, 0);
      }
      return result;
    };
    function normalizeDate(date, min, max) {
      var normalizedDate = date;
      if (!(0, _type.isDefined)(date)) {
        return date;
      }
      if ((0, _type.isDefined)(min) && date < min) {
        normalizedDate = min;
      }
      if ((0, _type.isDefined)(max) && date > max) {
        normalizedDate = max;
      }
      return normalizedDate;
    }
    function fixTimezoneGap(oldDate, newDate) {
      if (!(0, _type.isDefined)(oldDate)) {
        return;
      }
      var diff = newDate.getHours() - oldDate.getHours();
      if (0 === diff) {
        return;
      }
      var sign = 1 === diff || -23 === diff ? -1 : 1;
      var trial = new Date(newDate.getTime() + 36e5 * sign);
      if (sign > 0 || trial.getDate() === newDate.getDate()) {
        newDate.setTime(trial.getTime());
      }
    }
    var roundToHour = function(date) {
      var result = new Date(date.getTime());
      result.setHours(result.getHours() + 1);
      result.setMinutes(0);
      return result;
    };
    function getTimezonesDifference(min, max) {
      return 60 * (max.getTimezoneOffset() - min.getTimezoneOffset()) * 1e3;
    }
    var makeDate = function(date) {
      return new Date(date);
    };
    var getDatesOfInterval = function(startDate, endDate, step) {
      var result = [];
      var currentDate = new Date(startDate.getTime());
      while (currentDate < endDate) {
        result.push(new Date(currentDate.getTime()));
        currentDate = this.addInterval(currentDate, step);
      }
      return result;
    };
    var createDateWithFullYear = function(year) {
      var result = _construct(Date, Array.prototype.slice.call(arguments));
      result.setFullYear(year);
      return result;
    };
    var dateUtils = {
      dateUnitIntervals,
      convertMillisecondsToDateUnits,
      dateToMilliseconds,
      getNextDateUnit,
      convertDateUnitToMilliseconds,
      getDateUnitInterval,
      getDateFormatByTickInterval,
      getDatesDifferences,
      correctDateWithUnitBeginning,
      trimTime,
      setToDayEnd,
      roundDateByStartDayHour,
      dateTimeFromDecimal,
      addDateInterval,
      addInterval,
      getSequenceByInterval,
      getDateIntervalByString,
      sameHoursAndMinutes,
      sameDate,
      sameMonthAndYear,
      sameMonth: sameMonthAndYear,
      sameYear,
      sameDecade,
      sameCentury,
      getDifferenceInMonth,
      getDifferenceInMonthForCells,
      getFirstYearInDecade,
      getFirstDecadeInCentury,
      getShortDateFormat,
      getViewFirstCellDate,
      getViewLastCellDate,
      getViewDown,
      getViewUp,
      getLastMonthDay,
      getLastMonthDate,
      getFirstMonthDate,
      getFirstWeekDate,
      getWeekNumber,
      normalizeDateByWeek,
      getQuarter,
      getFirstQuarterMonth,
      dateInRange,
      intervalsOverlap,
      roundToHour,
      normalizeDate,
      getViewMinBoundaryDate,
      getViewMaxBoundaryDate,
      fixTimezoneGap,
      getTimezonesDifference,
      makeDate,
      getDatesInterval,
      getDatesOfInterval,
      createDateWithFullYear
    };
    dateUtils.sameView = function(view, date1, date2) {
      return dateUtils[(0, _inflector.camelize)("same " + view)](date1, date2);
    };
    var _default = dateUtils;
    exports.default = _default;
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/devextreme/cjs/color.js
var require_color = __commonJS({
  "node_modules/devextreme/cjs/color.js"(exports, module) {
    "use strict";
    exports.default = void 0;
    var standardColorNames = {
      aliceblue: "f0f8ff",
      antiquewhite: "faebd7",
      aqua: "00ffff",
      aquamarine: "7fffd4",
      azure: "f0ffff",
      beige: "f5f5dc",
      bisque: "ffe4c4",
      black: "000000",
      blanchedalmond: "ffebcd",
      blue: "0000ff",
      blueviolet: "8a2be2",
      brown: "a52a2a",
      burlywood: "deb887",
      cadetblue: "5f9ea0",
      chartreuse: "7fff00",
      chocolate: "d2691e",
      coral: "ff7f50",
      cornflowerblue: "6495ed",
      cornsilk: "fff8dc",
      crimson: "dc143c",
      cyan: "00ffff",
      darkblue: "00008b",
      darkcyan: "008b8b",
      darkgoldenrod: "b8860b",
      darkgray: "a9a9a9",
      darkgreen: "006400",
      darkgrey: "a9a9a9",
      darkkhaki: "bdb76b",
      darkmagenta: "8b008b",
      darkolivegreen: "556b2f",
      darkorange: "ff8c00",
      darkorchid: "9932cc",
      darkred: "8b0000",
      darksalmon: "e9967a",
      darkseagreen: "8fbc8f",
      darkslateblue: "483d8b",
      darkslategray: "2f4f4f",
      darkslategrey: "2f4f4f",
      darkturquoise: "00ced1",
      darkviolet: "9400d3",
      deeppink: "ff1493",
      deepskyblue: "00bfff",
      dimgray: "696969",
      dimgrey: "696969",
      dodgerblue: "1e90ff",
      feldspar: "d19275",
      firebrick: "b22222",
      floralwhite: "fffaf0",
      forestgreen: "228b22",
      fuchsia: "ff00ff",
      gainsboro: "dcdcdc",
      ghostwhite: "f8f8ff",
      gold: "ffd700",
      goldenrod: "daa520",
      gray: "808080",
      green: "008000",
      greenyellow: "adff2f",
      grey: "808080",
      honeydew: "f0fff0",
      hotpink: "ff69b4",
      indianred: "cd5c5c",
      indigo: "4b0082",
      ivory: "fffff0",
      khaki: "f0e68c",
      lavender: "e6e6fa",
      lavenderblush: "fff0f5",
      lawngreen: "7cfc00",
      lemonchiffon: "fffacd",
      lightblue: "add8e6",
      lightcoral: "f08080",
      lightcyan: "e0ffff",
      lightgoldenrodyellow: "fafad2",
      lightgray: "d3d3d3",
      lightgreen: "90ee90",
      lightgrey: "d3d3d3",
      lightpink: "ffb6c1",
      lightsalmon: "ffa07a",
      lightseagreen: "20b2aa",
      lightskyblue: "87cefa",
      lightslateblue: "8470ff",
      lightslategray: "778899",
      lightslategrey: "778899",
      lightsteelblue: "b0c4de",
      lightyellow: "ffffe0",
      lime: "00ff00",
      limegreen: "32cd32",
      linen: "faf0e6",
      magenta: "ff00ff",
      maroon: "800000",
      mediumaquamarine: "66cdaa",
      mediumblue: "0000cd",
      mediumorchid: "ba55d3",
      mediumpurple: "9370d8",
      mediumseagreen: "3cb371",
      mediumslateblue: "7b68ee",
      mediumspringgreen: "00fa9a",
      mediumturquoise: "48d1cc",
      mediumvioletred: "c71585",
      midnightblue: "191970",
      mintcream: "f5fffa",
      mistyrose: "ffe4e1",
      moccasin: "ffe4b5",
      navajowhite: "ffdead",
      navy: "000080",
      oldlace: "fdf5e6",
      olive: "808000",
      olivedrab: "6b8e23",
      orange: "ffa500",
      orangered: "ff4500",
      orchid: "da70d6",
      palegoldenrod: "eee8aa",
      palegreen: "98fb98",
      paleturquoise: "afeeee",
      palevioletred: "d87093",
      papayawhip: "ffefd5",
      peachpuff: "ffdab9",
      peru: "cd853f",
      pink: "ffc0cb",
      plum: "dda0dd",
      powderblue: "b0e0e6",
      purple: "800080",
      rebeccapurple: "663399",
      red: "ff0000",
      rosybrown: "bc8f8f",
      royalblue: "4169e1",
      saddlebrown: "8b4513",
      salmon: "fa8072",
      sandybrown: "f4a460",
      seagreen: "2e8b57",
      seashell: "fff5ee",
      sienna: "a0522d",
      silver: "c0c0c0",
      skyblue: "87ceeb",
      slateblue: "6a5acd",
      slategray: "708090",
      slategrey: "708090",
      snow: "fffafa",
      springgreen: "00ff7f",
      steelblue: "4682b4",
      tan: "d2b48c",
      teal: "008080",
      thistle: "d8bfd8",
      tomato: "ff6347",
      turquoise: "40e0d0",
      violet: "ee82ee",
      violetred: "d02090",
      wheat: "f5deb3",
      white: "ffffff",
      whitesmoke: "f5f5f5",
      yellow: "ffff00",
      yellowgreen: "9acd32"
    };
    var standardColorTypes = [{
      re: /^rgb\((\d{1,3}),\s*(\d{1,3}),\s*(\d{1,3})\)$/,
      process: function(colorString) {
        return [parseInt(colorString[1], 10), parseInt(colorString[2], 10), parseInt(colorString[3], 10)];
      }
    }, {
      re: /^rgba\((\d{1,3}),\s*(\d{1,3}),\s*(\d{1,3}),\s*(\d*\.*\d+)\)$/,
      process: function(colorString) {
        return [parseInt(colorString[1], 10), parseInt(colorString[2], 10), parseInt(colorString[3], 10), parseFloat(colorString[4])];
      }
    }, {
      re: /^#([a-f0-9]{2})([a-f0-9]{2})([a-f0-9]{2})$/,
      process: function(colorString) {
        return [parseInt(colorString[1], 16), parseInt(colorString[2], 16), parseInt(colorString[3], 16)];
      }
    }, {
      re: /^#([a-f0-9]{2})([a-f0-9]{2})([a-f0-9]{2})([a-f0-9]{2})$/,
      process: function(colorString) {
        return [parseInt(colorString[1], 16), parseInt(colorString[2], 16), parseInt(colorString[3], 16), Number((parseInt(colorString[4], 16) / 255).toFixed(2))];
      }
    }, {
      re: /^#([a-f0-9]{1})([a-f0-9]{1})([a-f0-9]{1})([a-f0-9]{1})$/,
      process: function(colorString) {
        return [parseInt(colorString[1] + colorString[1], 16), parseInt(colorString[2] + colorString[2], 16), parseInt(colorString[3] + colorString[3], 16), Number((parseInt(colorString[4] + colorString[4], 16) / 255).toFixed(2))];
      }
    }, {
      re: /^#([a-f0-9]{1})([a-f0-9]{1})([a-f0-9]{1})$/,
      process: function(colorString) {
        return [parseInt(colorString[1] + colorString[1], 16), parseInt(colorString[2] + colorString[2], 16), parseInt(colorString[3] + colorString[3], 16)];
      }
    }, {
      re: /^hsv\((\d{1,3}),\s*(\d{1,3}),\s*(\d{1,3})\)$/,
      process: function(colorString) {
        var h = parseInt(colorString[1], 10);
        var s = parseInt(colorString[2], 10);
        var v = parseInt(colorString[3], 10);
        var rgb = hsvToRgb(h, s, v);
        return [rgb[0], rgb[1], rgb[2], 1, [h, s, v]];
      }
    }, {
      re: /^hsl\((\d{1,3}),\s*(\d{1,3}),\s*(\d{1,3})\)$/,
      process: function(colorString) {
        var h = parseInt(colorString[1], 10);
        var s = parseInt(colorString[2], 10);
        var l = parseInt(colorString[3], 10);
        var rgb = hslToRgb(h, s, l);
        return [rgb[0], rgb[1], rgb[2], 1, null, [h, s, l]];
      }
    }];
    var _round = Math.round;
    function Color(value) {
      this.baseColor = value;
      var color;
      if (value) {
        color = String(value).toLowerCase().replace(/ /g, "");
        color = standardColorNames[color] ? "#" + standardColorNames[color] : color;
        color = parseColor(color);
      }
      if (!color) {
        this.colorIsInvalid = true;
      }
      color = color || {};
      this.r = normalize(color[0]);
      this.g = normalize(color[1]);
      this.b = normalize(color[2]);
      this.a = normalize(color[3], 1, 1);
      if (color[4]) {
        this.hsv = {
          h: color[4][0],
          s: color[4][1],
          v: color[4][2]
        };
      } else {
        this.hsv = toHsvFromRgb(this.r, this.g, this.b);
      }
      if (color[5]) {
        this.hsl = {
          h: color[5][0],
          s: color[5][1],
          l: color[5][2]
        };
      } else {
        this.hsl = toHslFromRgb(this.r, this.g, this.b);
      }
    }
    function parseColor(color) {
      if ("transparent" === color) {
        return [0, 0, 0, 0];
      }
      var i = 0;
      var ii = standardColorTypes.length;
      var str;
      for (; i < ii; ++i) {
        str = standardColorTypes[i].re.exec(color);
        if (str) {
          return standardColorTypes[i].process(str);
        }
      }
      return null;
    }
    function normalize(colorComponent, def, max) {
      def = def || 0;
      max = max || 255;
      return colorComponent < 0 || isNaN(colorComponent) ? def : colorComponent > max ? max : colorComponent;
    }
    function toHexFromRgb(r, g, b) {
      return "#" + (16777216 | r << 16 | g << 8 | b).toString(16).slice(1);
    }
    function toHsvFromRgb(r, g, b) {
      var max = Math.max(r, g, b);
      var min = Math.min(r, g, b);
      var delta = max - min;
      var H;
      var S;
      var V = max;
      S = 0 === max ? 0 : 1 - min / max;
      if (max === min) {
        H = 0;
      } else {
        switch (max) {
          case r:
            H = (g - b) / delta * 60;
            if (g < b) {
              H += 360;
            }
            break;
          case g:
            H = (b - r) / delta * 60 + 120;
            break;
          case b:
            H = (r - g) / delta * 60 + 240;
        }
      }
      S *= 100;
      V *= 100 / 255;
      return {
        h: Math.round(H),
        s: Math.round(S),
        v: Math.round(V)
      };
    }
    function hsvToRgb(h, s, v) {
      var index = Math.floor(h % 360 / 60);
      var vMin = (100 - s) * v / 100;
      var a = h % 60 / 60 * (v - vMin);
      var vInc = vMin + a;
      var vDec = v - a;
      var r;
      var g;
      var b;
      switch (index) {
        case 0:
          r = v;
          g = vInc;
          b = vMin;
          break;
        case 1:
          r = vDec;
          g = v;
          b = vMin;
          break;
        case 2:
          r = vMin;
          g = v;
          b = vInc;
          break;
        case 3:
          r = vMin;
          g = vDec;
          b = v;
          break;
        case 4:
          r = vInc;
          g = vMin;
          b = v;
          break;
        case 5:
          r = v;
          g = vMin;
          b = vDec;
      }
      return [Math.round(2.55 * r), Math.round(2.55 * g), Math.round(2.55 * b)];
    }
    function calculateHue(r, g, b, delta) {
      var max = Math.max(r, g, b);
      switch (max) {
        case r:
          return (g - b) / delta + (g < b ? 6 : 0);
        case g:
          return (b - r) / delta + 2;
        case b:
          return (r - g) / delta + 4;
      }
    }
    function toHslFromRgb(r, g, b) {
      r = convertTo01Bounds(r, 255);
      g = convertTo01Bounds(g, 255);
      b = convertTo01Bounds(b, 255);
      var max = Math.max(r, g, b);
      var min = Math.min(r, g, b);
      var maxMinSum = max + min;
      var h;
      var s;
      var l = maxMinSum / 2;
      if (max === min) {
        h = s = 0;
      } else {
        var delta = max - min;
        if (l > 0.5) {
          s = delta / (2 - maxMinSum);
        } else {
          s = delta / maxMinSum;
        }
        h = calculateHue(r, g, b, delta);
        h /= 6;
      }
      return {
        h: _round(360 * h),
        s: _round(100 * s),
        l: _round(100 * l)
      };
    }
    function makeColorTint(colorPart, h) {
      var colorTint = h;
      if ("r" === colorPart) {
        colorTint = h + 1 / 3;
      }
      if ("b" === colorPart) {
        colorTint = h - 1 / 3;
      }
      return colorTint;
    }
    function modifyColorTint(colorTint) {
      if (colorTint < 0) {
        colorTint += 1;
      }
      if (colorTint > 1) {
        colorTint -= 1;
      }
      return colorTint;
    }
    function hueToRgb(p, q, colorTint) {
      colorTint = modifyColorTint(colorTint);
      if (colorTint < 1 / 6) {
        return p + 6 * (q - p) * colorTint;
      }
      if (colorTint < 0.5) {
        return q;
      }
      if (colorTint < 2 / 3) {
        return p + (q - p) * (2 / 3 - colorTint) * 6;
      }
      return p;
    }
    function hslToRgb(h, s, l) {
      var r;
      var g;
      var b;
      h = convertTo01Bounds(h, 360);
      s = convertTo01Bounds(s, 100);
      l = convertTo01Bounds(l, 100);
      if (0 === s) {
        r = g = b = l;
      } else {
        var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
        var p = 2 * l - q;
        r = hueToRgb(p, q, makeColorTint("r", h));
        g = hueToRgb(p, q, makeColorTint("g", h));
        b = hueToRgb(p, q, makeColorTint("b", h));
      }
      return [_round(255 * r), _round(255 * g), _round(255 * b)];
    }
    function convertTo01Bounds(n, max) {
      n = Math.min(max, Math.max(0, parseFloat(n)));
      if (Math.abs(n - max) < 1e-6) {
        return 1;
      }
      return n % max / parseFloat(max);
    }
    function isIntegerBetweenMinAndMax(number, min, max) {
      min = min || 0;
      max = max || 255;
      if (number % 1 !== 0 || number < min || number > max || "number" !== typeof number || isNaN(number)) {
        return false;
      }
      return true;
    }
    Color.prototype = {
      constructor: Color,
      highlight: function(step) {
        step = step || 10;
        return this.alter(step).toHex();
      },
      darken: function(step) {
        step = step || 10;
        return this.alter(-step).toHex();
      },
      alter: function(step) {
        var result = new Color();
        result.r = normalize(this.r + step);
        result.g = normalize(this.g + step);
        result.b = normalize(this.b + step);
        return result;
      },
      blend: function(blendColor, opacity) {
        var other = blendColor instanceof Color ? blendColor : new Color(blendColor);
        var result = new Color();
        result.r = normalize(_round(this.r * (1 - opacity) + other.r * opacity));
        result.g = normalize(_round(this.g * (1 - opacity) + other.g * opacity));
        result.b = normalize(_round(this.b * (1 - opacity) + other.b * opacity));
        return result;
      },
      toHex: function() {
        return toHexFromRgb(this.r, this.g, this.b);
      },
      getPureColor: function() {
        var rgb = hsvToRgb(this.hsv.h, 100, 100);
        return new Color("rgb(" + rgb.join(",") + ")");
      },
      isValidHex: function(hex) {
        return /(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)/i.test(hex);
      },
      isValidRGB: function(r, g, b) {
        if (!isIntegerBetweenMinAndMax(r) || !isIntegerBetweenMinAndMax(g) || !isIntegerBetweenMinAndMax(b)) {
          return false;
        }
        return true;
      },
      isValidAlpha: function(a) {
        if (isNaN(a) || a < 0 || a > 1 || "number" !== typeof a) {
          return false;
        }
        return true;
      },
      colorIsInvalid: false,
      fromHSL: function(hsl) {
        var color = new Color();
        var rgb = hslToRgb(hsl.h, hsl.s, hsl.l);
        color.r = rgb[0];
        color.g = rgb[1];
        color.b = rgb[2];
        return color;
      }
    };
    var _default = Color;
    exports.default = _default;
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/devextreme/cjs/viz/core/utils.js
var require_utils = __commonJS({
  "node_modules/devextreme/cjs/viz/core/utils.js"(exports) {
    "use strict";
    exports.PANE_PADDING = void 0;
    exports.adjustVisualRange = adjustVisualRange;
    exports.convertAngleToRendererSpace = void 0;
    exports.convertPolarToXY = convertPolarToXY;
    exports.convertVisualRangeObject = convertVisualRangeObject;
    exports.enumParser = exports.degreesToRadians = exports.decreaseGaps = exports.convertXYToPolar = void 0;
    exports.extractColor = extractColor;
    exports.getAddFunction = getAddFunction;
    exports.getLog = exports.getDistance = exports.getDecimalOrder = exports.getCosAndSin = exports.getCategoriesInfo = exports.getAppropriateFormat = exports.getAdjustedLog10 = void 0;
    exports.getLogExt = getLogExt;
    exports.getVerticallyShiftedAngularCoords = exports.getPower = exports.getNextDefsSvgId = void 0;
    exports.getVizRangeObject = getVizRangeObject;
    exports.isRelativeHeightPane = isRelativeHeightPane;
    exports.map = map;
    exports.mergeMarginOptions = mergeMarginOptions;
    exports.normalizeAngle = void 0;
    exports.normalizeArcParams = normalizeArcParams;
    exports.normalizeBBox = normalizeBBox;
    exports.normalizeEnum = normalizeEnum;
    exports.normalizePanesHeight = normalizePanesHeight;
    exports.patchFontOptions = exports.parseScalar = void 0;
    exports.pointInCanvas = pointInCanvas;
    exports.raiseTo = exports.processSeriesTemplate = void 0;
    exports.raiseToExt = raiseToExt;
    exports.rangesAreEqual = rangesAreEqual;
    exports.rotateBBox = rotateBBox;
    exports.roundValue = void 0;
    exports.setCanvasValues = setCanvasValues;
    exports.unique = void 0;
    exports.updatePanesCanvases = updatePanesCanvases;
    exports.valueOf = valueOf;
    var _common = require_common();
    var _type = require_type();
    var _extend = require_extend();
    var _iterator = require_iterator();
    var _math = require_math();
    var _date = _interopRequireDefault(require_date2());
    var _color = _interopRequireDefault(require_color());
    function _interopRequireDefault(obj) {
      return obj && obj.j ? obj : {
        default: obj
      };
    }
    var PI = Math.PI, LN10 = Math.LN10, abs = Math.abs, log = Math.log, floor = Math.floor, ceil = Math.ceil, pow = Math.pow, sqrt = Math.sqrt, atan2 = Math.atan2;
    var _min = Math.min;
    var _max = Math.max;
    var _cos = Math.cos;
    var _sin = Math.sin;
    var _round = Math.round;
    var dateToMilliseconds = _date.default.dateToMilliseconds;
    var MAX_PIXEL_COUNT = 1e10;
    var PI_DIV_180 = PI / 180;
    var _isNaN = isNaN;
    var _Number = Number;
    var _NaN = NaN;
    var numDefsSvgElements = 1;
    var PANE_PADDING = 10;
    exports.PANE_PADDING = PANE_PADDING;
    var getLog = function(value, base) {
      if (!value) {
        return _NaN;
      }
      return log(value) / log(base);
    };
    exports.getLog = getLog;
    var getAdjustedLog10 = function(value) {
      return (0, _math.adjust)(getLog(value, 10));
    };
    exports.getAdjustedLog10 = getAdjustedLog10;
    var raiseTo = function(power, base) {
      return pow(base, power);
    };
    exports.raiseTo = raiseTo;
    var normalizeAngle = function(angle) {
      return (angle % 360 + 360) % 360;
    };
    exports.normalizeAngle = normalizeAngle;
    var convertAngleToRendererSpace = function(angle) {
      return 90 - angle;
    };
    exports.convertAngleToRendererSpace = convertAngleToRendererSpace;
    var degreesToRadians = function(value) {
      return PI * value / 180;
    };
    exports.degreesToRadians = degreesToRadians;
    var getCosAndSin = function(angle) {
      var angleInRadians = degreesToRadians(angle);
      return {
        cos: _cos(angleInRadians),
        sin: _sin(angleInRadians)
      };
    };
    exports.getCosAndSin = getCosAndSin;
    var DECIMAL_ORDER_THRESHOLD = 1e-14;
    var getDistance = function(x1, y1, x2, y2) {
      var diffX = x2 - x1;
      var diffY = y2 - y1;
      return sqrt(diffY * diffY + diffX * diffX);
    };
    exports.getDistance = getDistance;
    var getDecimalOrder = function(number) {
      var n = abs(number);
      var cn;
      if (!_isNaN(n)) {
        if (n > 0) {
          n = log(n) / LN10;
          cn = ceil(n);
          return cn - n < DECIMAL_ORDER_THRESHOLD ? cn : floor(n);
        }
        return 0;
      }
      return _NaN;
    };
    exports.getDecimalOrder = getDecimalOrder;
    var getAppropriateFormat = function(start, end, count) {
      var order = _max(getDecimalOrder(start), getDecimalOrder(end));
      var precision = -getDecimalOrder(abs(end - start) / count);
      var format;
      if (!_isNaN(order) && !_isNaN(precision)) {
        if (abs(order) <= 4) {
          format = "fixedPoint";
          precision < 0 && (precision = 0);
          precision > 4 && (precision = 4);
        } else {
          format = "exponential";
          precision += order - 1;
          precision > 3 && (precision = 3);
        }
        return {
          type: format,
          precision
        };
      }
      return null;
    };
    exports.getAppropriateFormat = getAppropriateFormat;
    var roundValue = function(value, precision) {
      if (precision > 20) {
        precision = 20;
      }
      if ((0, _type.isNumeric)(value)) {
        if ((0, _type.isExponential)(value)) {
          return _Number(value.toExponential(precision));
        } else {
          return _Number(value.toFixed(precision));
        }
      }
    };
    exports.roundValue = roundValue;
    var getPower = function(value) {
      return value.toExponential().split("e")[1];
    };
    exports.getPower = getPower;
    function map(array, callback) {
      var i = 0;
      var len = array.length;
      var result = [];
      var value;
      while (i < len) {
        value = callback(array[i], i);
        if (null !== value) {
          result.push(value);
        }
        i++;
      }
      return result;
    }
    function selectByKeys(object, keys) {
      return map(keys, function(key) {
        return object[key] ? object[key] : null;
      });
    }
    function decreaseFields(object, keys, eachDecrease, decrease) {
      var dec = decrease;
      (0, _iterator.each)(keys, function(_, key) {
        if (object[key]) {
          object[key] -= eachDecrease;
          dec -= eachDecrease;
        }
      });
      return dec;
    }
    function normalizeEnum(value) {
      return String(value).toLowerCase();
    }
    function setCanvasValues(canvas) {
      if (canvas) {
        canvas.originalTop = canvas.top;
        canvas.originalBottom = canvas.bottom;
        canvas.originalLeft = canvas.left;
        canvas.originalRight = canvas.right;
      }
      return canvas;
    }
    function normalizeBBoxField(value) {
      return -MAX_PIXEL_COUNT < value && value < +MAX_PIXEL_COUNT ? value : 0;
    }
    function normalizeBBox(bBox) {
      var xl = normalizeBBoxField(floor(bBox.x));
      var yt = normalizeBBoxField(floor(bBox.y));
      var xr = normalizeBBoxField(ceil(bBox.width + bBox.x));
      var yb = normalizeBBoxField(ceil(bBox.height + bBox.y));
      var result = {
        x: xl,
        y: yt,
        width: xr - xl,
        height: yb - yt
      };
      result.isEmpty = !result.x && !result.y && !result.width && !result.height;
      return result;
    }
    function rotateBBox(bBox, center, angle) {
      var cos = _Number(_cos(angle * PI_DIV_180).toFixed(3));
      var sin = _Number(_sin(angle * PI_DIV_180).toFixed(3));
      var w2 = bBox.width / 2;
      var h2 = bBox.height / 2;
      var centerX = bBox.x + w2;
      var centerY = bBox.y + h2;
      var w2_ = abs(w2 * cos) + abs(h2 * sin);
      var h2_ = abs(w2 * sin) + abs(h2 * cos);
      var centerX_ = center[0] + (centerX - center[0]) * cos + (centerY - center[1]) * sin;
      var centerY_ = center[1] - (centerX - center[0]) * sin + (centerY - center[1]) * cos;
      return normalizeBBox({
        x: centerX_ - w2_,
        y: centerY_ - h2_,
        width: 2 * w2_,
        height: 2 * h2_
      });
    }
    var decreaseGaps = function(object, keys, decrease) {
      var arrayGaps;
      do {
        arrayGaps = selectByKeys(object, keys);
        arrayGaps.push(ceil(decrease / arrayGaps.length));
        decrease = decreaseFields(object, keys, _min.apply(null, arrayGaps), decrease);
      } while (decrease > 0 && arrayGaps.length > 1);
      return decrease;
    };
    exports.decreaseGaps = decreaseGaps;
    var parseScalar = function(value, defaultValue) {
      return void 0 !== value ? value : defaultValue;
    };
    exports.parseScalar = parseScalar;
    var enumParser = function(values) {
      var stored = {};
      var i;
      var ii;
      for (i = 0, ii = values.length; i < ii; ++i) {
        stored[normalizeEnum(values[i])] = 1;
      }
      return function(value, defaultValue) {
        var _value = normalizeEnum(value);
        return stored[_value] ? _value : defaultValue;
      };
    };
    exports.enumParser = enumParser;
    var patchFontOptions = function(options) {
      var fontOptions = {};
      (0, _iterator.each)(options || {}, function(key, value) {
        if (/^(cursor)$/i.test(key)) {
        } else if ("opacity" === key) {
          value = null;
        } else if ("color" === key) {
          key = "fill";
          if ("opacity" in options) {
            var color = new _color.default(value);
            value = "rgba(".concat(color.r, ",").concat(color.g, ",").concat(color.b, ",").concat(options.opacity, ")");
          }
        } else {
          key = "font-" + key;
        }
        fontOptions[key] = value;
      });
      return fontOptions;
    };
    exports.patchFontOptions = patchFontOptions;
    function convertPolarToXY(centerCoords, startAngle, angle, radius) {
      var normalizedRadius = radius > 0 ? radius : 0;
      angle = (0, _type.isDefined)(angle) ? angle + startAngle - 90 : 0;
      var cosSin = getCosAndSin(angle);
      return {
        x: _round(centerCoords.x + normalizedRadius * cosSin.cos),
        y: _round(centerCoords.y + normalizedRadius * cosSin.sin)
      };
    }
    var convertXYToPolar = function(centerCoords, x, y) {
      var radius = getDistance(centerCoords.x, centerCoords.y, x, y);
      var angle = atan2(y - centerCoords.y, x - centerCoords.x);
      return {
        phi: _round(normalizeAngle(180 * angle / PI)),
        r: _round(radius)
      };
    };
    exports.convertXYToPolar = convertXYToPolar;
    var processSeriesTemplate = function(seriesTemplate, items) {
      var customizeSeries = (0, _type.isFunction)(seriesTemplate.customizeSeries) ? seriesTemplate.customizeSeries : _common.noop;
      var nameField = seriesTemplate.nameField;
      var generatedSeries = {};
      var seriesOrder = [];
      var series;
      var i = 0;
      var length;
      var data;
      items = items || [];
      for (length = items.length; i < length; i++) {
        data = items[i];
        if (nameField in data) {
          series = generatedSeries[data[nameField]];
          if (!series) {
            series = generatedSeries[data[nameField]] = {
              name: data[nameField],
              nameFieldValue: data[nameField]
            };
            seriesOrder.push(series.name);
          }
        }
      }
      return map(seriesOrder, function(orderedName) {
        var group = generatedSeries[orderedName];
        return (0, _extend.extend)(group, customizeSeries.call(null, group.name));
      });
    };
    exports.processSeriesTemplate = processSeriesTemplate;
    var getCategoriesInfo = function(categories, startValue, endValue) {
      if (0 === categories.length) {
        return {
          categories: []
        };
      }
      startValue = (0, _type.isDefined)(startValue) ? startValue : categories[0];
      endValue = (0, _type.isDefined)(endValue) ? endValue : categories[categories.length - 1];
      var categoriesValue = map(categories, function(category) {
        return null === category || void 0 === category ? void 0 : category.valueOf();
      });
      var indexStartValue = categoriesValue.indexOf(startValue.valueOf());
      var indexEndValue = categoriesValue.indexOf(endValue.valueOf());
      var swapBuf;
      var inverted = false;
      indexStartValue < 0 && (indexStartValue = 0);
      indexEndValue < 0 && (indexEndValue = categories.length - 1);
      if (indexEndValue < indexStartValue) {
        swapBuf = indexEndValue;
        indexEndValue = indexStartValue;
        indexStartValue = swapBuf;
        inverted = true;
      }
      var visibleCategories = categories.slice(indexStartValue, indexEndValue + 1);
      var lastIdx = visibleCategories.length - 1;
      return {
        categories: visibleCategories,
        start: visibleCategories[inverted ? lastIdx : 0],
        end: visibleCategories[inverted ? 0 : lastIdx],
        inverted
      };
    };
    exports.getCategoriesInfo = getCategoriesInfo;
    function isRelativeHeightPane(pane) {
      return !(pane.unit % 2);
    }
    function normalizePanesHeight(panes) {
      panes.forEach(function(pane) {
        var height = pane.height;
        var unit = 0;
        var parsedHeight = parseFloat(height) || void 0;
        if ((0, _type.isString)(height) && height.indexOf("px") > -1 || (0, _type.isNumeric)(height) && height > 1) {
          parsedHeight = _round(parsedHeight);
          unit = 1;
        }
        if (!unit && parsedHeight) {
          if ((0, _type.isString)(height) && height.indexOf("%") > -1) {
            parsedHeight /= 100;
            unit = 2;
          } else if (parsedHeight < 0) {
            parsedHeight = parsedHeight < -1 ? 1 : abs(parsedHeight);
          }
        }
        pane.height = parsedHeight;
        pane.unit = unit;
      });
      var relativeHeightPanes = panes.filter(isRelativeHeightPane);
      var weightSum = relativeHeightPanes.reduce(function(prev, next) {
        return prev + (next.height || 0);
      }, 0);
      var weightHeightCount = relativeHeightPanes.length;
      var emptyHeightPanes = relativeHeightPanes.filter(function(pane) {
        return !pane.height;
      });
      var emptyHeightCount = emptyHeightPanes.length;
      if (weightSum < 1 && emptyHeightCount) {
        emptyHeightPanes.forEach(function(pane) {
          return pane.height = (1 - weightSum) / emptyHeightCount;
        });
      } else if (weightSum > 1 || weightSum < 1 && !emptyHeightCount || 1 === weightSum && emptyHeightCount) {
        if (emptyHeightCount) {
          var weightForEmpty = weightSum / weightHeightCount;
          var emptyWeightSum = emptyHeightCount * weightForEmpty;
          relativeHeightPanes.filter(function(pane) {
            return pane.height;
          }).forEach(function(pane) {
            return pane.height *= (weightSum - emptyWeightSum) / weightSum;
          });
          emptyHeightPanes.forEach(function(pane) {
            return pane.height = weightForEmpty;
          });
        }
        relativeHeightPanes.forEach(function(pane) {
          return pane.height *= 1 / weightSum;
        });
      }
    }
    function updatePanesCanvases(panes, canvas, rotated) {
      var distributedSpace = 0;
      var padding = PANE_PADDING;
      var paneSpace = rotated ? canvas.width - canvas.left - canvas.right : canvas.height - canvas.top - canvas.bottom;
      var totalCustomSpace = panes.reduce(function(prev, cur) {
        return prev + (!isRelativeHeightPane(cur) ? cur.height : 0);
      }, 0);
      var usefulSpace = paneSpace - padding * (panes.length - 1) - totalCustomSpace;
      var startName = rotated ? "left" : "top";
      var endName = rotated ? "right" : "bottom";
      panes.forEach(function(pane) {
        var calcLength = !isRelativeHeightPane(pane) ? pane.height : _round(pane.height * usefulSpace);
        pane.canvas = pane.canvas || {};
        (0, _extend.extend)(pane.canvas, canvas);
        pane.canvas[startName] = canvas[startName] + distributedSpace;
        pane.canvas[endName] = canvas[endName] + (paneSpace - calcLength - distributedSpace);
        distributedSpace = distributedSpace + calcLength + padding;
        setCanvasValues(pane.canvas);
      });
    }
    var unique = function(array) {
      var values = {};
      return map(array, function(item) {
        var result = !values[item] ? item : null;
        values[item] = true;
        return result;
      });
    };
    exports.unique = unique;
    var getVerticallyShiftedAngularCoords = function(bBox, dy, center) {
      var isPositive = bBox.x + bBox.width / 2 >= center.x;
      var horizontalOffset1 = (isPositive ? bBox.x : bBox.x + bBox.width) - center.x;
      var verticalOffset1 = bBox.y - center.y;
      var verticalOffset2 = verticalOffset1 + dy;
      var horizontalOffset2 = _round(sqrt(horizontalOffset1 * horizontalOffset1 + verticalOffset1 * verticalOffset1 - verticalOffset2 * verticalOffset2));
      var dx = (isPositive ? +horizontalOffset2 : -horizontalOffset2) || horizontalOffset1;
      return {
        x: center.x + (isPositive ? dx : dx - bBox.width),
        y: bBox.y + dy
      };
    };
    exports.getVerticallyShiftedAngularCoords = getVerticallyShiftedAngularCoords;
    function mergeMarginOptions(opt1, opt2) {
      return {
        checkInterval: opt1.checkInterval || opt2.checkInterval,
        size: _max(opt1.size || 0, opt2.size || 0),
        percentStick: opt1.percentStick || opt2.percentStick,
        sizePointNormalState: _max(opt1.sizePointNormalState || 0, opt2.sizePointNormalState || 0)
      };
    }
    function getVizRangeObject(value) {
      if (Array.isArray(value)) {
        return {
          startValue: value[0],
          endValue: value[1]
        };
      } else {
        return value || {};
      }
    }
    function normalizeArcParams(x, y, innerRadius, outerRadius, startAngle, endAngle) {
      var isCircle;
      var noArc = true;
      var angleDiff = roundValue(endAngle, 3) - roundValue(startAngle, 3);
      if (angleDiff) {
        if (abs(angleDiff) % 360 === 0) {
          startAngle = 0;
          endAngle = 360;
          isCircle = true;
          endAngle -= 0.01;
        }
        if (startAngle > 360) {
          startAngle %= 360;
        }
        if (endAngle > 360) {
          endAngle %= 360;
        }
        if (startAngle > endAngle) {
          startAngle -= 360;
        }
        noArc = false;
      }
      startAngle *= PI_DIV_180;
      endAngle *= PI_DIV_180;
      return [x, y, Math.min(outerRadius, innerRadius), Math.max(outerRadius, innerRadius), Math.cos(startAngle), Math.sin(startAngle), Math.cos(endAngle), Math.sin(endAngle), isCircle, floor(abs(endAngle - startAngle) / PI) % 2 ? "1" : "0", noArc];
    }
    function convertVisualRangeObject(visualRange, convertToVisualRange) {
      if (convertToVisualRange) {
        return visualRange;
      }
      return [visualRange.startValue, visualRange.endValue];
    }
    function getAddFunction(range, correctZeroLevel) {
      if ("datetime" === range.dataType) {
        return function(rangeValue, marginValue) {
          var sign = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 1;
          return new Date(rangeValue.getTime() + sign * marginValue);
        };
      }
      if ("logarithmic" === range.axisType) {
        return function(rangeValue, marginValue) {
          var sign = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 1;
          var log2 = getLogExt(rangeValue, range.base) + sign * marginValue;
          return raiseToExt(log2, range.base);
        };
      }
      return function(rangeValue, marginValue) {
        var sign = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 1;
        var newValue = rangeValue + sign * marginValue;
        return correctZeroLevel && newValue * rangeValue <= 0 ? 0 : newValue;
      };
    }
    function adjustVisualRange(options, visualRange, wholeRange, dataRange) {
      var minDefined = (0, _type.isDefined)(visualRange.startValue);
      var maxDefined = (0, _type.isDefined)(visualRange.endValue);
      var nonDiscrete = "discrete" !== options.axisType;
      dataRange = dataRange || wholeRange;
      var add = getAddFunction(options, false);
      var min = minDefined ? visualRange.startValue : dataRange.min;
      var max = maxDefined ? visualRange.endValue : dataRange.max;
      var rangeLength = visualRange.length;
      var categories = dataRange.categories;
      if (nonDiscrete && !(0, _type.isDefined)(min) && !(0, _type.isDefined)(max)) {
        return {
          startValue: min,
          endValue: max
        };
      }
      if ((0, _type.isDefined)(rangeLength)) {
        if (nonDiscrete) {
          if ("datetime" === options.dataType && !(0, _type.isNumeric)(rangeLength)) {
            rangeLength = dateToMilliseconds(rangeLength);
          }
          if (maxDefined && !minDefined || !maxDefined && !minDefined) {
            (0, _type.isDefined)(wholeRange.max) && (max = max > wholeRange.max ? wholeRange.max : max);
            min = add(max, rangeLength, -1);
          } else if (minDefined && !maxDefined) {
            (0, _type.isDefined)(wholeRange.min) && (min = min < wholeRange.min ? wholeRange.min : min);
            max = add(min, rangeLength);
          }
        } else {
          rangeLength = parseInt(rangeLength);
          if (!isNaN(rangeLength) && isFinite(rangeLength)) {
            rangeLength--;
            if (!maxDefined && !minDefined) {
              max = categories[categories.length - 1];
              min = categories[categories.length - 1 - rangeLength];
            } else if (minDefined && !maxDefined) {
              var categoriesInfo = getCategoriesInfo(categories, min, void 0);
              max = categoriesInfo.categories[rangeLength];
            } else if (!minDefined && maxDefined) {
              var _categoriesInfo = getCategoriesInfo(categories, void 0, max);
              min = _categoriesInfo.categories[_categoriesInfo.categories.length - 1 - rangeLength];
            }
          }
        }
      }
      if (nonDiscrete) {
        if ((0, _type.isDefined)(wholeRange.max) && max > wholeRange.max) {
          max = wholeRange.max;
        }
        if ((0, _type.isDefined)(wholeRange.min) && min < wholeRange.min) {
          min = wholeRange.min;
        }
      }
      return {
        startValue: min,
        endValue: max
      };
    }
    function getLogExt(value, base) {
      var allowNegatives = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : false;
      var linearThreshold = arguments.length > 3 ? arguments[3] : void 0;
      if (!allowNegatives) {
        return getLog(value, base);
      }
      if (0 === value) {
        return 0;
      }
      var transformValue = getLog(abs(value), base) - (linearThreshold - 1);
      if (transformValue < 0) {
        return 0;
      }
      return (0, _math.adjust)((0, _math.sign)(value) * transformValue, Number(pow(base, linearThreshold - 1).toFixed(abs(linearThreshold))));
    }
    function raiseToExt(value, base) {
      var allowNegatives = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : false;
      var linearThreshold = arguments.length > 3 ? arguments[3] : void 0;
      if (!allowNegatives) {
        return raiseTo(value, base);
      }
      if (0 === value) {
        return 0;
      }
      var transformValue = raiseTo(abs(value) + (linearThreshold - 1), base);
      if (transformValue < 0) {
        return 0;
      }
      return (0, _math.adjust)((0, _math.sign)(value) * transformValue, Number(pow(base, linearThreshold).toFixed(abs(linearThreshold))));
    }
    function rangesAreEqual(range, rangeFromOptions) {
      if (Array.isArray(rangeFromOptions)) {
        return range.length === rangeFromOptions.length && range.every(function(item, i) {
          return valueOf(item) === valueOf(rangeFromOptions[i]);
        });
      } else {
        return valueOf(range.startValue) === valueOf(rangeFromOptions.startValue) && valueOf(range.endValue) === valueOf(rangeFromOptions.endValue);
      }
    }
    function valueOf(value) {
      return value && value.valueOf();
    }
    function pointInCanvas(canvas, x, y) {
      return x >= canvas.left && x <= canvas.right && y >= canvas.top && y <= canvas.bottom;
    }
    var getNextDefsSvgId = function() {
      return "DevExpress_".concat(numDefsSvgElements++);
    };
    exports.getNextDefsSvgId = getNextDefsSvgId;
    function extractColor(color, isBase) {
      if ((0, _type.isString)(color) || !color) {
        return color;
      } else if (isBase) {
        return color.base;
      } else {
        return color.fillId || color.base;
      }
    }
  }
});

// node_modules/devextreme/cjs/viz/translators/range.js
var require_range = __commonJS({
  "node_modules/devextreme/cjs/viz/translators/range.js"(exports) {
    "use strict";
    exports.Range = void 0;
    var _type = require_type();
    var _extend = require_extend();
    var _utils = require_utils();
    var _isDefined = _type.isDefined;
    var _isDate = _type.isDate;
    var _isFunction = _type.isFunction;
    var minSelector = "min";
    var maxSelector = "max";
    var minVisibleSelector = "minVisible";
    var maxVisibleSelector = "maxVisible";
    var baseSelector = "base";
    var axisTypeSelector = "axisType";
    function otherLessThan(thisValue, otherValue) {
      return otherValue < thisValue;
    }
    function otherGreaterThan(thisValue, otherValue) {
      return otherValue > thisValue;
    }
    function compareAndReplace(thisValue, otherValue, setValue, compare) {
      var otherValueDefined = _isDefined(otherValue);
      if (_isDefined(thisValue)) {
        if (otherValueDefined && compare(thisValue, otherValue)) {
          setValue(otherValue);
        }
      } else if (otherValueDefined) {
        setValue(otherValue);
      }
    }
    var Range = function(range) {
      range && (0, _extend.extend)(this, range);
    };
    exports.Range = Range;
    var _Range = Range;
    _Range.prototype = {
      constructor: _Range,
      addRange: function(otherRange) {
        var that = this;
        var categories = that.categories;
        var otherCategories = otherRange.categories;
        var isDiscrete = "discrete" === that[axisTypeSelector];
        var compareAndReplaceByField = function(field, compare) {
          compareAndReplace(that[field], otherRange[field], function(value) {
            that[field] = value;
          }, compare);
        };
        var controlValuesByVisibleBounds = function(valueField, visibleValueField, compare) {
          compareAndReplace(that[valueField], that[visibleValueField], function(value) {
            _isDefined(that[valueField]) && (that[valueField] = value);
          }, compare);
        };
        var checkField = function(field) {
          that[field] = that[field] || otherRange[field];
        };
        checkField("invert");
        checkField("containsConstantLine");
        checkField(axisTypeSelector);
        checkField("dataType");
        checkField("isSpacedMargin");
        if ("logarithmic" === that[axisTypeSelector]) {
          checkField(baseSelector);
        } else {
          that[baseSelector] = void 0;
        }
        compareAndReplaceByField(minSelector, otherLessThan);
        compareAndReplaceByField(maxSelector, otherGreaterThan);
        if (isDiscrete) {
          checkField(minVisibleSelector);
          checkField(maxVisibleSelector);
        } else {
          compareAndReplaceByField(minVisibleSelector, otherLessThan);
          compareAndReplaceByField(maxVisibleSelector, otherGreaterThan);
        }
        compareAndReplaceByField("interval", otherLessThan);
        if (!isDiscrete) {
          controlValuesByVisibleBounds(minSelector, minVisibleSelector, otherLessThan);
          controlValuesByVisibleBounds(minSelector, maxVisibleSelector, otherLessThan);
          controlValuesByVisibleBounds(maxSelector, maxVisibleSelector, otherGreaterThan);
          controlValuesByVisibleBounds(maxSelector, minVisibleSelector, otherGreaterThan);
        }
        if (void 0 === categories) {
          that.categories = otherCategories;
        } else {
          that.categories = otherCategories ? (0, _utils.unique)(categories.concat(otherCategories)) : categories;
        }
        if ("logarithmic" === that[axisTypeSelector]) {
          checkField("allowNegatives");
          compareAndReplaceByField("linearThreshold", otherLessThan);
        }
        return that;
      },
      isEmpty: function() {
        return (!_isDefined(this[minSelector]) || !_isDefined(this[maxSelector])) && (!this.categories || 0 === this.categories.length);
      },
      correctValueZeroLevel: function() {
        var that = this;
        if (_isDate(that[maxSelector]) || _isDate(that[minSelector])) {
          return that;
        }
        function setZeroLevel(min, max) {
          that[min] < 0 && that[max] < 0 && (that[max] = 0);
          that[min] > 0 && that[max] > 0 && (that[min] = 0);
        }
        setZeroLevel(minSelector, maxSelector);
        setZeroLevel(minVisibleSelector, maxVisibleSelector);
        return that;
      },
      sortCategories: function(sort) {
        if (false === sort || !this.categories) {
          return;
        }
        if (Array.isArray(sort)) {
          var sortValues = sort.map(function(item) {
            return item.valueOf();
          });
          var filteredSeriesCategories = this.categories.filter(function(item) {
            return -1 === sortValues.indexOf(item.valueOf());
          });
          this.categories = sort.concat(filteredSeriesCategories);
        } else {
          var notAFunction = !_isFunction(sort);
          if (notAFunction && "string" !== this.dataType) {
            sort = function(a, b) {
              return a.valueOf() - b.valueOf();
            };
          } else if (notAFunction) {
            sort = false;
          }
          sort && this.categories.sort(sort);
        }
      }
    };
  }
});

// node_modules/devextreme/cjs/core/utils/shadow_dom.js
var require_shadow_dom = __commonJS({
  "node_modules/devextreme/cjs/core/utils/shadow_dom.js"(exports) {
    "use strict";
    exports.addShadowDomStyles = addShadowDomStyles;
    exports.getShadowElementsFromPoint = getShadowElementsFromPoint;
    var DX_RULE_PREFIX = "dx-";
    var ownerDocumentStyleSheet = null;
    function createConstructedStyleSheet(rootNode) {
      try {
        return new CSSStyleSheet();
      } catch (err) {
        var styleElement = rootNode.ownerDocument.createElement("style");
        rootNode.appendChild(styleElement);
        return styleElement.sheet;
      }
    }
    function processRules(targetStyleSheet, styleSheets, needApplyAllStyles) {
      for (var i = 0; i < styleSheets.length; i++) {
        var sheet = styleSheets[i];
        try {
          for (var j = 0; j < sheet.cssRules.length; j++) {
            insertRule(targetStyleSheet, sheet.cssRules[j], needApplyAllStyles);
          }
        } catch (err) {
        }
      }
    }
    function insertRule(targetStyleSheet, rule, needApplyAllStyles) {
      var _rule$selectorText, _rule$cssRules, _rule$cssRules$, _rule$cssRules$$selec, _rule$name, _rule$style;
      var isDxRule = needApplyAllStyles || (null === (_rule$selectorText = rule.selectorText) || void 0 === _rule$selectorText ? void 0 : _rule$selectorText.includes(DX_RULE_PREFIX)) || (null === (_rule$cssRules = rule.cssRules) || void 0 === _rule$cssRules ? void 0 : null === (_rule$cssRules$ = _rule$cssRules[0]) || void 0 === _rule$cssRules$ ? void 0 : null === (_rule$cssRules$$selec = _rule$cssRules$.selectorText) || void 0 === _rule$cssRules$$selec ? void 0 : _rule$cssRules$$selec.includes(DX_RULE_PREFIX)) || (null === (_rule$name = rule.name) || void 0 === _rule$name ? void 0 : _rule$name.startsWith(DX_RULE_PREFIX)) || "DXIcons" === (null === (_rule$style = rule.style) || void 0 === _rule$style ? void 0 : _rule$style.fontFamily);
      if (isDxRule) {
        targetStyleSheet.insertRule(rule.cssText, targetStyleSheet.cssRules.length);
      }
    }
    function addShadowDomStyles($element) {
      var _el$getRootNode;
      var el = $element.get(0);
      var root = null === (_el$getRootNode = el.getRootNode) || void 0 === _el$getRootNode ? void 0 : _el$getRootNode.call(el);
      if (!(null !== root && void 0 !== root && root.host)) {
        return;
      }
      if (!ownerDocumentStyleSheet) {
        ownerDocumentStyleSheet = createConstructedStyleSheet(root);
        processRules(ownerDocumentStyleSheet, el.ownerDocument.styleSheets, false);
      }
      var currentShadowDomStyleSheet = createConstructedStyleSheet(root);
      processRules(currentShadowDomStyleSheet, root.styleSheets, true);
      root.adoptedStyleSheets = [ownerDocumentStyleSheet, currentShadowDomStyleSheet];
    }
    function isPositionInElementRectangle(element, x, y) {
      var rect = element.getBoundingClientRect();
      return rect && x >= rect.left && x < rect.right && y >= rect.top && y < rect.bottom;
    }
    function createQueue() {
      var shiftIndex = 0;
      var items = [];
      return Object.defineProperties({
        push: function(item) {
          items.push(item);
          return this;
        },
        shift: function() {
          shiftIndex++;
          return items[shiftIndex - 1];
        }
      }, {
        length: {
          get: function() {
            return items.length - shiftIndex;
          },
          configurable: true,
          enumerable: true
        },
        items: {
          get: function() {
            return items;
          },
          configurable: true,
          enumerable: true
        }
      });
    }
    function getShadowElementsFromPoint(x, y, root) {
      var elementQueue = createQueue().push(root);
      while (elementQueue.length) {
        var el = elementQueue.shift();
        for (var i = 0; i < el.childNodes.length; i++) {
          var childNode = el.childNodes[i];
          if (childNode.nodeType === Node.ELEMENT_NODE && isPositionInElementRectangle(childNode, x, y) && "none" !== getComputedStyle(childNode).pointerEvents) {
            elementQueue.push(childNode);
          }
        }
      }
      var result = elementQueue.items.reverse();
      result.pop();
      return result;
    }
  }
});

// node_modules/devextreme/cjs/core/dom_adapter.js
var require_dom_adapter = __commonJS({
  "node_modules/devextreme/cjs/core/dom_adapter.js"(exports, module) {
    "use strict";
    exports.default = void 0;
    var _dependency_injector = _interopRequireDefault(require_dependency_injector());
    var _common = require_common();
    var _shadow_dom = require_shadow_dom();
    function _interopRequireDefault(obj) {
      return obj && obj.j ? obj : {
        default: obj
      };
    }
    function _typeof(obj) {
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    var ELEMENT_NODE = 1;
    var TEXT_NODE = 3;
    var DOCUMENT_NODE = 9;
    var DOCUMENT_FRAGMENT_NODE = 11;
    var nativeDOMAdapterStrategy = {
      querySelectorAll: function(element, selector) {
        return element.querySelectorAll(selector);
      },
      elementMatches: function(element, selector) {
        var _this = this;
        var matches = element.matches || element.matchesSelector || element.mozMatchesSelector || element.msMatchesSelector || element.oMatchesSelector || element.webkitMatchesSelector || function(selector2) {
          var doc = element.document || element.ownerDocument;
          if (!doc) {
            return false;
          }
          var items = _this.querySelectorAll(doc, selector2);
          for (var i = 0; i < items.length; i++) {
            if (items[i] === element) {
              return true;
            }
          }
        };
        return matches.call(element, selector);
      },
      createElement: function(tagName, context) {
        context = context || this.ra;
        return context.createElement(tagName);
      },
      createElementNS: function(ns, tagName, context) {
        context = context || this.ra;
        return context.createElementNS(ns, tagName);
      },
      createTextNode: function(text, context) {
        context = context || this.ra;
        return context.createTextNode(text);
      },
      createAttribute: function(text, context) {
        context = context || this.ra;
        return context.createAttribute(text);
      },
      isNode: function(element) {
        return element && "object" === _typeof(element) && "nodeType" in element && "nodeName" in element;
      },
      isElementNode: function(element) {
        return element && element.nodeType === ELEMENT_NODE;
      },
      isTextNode: function(element) {
        return element && element.nodeType === TEXT_NODE;
      },
      isDocument: function(element) {
        return element && element.nodeType === DOCUMENT_NODE;
      },
      isDocumentFragment: function(element) {
        return element && element.nodeType === DOCUMENT_FRAGMENT_NODE;
      },
      removeElement: function(element) {
        var parentNode = element && element.parentNode;
        if (parentNode) {
          parentNode.removeChild(element);
        }
      },
      insertElement: function(parentElement, newElement, nextSiblingElement) {
        if (parentElement && newElement && parentElement !== newElement) {
          if (nextSiblingElement) {
            parentElement.insertBefore(newElement, nextSiblingElement);
          } else {
            parentElement.appendChild(newElement);
          }
        }
      },
      getAttribute: function(element, name) {
        return element.getAttribute(name);
      },
      setAttribute: function(element, name, value) {
        if ("style" === name) {
          element.style.cssText = value;
        } else {
          element.setAttribute(name, value);
        }
      },
      removeAttribute: function(element, name) {
        element.removeAttribute(name);
      },
      setProperty: function(element, name, value) {
        element[name] = value;
      },
      setText: function(element, text) {
        if (element) {
          element.textContent = text;
        }
      },
      setClass: function(element, className, isAdd) {
        if (1 === element.nodeType && className) {
          isAdd ? element.classList.add(className) : element.classList.remove(className);
        }
      },
      setStyle: function(element, name, value) {
        element.style[name] = value || "";
      },
      ra: "undefined" === typeof document ? void 0 : document,
      getDocument: function() {
        return this.ra;
      },
      getActiveElement: function(element) {
        var activeElementHolder = this.getRootNode(element);
        return activeElementHolder.activeElement;
      },
      getRootNode: function(element) {
        var _element$getRootNode, _element$getRootNode2;
        return null !== (_element$getRootNode = null === element || void 0 === element ? void 0 : null === (_element$getRootNode2 = element.getRootNode) || void 0 === _element$getRootNode2 ? void 0 : _element$getRootNode2.call(element)) && void 0 !== _element$getRootNode ? _element$getRootNode : this.ra;
      },
      getBody: function() {
        return this.ra.body;
      },
      createDocumentFragment: function() {
        return this.ra.createDocumentFragment();
      },
      getDocumentElement: function() {
        return this.ra.documentElement;
      },
      getLocation: function() {
        return this.ra.location;
      },
      getSelection: function() {
        return this.ra.selection;
      },
      getReadyState: function() {
        return this.ra.readyState;
      },
      getHead: function() {
        return this.ra.head;
      },
      hasDocumentProperty: function(property) {
        return property in this.ra;
      },
      listen: function(element, event, callback, options) {
        if (!element || !("addEventListener" in element)) {
          return _common.noop;
        }
        element.addEventListener(event, callback, options);
        return function() {
          element.removeEventListener(event, callback);
        };
      },
      elementsFromPoint: function(x, y, element) {
        var activeElementHolder = this.getRootNode(element);
        if (activeElementHolder.host) {
          return (0, _shadow_dom.getShadowElementsFromPoint)(x, y, activeElementHolder);
        }
        return activeElementHolder.elementsFromPoint(x, y);
      }
    };
    var _default = (0, _dependency_injector.default)(nativeDOMAdapterStrategy);
    exports.default = _default;
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/devextreme/cjs/core/memorized_callbacks.js
var require_memorized_callbacks = __commonJS({
  "node_modules/devextreme/cjs/core/memorized_callbacks.js"(exports, module) {
    "use strict";
    exports.default = void 0;
    var _iterator = require_iterator();
    var _callbacks = _interopRequireDefault(require_callbacks());
    function _interopRequireDefault(obj) {
      return obj && obj.j ? obj : {
        default: obj
      };
    }
    var MemorizedCallbacks = function() {
      function MemorizedCallbacks2() {
        this.memory = [];
        this.callbacks = (0, _callbacks.default)();
      }
      var _proto = MemorizedCallbacks2.prototype;
      _proto.add = function(fn) {
        (0, _iterator.each)(this.memory, function(_, item) {
          return fn.apply(fn, item);
        });
        this.callbacks.add(fn);
      };
      _proto.remove = function(fn) {
        this.callbacks.remove(fn);
      };
      _proto.fire = function() {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        this.memory.push(args);
        this.callbacks.fire.apply(this.callbacks, args);
      };
      return MemorizedCallbacks2;
    }();
    exports.default = MemorizedCallbacks;
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/devextreme/cjs/events/core/event_registrator_callbacks.js
var require_event_registrator_callbacks = __commonJS({
  "node_modules/devextreme/cjs/events/core/event_registrator_callbacks.js"(exports, module) {
    "use strict";
    exports.default = void 0;
    var _memorized_callbacks = _interopRequireDefault(require_memorized_callbacks());
    function _interopRequireDefault(obj) {
      return obj && obj.j ? obj : {
        default: obj
      };
    }
    var _default = new _memorized_callbacks.default();
    exports.default = _default;
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/devextreme/cjs/core/utils/window.js
var require_window = __commonJS({
  "node_modules/devextreme/cjs/core/utils/window.js"(exports) {
    "use strict";
    exports.setWindow = exports.hasWindow = exports.hasProperty = exports.getWindow = exports.getNavigator = exports.getCurrentScreenFactor = exports.defaultScreenFactorFunc = void 0;
    var _dom_adapter = _interopRequireDefault(require_dom_adapter());
    function _interopRequireDefault(obj) {
      return obj && obj.j ? obj : {
        default: obj
      };
    }
    var hasWindowValue = "undefined" !== typeof window;
    var hasWindow = function() {
      return hasWindowValue;
    };
    exports.hasWindow = hasWindow;
    var windowObject = hasWindow() ? window : void 0;
    if (!windowObject) {
      windowObject = {};
      windowObject.window = windowObject;
    }
    var getWindow = function() {
      return windowObject;
    };
    exports.getWindow = getWindow;
    var setWindow = function(newWindowObject, hasWindow2) {
      if (void 0 === hasWindow2) {
        hasWindowValue = "undefined" !== typeof window && window === newWindowObject;
      } else {
        hasWindowValue = hasWindow2;
      }
      windowObject = newWindowObject;
    };
    exports.setWindow = setWindow;
    var hasProperty = function(prop) {
      return hasWindow() && prop in windowObject;
    };
    exports.hasProperty = hasProperty;
    var defaultScreenFactorFunc = function(width) {
      if (width < 768) {
        return "xs";
      } else if (width < 992) {
        return "sm";
      } else if (width < 1200) {
        return "md";
      } else {
        return "lg";
      }
    };
    exports.defaultScreenFactorFunc = defaultScreenFactorFunc;
    var getCurrentScreenFactor = function(screenFactorCallback) {
      var screenFactorFunc = screenFactorCallback || defaultScreenFactorFunc;
      var windowWidth = _dom_adapter.default.getDocumentElement().clientWidth;
      return screenFactorFunc(windowWidth);
    };
    exports.getCurrentScreenFactor = getCurrentScreenFactor;
    var getNavigator = function() {
      return hasWindow() ? windowObject.navigator : {
        userAgent: ""
      };
    };
    exports.getNavigator = getNavigator;
  }
});

// node_modules/devextreme/cjs/events/core/hook_touch_props.js
var require_hook_touch_props = __commonJS({
  "node_modules/devextreme/cjs/events/core/hook_touch_props.js"(exports, module) {
    "use strict";
    exports.default = _default;
    var touchPropsToHook = ["pageX", "pageY", "screenX", "screenY", "clientX", "clientY"];
    var touchPropHook = function(name, event) {
      if (event[name] && !event.touches || !event.touches) {
        return event[name];
      }
      var touches = event.touches.length ? event.touches : event.changedTouches;
      if (!touches.length) {
        return;
      }
      return touches[0][name];
    };
    function _default(callback) {
      touchPropsToHook.forEach(function(name) {
        callback(name, function(event) {
          return touchPropHook(name, event);
        });
      }, this);
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/devextreme/cjs/core/utils/call_once.js
var require_call_once = __commonJS({
  "node_modules/devextreme/cjs/core/utils/call_once.js"(exports, module) {
    "use strict";
    exports.default = void 0;
    var callOnce = function(handler) {
      var result;
      var _wrappedHandler = function() {
        result = handler.apply(this, arguments);
        _wrappedHandler = function() {
          return result;
        };
        return result;
      };
      return function() {
        return _wrappedHandler.apply(this, arguments);
      };
    };
    var _default = callOnce;
    exports.default = _default;
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/devextreme/cjs/events/core/events_engine.js
var require_events_engine = __commonJS({
  "node_modules/devextreme/cjs/events/core/events_engine.js"(exports, module) {
    "use strict";
    exports.default = void 0;
    var _event_registrator_callbacks = _interopRequireDefault(require_event_registrator_callbacks());
    var _extend = require_extend();
    var _dom_adapter = _interopRequireDefault(require_dom_adapter());
    var _window = require_window();
    var _dependency_injector = _interopRequireDefault(require_dependency_injector());
    var _type = require_type();
    var _callbacks = _interopRequireDefault(require_callbacks());
    var _errors = _interopRequireDefault(require_errors());
    var _hook_touch_props = _interopRequireDefault(require_hook_touch_props());
    var _call_once = _interopRequireDefault(require_call_once());
    function _interopRequireDefault(obj) {
      return obj && obj.j ? obj : {
        default: obj
      };
    }
    function _typeof(obj) {
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _extends() {
      _extends = Object.assign ? Object.assign.bind() : function(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends.apply(this, arguments);
    }
    var window2 = (0, _window.getWindow)();
    var EMPTY_EVENT_NAME = "dxEmptyEventType";
    var NATIVE_EVENTS_TO_SUBSCRIBE = {
      mouseenter: "mouseover",
      mouseleave: "mouseout",
      pointerenter: "pointerover",
      pointerleave: "pointerout"
    };
    var NATIVE_EVENTS_TO_TRIGGER = {
      focusin: "focus",
      focusout: "blur"
    };
    var NO_BUBBLE_EVENTS = ["blur", "focus", "load"];
    var forcePassiveFalseEventNames = ["touchmove", "wheel", "mousewheel", "touchstart"];
    var EVENT_PROPERTIES = ["target", "relatedTarget", "delegateTarget", "altKey", "bubbles", "cancelable", "changedTouches", "ctrlKey", "detail", "eventPhase", "metaKey", "shiftKey", "view", "char", "code", "charCode", "key", "keyCode", "button", "buttons", "offsetX", "offsetY", "pointerId", "pointerType", "targetTouches", "toElement", "touches"];
    function matchesSafe(target, selector) {
      return !(0, _type.isWindow)(target) && "#document" !== target.nodeName && _dom_adapter.default.elementMatches(target, selector);
    }
    var elementDataMap = /* @__PURE__ */ new WeakMap();
    var guid = 0;
    var skipEvent;
    var special = function() {
      var specialData = {};
      _event_registrator_callbacks.default.add(function(eventName, eventObject) {
        specialData[eventName] = eventObject;
      });
      return {
        getField: function(eventName, field) {
          return specialData[eventName] && specialData[eventName][field];
        },
        callMethod: function(eventName, methodName, context, args) {
          return specialData[eventName] && specialData[eventName][methodName] && specialData[eventName][methodName].apply(context, args);
        }
      };
    }();
    var eventsEngine = (0, _dependency_injector.default)({
      on: getHandler(normalizeOnArguments(iterate(function(element, eventName, selector, data, handler) {
        var handlersController = getHandlersController(element, eventName);
        handlersController.addHandler(handler, selector, data);
      }))),
      one: getHandler(normalizeOnArguments(function(element, eventName, selector, data, handler) {
        eventsEngine.on(element, eventName, selector, data, function oneTimeHandler() {
          eventsEngine.off(element, eventName, selector, oneTimeHandler);
          handler.apply(this, arguments);
        });
      })),
      off: getHandler(normalizeOffArguments(iterate(function(element, eventName, selector, handler) {
        var handlersController = getHandlersController(element, eventName);
        handlersController.removeHandler(handler, selector);
      }))),
      trigger: getHandler(normalizeTriggerArguments(function(element, event, extraParameters) {
        var eventName = event.type;
        var handlersController = getHandlersController(element, event.type);
        special.callMethod(eventName, "trigger", element, [event, extraParameters]);
        handlersController.callHandlers(event, extraParameters);
        var noBubble = special.getField(eventName, "noBubble") || event.isPropagationStopped() || -1 !== NO_BUBBLE_EVENTS.indexOf(eventName);
        if (!noBubble) {
          var parents = [];
          !function getParents(element2) {
            var _element$parentNode;
            var parent = null !== (_element$parentNode = element2.parentNode) && void 0 !== _element$parentNode ? _element$parentNode : element2.host;
            if (parent) {
              parents.push(parent);
              getParents(parent);
            }
          }(element);
          parents.push(window2);
          var i = 0;
          while (parents[i] && !event.isPropagationStopped()) {
            var parentDataByEvent = getHandlersController(parents[i], event.type);
            parentDataByEvent.callHandlers((0, _extend.extend)(event, {
              currentTarget: parents[i]
            }), extraParameters);
            i++;
          }
        }
        if (element.nodeType || (0, _type.isWindow)(element)) {
          special.callMethod(eventName, "_default", element, [event, extraParameters]);
          callNativeMethod(eventName, element);
        }
      })),
      triggerHandler: getHandler(normalizeTriggerArguments(function(element, event, extraParameters) {
        var handlersController = getHandlersController(element, event.type);
        handlersController.callHandlers(event, extraParameters);
      }))
    });
    function applyForEach(args, method) {
      var element = args[0];
      if (!element) {
        return;
      }
      if (_dom_adapter.default.isNode(element) || (0, _type.isWindow)(element)) {
        method.apply(eventsEngine, args);
      } else if (!(0, _type.isString)(element) && "length" in element) {
        var itemArgs = Array.prototype.slice.call(args, 0);
        Array.prototype.forEach.call(element, function(itemElement) {
          itemArgs[0] = itemElement;
          applyForEach(itemArgs, method);
        });
      } else {
        throw _errors.default.Error("E0025");
      }
    }
    function getHandler(method) {
      return function() {
        applyForEach(arguments, method);
      };
    }
    function detectPassiveEventHandlersSupport() {
      var isSupported = false;
      try {
        var options = Object.defineProperty({}, "passive", {
          get: function() {
            isSupported = true;
            return true;
          }
        });
        window2.addEventListener("test", null, options);
      } catch (e) {
      }
      return isSupported;
    }
    var passiveEventHandlersSupported = (0, _call_once.default)(detectPassiveEventHandlersSupport);
    var contains = function contains2(container, element) {
      if ((0, _type.isWindow)(container)) {
        return contains2(container.document, element);
      }
      return container.contains ? container.contains(element) : !!(element.compareDocumentPosition(container) & element.DOCUMENT_POSITION_CONTAINS);
    };
    function getHandlersController(element, eventName) {
      var elementData = elementDataMap.get(element);
      eventName = eventName || "";
      var eventNameParts = eventName.split(".");
      var namespaces = eventNameParts.slice(1);
      var eventNameIsDefined = !!eventNameParts[0];
      eventName = eventNameParts[0] || EMPTY_EVENT_NAME;
      if (!elementData) {
        elementData = {};
        elementDataMap.set(element, elementData);
      }
      if (!elementData[eventName]) {
        elementData[eventName] = {
          handleObjects: [],
          nativeHandler: null
        };
      }
      var eventData = elementData[eventName];
      return {
        addHandler: function(handler, selector, data) {
          var callHandler = function(e, extraParameters) {
            var handlerArgs = [e];
            var target = e.currentTarget;
            var relatedTarget = e.relatedTarget;
            var secondaryTargetIsInside;
            var result;
            if (eventName in NATIVE_EVENTS_TO_SUBSCRIBE) {
              secondaryTargetIsInside = relatedTarget && target && (relatedTarget === target || contains(target, relatedTarget));
            }
            if (void 0 !== extraParameters) {
              handlerArgs.push(extraParameters);
            }
            special.callMethod(eventName, "handle", element, [e, data]);
            if (!secondaryTargetIsInside) {
              result = handler.apply(target, handlerArgs);
            }
            if (false === result) {
              e.preventDefault();
              e.stopPropagation();
            }
          };
          var handleObject = {
            handler,
            wrappedHandler: function(e, extraParameters) {
              if (skipEvent && e.type === skipEvent) {
                return;
              }
              e.data = data;
              e.delegateTarget = element;
              if (selector) {
                var currentTarget = e.target;
                while (currentTarget && currentTarget !== element) {
                  if (matchesSafe(currentTarget, selector)) {
                    e.currentTarget = currentTarget;
                    callHandler(e, extraParameters);
                  }
                  currentTarget = currentTarget.parentNode;
                }
              } else {
                e.currentTarget = e.delegateTarget || e.target;
                callHandler(e, extraParameters);
              }
            },
            selector,
            type: eventName,
            data,
            namespace: namespaces.join("."),
            namespaces,
            guid: ++guid
          };
          eventData.handleObjects.push(handleObject);
          var firstHandlerForTheType = 1 === eventData.handleObjects.length;
          var shouldAddNativeListener = firstHandlerForTheType && eventNameIsDefined;
          var nativeListenerOptions;
          if (shouldAddNativeListener) {
            shouldAddNativeListener = !special.callMethod(eventName, "setup", element, [data, namespaces, handler]);
          }
          if (shouldAddNativeListener) {
            eventData.nativeHandler = getNativeHandler(eventName);
            if (passiveEventHandlersSupported() && forcePassiveFalseEventNames.indexOf(eventName) > -1) {
              nativeListenerOptions = {
                passive: false
              };
            }
            eventData.removeListener = _dom_adapter.default.listen(element, NATIVE_EVENTS_TO_SUBSCRIBE[eventName] || eventName, eventData.nativeHandler, nativeListenerOptions);
          }
          special.callMethod(eventName, "add", element, [handleObject]);
        },
        removeHandler: function(handler, selector) {
          var removeByEventName = function(eventName2) {
            var eventData2 = elementData[eventName2];
            if (!eventData2.handleObjects.length) {
              delete elementData[eventName2];
              return;
            }
            var removedHandler;
            eventData2.handleObjects = eventData2.handleObjects.filter(function(handleObject) {
              var skip = namespaces.length && !isSubset(handleObject.namespaces, namespaces) || handler && handleObject.handler !== handler || selector && handleObject.selector !== selector;
              if (!skip) {
                removedHandler = handleObject.handler;
                special.callMethod(eventName2, "remove", element, [handleObject]);
              }
              return skip;
            });
            var lastHandlerForTheType = !eventData2.handleObjects.length;
            var shouldRemoveNativeListener = lastHandlerForTheType && eventName2 !== EMPTY_EVENT_NAME;
            if (shouldRemoveNativeListener) {
              special.callMethod(eventName2, "teardown", element, [namespaces, removedHandler]);
              if (eventData2.nativeHandler) {
                eventData2.removeListener();
              }
              delete elementData[eventName2];
            }
          };
          if (eventNameIsDefined) {
            removeByEventName(eventName);
          } else {
            for (var name in elementData) {
              removeByEventName(name);
            }
          }
          var elementDataIsEmpty = 0 === Object.keys(elementData).length;
          if (elementDataIsEmpty) {
            elementDataMap.delete(element);
          }
        },
        callHandlers: function(event, extraParameters) {
          var forceStop = false;
          var handleCallback = function(handleObject) {
            if (forceStop) {
              return;
            }
            if (!namespaces.length || isSubset(handleObject.namespaces, namespaces)) {
              handleObject.wrappedHandler(event, extraParameters);
              forceStop = event.isImmediatePropagationStopped();
            }
          };
          eventData.handleObjects.forEach(handleCallback);
          if (namespaces.length && elementData[EMPTY_EVENT_NAME]) {
            elementData[EMPTY_EVENT_NAME].handleObjects.forEach(handleCallback);
          }
        }
      };
    }
    function getNativeHandler(subscribeName) {
      return function(event, extraParameters) {
        var handlersController = getHandlersController(this, subscribeName);
        event = eventsEngine.Event(event);
        handlersController.callHandlers(event, extraParameters);
      };
    }
    function isSubset(original, checked) {
      for (var i = 0; i < checked.length; i++) {
        if (original.indexOf(checked[i]) < 0) {
          return false;
        }
      }
      return true;
    }
    function normalizeOnArguments(callback) {
      return function(element, eventName, selector, data, handler) {
        if (!handler) {
          handler = data;
          data = void 0;
        }
        if ("string" !== typeof selector) {
          data = selector;
          selector = void 0;
        }
        if (!handler && "string" === typeof eventName) {
          handler = data || selector;
          selector = void 0;
          data = void 0;
        }
        callback(element, eventName, selector, data, handler);
      };
    }
    function normalizeOffArguments(callback) {
      return function(element, eventName, selector, handler) {
        if ("function" === typeof selector) {
          handler = selector;
          selector = void 0;
        }
        callback(element, eventName, selector, handler);
      };
    }
    function normalizeTriggerArguments(callback) {
      return function(element, src, extraParameters) {
        if ("string" === typeof src) {
          src = {
            type: src
          };
        }
        if (!src.target) {
          src.target = element;
        }
        src.currentTarget = element;
        if (!src.delegateTarget) {
          src.delegateTarget = element;
        }
        if (!src.type && src.originalEvent) {
          src.type = src.originalEvent.type;
        }
        callback(element, src instanceof eventsEngine.Event ? src : eventsEngine.Event(src), extraParameters);
      };
    }
    function normalizeEventArguments(callback) {
      eventsEngine.Event = function(src, config) {
        if (!(this instanceof eventsEngine.Event)) {
          return new eventsEngine.Event(src, config);
        }
        if (!src) {
          src = {};
        }
        if ("string" === typeof src) {
          src = {
            type: src
          };
        }
        if (!config) {
          config = {};
        }
        callback.call(this, src, config);
      };
      _extends(eventsEngine.Event.prototype, {
        Mj: false,
        Nj: false,
        Oj: false,
        isPropagationStopped: function() {
          return !!(this.Mj || this.originalEvent && this.originalEvent.propagationStopped);
        },
        stopPropagation: function() {
          this.Mj = true;
          this.originalEvent && this.originalEvent.stopPropagation();
        },
        isImmediatePropagationStopped: function() {
          return this.Nj;
        },
        stopImmediatePropagation: function() {
          this.stopPropagation();
          this.Nj = true;
          this.originalEvent && this.originalEvent.stopImmediatePropagation();
        },
        isDefaultPrevented: function() {
          return !!(this.Oj || this.originalEvent && this.originalEvent.defaultPrevented);
        },
        preventDefault: function() {
          this.Oj = true;
          this.originalEvent && this.originalEvent.preventDefault();
        }
      });
      return eventsEngine.Event;
    }
    function iterate(callback) {
      var iterateEventNames = function(element, eventName) {
        if (eventName && eventName.indexOf(" ") > -1) {
          var args = Array.prototype.slice.call(arguments, 0);
          eventName.split(" ").forEach(function(eventName2) {
            args[1] = eventName2;
            callback.apply(this, args);
          });
        } else {
          callback.apply(this, arguments);
        }
      };
      return function(element, eventName) {
        if ("object" === _typeof(eventName)) {
          var args = Array.prototype.slice.call(arguments, 0);
          for (var name in eventName) {
            args[1] = name;
            args[args.length - 1] = eventName[name];
            iterateEventNames.apply(this, args);
          }
        } else {
          iterateEventNames.apply(this, arguments);
        }
      };
    }
    function callNativeMethod(eventName, element) {
      var nativeMethodName = NATIVE_EVENTS_TO_TRIGGER[eventName] || eventName;
      if (function(eventName2, element2) {
        return "click" === eventName2 && "a" === element2.localName;
      }(eventName, element)) {
        return;
      }
      if ((0, _type.isFunction)(element[nativeMethodName])) {
        skipEvent = eventName;
        element[nativeMethodName]();
        skipEvent = void 0;
      }
    }
    function calculateWhich(event) {
      if (function(event2) {
        return null == event2.which && 0 === event2.type.indexOf("key");
      }(event)) {
        return null != event.charCode ? event.charCode : event.keyCode;
      }
      if (function(event2) {
        return !event2.which && void 0 !== event2.button && /^(?:mouse|pointer|contextmenu|drag|drop)|click/.test(event2.type);
      }(event)) {
        return {
          1: 1,
          2: 3,
          3: 1,
          4: 2
        }[event.button];
      }
      return event.which;
    }
    function initEvent(EventClass) {
      if (EventClass) {
        eventsEngine.Event = EventClass;
        eventsEngine.Event.prototype = EventClass.prototype;
      }
    }
    initEvent(normalizeEventArguments(function(src, config) {
      var _src$view;
      var srcIsEvent = src instanceof eventsEngine.Event || (0, _window.hasWindow)() && src instanceof window2.Event || (null === (_src$view = src.view) || void 0 === _src$view ? void 0 : _src$view.Event) && src instanceof src.view.Event;
      if (srcIsEvent) {
        this.originalEvent = src;
        this.type = src.type;
        this.currentTarget = void 0;
        if (Object.prototype.hasOwnProperty.call(src, "isTrusted")) {
          this.isTrusted = src.isTrusted;
        }
        this.timeStamp = src.timeStamp || Date.now();
      } else {
        _extends(this, src);
      }
      addProperty("which", calculateWhich, this);
      if (0 === src.type.indexOf("touch")) {
        delete config.pageX;
        delete config.pageY;
      }
      _extends(this, config);
      this.guid = ++guid;
    }));
    function addProperty(propName, hook, eventInstance) {
      Object.defineProperty(eventInstance || eventsEngine.Event.prototype, propName, {
        enumerable: true,
        configurable: true,
        get: function() {
          return this.originalEvent && hook(this.originalEvent);
        },
        set: function(value) {
          Object.defineProperty(this, propName, {
            enumerable: true,
            configurable: true,
            writable: true,
            value
          });
        }
      });
    }
    EVENT_PROPERTIES.forEach(function(prop) {
      return addProperty(prop, function(event) {
        return event[prop];
      });
    });
    (0, _hook_touch_props.default)(addProperty);
    var beforeSetStrategy = (0, _callbacks.default)();
    var afterSetStrategy = (0, _callbacks.default)();
    eventsEngine.set = function(engine) {
      beforeSetStrategy.fire();
      eventsEngine.inject(engine);
      initEvent(engine.Event);
      afterSetStrategy.fire();
    };
    eventsEngine.subscribeGlobal = function() {
      applyForEach(arguments, normalizeOnArguments(function() {
        var args = arguments;
        eventsEngine.on.apply(this, args);
        beforeSetStrategy.add(function() {
          var offArgs = Array.prototype.slice.call(args, 0);
          offArgs.splice(3, 1);
          eventsEngine.off.apply(this, offArgs);
        });
        afterSetStrategy.add(function() {
          eventsEngine.on.apply(this, args);
        });
      }));
    };
    eventsEngine.forcePassiveFalseEventNames = forcePassiveFalseEventNames;
    eventsEngine.passiveEventHandlersSupported = passiveEventHandlersSupported;
    var _default = eventsEngine;
    exports.default = _default;
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/devextreme/cjs/core/element_data.js
var require_element_data = __commonJS({
  "node_modules/devextreme/cjs/core/element_data.js"(exports) {
    "use strict";
    exports.afterCleanData = afterCleanData;
    exports.beforeCleanData = beforeCleanData;
    exports.cleanData = cleanData;
    exports.cleanDataRecursive = cleanDataRecursive;
    exports.data = data;
    exports.getDataStrategy = getDataStrategy;
    exports.removeData = removeData;
    exports.strategyChanging = exports.setDataStrategy = void 0;
    var _dom_adapter = _interopRequireDefault(require_dom_adapter());
    var _events_engine = _interopRequireDefault(require_events_engine());
    var _memorized_callbacks = _interopRequireDefault(require_memorized_callbacks());
    function _interopRequireDefault(obj) {
      return obj && obj.j ? obj : {
        default: obj
      };
    }
    var dataMap = /* @__PURE__ */ new WeakMap();
    var strategy;
    var strategyChanging = new _memorized_callbacks.default();
    exports.strategyChanging = strategyChanging;
    var beforeCleanDataFunc = function() {
    };
    var afterCleanDataFunc = function() {
    };
    var setDataStrategy = function(value) {
      strategyChanging.fire(value);
      strategy = value;
      var cleanData2 = strategy.cleanData;
      strategy.cleanData = function(nodes) {
        beforeCleanDataFunc(nodes);
        var result = cleanData2.call(this, nodes);
        afterCleanDataFunc(nodes);
        return result;
      };
    };
    exports.setDataStrategy = setDataStrategy;
    setDataStrategy({
      data: function() {
        var element = arguments[0];
        var key = arguments[1];
        var value = arguments[2];
        if (!element) {
          return;
        }
        var elementData = dataMap.get(element);
        if (!elementData) {
          elementData = {};
          dataMap.set(element, elementData);
        }
        if (void 0 === key) {
          return elementData;
        }
        if (2 === arguments.length) {
          return elementData[key];
        }
        elementData[key] = value;
        return value;
      },
      removeData: function(element, key) {
        if (!element) {
          return;
        }
        if (void 0 === key) {
          dataMap.delete(element);
        } else {
          var elementData = dataMap.get(element);
          if (elementData) {
            delete elementData[key];
          }
        }
      },
      cleanData: function(elements) {
        for (var i = 0; i < elements.length; i++) {
          _events_engine.default.off(elements[i]);
          dataMap.delete(elements[i]);
        }
      }
    });
    function getDataStrategy() {
      return strategy;
    }
    function data() {
      return strategy.data.apply(this, arguments);
    }
    function beforeCleanData(callback) {
      beforeCleanDataFunc = callback;
    }
    function afterCleanData(callback) {
      afterCleanDataFunc = callback;
    }
    function cleanData(nodes) {
      return strategy.cleanData.call(this, nodes);
    }
    function removeData(element, key) {
      return strategy.removeData.call(this, element, key);
    }
    function cleanDataRecursive(element, cleanSelf) {
      if (!_dom_adapter.default.isElementNode(element)) {
        return;
      }
      var childElements = element.getElementsByTagName("*");
      strategy.cleanData(childElements);
      if (cleanSelf) {
        strategy.cleanData([element]);
      }
    }
  }
});

// node_modules/devextreme/cjs/core/utils/style.js
var require_style = __commonJS({
  "node_modules/devextreme/cjs/core/utils/style.js"(exports) {
    "use strict";
    exports.stylePropPrefix = exports.styleProp = exports.setWidth = exports.setStyle = exports.setHeight = exports.parsePixelValue = exports.normalizeStyleProp = void 0;
    var _inflector = require_inflector();
    var _call_once = _interopRequireDefault(require_call_once());
    var _type = require_type();
    var _dom_adapter = _interopRequireDefault(require_dom_adapter());
    function _interopRequireDefault(obj) {
      return obj && obj.j ? obj : {
        default: obj
      };
    }
    function _slicedToArray(arr, i) {
      return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
    }
    function _nonIterableRest() {
      throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _unsupportedIterableToArray(o, minLen) {
      if (!o) {
        return;
      }
      if ("string" === typeof o) {
        return _arrayLikeToArray(o, minLen);
      }
      var n = Object.prototype.toString.call(o).slice(8, -1);
      if ("Object" === n && o.constructor) {
        n = o.constructor.name;
      }
      if ("Map" === n || "Set" === n) {
        return Array.from(o);
      }
      if ("Arguments" === n || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) {
        return _arrayLikeToArray(o, minLen);
      }
    }
    function _arrayLikeToArray(arr, len) {
      if (null == len || len > arr.length) {
        len = arr.length;
      }
      for (var i = 0, arr2 = new Array(len); i < len; i++) {
        arr2[i] = arr[i];
      }
      return arr2;
    }
    function _iterableToArrayLimit(arr, i) {
      var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"];
      if (null != _i) {
        var _s, _e, _x, _r, _arr = [], _n = true, _d = false;
        try {
          if (_x = (_i = _i.call(arr)).next, 0 === i) {
            if (Object(_i) !== _i) {
              return;
            }
            _n = false;
          } else {
            for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = true) {
            }
          }
        } catch (err) {
          _d = true, _e = err;
        } finally {
          try {
            if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) {
              return;
            }
          } finally {
            if (_d) {
              throw _e;
            }
          }
        }
        return _arr;
      }
    }
    function _arrayWithHoles(arr) {
      if (Array.isArray(arr)) {
        return arr;
      }
    }
    var jsPrefixes = ["", "Webkit", "Moz", "O", "Ms"];
    var cssPrefixes = {
      "": "",
      Webkit: "-webkit-",
      Moz: "-moz-",
      O: "-o-",
      ms: "-ms-"
    };
    var getStyles = (0, _call_once.default)(function() {
      return _dom_adapter.default.createElement("dx").style;
    });
    var forEachPrefixes = function(prop, callBack) {
      prop = (0, _inflector.camelize)(prop, true);
      var result;
      for (var i = 0, cssPrefixesCount = jsPrefixes.length; i < cssPrefixesCount; i++) {
        var jsPrefix = jsPrefixes[i];
        var prefixedProp = jsPrefix + prop;
        var lowerPrefixedProp = (0, _inflector.camelize)(prefixedProp);
        result = callBack(lowerPrefixedProp, jsPrefix);
        if (void 0 === result) {
          result = callBack(prefixedProp, jsPrefix);
        }
        if (void 0 !== result) {
          break;
        }
      }
      return result || "";
    };
    var styleProp = function(name) {
      if (name in getStyles()) {
        return name;
      }
      var originalName = name;
      name = name.charAt(0).toUpperCase() + name.substr(1);
      for (var i = 1; i < jsPrefixes.length; i++) {
        var prefixedProp = jsPrefixes[i].toLowerCase() + name;
        if (prefixedProp in getStyles()) {
          return prefixedProp;
        }
      }
      return originalName;
    };
    exports.styleProp = styleProp;
    var stylePropPrefix = function(prop) {
      return forEachPrefixes(prop, function(specific, jsPrefix) {
        if (specific in getStyles()) {
          return cssPrefixes[jsPrefix];
        }
      });
    };
    exports.stylePropPrefix = stylePropPrefix;
    var pxExceptions = ["fillOpacity", "columnCount", "flexGrow", "flexShrink", "fontWeight", "lineHeight", "opacity", "zIndex", "zoom"];
    var parsePixelValue = function(value) {
      if ((0, _type.isNumeric)(value)) {
        return value;
      } else if ((0, _type.isString)(value)) {
        return Number(value.replace("px", ""));
      }
      return NaN;
    };
    exports.parsePixelValue = parsePixelValue;
    var normalizeStyleProp = function(prop, value) {
      if ((0, _type.isNumeric)(value) && -1 === pxExceptions.indexOf(prop)) {
        value += "px";
      }
      return value;
    };
    exports.normalizeStyleProp = normalizeStyleProp;
    var setDimensionProperty = function(elements, propertyName, value) {
      if (elements) {
        value = (0, _type.isNumeric)(value) ? value += "px" : value;
        for (var i = 0; i < elements.length; ++i) {
          elements[i].style[propertyName] = value;
        }
      }
    };
    var setWidth = function(elements, value) {
      setDimensionProperty(elements, "width", value);
    };
    exports.setWidth = setWidth;
    var setHeight = function(elements, value) {
      setDimensionProperty(elements, "height", value);
    };
    exports.setHeight = setHeight;
    var setStyle = function(element, styleString) {
      var resetStyle = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : true;
      if (resetStyle) {
        var styleList = [].slice.call(element.style);
        styleList.forEach(function(propertyName) {
          element.style.removeProperty(propertyName);
        });
      }
      styleString.split(";").forEach(function(style) {
        var parts = style.split(":").map(function(stylePart) {
          return stylePart.trim();
        });
        if (2 === parts.length) {
          var _parts = _slicedToArray(parts, 2), property = _parts[0], value = _parts[1];
          element.style[property] = value;
        }
      });
    };
    exports.setStyle = setStyle;
  }
});

// node_modules/devextreme/cjs/core/utils/size.js
var require_size = __commonJS({
  "node_modules/devextreme/cjs/core/utils/size.js"(exports) {
    "use strict";
    exports.setWidth = exports.setOuterWidth = exports.setOuterHeight = exports.setInnerWidth = exports.setInnerHeight = exports.setHeight = exports.parseHeight = exports.implementationsMap = exports.getWindowByElement = exports.getWidth = exports.getVisibleHeight = exports.getVerticalOffsets = exports.getSize = exports.getOuterWidth = exports.getOuterHeight = exports.getOffset = exports.getInnerWidth = exports.getInnerHeight = exports.getHeight = exports.getElementBoxParams = exports.addOffsetToMinHeight = exports.addOffsetToMaxHeight = void 0;
    var _window = require_window();
    var _dom_adapter = _interopRequireDefault(require_dom_adapter());
    var _type = require_type();
    function _interopRequireDefault(obj) {
      return obj && obj.j ? obj : {
        default: obj
      };
    }
    var window2 = (0, _window.getWindow)();
    var SPECIAL_HEIGHT_VALUES = ["auto", "none", "inherit", "initial"];
    var getSizeByStyles = function(elementStyles, styles) {
      var result = 0;
      styles.forEach(function(style) {
        result += parseFloat(elementStyles[style]) || 0;
      });
      return result;
    };
    var getElementBoxParams = function(name, elementStyles) {
      var beforeName = "width" === name ? "Left" : "Top";
      var afterName = "width" === name ? "Right" : "Bottom";
      return {
        padding: getSizeByStyles(elementStyles, ["padding" + beforeName, "padding" + afterName]),
        border: getSizeByStyles(elementStyles, ["border" + beforeName + "Width", "border" + afterName + "Width"]),
        margin: getSizeByStyles(elementStyles, ["margin" + beforeName, "margin" + afterName])
      };
    };
    exports.getElementBoxParams = getElementBoxParams;
    var getElementComputedStyle = function(element) {
      var _element$ownerDocumen;
      var view = (null === element || void 0 === element ? void 0 : null === (_element$ownerDocumen = element.ownerDocument) || void 0 === _element$ownerDocumen ? void 0 : _element$ownerDocumen.defaultView) || window2;
      return view.getComputedStyle && view.getComputedStyle(element);
    };
    var getCSSProperty = function(element, styles, name, defaultValue) {
      var _element$style;
      return (null === styles || void 0 === styles ? void 0 : styles[name]) || (null === (_element$style = element.style) || void 0 === _element$style ? void 0 : _element$style[name]) || defaultValue;
    };
    var boxIndices = {
      content: 0,
      padding: 1,
      border: 2,
      margin: 3,
      "content-box": 0,
      "border-box": 2
    };
    var dimensionComponents = {
      width: ["left", "right"],
      height: ["top", "bottom"]
    };
    function getComponentThickness(elem, dimension, component, styles) {
      var get = function(elem2, styles2, field) {
        return parseFloat(getCSSProperty(elem2, styles2, field, "0")) || 0;
      };
      var suffix = "border" === component ? "-width" : "";
      return get(elem, styles, "".concat(component, "-").concat(dimensionComponents[dimension][0]).concat(suffix)) + get(elem, styles, "".concat(component, "-").concat(dimensionComponents[dimension][1]).concat(suffix));
    }
    var getSize = function(element, dimension, box) {
      var offsetFieldName = "width" === dimension ? "offsetWidth" : "offsetHeight";
      var styles = getElementComputedStyle(element);
      var result = getCSSProperty(element, styles, dimension);
      if ("" === result || "auto" === result) {
        result = element[offsetFieldName];
      }
      result = parseFloat(result) || 0;
      var currentBox = getCSSProperty(element, styles, "boxSizing", "content-box");
      var targetBox = box || currentBox;
      var targetBoxIndex = boxIndices[targetBox];
      var currentBoxIndex = boxIndices[currentBox];
      if (void 0 === targetBoxIndex || void 0 === currentBoxIndex) {
        throw new Error();
      }
      if (currentBoxIndex === targetBoxIndex) {
        return result;
      }
      var coeff = Math.sign(targetBoxIndex - currentBoxIndex);
      var padding = false;
      var border = false;
      var margin = false;
      var scrollThickness = false;
      if (1 === coeff) {
        targetBoxIndex += 1;
        currentBoxIndex += 1;
      }
      for (var boxPart = currentBoxIndex; boxPart !== targetBoxIndex; boxPart += coeff) {
        switch (boxPart) {
          case boxIndices.content:
            break;
          case boxIndices.padding:
            padding = coeff * getComponentThickness(element, dimension, "padding", styles);
            break;
          case boxIndices.border:
            border = coeff * getComponentThickness(element, dimension, "border", styles);
            break;
          case boxIndices.margin:
            margin = coeff * getComponentThickness(element, dimension, "margin", styles);
        }
      }
      if (padding || border) {
        var paddingAndBorder = (false === padding ? coeff * getComponentThickness(element, dimension, "padding", styles) : padding) + (false === border ? coeff * getComponentThickness(element, dimension, "border", styles) : border);
        scrollThickness = coeff * Math.max(0, Math.floor(element[offsetFieldName] - result - coeff * paddingAndBorder)) || 0;
      }
      return result + margin + padding + border + scrollThickness;
    };
    exports.getSize = getSize;
    var getContainerHeight = function(container) {
      return (0, _type.isWindow)(container) ? container.innerHeight : container.offsetHeight;
    };
    var parseHeight = function(value, container, element) {
      if (value.indexOf("px") > 0) {
        value = parseInt(value.replace("px", ""));
      } else if (value.indexOf("%") > 0) {
        value = parseInt(value.replace("%", "")) * getContainerHeight(container) / 100;
      } else if (!isNaN(value)) {
        value = parseInt(value);
      } else if (value.indexOf("vh") > 0) {
        value = window2.innerHeight / 100 * parseInt(value.replace("vh", ""));
      } else if (element && value.indexOf("em") > 0) {
        value = parseFloat(value.replace("em", "")) * parseFloat(window2.getComputedStyle(element).fontSize);
      }
      return value;
    };
    exports.parseHeight = parseHeight;
    var getHeightWithOffset = function(value, offset, container) {
      if (!value) {
        return null;
      }
      if (SPECIAL_HEIGHT_VALUES.indexOf(value) > -1) {
        return offset ? null : value;
      }
      if ((0, _type.isString)(value)) {
        value = parseHeight(value, container);
      }
      if ((0, _type.isNumeric)(value)) {
        return Math.max(0, value + offset);
      }
      var operationString = offset < 0 ? " - " : " ";
      return "calc(" + value + operationString + Math.abs(offset) + "px)";
    };
    var addOffsetToMaxHeight = function(value, offset, container) {
      var maxHeight = getHeightWithOffset(value, offset, container);
      return null !== maxHeight ? maxHeight : "none";
    };
    exports.addOffsetToMaxHeight = addOffsetToMaxHeight;
    var addOffsetToMinHeight = function(value, offset, container) {
      var minHeight = getHeightWithOffset(value, offset, container);
      return null !== minHeight ? minHeight : 0;
    };
    exports.addOffsetToMinHeight = addOffsetToMinHeight;
    var getVerticalOffsets = function(element, withMargins) {
      if (!element) {
        return 0;
      }
      var boxParams = getElementBoxParams("height", window2.getComputedStyle(element));
      return boxParams.padding + boxParams.border + (withMargins ? boxParams.margin : 0);
    };
    exports.getVerticalOffsets = getVerticalOffsets;
    var getVisibleHeight = function(element) {
      if (element) {
        var boundingClientRect = element.getBoundingClientRect();
        if (boundingClientRect.height) {
          return boundingClientRect.height;
        }
      }
      return 0;
    };
    exports.getVisibleHeight = getVisibleHeight;
    var implementationsMap = {
      getWidth: function() {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        return elementSizeHelper.apply(void 0, ["width"].concat(args));
      },
      setWidth: function() {
        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          args[_key2] = arguments[_key2];
        }
        return elementSizeHelper.apply(void 0, ["width"].concat(args));
      },
      getHeight: function() {
        for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
          args[_key3] = arguments[_key3];
        }
        return elementSizeHelper.apply(void 0, ["height"].concat(args));
      },
      setHeight: function() {
        for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
          args[_key4] = arguments[_key4];
        }
        return elementSizeHelper.apply(void 0, ["height"].concat(args));
      },
      getOuterWidth: function() {
        for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
          args[_key5] = arguments[_key5];
        }
        return elementSizeHelper.apply(void 0, ["outerWidth"].concat(args));
      },
      setOuterWidth: function() {
        for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
          args[_key6] = arguments[_key6];
        }
        return elementSizeHelper.apply(void 0, ["outerWidth"].concat(args));
      },
      getOuterHeight: function() {
        for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {
          args[_key7] = arguments[_key7];
        }
        return elementSizeHelper.apply(void 0, ["outerHeight"].concat(args));
      },
      setOuterHeight: function() {
        for (var _len8 = arguments.length, args = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {
          args[_key8] = arguments[_key8];
        }
        return elementSizeHelper.apply(void 0, ["outerHeight"].concat(args));
      },
      getInnerWidth: function() {
        for (var _len9 = arguments.length, args = new Array(_len9), _key9 = 0; _key9 < _len9; _key9++) {
          args[_key9] = arguments[_key9];
        }
        return elementSizeHelper.apply(void 0, ["innerWidth"].concat(args));
      },
      setInnerWidth: function() {
        for (var _len10 = arguments.length, args = new Array(_len10), _key10 = 0; _key10 < _len10; _key10++) {
          args[_key10] = arguments[_key10];
        }
        return elementSizeHelper.apply(void 0, ["innerWidth"].concat(args));
      },
      getInnerHeight: function() {
        for (var _len11 = arguments.length, args = new Array(_len11), _key11 = 0; _key11 < _len11; _key11++) {
          args[_key11] = arguments[_key11];
        }
        return elementSizeHelper.apply(void 0, ["innerHeight"].concat(args));
      },
      setInnerHeight: function() {
        for (var _len12 = arguments.length, args = new Array(_len12), _key12 = 0; _key12 < _len12; _key12++) {
          args[_key12] = arguments[_key12];
        }
        return elementSizeHelper.apply(void 0, ["innerHeight"].concat(args));
      }
    };
    exports.implementationsMap = implementationsMap;
    function elementSizeHelper(sizeProperty, el, value) {
      return 2 === arguments.length ? elementSize(el, sizeProperty) : elementSize(el, sizeProperty, value);
    }
    var getWidth = function(el) {
      return implementationsMap.getWidth(el);
    };
    exports.getWidth = getWidth;
    var setWidth = function(el, value) {
      return implementationsMap.setWidth(el, value);
    };
    exports.setWidth = setWidth;
    var getHeight = function(el) {
      return implementationsMap.getHeight(el);
    };
    exports.getHeight = getHeight;
    var setHeight = function(el, value) {
      return implementationsMap.setHeight(el, value);
    };
    exports.setHeight = setHeight;
    var getOuterWidth = function(el, includeMargin) {
      return implementationsMap.getOuterWidth(el, includeMargin || false);
    };
    exports.getOuterWidth = getOuterWidth;
    var setOuterWidth = function(el, value) {
      return implementationsMap.setOuterWidth(el, value);
    };
    exports.setOuterWidth = setOuterWidth;
    var getOuterHeight = function(el, includeMargin) {
      return implementationsMap.getOuterHeight(el, includeMargin || false);
    };
    exports.getOuterHeight = getOuterHeight;
    var setOuterHeight = function(el, value) {
      return implementationsMap.setOuterHeight(el, value);
    };
    exports.setOuterHeight = setOuterHeight;
    var getInnerWidth = function(el) {
      return implementationsMap.getInnerWidth(el);
    };
    exports.getInnerWidth = getInnerWidth;
    var setInnerWidth = function(el, value) {
      return implementationsMap.setInnerWidth(el, value);
    };
    exports.setInnerWidth = setInnerWidth;
    var getInnerHeight = function(el) {
      return implementationsMap.getInnerHeight(el);
    };
    exports.getInnerHeight = getInnerHeight;
    var setInnerHeight = function(el, value) {
      return implementationsMap.setInnerHeight(el, value);
    };
    exports.setInnerHeight = setInnerHeight;
    var elementSize = function elementSize2(el, sizeProperty, value) {
      var partialName = sizeProperty.toLowerCase().indexOf("width") >= 0 ? "Width" : "Height";
      var propName = partialName.toLowerCase();
      var isOuter = 0 === sizeProperty.indexOf("outer");
      var isInner = 0 === sizeProperty.indexOf("inner");
      var isGetter = 2 === arguments.length || "boolean" === typeof value;
      if ((0, _type.isRenderer)(el)) {
        if (el.length > 1 && !isGetter) {
          for (var i = 0; i < el.length; i++) {
            elementSize2(el[i], sizeProperty, value);
          }
          return;
        }
        el = el[0];
      }
      if (!el) {
        return;
      }
      if ((0, _type.isWindow)(el)) {
        return isOuter ? el["inner" + partialName] : _dom_adapter.default.getDocumentElement()["client" + partialName];
      }
      if (_dom_adapter.default.isDocument(el)) {
        var documentElement = _dom_adapter.default.getDocumentElement();
        var body = _dom_adapter.default.getBody();
        return Math.max(body["scroll" + partialName], body["offset" + partialName], documentElement["scroll" + partialName], documentElement["offset" + partialName], documentElement["client" + partialName]);
      }
      if (isGetter) {
        var box = "content";
        if (isOuter) {
          box = value ? "margin" : "border";
        }
        if (isInner) {
          box = "padding";
        }
        return getSize(el, propName, box);
      }
      if ((0, _type.isNumeric)(value)) {
        var elementStyles = getElementComputedStyle(el);
        var sizeAdjustment = getElementBoxParams(propName, elementStyles);
        var isBorderBox = "border-box" === elementStyles.boxSizing;
        value = Number(value);
        if (isOuter) {
          value -= isBorderBox ? 0 : sizeAdjustment.border + sizeAdjustment.padding;
        } else if (isInner) {
          value += isBorderBox ? sizeAdjustment.border : -sizeAdjustment.padding;
        } else if (isBorderBox) {
          value += sizeAdjustment.border + sizeAdjustment.padding;
        }
      }
      value += (0, _type.isNumeric)(value) ? "px" : "";
      _dom_adapter.default.setStyle(el, propName, value);
      return null;
    };
    var getWindowByElement = function(el) {
      return (0, _type.isWindow)(el) ? el : el.defaultView;
    };
    exports.getWindowByElement = getWindowByElement;
    var getOffset = function(el) {
      if (!el.getClientRects().length) {
        return {
          top: 0,
          left: 0
        };
      }
      var rect = el.getBoundingClientRect();
      var win = getWindowByElement(el.ownerDocument);
      var docElem = el.ownerDocument.documentElement;
      return {
        top: rect.top + win.pageYOffset - docElem.clientTop,
        left: rect.left + win.pageXOffset - docElem.clientLeft
      };
    };
    exports.getOffset = getOffset;
  }
});

// node_modules/devextreme/cjs/core/utils/html_parser.js
var require_html_parser = __commonJS({
  "node_modules/devextreme/cjs/core/utils/html_parser.js"(exports) {
    "use strict";
    exports.parseHTML = exports.isTablePart = void 0;
    var _dom_adapter = _interopRequireDefault(require_dom_adapter());
    function _interopRequireDefault(obj) {
      return obj && obj.j ? obj : {
        default: obj
      };
    }
    function _toConsumableArray(arr) {
      return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
    }
    function _nonIterableSpread() {
      throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _unsupportedIterableToArray(o, minLen) {
      if (!o) {
        return;
      }
      if ("string" === typeof o) {
        return _arrayLikeToArray(o, minLen);
      }
      var n = Object.prototype.toString.call(o).slice(8, -1);
      if ("Object" === n && o.constructor) {
        n = o.constructor.name;
      }
      if ("Map" === n || "Set" === n) {
        return Array.from(o);
      }
      if ("Arguments" === n || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) {
        return _arrayLikeToArray(o, minLen);
      }
    }
    function _iterableToArray(iter) {
      if ("undefined" !== typeof Symbol && null != iter[Symbol.iterator] || null != iter["@@iterator"]) {
        return Array.from(iter);
      }
    }
    function _arrayWithoutHoles(arr) {
      if (Array.isArray(arr)) {
        return _arrayLikeToArray(arr);
      }
    }
    function _arrayLikeToArray(arr, len) {
      if (null == len || len > arr.length) {
        len = arr.length;
      }
      for (var i = 0, arr2 = new Array(len); i < len; i++) {
        arr2[i] = arr[i];
      }
      return arr2;
    }
    var isTagName = /<([a-z][^/\0>\x20\t\r\n\f]+)/i;
    var tagWrappers = {
      default: {
        tagsCount: 0,
        startTags: "",
        endTags: ""
      },
      thead: {
        tagsCount: 1,
        startTags: "<table>",
        endTags: "</table>"
      },
      td: {
        tagsCount: 3,
        startTags: "<table><tbody><tr>",
        endTags: "</tr></tbody></table>"
      },
      col: {
        tagsCount: 2,
        startTags: "<table><colgroup>",
        endTags: "</colgroup></table>"
      },
      tr: {
        tagsCount: 2,
        startTags: "<table><tbody>",
        endTags: "</tbody></table>"
      }
    };
    tagWrappers.tbody = tagWrappers.colgroup = tagWrappers.caption = tagWrappers.tfoot = tagWrappers.thead;
    tagWrappers.th = tagWrappers.td;
    var parseHTML = function(html) {
      if ("string" !== typeof html) {
        return null;
      }
      var fragment = _dom_adapter.default.createDocumentFragment();
      var container = fragment.appendChild(_dom_adapter.default.createElement("div"));
      var tags = isTagName.exec(html);
      var firstRootTag = tags && tags[1].toLowerCase();
      var tagWrapper = tagWrappers[firstRootTag] || tagWrappers.default;
      container.innerHTML = tagWrapper.startTags + html + tagWrapper.endTags;
      for (var i = 0; i < tagWrapper.tagsCount; i++) {
        container = container.lastChild;
      }
      return _toConsumableArray(container.childNodes);
    };
    exports.parseHTML = parseHTML;
    var isTablePart = function(html) {
      var tags = isTagName.exec(html);
      return tags && tags[1] in tagWrappers;
    };
    exports.isTablePart = isTablePart;
  }
});

// node_modules/devextreme/cjs/core/renderer_base.js
var require_renderer_base = __commonJS({
  "node_modules/devextreme/cjs/core/renderer_base.js"(exports, module) {
    "use strict";
    exports.default = void 0;
    var _element_data = require_element_data();
    var _dom_adapter = _interopRequireDefault(require_dom_adapter());
    var _window = require_window();
    var _type = require_type();
    var _style = require_style();
    var _size = require_size();
    var _html_parser = require_html_parser();
    function _interopRequireDefault(obj) {
      return obj && obj.j ? obj : {
        default: obj
      };
    }
    var window2 = (0, _window.getWindow)();
    var renderer;
    var initRender = function(selector, context) {
      if (!selector) {
        this.length = 0;
        return this;
      }
      if ("string" === typeof selector) {
        if ("body" === selector) {
          this[0] = context ? context.body : _dom_adapter.default.getBody();
          this.length = 1;
          return this;
        }
        context = context || _dom_adapter.default.getDocument();
        if ("<" === selector[0]) {
          this[0] = _dom_adapter.default.createElement(selector.slice(1, -1), context);
          this.length = 1;
          return this;
        }
        [].push.apply(this, _dom_adapter.default.querySelectorAll(context, selector));
        return this;
      } else if (_dom_adapter.default.isNode(selector) || (0, _type.isWindow)(selector)) {
        this[0] = selector;
        this.length = 1;
        return this;
      } else if (Array.isArray(selector)) {
        [].push.apply(this, selector);
        return this;
      }
      return renderer(selector.toArray ? selector.toArray() : [selector]);
    };
    renderer = function(selector, context) {
      return new initRender(selector, context);
    };
    renderer.fn = {
      dxRenderer: true
    };
    initRender.prototype = renderer.fn;
    var repeatMethod = function(methodName, args) {
      for (var i = 0; i < this.length; i++) {
        var item = renderer(this[i]);
        item[methodName].apply(item, args);
      }
      return this;
    };
    var setAttributeValue = function(element, attrName, value) {
      if (void 0 !== value && null !== value && false !== value) {
        _dom_adapter.default.setAttribute(element, attrName, value);
      } else {
        _dom_adapter.default.removeAttribute(element, attrName);
      }
    };
    initRender.prototype.show = function() {
      return this.toggle(true);
    };
    initRender.prototype.hide = function() {
      return this.toggle(false);
    };
    initRender.prototype.toggle = function(value) {
      if (this[0]) {
        this.toggleClass("dx-state-invisible", !value);
      }
      return this;
    };
    initRender.prototype.attr = function(attrName, value) {
      if (this.length > 1 && arguments.length > 1) {
        return repeatMethod.call(this, "attr", arguments);
      }
      if (!this[0]) {
        if ((0, _type.isObject)(attrName) || void 0 !== value) {
          return this;
        } else {
          return;
        }
      }
      if (!this[0].getAttribute) {
        return this.prop(attrName, value);
      }
      if ("string" === typeof attrName && 1 === arguments.length) {
        var result = this[0].getAttribute(attrName);
        return null == result ? void 0 : result;
      } else if ((0, _type.isPlainObject)(attrName)) {
        for (var key in attrName) {
          this.attr(key, attrName[key]);
        }
      } else {
        setAttributeValue(this[0], attrName, value);
      }
      return this;
    };
    initRender.prototype.removeAttr = function(attrName) {
      this[0] && _dom_adapter.default.removeAttribute(this[0], attrName);
      return this;
    };
    initRender.prototype.prop = function(propName, value) {
      if (!this[0]) {
        return this;
      }
      if ("string" === typeof propName && 1 === arguments.length) {
        return this[0][propName];
      } else if ((0, _type.isPlainObject)(propName)) {
        for (var key in propName) {
          this.prop(key, propName[key]);
        }
      } else {
        _dom_adapter.default.setProperty(this[0], propName, value);
      }
      return this;
    };
    initRender.prototype.addClass = function(className) {
      return this.toggleClass(className, true);
    };
    initRender.prototype.removeClass = function(className) {
      return this.toggleClass(className, false);
    };
    initRender.prototype.hasClass = function(className) {
      if (!this[0] || void 0 === this[0].className) {
        return false;
      }
      var classNames = className.split(" ");
      for (var i = 0; i < classNames.length; i++) {
        if (this[0].classList) {
          if (this[0].classList.contains(classNames[i])) {
            return true;
          }
        } else {
          var _className = (0, _type.isString)(this[0].className) ? this[0].className : _dom_adapter.default.getAttribute(this[0], "class");
          if ((_className || "").split(" ").indexOf(classNames[i]) >= 0) {
            return true;
          }
        }
      }
      return false;
    };
    initRender.prototype.toggleClass = function(className, value) {
      if (this.length > 1) {
        return repeatMethod.call(this, "toggleClass", arguments);
      }
      if (!this[0] || !className) {
        return this;
      }
      value = void 0 === value ? !this.hasClass(className) : value;
      var classNames = className.split(" ");
      for (var i = 0; i < classNames.length; i++) {
        _dom_adapter.default.setClass(this[0], classNames[i], value);
      }
      return this;
    };
    initRender.prototype.html = function(value) {
      if (!arguments.length) {
        return this[0].innerHTML;
      }
      this.empty();
      if ("string" === typeof value && !(0, _html_parser.isTablePart)(value) || "number" === typeof value) {
        this[0].innerHTML = value;
        return this;
      }
      return this.append((0, _html_parser.parseHTML)(value));
    };
    var appendElements = function(element, nextSibling) {
      if (!this[0] || !element) {
        return;
      }
      if ("string" === typeof element) {
        element = (0, _html_parser.parseHTML)(element);
      } else if (element.nodeType) {
        element = [element];
      } else if ((0, _type.isNumeric)(element)) {
        element = [_dom_adapter.default.createTextNode(element)];
      }
      for (var i = 0; i < element.length; i++) {
        var item = element[i];
        var container = this[0];
        var wrapTR = "TABLE" === container.tagName && "TR" === item.tagName;
        if (wrapTR && container.tBodies && container.tBodies.length) {
          container = container.tBodies[0];
        }
        _dom_adapter.default.insertElement(container, item.nodeType ? item : item[0], nextSibling);
      }
    };
    var setCss = function(name, value) {
      if (!this[0] || !this[0].style) {
        return;
      }
      if (null === value || "number" === typeof value && isNaN(value)) {
        return;
      }
      name = (0, _style.styleProp)(name);
      for (var i = 0; i < this.length; i++) {
        this[i].style[name] = (0, _style.normalizeStyleProp)(name, value);
      }
    };
    initRender.prototype.css = function(name, value) {
      if ((0, _type.isString)(name)) {
        if (2 === arguments.length) {
          setCss.call(this, name, value);
        } else {
          if (!this[0]) {
            return;
          }
          name = (0, _style.styleProp)(name);
          var result = window2.getComputedStyle(this[0])[name] || this[0].style[name];
          return (0, _type.isNumeric)(result) ? result.toString() : result;
        }
      } else if ((0, _type.isPlainObject)(name)) {
        for (var key in name) {
          setCss.call(this, key, name[key]);
        }
      }
      return this;
    };
    initRender.prototype.prepend = function(element) {
      if (arguments.length > 1) {
        for (var i = 0; i < arguments.length; i++) {
          this.prepend(arguments[i]);
        }
        return this;
      }
      appendElements.apply(this, [element, this[0].firstChild]);
      return this;
    };
    initRender.prototype.append = function(element) {
      if (arguments.length > 1) {
        for (var i = 0; i < arguments.length; i++) {
          this.append(arguments[i]);
        }
        return this;
      }
      appendElements.apply(this, [element]);
      return this;
    };
    initRender.prototype.prependTo = function(element) {
      if (this.length > 1) {
        for (var i = this.length - 1; i >= 0; i--) {
          renderer(this[i]).prependTo(element);
        }
        return this;
      }
      element = renderer(element);
      if (element[0]) {
        _dom_adapter.default.insertElement(element[0], this[0], element[0].firstChild);
      }
      return this;
    };
    initRender.prototype.appendTo = function(element) {
      if (this.length > 1) {
        return repeatMethod.call(this, "appendTo", arguments);
      }
      _dom_adapter.default.insertElement(renderer(element)[0], this[0]);
      return this;
    };
    initRender.prototype.insertBefore = function(element) {
      if (element && element[0]) {
        _dom_adapter.default.insertElement(element[0].parentNode, this[0], element[0]);
      }
      return this;
    };
    initRender.prototype.insertAfter = function(element) {
      if (element && element[0]) {
        _dom_adapter.default.insertElement(element[0].parentNode, this[0], element[0].nextSibling);
      }
      return this;
    };
    initRender.prototype.before = function(element) {
      if (this[0]) {
        _dom_adapter.default.insertElement(this[0].parentNode, element[0], this[0]);
      }
      return this;
    };
    initRender.prototype.after = function(element) {
      if (this[0]) {
        _dom_adapter.default.insertElement(this[0].parentNode, element[0], this[0].nextSibling);
      }
      return this;
    };
    initRender.prototype.wrap = function(wrapper) {
      if (this[0]) {
        var wrap = renderer(wrapper);
        wrap.insertBefore(this);
        wrap.append(this);
      }
      return this;
    };
    initRender.prototype.wrapInner = function(wrapper) {
      var contents = this.contents();
      if (contents.length) {
        contents.wrap(wrapper);
      } else {
        this.append(wrapper);
      }
      return this;
    };
    initRender.prototype.replaceWith = function(element) {
      if (!(element && element[0])) {
        return;
      }
      if (element.is(this)) {
        return this;
      }
      element.insertBefore(this);
      this.remove();
      return element;
    };
    initRender.prototype.remove = function() {
      if (this.length > 1) {
        return repeatMethod.call(this, "remove", arguments);
      }
      (0, _element_data.cleanDataRecursive)(this[0], true);
      _dom_adapter.default.removeElement(this[0]);
      return this;
    };
    initRender.prototype.detach = function() {
      if (this.length > 1) {
        return repeatMethod.call(this, "detach", arguments);
      }
      _dom_adapter.default.removeElement(this[0]);
      return this;
    };
    initRender.prototype.empty = function() {
      if (this.length > 1) {
        return repeatMethod.call(this, "empty", arguments);
      }
      (0, _element_data.cleanDataRecursive)(this[0]);
      _dom_adapter.default.setText(this[0], "");
      return this;
    };
    initRender.prototype.clone = function() {
      var result = [];
      for (var i = 0; i < this.length; i++) {
        result.push(this[i].cloneNode(true));
      }
      return renderer(result);
    };
    initRender.prototype.text = function(value) {
      if (!arguments.length) {
        var result = "";
        for (var i = 0; i < this.length; i++) {
          result += this[i] && this[i].textContent || "";
        }
        return result;
      }
      var text = (0, _type.isFunction)(value) ? value() : value;
      (0, _element_data.cleanDataRecursive)(this[0], false);
      _dom_adapter.default.setText(this[0], (0, _type.isDefined)(text) ? text : "");
      return this;
    };
    initRender.prototype.val = function(value) {
      if (1 === arguments.length) {
        return this.prop("value", (0, _type.isDefined)(value) ? value : "");
      }
      return this.prop("value");
    };
    initRender.prototype.contents = function() {
      if (!this[0]) {
        return renderer();
      }
      var result = [];
      result.push.apply(result, this[0].childNodes);
      return renderer(result);
    };
    initRender.prototype.find = function(selector) {
      var result = renderer();
      if (!selector) {
        return result;
      }
      var nodes = [];
      var i;
      if ("string" === typeof selector) {
        selector = selector.trim();
        for (i = 0; i < this.length; i++) {
          var element = this[i];
          if (_dom_adapter.default.isElementNode(element)) {
            var elementId = element.getAttribute("id");
            var queryId = elementId || "dx-query-children";
            if (!elementId) {
              setAttributeValue(element, "id", queryId);
            }
            queryId = "[id='" + queryId + "'] ";
            var querySelector = queryId + selector.replace(/([^\\])(,)/g, "$1, " + queryId);
            nodes.push.apply(nodes, _dom_adapter.default.querySelectorAll(element, querySelector));
            setAttributeValue(element, "id", elementId);
          } else if (_dom_adapter.default.isDocument(element) || _dom_adapter.default.isDocumentFragment(element)) {
            nodes.push.apply(nodes, _dom_adapter.default.querySelectorAll(element, selector));
          }
        }
      } else {
        for (i = 0; i < this.length; i++) {
          selector = _dom_adapter.default.isNode(selector) ? selector : selector[0];
          if (this[i] !== selector && this[i].contains(selector)) {
            nodes.push(selector);
          }
        }
      }
      return result.add(nodes);
    };
    var isVisible = function(_, element) {
      var _element$host;
      element = null !== (_element$host = element.host) && void 0 !== _element$host ? _element$host : element;
      if (!element.nodeType) {
        return true;
      }
      return !!(element.offsetWidth || element.offsetHeight || element.getClientRects().length);
    };
    initRender.prototype.filter = function(selector) {
      if (!selector) {
        return renderer();
      }
      if (":visible" === selector) {
        return this.filter(isVisible);
      } else if (":hidden" === selector) {
        return this.filter(function(_, element) {
          return !isVisible(_, element);
        });
      }
      var result = [];
      for (var i = 0; i < this.length; i++) {
        var item = this[i];
        if (_dom_adapter.default.isElementNode(item) && "string" === (0, _type.type)(selector)) {
          _dom_adapter.default.elementMatches(item, selector) && result.push(item);
        } else if (_dom_adapter.default.isNode(selector) || (0, _type.isWindow)(selector)) {
          selector === item && result.push(item);
        } else if ((0, _type.isFunction)(selector)) {
          selector.call(item, i, item) && result.push(item);
        } else {
          for (var j = 0; j < selector.length; j++) {
            selector[j] === item && result.push(item);
          }
        }
      }
      return renderer(result);
    };
    initRender.prototype.not = function(selector) {
      var result = [];
      var nodes = this.filter(selector).toArray();
      for (var i = 0; i < this.length; i++) {
        if (-1 === nodes.indexOf(this[i])) {
          result.push(this[i]);
        }
      }
      return renderer(result);
    };
    initRender.prototype.is = function(selector) {
      return !!this.filter(selector).length;
    };
    initRender.prototype.children = function(selector) {
      var result = [];
      for (var i = 0; i < this.length; i++) {
        var nodes = this[i] ? this[i].childNodes : [];
        for (var j = 0; j < nodes.length; j++) {
          if (_dom_adapter.default.isElementNode(nodes[j])) {
            result.push(nodes[j]);
          }
        }
      }
      result = renderer(result);
      return selector ? result.filter(selector) : result;
    };
    initRender.prototype.siblings = function() {
      var element = this[0];
      if (!element || !element.parentNode) {
        return renderer();
      }
      var result = [];
      var parentChildNodes = element.parentNode.childNodes || [];
      for (var i = 0; i < parentChildNodes.length; i++) {
        var node = parentChildNodes[i];
        if (_dom_adapter.default.isElementNode(node) && node !== element) {
          result.push(node);
        }
      }
      return renderer(result);
    };
    initRender.prototype.each = function(callback) {
      for (var i = 0; i < this.length; i++) {
        if (false === callback.call(this[i], i, this[i])) {
          break;
        }
      }
    };
    initRender.prototype.index = function(element) {
      if (!element) {
        return this.parent().children().index(this);
      }
      element = renderer(element);
      return this.toArray().indexOf(element[0]);
    };
    initRender.prototype.get = function(index) {
      return this[index < 0 ? this.length + index : index];
    };
    initRender.prototype.eq = function(index) {
      index = index < 0 ? this.length + index : index;
      return renderer(this[index]);
    };
    initRender.prototype.first = function() {
      return this.eq(0);
    };
    initRender.prototype.last = function() {
      return this.eq(-1);
    };
    initRender.prototype.select = function() {
      for (var i = 0; i < this.length; i += 1) {
        this[i].select && this[i].select();
      }
      return this;
    };
    initRender.prototype.parent = function(selector) {
      if (!this[0]) {
        return renderer();
      }
      var result = renderer(this[0].parentNode);
      return !selector || result.is(selector) ? result : renderer();
    };
    initRender.prototype.parents = function(selector) {
      var result = [];
      var parent = this.parent();
      while (parent && parent[0] && !_dom_adapter.default.isDocument(parent[0])) {
        if (_dom_adapter.default.isElementNode(parent[0])) {
          if (!selector || parent.is(selector)) {
            result.push(parent.get(0));
          }
        }
        parent = parent.parent();
      }
      return renderer(result);
    };
    initRender.prototype.closest = function(selector) {
      if (this.is(selector)) {
        return this;
      }
      var parent = this.parent();
      while (parent && parent.length) {
        if (parent.is(selector)) {
          return parent;
        }
        parent = parent.parent();
      }
      return renderer();
    };
    initRender.prototype.next = function(selector) {
      if (!this[0]) {
        return renderer();
      }
      var next = renderer(this[0].nextSibling);
      if (!arguments.length) {
        return next;
      }
      while (next && next.length) {
        if (next.is(selector)) {
          return next;
        }
        next = next.next();
      }
      return renderer();
    };
    initRender.prototype.prev = function() {
      if (!this[0]) {
        return renderer();
      }
      return renderer(this[0].previousSibling);
    };
    initRender.prototype.add = function(selector) {
      var targets = renderer(selector);
      var result = this.toArray();
      for (var i = 0; i < targets.length; i++) {
        var target = targets[i];
        if (-1 === result.indexOf(target)) {
          result.push(target);
        }
      }
      return renderer(result);
    };
    var emptyArray = [];
    initRender.prototype.splice = function() {
      return renderer(emptyArray.splice.apply(this, arguments));
    };
    initRender.prototype.slice = function() {
      return renderer(emptyArray.slice.apply(this, arguments));
    };
    initRender.prototype.toArray = function() {
      return emptyArray.slice.call(this);
    };
    initRender.prototype.offset = function() {
      if (!this[0]) {
        return;
      }
      return (0, _size.getOffset)(this[0]);
    };
    initRender.prototype.offsetParent = function() {
      if (!this[0]) {
        return renderer();
      }
      var offsetParent = renderer(this[0].offsetParent);
      while (offsetParent[0] && "static" === offsetParent.css("position")) {
        offsetParent = renderer(offsetParent[0].offsetParent);
      }
      offsetParent = offsetParent[0] ? offsetParent : renderer(_dom_adapter.default.getDocumentElement());
      return offsetParent;
    };
    initRender.prototype.position = function() {
      if (!this[0]) {
        return;
      }
      var offset;
      var marginTop = parseFloat(this.css("marginTop"));
      var marginLeft = parseFloat(this.css("marginLeft"));
      if ("fixed" === this.css("position")) {
        offset = this[0].getBoundingClientRect();
        return {
          top: offset.top - marginTop,
          left: offset.left - marginLeft
        };
      }
      offset = this.offset();
      var offsetParent = this.offsetParent();
      var parentOffset = {
        top: 0,
        left: 0
      };
      if ("HTML" !== offsetParent[0].nodeName) {
        parentOffset = offsetParent.offset();
      }
      parentOffset = {
        top: parentOffset.top + parseFloat(offsetParent.css("borderTopWidth")),
        left: parentOffset.left + parseFloat(offsetParent.css("borderLeftWidth"))
      };
      return {
        top: offset.top - parentOffset.top - marginTop,
        left: offset.left - parentOffset.left - marginLeft
      };
    };
    [{
      name: "scrollLeft",
      offsetProp: "pageXOffset",
      scrollWindow: function(win, value) {
        win.scrollTo(value, win.pageYOffset);
      }
    }, {
      name: "scrollTop",
      offsetProp: "pageYOffset",
      scrollWindow: function(win, value) {
        win.scrollTo(win.pageXOffset, value);
      }
    }].forEach(function(directionStrategy) {
      var propName = directionStrategy.name;
      initRender.prototype[propName] = function(value) {
        if (!this[0]) {
          return;
        }
        var window3 = (0, _size.getWindowByElement)(this[0]);
        if (void 0 === value) {
          return window3 ? window3[directionStrategy.offsetProp] : this[0][propName];
        }
        if (window3) {
          directionStrategy.scrollWindow(window3, value);
        } else {
          this[0][propName] = value;
        }
        return this;
      };
    });
    initRender.prototype.data = function(key, value) {
      if (!this[0]) {
        return;
      }
      if (arguments.length < 2) {
        return _element_data.data.call(renderer, this[0], key);
      }
      _element_data.data.call(renderer, this[0], key, value);
      return this;
    };
    initRender.prototype.removeData = function(key) {
      this[0] && (0, _element_data.removeData)(this[0], key);
      return this;
    };
    var rendererWrapper = function() {
      return renderer.apply(this, arguments);
    };
    Object.defineProperty(rendererWrapper, "fn", {
      enumerable: true,
      configurable: true,
      get: function() {
        return renderer.fn;
      },
      set: function(value) {
        renderer.fn = value;
      }
    });
    var _default = {
      set: function(strategy) {
        renderer = strategy;
      },
      get: function() {
        return rendererWrapper;
      }
    };
    exports.default = _default;
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/devextreme/cjs/core/renderer.js
var require_renderer = __commonJS({
  "node_modules/devextreme/cjs/core/renderer.js"(exports, module) {
    "use strict";
    exports.default = void 0;
    var _renderer_base = _interopRequireDefault(require_renderer_base());
    function _interopRequireDefault(obj) {
      return obj && obj.j ? obj : {
        default: obj
      };
    }
    var _default = _renderer_base.default.get();
    exports.default = _default;
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/devextreme/cjs/core/component_registrator_callbacks.js
var require_component_registrator_callbacks = __commonJS({
  "node_modules/devextreme/cjs/core/component_registrator_callbacks.js"(exports, module) {
    "use strict";
    exports.default = void 0;
    var _memorized_callbacks = _interopRequireDefault(require_memorized_callbacks());
    function _interopRequireDefault(obj) {
      return obj && obj.j ? obj : {
        default: obj
      };
    }
    var _default = new _memorized_callbacks.default();
    exports.default = _default;
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/devextreme/cjs/events/core/event_registrator.js
var require_event_registrator = __commonJS({
  "node_modules/devextreme/cjs/events/core/event_registrator.js"(exports, module) {
    "use strict";
    exports.default = void 0;
    var _iterator = require_iterator();
    var _event_registrator_callbacks = _interopRequireDefault(require_event_registrator_callbacks());
    function _interopRequireDefault(obj) {
      return obj && obj.j ? obj : {
        default: obj
      };
    }
    var registerEvent = function(name, eventObject) {
      var strategy = {};
      if ("noBubble" in eventObject) {
        strategy.noBubble = eventObject.noBubble;
      }
      if ("bindType" in eventObject) {
        strategy.bindType = eventObject.bindType;
      }
      if ("delegateType" in eventObject) {
        strategy.delegateType = eventObject.delegateType;
      }
      (0, _iterator.each)(["setup", "teardown", "add", "remove", "trigger", "handle", "_default", "dispose"], function(_, methodName) {
        if (!eventObject[methodName]) {
          return;
        }
        strategy[methodName] = function() {
          var args = [].slice.call(arguments);
          args.unshift(this);
          return eventObject[methodName].apply(eventObject, args);
        };
      });
      _event_registrator_callbacks.default.fire(name, strategy);
    };
    registerEvent.callbacks = _event_registrator_callbacks.default;
    var _default = registerEvent;
    exports.default = _default;
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/devextreme/cjs/events/remove.js
var require_remove = __commonJS({
  "node_modules/devextreme/cjs/events/remove.js"(exports) {
    "use strict";
    exports.removeEvent = void 0;
    var _renderer = _interopRequireDefault(require_renderer());
    var _element_data = require_element_data();
    var _events_engine = _interopRequireDefault(require_events_engine());
    var _event_registrator = _interopRequireDefault(require_event_registrator());
    function _interopRequireDefault(obj) {
      return obj && obj.j ? obj : {
        default: obj
      };
    }
    var removeEvent = "dxremove";
    exports.removeEvent = removeEvent;
    var eventPropName = "dxRemoveEvent";
    (0, _element_data.beforeCleanData)(function(elements) {
      elements = [].slice.call(elements);
      for (var i = 0; i < elements.length; i++) {
        var $element = (0, _renderer.default)(elements[i]);
        if ($element.prop(eventPropName)) {
          $element[0][eventPropName] = null;
          _events_engine.default.triggerHandler($element, removeEvent);
        }
      }
    });
    (0, _event_registrator.default)(removeEvent, {
      noBubble: true,
      setup: function(element) {
        (0, _renderer.default)(element).prop(eventPropName, true);
      }
    });
  }
});

// node_modules/devextreme/cjs/core/utils/public_component.js
var require_public_component = __commonJS({
  "node_modules/devextreme/cjs/core/utils/public_component.js"(exports) {
    "use strict";
    exports.attachInstanceToElement = attachInstanceToElement;
    exports.getInstanceByElement = getInstanceByElement;
    exports.name = void 0;
    var _element_data = require_element_data();
    var _events_engine = _interopRequireDefault(require_events_engine());
    var _type = require_type();
    var _remove = require_remove();
    function _interopRequireDefault(obj) {
      return obj && obj.j ? obj : {
        default: obj
      };
    }
    var COMPONENT_NAMES_DATA_KEY = "dxComponents";
    var ANONYMOUS_COMPONENT_DATA_KEY = "dxPrivateComponent";
    var componentNames = /* @__PURE__ */ new WeakMap();
    var nextAnonymousComponent = 0;
    var getName = function(componentClass, newName) {
      if ((0, _type.isDefined)(newName)) {
        componentNames.set(componentClass, newName);
        return;
      }
      if (!componentNames.has(componentClass)) {
        var generatedName = ANONYMOUS_COMPONENT_DATA_KEY + nextAnonymousComponent++;
        componentNames.set(componentClass, generatedName);
        return generatedName;
      }
      return componentNames.get(componentClass);
    };
    exports.name = getName;
    function attachInstanceToElement($element, componentInstance, disposeFn) {
      var data = (0, _element_data.data)($element.get(0));
      var name = getName(componentInstance.constructor);
      data[name] = componentInstance;
      if (disposeFn) {
        _events_engine.default.one($element, _remove.removeEvent, function() {
          disposeFn.call(componentInstance);
        });
      }
      if (!data[COMPONENT_NAMES_DATA_KEY]) {
        data[COMPONENT_NAMES_DATA_KEY] = [];
      }
      data[COMPONENT_NAMES_DATA_KEY].push(name);
    }
    function getInstanceByElement($element, componentClass) {
      var name = getName(componentClass);
      return (0, _element_data.data)($element.get(0), name);
    }
  }
});

// node_modules/devextreme/cjs/core/component_registrator.js
var require_component_registrator = __commonJS({
  "node_modules/devextreme/cjs/core/component_registrator.js"(exports, module) {
    "use strict";
    exports.default = void 0;
    var _renderer = _interopRequireDefault(require_renderer());
    var _component_registrator_callbacks = _interopRequireDefault(require_component_registrator_callbacks());
    var _errors = _interopRequireDefault(require_errors());
    var _public_component = require_public_component();
    function _interopRequireDefault(obj) {
      return obj && obj.j ? obj : {
        default: obj
      };
    }
    var registerComponent = function(name, namespace, componentClass) {
      if (!componentClass) {
        componentClass = namespace;
      } else {
        namespace[name] = componentClass;
      }
      (0, _public_component.name)(componentClass, name);
      _component_registrator_callbacks.default.fire(name, componentClass);
    };
    var registerRendererComponent = function(name, componentClass) {
      _renderer.default.fn[name] = function(options) {
        var isMemberInvoke = "string" === typeof options;
        var result;
        if (isMemberInvoke) {
          var memberName = options;
          var memberArgs = [].slice.call(arguments).slice(1);
          this.each(function() {
            var instance = componentClass.getInstance(this);
            if (!instance) {
              throw _errors.default.Error("E0009", name);
            }
            var member = instance[memberName];
            var memberValue = member.apply(instance, memberArgs);
            if (void 0 === result) {
              result = memberValue;
            }
          });
        } else {
          this.each(function() {
            var instance = componentClass.getInstance(this);
            if (instance) {
              instance.option(options);
            } else {
              new componentClass(this, options);
            }
          });
          result = this;
        }
        return result;
      };
    };
    _component_registrator_callbacks.default.add(registerRendererComponent);
    var _default = registerComponent;
    exports.default = _default;
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/devextreme/cjs/events/utils/add_namespace.js
var require_add_namespace = __commonJS({
  "node_modules/devextreme/cjs/events/utils/add_namespace.js"(exports, module) {
    "use strict";
    exports.default = void 0;
    var _errors = _interopRequireDefault(require_errors());
    function _interopRequireDefault(obj) {
      return obj && obj.j ? obj : {
        default: obj
      };
    }
    var addNamespace = function addNamespace2(eventNames, namespace) {
      if (!namespace) {
        throw _errors.default.Error("E0017");
      }
      if (Array.isArray(eventNames)) {
        return eventNames.map(function(eventName) {
          return addNamespace2(eventName, namespace);
        }).join(" ");
      }
      if (-1 !== eventNames.indexOf(" ")) {
        return addNamespace2(eventNames.split(/\s+/g), namespace);
      }
      return "".concat(eventNames, ".").concat(namespace);
    };
    var _default = addNamespace;
    exports.default = _default;
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/devextreme/cjs/ui/widget/selectors.js
var require_selectors = __commonJS({
  "node_modules/devextreme/cjs/ui/widget/selectors.js"(exports) {
    "use strict";
    exports.tabbable = exports.focused = exports.focusable = void 0;
    var _renderer = _interopRequireDefault(require_renderer());
    var _dom_adapter = _interopRequireDefault(require_dom_adapter());
    function _interopRequireDefault(obj) {
      return obj && obj.j ? obj : {
        default: obj
      };
    }
    var focusableFn = function(element, tabIndex) {
      if (!visible(element)) {
        return false;
      }
      var nodeName = element.nodeName.toLowerCase();
      var isTabIndexNotNaN = !isNaN(tabIndex);
      var isDisabled = element.disabled;
      var isDefaultFocus = /^(input|select|textarea|button|object|iframe)$/.test(nodeName);
      var isHyperlink = "a" === nodeName;
      var isFocusable;
      var isContentEditable = element.isContentEditable;
      if (isDefaultFocus || isContentEditable) {
        isFocusable = !isDisabled;
      } else if (isHyperlink) {
        isFocusable = element.href || isTabIndexNotNaN;
      } else {
        isFocusable = isTabIndexNotNaN;
      }
      return isFocusable;
    };
    function visible(element) {
      var $element = (0, _renderer.default)(element);
      return $element.is(":visible") && "hidden" !== $element.css("visibility") && "hidden" !== $element.parents().css("visibility");
    }
    var focusable = function(index, element) {
      return focusableFn(element, (0, _renderer.default)(element).attr("tabIndex"));
    };
    exports.focusable = focusable;
    var tabbable = function(index, element) {
      var tabIndex = (0, _renderer.default)(element).attr("tabIndex");
      return (isNaN(tabIndex) || tabIndex >= 0) && focusableFn(element, tabIndex);
    };
    exports.tabbable = tabbable;
    var focused = function($element) {
      var element = (0, _renderer.default)($element).get(0);
      return _dom_adapter.default.getActiveElement(element) === element;
    };
    exports.focused = focused;
  }
});

// node_modules/devextreme/cjs/events/utils/index.js
var require_utils2 = __commonJS({
  "node_modules/devextreme/cjs/events/utils/index.js"(exports) {
    "use strict";
    exports.stopEventsSkipping = exports.setEventFixMethod = exports.normalizeKeyName = exports.needSkipEvent = exports.isTouchEvent = exports.isPointerEvent = exports.isMouseEvent = exports.isKeyboardEvent = exports.isFakeClickEvent = exports.isDxMouseWheelEvent = exports.isCommandKeyPressed = exports.hasTouches = exports.getChar = exports.forceSkipEvents = exports.fireEvent = exports.eventSource = exports.eventDelta = exports.eventData = exports.createEvent = exports.addNamespace = void 0;
    var _renderer = _interopRequireDefault(require_renderer());
    var _add_namespace = _interopRequireDefault(require_add_namespace());
    var _events_engine = _interopRequireDefault(require_events_engine());
    var _iterator = require_iterator();
    var _extend = require_extend();
    var _selectors = require_selectors();
    function _interopRequireDefault(obj) {
      return obj && obj.j ? obj : {
        default: obj
      };
    }
    var KEY_MAP = {
      backspace: "backspace",
      tab: "tab",
      enter: "enter",
      escape: "escape",
      pageup: "pageUp",
      pagedown: "pageDown",
      end: "end",
      home: "home",
      arrowleft: "leftArrow",
      arrowup: "upArrow",
      arrowright: "rightArrow",
      arrowdown: "downArrow",
      delete: "del",
      " ": "space",
      f: "F",
      a: "A",
      "*": "asterisk",
      "-": "minus",
      alt: "alt",
      control: "control",
      shift: "shift"
    };
    var LEGACY_KEY_CODES = {
      8: "backspace",
      9: "tab",
      13: "enter",
      27: "escape",
      33: "pageUp",
      34: "pageDown",
      35: "end",
      36: "home",
      37: "leftArrow",
      38: "upArrow",
      39: "rightArrow",
      40: "downArrow",
      46: "del",
      32: "space",
      70: "F",
      65: "A",
      106: "asterisk",
      109: "minus",
      189: "minus",
      173: "minus",
      16: "shift",
      17: "control",
      18: "alt"
    };
    var EVENT_SOURCES_REGEX = {
      dx: /^dx/i,
      mouse: /(mouse|wheel)/i,
      touch: /^touch/i,
      keyboard: /^key/i,
      pointer: /^(ms)?pointer/i
    };
    var fixMethod = function(e) {
      return e;
    };
    var copyEvent = function(originalEvent) {
      return fixMethod(_events_engine.default.Event(originalEvent, originalEvent), originalEvent);
    };
    var isDxEvent = function(e) {
      return "dx" === eventSource(e);
    };
    var isNativeMouseEvent = function(e) {
      return "mouse" === eventSource(e);
    };
    var isNativeTouchEvent = function(e) {
      return "touch" === eventSource(e);
    };
    var eventSource = function(_ref) {
      var type = _ref.type;
      var result = "other";
      (0, _iterator.each)(EVENT_SOURCES_REGEX, function(key) {
        if (this.test(type)) {
          result = key;
          return false;
        }
      });
      return result;
    };
    exports.eventSource = eventSource;
    var isPointerEvent = function(e) {
      return "pointer" === eventSource(e);
    };
    exports.isPointerEvent = isPointerEvent;
    var isMouseEvent = function(e) {
      return isNativeMouseEvent(e) || (isPointerEvent(e) || isDxEvent(e)) && "mouse" === e.pointerType;
    };
    exports.isMouseEvent = isMouseEvent;
    var isDxMouseWheelEvent = function(e) {
      return e && "dxmousewheel" === e.type;
    };
    exports.isDxMouseWheelEvent = isDxMouseWheelEvent;
    var isTouchEvent = function(e) {
      return isNativeTouchEvent(e) || (isPointerEvent(e) || isDxEvent(e)) && "touch" === e.pointerType;
    };
    exports.isTouchEvent = isTouchEvent;
    var isKeyboardEvent = function(e) {
      return "keyboard" === eventSource(e);
    };
    exports.isKeyboardEvent = isKeyboardEvent;
    var isFakeClickEvent = function(_ref2) {
      var screenX = _ref2.screenX, offsetX = _ref2.offsetX, pageX = _ref2.pageX;
      return 0 === screenX && !offsetX && 0 === pageX;
    };
    exports.isFakeClickEvent = isFakeClickEvent;
    var eventData = function(_ref3) {
      var pageX = _ref3.pageX, pageY = _ref3.pageY, timeStamp = _ref3.timeStamp;
      return {
        x: pageX,
        y: pageY,
        time: timeStamp
      };
    };
    exports.eventData = eventData;
    var eventDelta = function(from, to) {
      return {
        x: to.x - from.x,
        y: to.y - from.y,
        time: to.time - from.time || 1
      };
    };
    exports.eventDelta = eventDelta;
    var hasTouches = function(e) {
      var originalEvent = e.originalEvent, pointers = e.pointers;
      if (isNativeTouchEvent(e)) {
        return (originalEvent.touches || []).length;
      }
      if (isDxEvent(e)) {
        return (pointers || []).length;
      }
      return 0;
    };
    exports.hasTouches = hasTouches;
    var skipEvents = false;
    var forceSkipEvents = function() {
      return skipEvents = true;
    };
    exports.forceSkipEvents = forceSkipEvents;
    var stopEventsSkipping = function() {
      return skipEvents = false;
    };
    exports.stopEventsSkipping = stopEventsSkipping;
    var needSkipEvent = function(e) {
      if (skipEvents) {
        return true;
      }
      var target = e.target;
      var $target = (0, _renderer.default)(target);
      var isContentEditable = (null === target || void 0 === target ? void 0 : target.isContentEditable) || (null === target || void 0 === target ? void 0 : target.hasAttribute("contenteditable"));
      var touchInEditable = $target.is("input, textarea, select") || isContentEditable;
      if (isDxMouseWheelEvent(e)) {
        var isTextArea = $target.is("textarea") && $target.hasClass("dx-texteditor-input");
        if (isTextArea || isContentEditable) {
          return false;
        }
        var isInputFocused = $target.is("input[type='number'], textarea, select") && $target.is(":focus");
        return isInputFocused;
      }
      if (isMouseEvent(e)) {
        return touchInEditable || e.which > 1;
      }
      if (isTouchEvent(e)) {
        return touchInEditable && (0, _selectors.focused)($target);
      }
    };
    exports.needSkipEvent = needSkipEvent;
    var setEventFixMethod = function(func) {
      return fixMethod = func;
    };
    exports.setEventFixMethod = setEventFixMethod;
    var createEvent = function(originalEvent, args) {
      var event = copyEvent(originalEvent);
      args && (0, _extend.extend)(event, args);
      return event;
    };
    exports.createEvent = createEvent;
    var fireEvent = function(props) {
      var originalEvent = props.originalEvent, delegateTarget = props.delegateTarget;
      var event = createEvent(originalEvent, props);
      _events_engine.default.trigger(delegateTarget || event.target, event);
      return event;
    };
    exports.fireEvent = fireEvent;
    var normalizeKeyName = function(_ref4) {
      var key = _ref4.key, which = _ref4.which;
      var normalizedKey = KEY_MAP[null === key || void 0 === key ? void 0 : key.toLowerCase()] || key;
      var normalizedKeyFromWhich = LEGACY_KEY_CODES[which];
      if (normalizedKeyFromWhich && normalizedKey === key) {
        return normalizedKeyFromWhich;
      } else if (!normalizedKey && which) {
        return String.fromCharCode(which);
      }
      return normalizedKey;
    };
    exports.normalizeKeyName = normalizeKeyName;
    var getChar = function(_ref5) {
      var key = _ref5.key, which = _ref5.which;
      return key || String.fromCharCode(which);
    };
    exports.getChar = getChar;
    var addNamespace = _add_namespace.default;
    exports.addNamespace = addNamespace;
    var isCommandKeyPressed = function(_ref6) {
      var ctrlKey = _ref6.ctrlKey, metaKey = _ref6.metaKey;
      return ctrlKey || metaKey;
    };
    exports.isCommandKeyPressed = isCommandKeyPressed;
  }
});

// node_modules/devextreme/cjs/viz/palette.js
var require_palette = __commonJS({
  "node_modules/devextreme/cjs/viz/palette.js"(exports) {
    "use strict";
    exports.createPalette = createPalette;
    exports.currentPalette = currentPalette;
    exports.generateColors = generateColors;
    exports.getAccentColor = getAccentColor;
    exports.getDiscretePalette = getDiscretePalette;
    exports.getGradientPalette = getGradientPalette;
    exports.getPalette = getPalette;
    exports.registerPalette = registerPalette;
    var _utils = require_utils();
    var _extend = require_extend();
    var _color = _interopRequireDefault(require_color());
    var _type = require_type();
    var _palettes;
    function _interopRequireDefault(obj) {
      return obj && obj.j ? obj : {
        default: obj
      };
    }
    function _typeof(obj) {
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _defineProperty(obj, key, value) {
      key = _toPropertyKey(key);
      if (key in obj) {
        Object.defineProperty(obj, key, {
          value,
          enumerable: true,
          configurable: true,
          writable: true
        });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return "symbol" === _typeof(key) ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if ("object" !== _typeof(input) || null === input) {
        return input;
      }
      var prim = input[Symbol.toPrimitive];
      if (void 0 !== prim) {
        var res = prim.call(input, hint || "default");
        if ("object" !== _typeof(res)) {
          return res;
        }
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return ("string" === hint ? String : Number)(input);
    }
    var _floor = Math.floor;
    var _ceil = Math.ceil;
    var _isArray = Array.isArray;
    var HIGHLIGHTING_STEP = 50;
    var DEFAULT_PALETTE = "material";
    var officePalette = {
      simpleSet: ["#5f8b95", "#ba4d51", "#af8a53", "#955f71", "#859666", "#7e688c"],
      indicatingSet: ["#a3b97c", "#e1b676", "#ec7f83"],
      gradientSet: ["#5f8b95", "#ba4d51"],
      accentColor: "#ba4d51"
    };
    var palettes = (_palettes = {}, _defineProperty(_palettes, DEFAULT_PALETTE, {
      simpleSet: ["#1db2f5", "#f5564a", "#97c95c", "#ffc720", "#eb3573", "#a63db8"],
      indicatingSet: ["#97c95c", "#ffc720", "#f5564a"],
      gradientSet: ["#1db2f5", "#97c95c"],
      accentColor: "#1db2f5"
    }), _defineProperty(_palettes, "office", officePalette), _defineProperty(_palettes, "harmony light", {
      simpleSet: ["#fcb65e", "#679ec5", "#ad79ce", "#7abd5c", "#e18e92", "#b6d623", "#b7abea", "#85dbd5"],
      indicatingSet: ["#b6d623", "#fcb65e", "#e18e92"],
      gradientSet: ["#7abd5c", "#fcb65e"],
      accentColor: "#679ec5"
    }), _defineProperty(_palettes, "soft pastel", {
      simpleSet: ["#60a69f", "#78b6d9", "#6682bb", "#a37182", "#eeba69", "#90ba58", "#456c68", "#7565a4"],
      indicatingSet: ["#90ba58", "#eeba69", "#a37182"],
      gradientSet: ["#78b6d9", "#eeba69"],
      accentColor: "#60a69f"
    }), _defineProperty(_palettes, "pastel", {
      simpleSet: ["#bb7862", "#70b3a1", "#bb626a", "#057d85", "#ab394b", "#dac599", "#153459", "#b1d2c6"],
      indicatingSet: ["#70b3a1", "#dac599", "#bb626a"],
      gradientSet: ["#bb7862", "#70b3a1"],
      accentColor: "#bb7862"
    }), _defineProperty(_palettes, "bright", {
      simpleSet: ["#70c92f", "#f8ca00", "#bd1550", "#e97f02", "#9d419c", "#7e4452", "#9ab57e", "#36a3a6"],
      indicatingSet: ["#70c92f", "#f8ca00", "#bd1550"],
      gradientSet: ["#e97f02", "#f8ca00"],
      accentColor: "#e97f02"
    }), _defineProperty(_palettes, "soft", {
      simpleSet: ["#cbc87b", "#9ab57e", "#e55253", "#7e4452", "#e8c267", "#565077", "#6babac", "#ad6082"],
      indicatingSet: ["#9ab57e", "#e8c267", "#e55253"],
      gradientSet: ["#9ab57e", "#e8c267"],
      accentColor: "#565077"
    }), _defineProperty(_palettes, "ocean", {
      simpleSet: ["#75c099", "#acc371", "#378a8a", "#5fa26a", "#064970", "#38c5d2", "#00a7c6", "#6f84bb"],
      indicatingSet: ["#c8e394", "#7bc59d", "#397c8b"],
      gradientSet: ["#acc371", "#38c5d2"],
      accentColor: "#378a8a"
    }), _defineProperty(_palettes, "vintage", {
      simpleSet: ["#dea484", "#efc59c", "#cb715e", "#eb9692", "#a85c4c", "#f2c0b5", "#c96374", "#dd956c"],
      indicatingSet: ["#ffe5c6", "#f4bb9d", "#e57660"],
      gradientSet: ["#efc59c", "#cb715e"],
      accentColor: "#cb715e"
    }), _defineProperty(_palettes, "violet", {
      simpleSet: ["#d1a1d1", "#eeacc5", "#7b5685", "#7e7cad", "#a13d73", "#5b41ab", "#e287e2", "#689cc1"],
      indicatingSet: ["#d8e2f6", "#d0b2da", "#d56a8a"],
      gradientSet: ["#eeacc5", "#7b5685"],
      accentColor: "#7b5685"
    }), _defineProperty(_palettes, "carmine", {
      simpleSet: ["#fb7764", "#73d47f", "#fed85e", "#d47683", "#dde392", "#757ab2"],
      indicatingSet: ["#5cb85c", "#f0ad4e", "#d9534f"],
      gradientSet: ["#fb7764", "#73d47f"],
      accentColor: "#f05b41"
    }), _defineProperty(_palettes, "dark moon", {
      simpleSet: ["#4ddac1", "#f4c99a", "#80dd9b", "#f998b3", "#4aaaa0", "#a5aef1"],
      indicatingSet: ["#59d8a4", "#f0ad4e", "#f9517e"],
      gradientSet: ["#4ddac1", "#f4c99a"],
      accentColor: "#3debd3"
    }), _defineProperty(_palettes, "soft blue", {
      simpleSet: ["#7ab8eb", "#97da97", "#facb86", "#e78683", "#839bda", "#4db7be"],
      indicatingSet: ["#5cb85c", "#f0ad4e", "#d9534f"],
      gradientSet: ["#7ab8eb", "#97da97"],
      accentColor: "#7ab8eb"
    }), _defineProperty(_palettes, "dark violet", {
      simpleSet: ["#9c63ff", "#64c064", "#eead51", "#d2504b", "#4b6bbf", "#2da7b0"],
      indicatingSet: ["#5cb85c", "#f0ad4e", "#d9534f"],
      gradientSet: ["#9c63ff", "#64c064"],
      accentColor: "#9c63ff"
    }), _defineProperty(_palettes, "green mist", {
      simpleSet: ["#3cbab2", "#8ed962", "#5b9d95", "#efcc7c", "#f1929f", "#4d8dab"],
      indicatingSet: ["#72d63c", "#ffc852", "#f74a5e"],
      gradientSet: ["#3cbab2", "#8ed962"],
      accentColor: "#3cbab2"
    }), _palettes);
    var currentPaletteName;
    function currentPalette(name) {
      if (void 0 === name) {
        return currentPaletteName || DEFAULT_PALETTE;
      } else {
        name = (0, _utils.normalizeEnum)(name);
        currentPaletteName = name in palettes ? name : void 0;
      }
    }
    function generateColors(palette, count) {
      var options = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {
        keepLastColorInEnd: false
      };
      options.type = options.baseColorSet;
      options.extensionMode = options.paletteExtensionMode;
      return createPalette(palette, options).generateColors(count);
    }
    function getPalette(palette, parameters) {
      parameters = parameters || {};
      palette = palette || (void 0 === currentPaletteName ? parameters.themeDefault : currentPalette());
      var result;
      var type = parameters.type;
      if (_isArray(palette)) {
        return palette.slice(0);
      } else {
        if ((0, _type.isString)(palette)) {
          result = palettes[(0, _utils.normalizeEnum)(palette)];
        }
        if (!result) {
          result = palettes[currentPalette()];
        }
      }
      return type ? result[type].slice(0) : result;
    }
    function registerPalette(name, palette) {
      var item = {};
      var paletteName;
      if (_isArray(palette)) {
        item.simpleSet = palette.slice(0);
      } else if (palette) {
        item.simpleSet = _isArray(palette.simpleSet) ? palette.simpleSet.slice(0) : void 0;
        item.indicatingSet = _isArray(palette.indicatingSet) ? palette.indicatingSet.slice(0) : void 0;
        item.gradientSet = _isArray(palette.gradientSet) ? palette.gradientSet.slice(0) : void 0;
        item.accentColor = palette.accentColor;
      }
      if (!item.accentColor) {
        item.accentColor = item.simpleSet && item.simpleSet[0];
      }
      if (item.simpleSet || item.indicatingSet || item.gradientSet) {
        paletteName = (0, _utils.normalizeEnum)(name);
        (0, _extend.extend)(palettes[paletteName] = palettes[paletteName] || {}, item);
      }
    }
    function getAccentColor(palette, themeDefault) {
      palette = getPalette(palette, {
        themeDefault
      });
      return palette.accentColor || palette[0];
    }
    function RingBuf(buf) {
      var ind = 0;
      this.next = function() {
        var res = buf[ind++];
        if (ind === buf.length) {
          this.reset();
        }
        return res;
      };
      this.reset = function() {
        ind = 0;
      };
    }
    function getAlternateColorsStrategy(palette, parameters) {
      var stepHighlight = parameters.useHighlight ? HIGHLIGHTING_STEP : 0;
      var paletteSteps = new RingBuf([0, stepHighlight, -stepHighlight]);
      var currentPalette2 = [];
      function _reset() {
        var step = paletteSteps.next();
        currentPalette2 = step ? getAlteredPalette(palette, step) : palette.slice(0);
      }
      return {
        getColor: function(index) {
          var color = currentPalette2[index % palette.length];
          if (index % palette.length === palette.length - 1) {
            _reset();
          }
          return color;
        },
        generateColors: function(count) {
          var colors = [];
          count = count || parameters.count;
          for (var i = 0; i < count; i++) {
            colors.push(this.getColor(i));
          }
          return colors;
        },
        reset: function() {
          paletteSteps.reset();
          _reset();
        }
      };
    }
    function getExtrapolateColorsStrategy(palette, parameters) {
      return {
        getColor: function(index, count) {
          var paletteCount = palette.length;
          var cycles = _floor((count - 1) / paletteCount + 1);
          var color = palette[index % paletteCount];
          if (cycles > 1) {
            return function(color2, cycleIndex, cycleCount) {
              var hsl = new _color.default(color2).hsl;
              var l = hsl.l / 100;
              var diapason = cycleCount - 1 / cycleCount;
              var minL = l - 0.5 * diapason;
              var maxL = l + 0.5 * diapason;
              var cycleMiddle = (cycleCount - 1) / 2;
              var cycleDiff = cycleIndex - cycleMiddle;
              if (minL < Math.min(0.5, 0.9 * l)) {
                minL = Math.min(0.5, 0.9 * l);
              }
              if (maxL > Math.max(0.8, l + 0.15 * (1 - l))) {
                maxL = Math.max(0.8, l + 0.15 * (1 - l));
              }
              if (cycleDiff < 0) {
                l -= (minL - l) * cycleDiff / cycleMiddle;
              } else {
                l += cycleDiff / cycleMiddle * (maxL - l);
              }
              hsl.l = 100 * l;
              return _color.default.prototype.fromHSL(hsl).toHex();
            }(color, _floor(index / paletteCount), cycles);
          }
          return color;
        },
        generateColors: function(count) {
          var colors = [];
          count = count || parameters.count;
          for (var i = 0; i < count; i++) {
            colors.push(this.getColor(i, count));
          }
          return colors;
        },
        reset: function() {
        }
      };
    }
    function getColorMixer(palette, parameters) {
      var paletteCount = palette.length;
      var extendedPalette = [];
      function distributeColors(count, colorsCount, startIndex, distribution) {
        var groupSize = Math.floor(count / colorsCount);
        var extraItems = count - colorsCount * groupSize;
        var i = startIndex;
        var middleIndex;
        var size;
        while (i < startIndex + count) {
          size = groupSize;
          if (extraItems > 0) {
            size += 1;
            extraItems--;
          }
          middleIndex = size > 2 ? Math.floor(size / 2) : 0;
          distribution.push(i + middleIndex);
          i += size;
        }
        return distribution.sort(function(a, b) {
          return a - b;
        });
      }
      function getColorAndDistance(arr, startIndex, count) {
        startIndex = (count + startIndex) % count;
        var distance = 0;
        for (var i = startIndex; i < 2 * count; i += 1) {
          var index = (count + i) % count;
          if (arr[index]) {
            return [arr[index], distance];
          }
          distance++;
        }
      }
      function extendPalette(count) {
        if (count <= paletteCount) {
          return palette;
        }
        var result = [];
        var colorInGroups = paletteCount - 2;
        var currentColorIndex = 0;
        var cleanColorIndices = [];
        if (parameters.keepLastColorInEnd) {
          cleanColorIndices = distributeColors(count - 2, colorInGroups, 1, [0, count - 1]);
        } else {
          cleanColorIndices = distributeColors(count - 1, paletteCount - 1, 1, [0]);
        }
        for (var i = 0; i < count; i++) {
          if (cleanColorIndices.indexOf(i) > -1) {
            result[i] = palette[currentColorIndex++];
          }
        }
        result = function(paletteWithEmptyColors, paletteLength) {
          for (var i2 = 0; i2 < paletteLength; i2++) {
            var color = paletteWithEmptyColors[i2];
            if (!color) {
              var color1 = paletteWithEmptyColors[i2 - 1];
              if (!color1) {
                continue;
              } else {
                var c2 = getColorAndDistance(paletteWithEmptyColors, i2, paletteLength);
                var color2 = new _color.default(c2[0]);
                color1 = new _color.default(color1);
                for (var j = 0; j < c2[1]; j++, i2++) {
                  paletteWithEmptyColors[i2] = color1.blend(color2, (j + 1) / (c2[1] + 1)).toHex();
                }
              }
            }
          }
          return paletteWithEmptyColors;
        }(result, count);
        return result;
      }
      return {
        getColor: function(index, count) {
          count = count || parameters.count || paletteCount;
          if (extendedPalette.length !== count) {
            extendedPalette = extendPalette(count);
          }
          return extendedPalette[index % count];
        },
        generateColors: function(count, repeat) {
          count = count || parameters.count || paletteCount;
          if (repeat && count > paletteCount) {
            var colors = extendPalette(paletteCount);
            for (var i = 0; i < count - paletteCount; i++) {
              colors.push(colors[i]);
            }
            return colors;
          } else {
            return paletteCount > 0 ? extendPalette(count).slice(0, count) : [];
          }
        },
        reset: function() {
        }
      };
    }
    function createPalette(palette, parameters, themeDefaultPalette) {
      var paletteObj = {
        dispose: function() {
          this.Bc = null;
        },
        getNextColor: function(count) {
          return this.Bc.getColor(this.Lp++, count);
        },
        generateColors: function(count, parameters2) {
          return this.Bc.generateColors(count, (parameters2 || {}).repeat);
        },
        reset: function() {
          this.Lp = 0;
          this.Bc.reset();
          return this;
        }
      };
      parameters = parameters || {};
      var extensionMode = (parameters.extensionMode || "").toLowerCase();
      var colors = getPalette(palette, {
        type: parameters.type || "simpleSet",
        themeDefault: themeDefaultPalette
      });
      if ("alternate" === extensionMode) {
        paletteObj.Bc = getAlternateColorsStrategy(colors, parameters);
      } else if ("extrapolate" === extensionMode) {
        paletteObj.Bc = getExtrapolateColorsStrategy(colors, parameters);
      } else {
        paletteObj.Bc = getColorMixer(colors, parameters);
      }
      paletteObj.reset();
      return paletteObj;
    }
    function getAlteredPalette(originalPalette, step) {
      var palette = [];
      var i;
      var ii = originalPalette.length;
      for (i = 0; i < ii; ++i) {
        palette.push(getNewColor(originalPalette[i], step));
      }
      return palette;
    }
    function getNewColor(currentColor, step) {
      var newColor = new _color.default(currentColor).alter(step);
      var lightness = getLightness(newColor);
      if (lightness > 200 || lightness < 55) {
        newColor = new _color.default(currentColor).alter(-step / 2);
      }
      return newColor.toHex();
    }
    function getLightness(color) {
      return 0.3 * color.r + 0.59 * color.g + 0.11 * color.b;
    }
    function getDiscretePalette(source, size, themeDefaultPalette) {
      var palette = size > 0 ? createDiscreteColors(getPalette(source, {
        type: "gradientSet",
        themeDefault: themeDefaultPalette
      }), size) : [];
      return {
        getColor: function(index) {
          return palette[index] || null;
        }
      };
    }
    function createDiscreteColors(source, count) {
      var colorCount = count - 1;
      var sourceCount = source.length - 1;
      var colors = [];
      var gradient = [];
      var i;
      function addColor(pos) {
        var k = sourceCount * pos;
        var kl = _floor(k);
        var kr = _ceil(k);
        gradient.push(colors[kl].blend(colors[kr], k - kl).toHex());
      }
      for (i = 0; i <= sourceCount; ++i) {
        colors.push(new _color.default(source[i]));
      }
      if (colorCount > 0) {
        for (i = 0; i <= colorCount; ++i) {
          addColor(i / colorCount);
        }
      } else {
        addColor(0.5);
      }
      return gradient;
    }
    function getGradientPalette(source, themeDefaultPalette) {
      var palette = getPalette(source, {
        type: "gradientSet",
        themeDefault: themeDefaultPalette
      });
      var color1 = new _color.default(palette[0]);
      var color2 = new _color.default(palette[1]);
      return {
        getColor: function(ratio) {
          return 0 <= ratio && ratio <= 1 ? color1.blend(color2, ratio).toHex() : null;
        }
      };
    }
  }
});

// node_modules/devextreme/cjs/core/utils/ready_callbacks.js
var require_ready_callbacks = __commonJS({
  "node_modules/devextreme/cjs/core/utils/ready_callbacks.js"(exports, module) {
    "use strict";
    exports.default = void 0;
    var _dom_adapter = _interopRequireDefault(require_dom_adapter());
    var _dependency_injector = _interopRequireDefault(require_dependency_injector());
    var _window = require_window();
    var _call_once = _interopRequireDefault(require_call_once());
    function _interopRequireDefault(obj) {
      return obj && obj.j ? obj : {
        default: obj
      };
    }
    var callbacks = [];
    var subscribeReady = (0, _call_once.default)(function() {
      var removeListener = _dom_adapter.default.listen(_dom_adapter.default.getDocument(), "DOMContentLoaded", function() {
        readyCallbacks.fire();
        removeListener();
      });
    });
    var readyCallbacks = {
      add: function(callback) {
        var windowExists = (0, _window.hasWindow)();
        if (windowExists && "loading" !== _dom_adapter.default.getReadyState()) {
          callback();
        } else {
          callbacks.push(callback);
          windowExists && subscribeReady();
        }
      },
      fire: function() {
        callbacks.forEach(function(callback) {
          return callback();
        });
        callbacks = [];
      }
    };
    var _default = (0, _dependency_injector.default)(readyCallbacks);
    exports.default = _default;
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/devextreme/cjs/core/utils/resize_callbacks.js
var require_resize_callbacks = __commonJS({
  "node_modules/devextreme/cjs/core/utils/resize_callbacks.js"(exports, module) {
    "use strict";
    exports.default = void 0;
    var _window = require_window();
    var _dom_adapter = _interopRequireDefault(require_dom_adapter());
    var _callbacks = _interopRequireDefault(require_callbacks());
    var _ready_callbacks = _interopRequireDefault(require_ready_callbacks());
    var _call_once = _interopRequireDefault(require_call_once());
    function _interopRequireDefault(obj) {
      return obj && obj.j ? obj : {
        default: obj
      };
    }
    var resizeCallbacks = function() {
      var prevSize;
      var callbacks = (0, _callbacks.default)();
      var originalCallbacksAdd = callbacks.add;
      var originalCallbacksRemove = callbacks.remove;
      if (!(0, _window.hasWindow)()) {
        return callbacks;
      }
      var formatSize = function() {
        var window2 = (0, _window.getWindow)();
        return {
          width: window2.innerWidth,
          height: window2.innerHeight
        };
      };
      var handleResize = function() {
        var now = formatSize();
        if (now.width === prevSize.width && now.height === prevSize.height) {
          return;
        }
        var changedDimension;
        if (now.width === prevSize.width) {
          changedDimension = "height";
        }
        if (now.height === prevSize.height) {
          changedDimension = "width";
        }
        prevSize = now;
        callbacks.fire(changedDimension);
      };
      var setPrevSize = (0, _call_once.default)(function() {
        prevSize = formatSize();
      });
      var removeListener;
      callbacks.add = function() {
        var result = originalCallbacksAdd.apply(callbacks, arguments);
        setPrevSize();
        _ready_callbacks.default.add(function() {
          if (!removeListener && callbacks.has()) {
            removeListener = _dom_adapter.default.listen((0, _window.getWindow)(), "resize", handleResize);
          }
        });
        return result;
      };
      callbacks.remove = function() {
        var result = originalCallbacksRemove.apply(callbacks, arguments);
        if (!callbacks.has() && removeListener) {
          removeListener();
          removeListener = void 0;
        }
        return result;
      };
      return callbacks;
    }();
    var _default = resizeCallbacks;
    exports.default = _default;
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/devextreme/cjs/core/events_strategy.js
var require_events_strategy = __commonJS({
  "node_modules/devextreme/cjs/core/events_strategy.js"(exports) {
    "use strict";
    exports.EventsStrategy = void 0;
    var _callbacks = _interopRequireDefault(require_callbacks());
    var _iterator = require_iterator();
    var _type = require_type();
    function _interopRequireDefault(obj) {
      return obj && obj.j ? obj : {
        default: obj
      };
    }
    var EventsStrategy = function() {
      function EventsStrategy2(owner) {
        var options = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
        this.Cc = {};
        this.T = owner;
        this.e = options;
      }
      EventsStrategy2.create = function(owner, strategy) {
        if (strategy) {
          return (0, _type.isFunction)(strategy) ? strategy(owner) : strategy;
        } else {
          return new EventsStrategy2(owner);
        }
      };
      var _proto = EventsStrategy2.prototype;
      _proto.hasEvent = function(eventName) {
        var callbacks = this.Cc[eventName];
        return callbacks ? callbacks.has() : false;
      };
      _proto.fireEvent = function(eventName, eventArgs) {
        var callbacks = this.Cc[eventName];
        if (callbacks) {
          callbacks.fireWith(this.T, eventArgs);
        }
        return this.T;
      };
      _proto.on = function(eventName, eventHandler) {
        var _this = this;
        if ((0, _type.isPlainObject)(eventName)) {
          (0, _iterator.each)(eventName, function(e, h) {
            _this.on(e, h);
          });
        } else {
          var callbacks = this.Cc[eventName];
          if (!callbacks) {
            callbacks = (0, _callbacks.default)({
              syncStrategy: this.e.syncStrategy
            });
            this.Cc[eventName] = callbacks;
          }
          var addFn = callbacks.originalAdd || callbacks.add;
          addFn.call(callbacks, eventHandler);
        }
      };
      _proto.off = function(eventName, eventHandler) {
        var callbacks = this.Cc[eventName];
        if (callbacks) {
          if ((0, _type.isFunction)(eventHandler)) {
            callbacks.remove(eventHandler);
          } else {
            callbacks.empty();
          }
        }
      };
      _proto.dispose = function() {
        (0, _iterator.each)(this.Cc, function(eventName, event) {
          event.empty();
        });
      };
      return EventsStrategy2;
    }();
    exports.EventsStrategy = EventsStrategy;
  }
});

// node_modules/devextreme/cjs/core/utils/storage.js
var require_storage = __commonJS({
  "node_modules/devextreme/cjs/core/utils/storage.js"(exports) {
    "use strict";
    exports.sessionStorage = void 0;
    var _window = require_window();
    var window2 = (0, _window.getWindow)();
    var getSessionStorage = function() {
      var sessionStorage;
      try {
        sessionStorage = window2.sessionStorage;
      } catch (e) {
      }
      return sessionStorage;
    };
    exports.sessionStorage = getSessionStorage;
  }
});

// node_modules/devextreme/cjs/core/utils/view_port.js
var require_view_port = __commonJS({
  "node_modules/devextreme/cjs/core/utils/view_port.js"(exports) {
    "use strict";
    exports.changeCallback = void 0;
    exports.originalViewPort = originalViewPort;
    exports.value = void 0;
    var _renderer = _interopRequireDefault(require_renderer());
    var _ready_callbacks = _interopRequireDefault(require_ready_callbacks());
    var _callbacks = _interopRequireDefault(require_callbacks());
    function _interopRequireDefault(obj) {
      return obj && obj.j ? obj : {
        default: obj
      };
    }
    var ready = _ready_callbacks.default.add;
    var changeCallback = (0, _callbacks.default)();
    exports.changeCallback = changeCallback;
    var $originalViewPort = (0, _renderer.default)();
    var value = function() {
      var $current;
      return function(element) {
        if (!arguments.length) {
          return $current;
        }
        var $element = (0, _renderer.default)(element);
        $originalViewPort = $element;
        var isNewViewportFound = !!$element.length;
        var prevViewPort = value();
        $current = isNewViewportFound ? $element : (0, _renderer.default)("body");
        changeCallback.fire(isNewViewportFound ? value() : (0, _renderer.default)(), prevViewPort);
      };
    }();
    exports.value = value;
    ready(function() {
      value(".dx-viewport");
    });
    function originalViewPort() {
      return $originalViewPort;
    }
  }
});

// node_modules/devextreme/cjs/core/devices.js
var require_devices = __commonJS({
  "node_modules/devextreme/cjs/core/devices.js"(exports, module) {
    "use strict";
    exports.default = void 0;
    var _size = require_size();
    var _renderer = _interopRequireDefault(require_renderer());
    var _window = require_window();
    var _extend = require_extend();
    var _type = require_type();
    var _iterator = require_iterator();
    var _errors = _interopRequireDefault(require_errors());
    var _callbacks = _interopRequireDefault(require_callbacks());
    var _ready_callbacks = _interopRequireDefault(require_ready_callbacks());
    var _resize_callbacks = _interopRequireDefault(require_resize_callbacks());
    var _events_strategy = require_events_strategy();
    var _storage = require_storage();
    var _view_port = require_view_port();
    var _config = _interopRequireDefault(require_config());
    function _interopRequireDefault(obj) {
      return obj && obj.j ? obj : {
        default: obj
      };
    }
    var navigator2 = (0, _window.getNavigator)();
    var window2 = (0, _window.getWindow)();
    var KNOWN_UA_TABLE = {
      iPhone: "iPhone",
      iPhone5: "iPhone",
      iPhone6: "iPhone",
      iPhone6plus: "iPhone",
      iPad: "iPad",
      iPadMini: "iPad Mini",
      androidPhone: "Android Mobile",
      androidTablet: "Android",
      msSurface: "Windows ARM Tablet PC",
      desktop: "desktop"
    };
    var DEFAULT_DEVICE = {
      deviceType: "desktop",
      platform: "generic",
      version: [],
      phone: false,
      tablet: false,
      android: false,
      ios: false,
      generic: true,
      grade: "A",
      mac: false
    };
    var uaParsers = {
      generic: function(userAgent) {
        var isPhone = /windows phone/i.test(userAgent) || userAgent.match(/WPDesktop/);
        var isTablet = !isPhone && /Windows(.*)arm(.*)Tablet PC/i.test(userAgent);
        var isDesktop = !isPhone && !isTablet && /msapphost/i.test(userAgent);
        var isMac = /((intel|ppc) mac os x)/.test(userAgent.toLowerCase());
        if (!(isPhone || isTablet || isDesktop || isMac)) {
          return;
        }
        return {
          deviceType: isPhone ? "phone" : isTablet ? "tablet" : "desktop",
          platform: "generic",
          version: [],
          grade: "A",
          mac: isMac
        };
      },
      ios: function(userAgent) {
        if (!/ip(hone|od|ad)/i.test(userAgent)) {
          return;
        }
        var isPhone = /ip(hone|od)/i.test(userAgent);
        var matches = userAgent.match(/os (\d+)_(\d+)_?(\d+)?/i);
        var version = matches ? [parseInt(matches[1], 10), parseInt(matches[2], 10), parseInt(matches[3] || 0, 10)] : [];
        var isIPhone4 = 480 === window2.screen.height;
        var grade = isIPhone4 ? "B" : "A";
        return {
          deviceType: isPhone ? "phone" : "tablet",
          platform: "ios",
          version,
          grade
        };
      },
      android: function(userAgent) {
        if (!/android|htc_|silk/i.test(userAgent)) {
          return;
        }
        var isPhone = /mobile/i.test(userAgent);
        var matches = userAgent.match(/android (\d+)\.?(\d+)?\.?(\d+)?/i);
        var version = matches ? [parseInt(matches[1], 10), parseInt(matches[2] || 0, 10), parseInt(matches[3] || 0, 10)] : [];
        var worseThan4_4 = version.length > 1 && (version[0] < 4 || 4 === version[0] && version[1] < 4);
        var grade = worseThan4_4 ? "B" : "A";
        return {
          deviceType: isPhone ? "phone" : "tablet",
          platform: "android",
          version,
          grade
        };
      }
    };
    var Devices = function() {
      function Devices2(options) {
        this.cb = (null === options || void 0 === options ? void 0 : options.window) || window2;
        this.Pj = this.ah();
        this.Gd = void 0;
        this.bh = void 0;
        this.q = new _events_strategy.EventsStrategy(this);
        this.changed = (0, _callbacks.default)();
        if ((0, _window.hasWindow)()) {
          _ready_callbacks.default.add(this.Qj.bind(this));
          _resize_callbacks.default.add(this.Qj.bind(this));
        }
      }
      var _proto = Devices2.prototype;
      _proto.current = function(deviceOrName) {
        if (deviceOrName) {
          this.Gd = this.ah(deviceOrName);
          this.Rj = true;
          this.changed.fire();
          return;
        }
        if (!this.Gd) {
          deviceOrName = void 0;
          try {
            deviceOrName = this.Mp();
          } catch (e) {
            deviceOrName = this.Sj();
          } finally {
            if (!deviceOrName) {
              deviceOrName = this.Sj();
            }
            if (deviceOrName) {
              this.Rj = true;
            }
          }
          this.Gd = this.ah(deviceOrName);
        }
        return this.Gd;
      };
      _proto.real = function(forceDevice) {
        return (0, _extend.extend)({}, this.Pj);
      };
      _proto.orientation = function() {
        return this.bh;
      };
      _proto.isForced = function() {
        return this.Rj;
      };
      _proto.isRippleEmulator = function() {
        return !!this.cb.tinyHippos;
      };
      _proto.Np = function(device) {
        var result = [];
        var realDevice = this.Pj;
        device = device || this.current();
        if (device.deviceType) {
          result.push("dx-device-".concat(device.deviceType));
          if ("desktop" !== device.deviceType) {
            result.push("dx-device-mobile");
          }
        }
        result.push("dx-device-".concat(realDevice.platform));
        if (realDevice.version && realDevice.version.length) {
          result.push("dx-device-".concat(realDevice.platform, "-").concat(realDevice.version[0]));
        }
        if (this.isSimulator()) {
          result.push("dx-simulator");
        }
        if ((0, _config.default)().rtlEnabled) {
          result.push("dx-rtl");
        }
        return result;
      };
      _proto.attachCssClasses = function(element, device) {
        this.Tj = this.Np(device).join(" ");
        (0, _renderer.default)(element).addClass(this.Tj);
      };
      _proto.detachCssClasses = function(element) {
        (0, _renderer.default)(element).removeClass(this.Tj);
      };
      _proto.isSimulator = function() {
        try {
          return this.Op || (0, _window.hasWindow)() && this.cb.top !== this.cb.self && this.cb.top["dx-force-device"] || this.isRippleEmulator();
        } catch (e) {
          return false;
        }
      };
      _proto.forceSimulator = function() {
        this.Op = true;
      };
      _proto.ah = function(deviceName) {
        if ("genericPhone" === deviceName) {
          deviceName = {
            deviceType: "phone",
            platform: "generic",
            generic: true
          };
        }
        if ((0, _type.isPlainObject)(deviceName)) {
          return this.Uj(deviceName);
        } else {
          var ua;
          if (deviceName) {
            ua = KNOWN_UA_TABLE[deviceName];
            if (!ua) {
              throw _errors.default.Error("E0005");
            }
          } else {
            ua = navigator2.userAgent;
          }
          return this.Vj(ua);
        }
      };
      _proto.Mp = function() {
        var result;
        if ((0, _window.hasWindow)() && (this.cb.top["dx-force-device-object"] || this.cb.top["dx-force-device"])) {
          result = this.cb.top["dx-force-device-object"] || this.cb.top["dx-force-device"];
        }
        return result;
      };
      _proto.Sj = function() {
        var sessionStorage = (0, _storage.sessionStorage)();
        if (!sessionStorage) {
          return;
        }
        var deviceOrName = sessionStorage.getItem("dx-force-device");
        try {
          return JSON.parse(deviceOrName);
        } catch (ex) {
          return deviceOrName;
        }
      };
      _proto.Uj = function(config) {
        var result = (0, _extend.extend)({}, DEFAULT_DEVICE, this.Gd, config);
        var shortcuts = {
          phone: "phone" === result.deviceType,
          tablet: "tablet" === result.deviceType,
          android: "android" === result.platform,
          ios: "ios" === result.platform,
          generic: "generic" === result.platform
        };
        return (0, _extend.extend)(result, shortcuts);
      };
      _proto.Vj = function(ua) {
        var config;
        (0, _iterator.each)(uaParsers, function(platform, parser) {
          config = parser(ua);
          return !config;
        });
        if (config) {
          return this.Uj(config);
        }
        return DEFAULT_DEVICE;
      };
      _proto.Pp = function() {
        var $window = (0, _renderer.default)(this.cb);
        var orientation = (0, _size.getHeight)($window) > (0, _size.getWidth)($window) ? "portrait" : "landscape";
        if (this.bh === orientation) {
          return;
        }
        this.bh = orientation;
        this.q.fireEvent("orientationChanged", [{
          orientation
        }]);
      };
      _proto.Qj = function() {
        var windowWidth = (0, _size.getWidth)(this.cb);
        if (this.Qp === windowWidth) {
          return;
        }
        this.Qp = windowWidth;
        this.Pp();
      };
      _proto.on = function(eventName, eventHandler) {
        this.q.on(eventName, eventHandler);
        return this;
      };
      _proto.off = function(eventName, eventHandler) {
        this.q.off(eventName, eventHandler);
        return this;
      };
      return Devices2;
    }();
    var devices = new Devices();
    var viewPortElement = (0, _view_port.value)();
    if (viewPortElement) {
      devices.attachCssClasses(viewPortElement);
    }
    _view_port.changeCallback.add(function(viewPort, prevViewport) {
      devices.detachCssClasses(prevViewport);
      devices.attachCssClasses(viewPort);
    });
    var _default = devices;
    exports.default = _default;
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/devextreme/cjs/ui/themes_callback.js
var require_themes_callback = __commonJS({
  "node_modules/devextreme/cjs/ui/themes_callback.js"(exports) {
    "use strict";
    exports.themeReadyCallback = void 0;
    var _callbacks = _interopRequireDefault(require_callbacks());
    function _interopRequireDefault(obj) {
      return obj && obj.j ? obj : {
        default: obj
      };
    }
    var themeReadyCallback = (0, _callbacks.default)();
    exports.themeReadyCallback = themeReadyCallback;
  }
});

// node_modules/devextreme/cjs/ui/widget/ui.errors.js
var require_ui_errors = __commonJS({
  "node_modules/devextreme/cjs/ui/widget/ui.errors.js"(exports, module) {
    "use strict";
    exports.default = void 0;
    var _error = _interopRequireDefault(require_error());
    var _errors = _interopRequireDefault(require_errors());
    function _interopRequireDefault(obj) {
      return obj && obj.j ? obj : {
        default: obj
      };
    }
    var _default = (0, _error.default)(_errors.default.ERROR_MESSAGES, {
      E1001: "Module '{0}'. Controller '{1}' is already registered",
      E1002: "Module '{0}'. Controller '{1}' does not inherit from DevExpress.ui.dxDataGrid.Controller",
      E1003: "Module '{0}'. View '{1}' is already registered",
      E1004: "Module '{0}'. View '{1}' does not inherit from DevExpress.ui.dxDataGrid.View",
      E1005: "Public method '{0}' is already registered",
      E1006: "Public method '{0}.{1}' does not exist",
      E1007: "State storing cannot be provided due to the restrictions of the browser",
      E1010: "The template does not contain the TextBox widget",
      E1011: 'Items cannot be deleted from the List. Implement the "remove" function in the data store',
      E1012: "Editing type '{0}' with the name '{1}' is unsupported",
      E1016: "Unexpected type of data source is provided for a lookup column",
      E1018: "The 'collapseAll' method cannot be called if you use a remote data source",
      E1019: "Search mode '{0}' is unavailable",
      E1020: "The type cannot be changed after initialization",
      E1021: "{0} '{1}' you are trying to remove does not exist",
      E1022: 'The "markers" option is given an invalid value. Assign an array instead',
      E1023: 'The "routes" option is given an invalid value. Assign an array instead',
      E1025: "This layout is too complex to render",
      E1026: 'The "calculateCustomSummary" function is missing from a field whose "summaryType" option is set to "custom"',
      E1031: "Unknown subscription in the Scheduler widget: '{0}'",
      E1032: "Unknown start date in an appointment: '{0}'",
      E1033: "Unknown step in the date navigator: '{0}'",
      E1034: "The browser does not implement an API for saving files",
      E1035: "The editor cannot be created: {0}",
      E1037: "Invalid structure of grouped data",
      E1038: "The browser does not support local storages for local web pages",
      E1039: "A cell's position cannot be calculated",
      E1040: "The '{0}' key value is not unique within the data array",
      E1041: "The '{0}' script is referenced after the DevExtreme scripts or not referenced at all",
      E1042: "{0} requires the key field to be specified",
      E1043: "Changes cannot be processed due to the incorrectly set key",
      E1044: "The key field specified by the keyExpr option does not match the key field specified in the data store",
      E1045: "Editing requires the key field to be specified in the data store",
      E1046: "The '{0}' key field is not found in data objects",
      E1047: 'The "{0}" field is not found in the fields array',
      E1048: 'The "{0}" operation is not found in the filterOperations array',
      E1049: "Column '{0}': filtering is allowed but the 'dataField' or 'name' option is not specified",
      E1050: "The validationRules option does not apply to third-party editors defined in the editCellTemplate",
      E1051: `HtmlEditor's valueType is "{0}", but the {0} converter was not imported.`,
      E1052: '{0} should have the "dataSource" option specified',
      E1053: 'The "buttons" option accepts an array that contains only objects or string values',
      E1054: "All text editor buttons must have names",
      E1055: 'One or several text editor buttons have invalid or non-unique "name" values',
      E1056: 'The {0} widget does not support buttons of the "{1}" type',
      E1058: 'The "startDayHour" must be earlier than the "endDayHour"',
      E1059: "The following column names are not unique: {0}",
      E1060: "All editable columns must have names",
      W1001: 'The "key" option cannot be modified after initialization',
      W1002: "An item with the key '{0}' does not exist",
      W1003: "A group with the key '{0}' in which you are trying to select items does not exist",
      W1004: "The item '{0}' you are trying to select in the group '{1}' does not exist",
      W1005: "Due to column data types being unspecified, data has been loaded twice in order to apply initial filter settings. To resolve this issue, specify data types for all grid columns.",
      W1006: "The map service returned the following error: '{0}'",
      W1007: "No item with key {0} was found in the data source, but this key was used as the parent key for item {1}",
      W1008: "Cannot scroll to the '{0}' date because it does not exist on the current view",
      W1009: "Searching works only if data is specified using the dataSource option",
      W1010: "The capability to select all items works with source data of plain structure only",
      W1011: 'The "keyExpr" option is not applied when dataSource is not an array',
      W1012: "The '{0}' key field is not found in data objects",
      W1013: 'The "message" field in the dialog component was renamed to "messageHtml". Change your code correspondingly. In addition, if you used HTML code in the message, make sure that it is secure',
      W1014: "The Floating Action Button exceeds the recommended speed dial action count. If you need to display more speed dial actions, increase the maxSpeedDialActionCount option value in the global config.",
      W1015: 'The "cellDuration" should divide the range from the "startDayHour" to the "endDayHour" into even intervals',
      W1016: "The '{0}' field in the HTML Editor toolbar item configuration was renamed to '{1}'. Please make a corresponding change in your code.",
      W1017: "The 'key' property is not specified for a lookup data source. Please specify it to prevent requests for the entire dataset when users filter data.",
      W1018: "Infinite scrolling may not work properly with multiple selection. To use these features together, set 'selection.deferred' to true or set 'selection.selectAllMode' to 'page'.",
      W1019: "Filter query string exceeds maximum length limit of {0} characters.",
      W1020: "hideEvent is ignored when the shading property is true",
      W1021: `The '{0}' is not rendered because none of the DOM elements match the value of the "container" property.`,
      W1022: "{0} JSON parsing error: '{1}'",
      W1023: "Appointments require unique keys. Otherwise, the agenda view may not work correctly."
    });
    exports.default = _default;
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/devextreme/cjs/ui/themes.js
var require_themes = __commonJS({
  "node_modules/devextreme/cjs/ui/themes.js"(exports) {
    "use strict";
    exports.attachCssClasses = attachCssClasses;
    exports.current = current;
    exports.default = void 0;
    exports.detachCssClasses = detachCssClasses;
    exports.init = init;
    exports.initialized = initialized;
    exports.isCompact = isCompact;
    exports.isDark = isDark;
    exports.isGeneric = isGeneric;
    exports.isMaterial = isMaterial;
    exports.isPendingThemeLoaded = isPendingThemeLoaded;
    exports.isWebFontLoaded = isWebFontLoaded;
    exports.ready = themeReady;
    exports.resetTheme = resetTheme;
    exports.setDefaultTimeout = setDefaultTimeout;
    exports.waitForThemeLoad = waitForThemeLoad;
    exports.waitWebFont = waitWebFont;
    var _size = require_size();
    var _devices = _interopRequireDefault(require_devices());
    var _dom_adapter = _interopRequireDefault(require_dom_adapter());
    var _renderer = _interopRequireDefault(require_renderer());
    var _deferred = require_deferred();
    var _html_parser = require_html_parser();
    var _iterator = require_iterator();
    var _ready_callbacks = _interopRequireDefault(require_ready_callbacks());
    var _view_port = require_view_port();
    var _window = require_window();
    var _themes_callback = require_themes_callback();
    var _ui = _interopRequireDefault(require_ui_errors());
    function _interopRequireDefault(obj) {
      return obj && obj.j ? obj : {
        default: obj
      };
    }
    var window2 = (0, _window.getWindow)();
    var ready = _ready_callbacks.default.add;
    var viewPort = _view_port.value;
    var viewPortChanged = _view_port.changeCallback;
    var initDeferred = new _deferred.Deferred();
    var DX_LINK_SELECTOR = "link[rel=dx-theme]";
    var THEME_ATTR = "data-theme";
    var ACTIVE_ATTR = "data-active";
    var DX_HAIRLINES_CLASS = "dx-hairlines";
    var ANY_THEME = "any";
    var context;
    var $activeThemeLink;
    var knownThemes;
    var currentThemeName;
    var pendingThemeName;
    var defaultTimeout = 15e3;
    var THEME_MARKER_PREFIX = "dx.";
    function readThemeMarker() {
      if (!(0, _window.hasWindow)()) {
        return null;
      }
      var element = (0, _renderer.default)("<div>", context).addClass("dx-theme-marker").appendTo(context.documentElement);
      var result;
      try {
        result = window2.getComputedStyle(element.get(0)).fontFamily;
        if (!result) {
          return null;
        }
        result = result.replace(/["']/g, "");
        if (result.substr(0, THEME_MARKER_PREFIX.length) !== THEME_MARKER_PREFIX) {
          return null;
        }
        return result.substr(THEME_MARKER_PREFIX.length);
      } finally {
        element.remove();
      }
    }
    function waitForThemeLoad(themeName) {
      var waitStartTime;
      var timerId;
      var intervalCleared = true;
      pendingThemeName = themeName;
      function handleLoaded() {
        pendingThemeName = null;
        clearInterval(timerId);
        intervalCleared = true;
        _themes_callback.themeReadyCallback.fire();
        _themes_callback.themeReadyCallback.empty();
        initDeferred.resolve();
      }
      if (isPendingThemeLoaded() || !defaultTimeout) {
        handleLoaded();
      } else {
        if (!intervalCleared) {
          if (pendingThemeName) {
            pendingThemeName = themeName;
          }
          return;
        }
        waitStartTime = Date.now();
        intervalCleared = false;
        timerId = setInterval(function() {
          var isLoaded = isPendingThemeLoaded();
          var isTimeout = !isLoaded && Date.now() - waitStartTime > defaultTimeout;
          if (isTimeout) {
            _ui.default.log("W0004", pendingThemeName);
          }
          if (isLoaded || isTimeout) {
            handleLoaded();
          }
        }, 10);
      }
    }
    function isPendingThemeLoaded() {
      if (!pendingThemeName) {
        return true;
      }
      var anyThemePending = pendingThemeName === ANY_THEME;
      if ("resolved" === initDeferred.state() && anyThemePending) {
        return true;
      }
      var themeMarker = readThemeMarker();
      if (themeMarker && anyThemePending) {
        return true;
      }
      return themeMarker === pendingThemeName;
    }
    function processMarkup() {
      var $allThemeLinks = (0, _renderer.default)(DX_LINK_SELECTOR, context);
      if (!$allThemeLinks.length) {
        return;
      }
      knownThemes = {};
      $activeThemeLink = (0, _renderer.default)((0, _html_parser.parseHTML)("<link rel=stylesheet>"), context);
      $allThemeLinks.each(function() {
        var link = (0, _renderer.default)(this, context);
        var fullThemeName = link.attr(THEME_ATTR);
        var url = link.attr("href");
        var isActive = "true" === link.attr(ACTIVE_ATTR);
        knownThemes[fullThemeName] = {
          url,
          isActive
        };
      });
      $allThemeLinks.last().after($activeThemeLink);
      $allThemeLinks.remove();
    }
    function resolveFullThemeName(desiredThemeName) {
      var desiredThemeParts = desiredThemeName ? desiredThemeName.split(".") : [];
      var result = null;
      if (knownThemes) {
        if (desiredThemeName in knownThemes) {
          return desiredThemeName;
        }
        (0, _iterator.each)(knownThemes, function(knownThemeName, themeData) {
          var knownThemeParts = knownThemeName.split(".");
          if (desiredThemeParts[0] && knownThemeParts[0] !== desiredThemeParts[0]) {
            return;
          }
          if (desiredThemeParts[1] && desiredThemeParts[1] !== knownThemeParts[1]) {
            return;
          }
          if (desiredThemeParts[2] && desiredThemeParts[2] !== knownThemeParts[2]) {
            return;
          }
          if (!result || themeData.isActive) {
            result = knownThemeName;
          }
          if (themeData.isActive) {
            return false;
          }
        });
      }
      return result;
    }
    function initContext(newContext) {
      try {
        if (newContext !== context) {
          knownThemes = null;
        }
      } catch (x) {
        knownThemes = null;
      }
      context = newContext;
    }
    function init(options) {
      options = options || {};
      initContext(options.context || _dom_adapter.default.getDocument());
      if (!context) {
        return;
      }
      processMarkup();
      currentThemeName = void 0;
      current(options);
    }
    function current(options) {
      if (!arguments.length) {
        currentThemeName = currentThemeName || readThemeMarker();
        return currentThemeName;
      }
      detachCssClasses(viewPort());
      options = options || {};
      if ("string" === typeof options) {
        options = {
          theme: options
        };
      }
      var isAutoInit = options.Wj;
      var loadCallback = options.loadCallback;
      var currentThemeData;
      currentThemeName = resolveFullThemeName(options.theme || currentThemeName);
      if (currentThemeName) {
        currentThemeData = knownThemes[currentThemeName];
      }
      if (loadCallback) {
        _themes_callback.themeReadyCallback.add(loadCallback);
      }
      if (currentThemeData) {
        $activeThemeLink.attr("href", knownThemes[currentThemeName].url);
        if (_themes_callback.themeReadyCallback.has() || "resolved" !== initDeferred.state() || options.Rp) {
          waitForThemeLoad(currentThemeName);
        }
      } else if (isAutoInit) {
        if ((0, _window.hasWindow)()) {
          waitForThemeLoad(ANY_THEME);
        }
        _themes_callback.themeReadyCallback.fire();
        _themes_callback.themeReadyCallback.empty();
      } else {
        throw _ui.default.Error("E0021", currentThemeName);
      }
      initDeferred.done(function() {
        return attachCssClasses((0, _view_port.originalViewPort)(), currentThemeName);
      });
    }
    function getCssClasses(themeName) {
      themeName = themeName || current();
      var result = [];
      var themeNameParts = themeName && themeName.split(".");
      if (themeNameParts) {
        result.push("dx-theme-" + themeNameParts[0], "dx-theme-" + themeNameParts[0] + "-typography");
        if (themeNameParts.length > 1) {
          result.push("dx-color-scheme-" + themeNameParts[1] + (isMaterial(themeName) ? "-" + themeNameParts[2] : ""));
        }
      }
      return result;
    }
    var themeClasses;
    function attachCssClasses(element, themeName) {
      themeClasses = getCssClasses(themeName).join(" ");
      (0, _renderer.default)(element).addClass(themeClasses);
      !function() {
        var pixelRatio = (0, _window.hasWindow)() && window2.devicePixelRatio;
        if (!pixelRatio || pixelRatio < 2) {
          return;
        }
        var $tester = (0, _renderer.default)("<div>");
        $tester.css("border", ".5px solid transparent");
        (0, _renderer.default)("body").append($tester);
        if (1 === (0, _size.getOuterHeight)($tester)) {
          (0, _renderer.default)(element).addClass(DX_HAIRLINES_CLASS);
          themeClasses += " " + DX_HAIRLINES_CLASS;
        }
        $tester.remove();
      }();
    }
    function detachCssClasses(element) {
      (0, _renderer.default)(element).removeClass(themeClasses);
    }
    function themeReady(callback) {
      _themes_callback.themeReadyCallback.add(callback);
    }
    function isTheme(themeRegExp, themeName) {
      if (!themeName) {
        themeName = currentThemeName || readThemeMarker();
      }
      return new RegExp(themeRegExp).test(themeName);
    }
    function isMaterial(themeName) {
      return isTheme("material", themeName);
    }
    function isGeneric(themeName) {
      return isTheme("generic", themeName);
    }
    function isDark(themeName) {
      return isTheme("dark", themeName);
    }
    function isCompact(themeName) {
      return isTheme("compact", themeName);
    }
    function isWebFontLoaded(text, fontWeight) {
      var document2 = _dom_adapter.default.getDocument();
      var testElement = document2.createElement("span");
      testElement.style.position = "absolute";
      testElement.style.top = "-9999px";
      testElement.style.left = "-9999px";
      testElement.style.visibility = "hidden";
      testElement.style.fontFamily = "Arial";
      testElement.style.fontSize = "250px";
      testElement.style.fontWeight = fontWeight;
      testElement.innerHTML = text;
      document2.body.appendChild(testElement);
      var etalonFontWidth = testElement.offsetWidth;
      testElement.style.fontFamily = "Roboto, RobotoFallback, Arial";
      var testedFontWidth = testElement.offsetWidth;
      testElement.parentNode.removeChild(testElement);
      return etalonFontWidth !== testedFontWidth;
    }
    function waitWebFont(text, fontWeight) {
      return new Promise(function(resolve) {
        var clear = function() {
          clearInterval(intervalId);
          clearTimeout(timeoutId);
          resolve();
        };
        var intervalId = setInterval(function() {
          if (isWebFontLoaded(text, fontWeight)) {
            clear();
          }
        }, 15);
        var timeoutId = setTimeout(clear, 2e3);
      });
    }
    function autoInit() {
      init({
        Wj: true,
        Rp: true
      });
      if ((0, _renderer.default)(DX_LINK_SELECTOR, context).length) {
        throw _ui.default.Error("E0022");
      }
    }
    if ((0, _window.hasWindow)()) {
      autoInit();
    } else {
      ready(autoInit);
    }
    viewPortChanged.add(function(viewPort2, prevViewPort) {
      initDeferred.done(function() {
        detachCssClasses(prevViewPort);
        attachCssClasses(viewPort2);
      });
    });
    _devices.default.changed.add(function() {
      init({
        Wj: true
      });
    });
    function resetTheme() {
      $activeThemeLink && $activeThemeLink.attr("href", "about:blank");
      currentThemeName = null;
      pendingThemeName = null;
      initDeferred = new _deferred.Deferred();
    }
    function initialized(callback) {
      initDeferred.done(callback);
    }
    function setDefaultTimeout(timeout) {
      defaultTimeout = timeout;
    }
    var _default = {
      setDefaultTimeout,
      initialized,
      resetTheme,
      ready: themeReady,
      waitWebFont,
      isWebFontLoaded,
      isCompact,
      isDark,
      isGeneric,
      isMaterial,
      detachCssClasses,
      attachCssClasses,
      current,
      waitForThemeLoad,
      isPendingThemeLoaded
    };
    exports.default = _default;
  }
});

// node_modules/devextreme/cjs/viz/core/themes/generic.light.js
var require_generic_light = __commonJS({
  "node_modules/devextreme/cjs/viz/core/themes/generic.light.js"(exports, module) {
    "use strict";
    exports.default = void 0;
    var WHITE = "#ffffff";
    var BLACK = "#000000";
    var LIGHT_GREY = "#d3d3d3";
    var GREY_GREEN = "#303030";
    var SOME_GREY = "#2b2b2b";
    var RED = "#ff0000";
    var PRIMARY_TITLE_COLOR = "#232323";
    var SECONDARY_TITLE_COLOR = "#767676";
    var NONE = "none";
    var SOLID = "solid";
    var TOP = "top";
    var RIGHT = "right";
    var BOTTOM = "bottom";
    var LEFT = "left";
    var CENTER = "center";
    var INSIDE = "inside";
    var OUTSIDE = "outside";
    var _default = [{
      theme: {
        name: "generic.light",
        isDefault: true,
        font: {
          color: SECONDARY_TITLE_COLOR,
          family: "'Segoe UI', 'Helvetica Neue', 'Trebuchet MS', Verdana, sans-serif",
          weight: 400,
          size: 12,
          cursor: "default"
        },
        redrawOnResize: true,
        backgroundColor: WHITE,
        primaryTitleColor: PRIMARY_TITLE_COLOR,
        secondaryTitleColor: SECONDARY_TITLE_COLOR,
        gridColor: LIGHT_GREY,
        axisColor: SECONDARY_TITLE_COLOR,
        title: {
          backgroundColor: WHITE,
          font: {
            size: 28,
            family: "'Segoe UI Light', 'Helvetica Neue Light', 'Segoe UI', 'Helvetica Neue', 'Trebuchet MS', Verdana, sans-serif",
            weight: 200
          },
          subtitle: {
            font: {
              size: 16
            },
            offset: 0,
            wordWrap: "normal",
            textOverflow: "ellipsis"
          },
          wordWrap: "normal",
          textOverflow: "ellipsis"
        },
        loadingIndicator: {
          text: "Loading..."
        },
        export: {
          backgroundColor: WHITE,
          margin: 10,
          font: {
            size: 14,
            color: PRIMARY_TITLE_COLOR,
            weight: 400
          },
          button: {
            margin: {
              top: 8,
              left: 10,
              right: 10,
              bottom: 8
            },
            default: {
              color: "#333",
              borderColor: "#ddd",
              backgroundColor: WHITE
            },
            hover: {
              color: "#333",
              borderColor: "#bebebe",
              backgroundColor: "#e6e6e6"
            },
            focus: {
              color: BLACK,
              borderColor: "#9d9d9d",
              backgroundColor: "#e6e6e6"
            },
            active: {
              color: "#333",
              borderColor: "#9d9d9d",
              backgroundColor: "#d4d4d4"
            }
          },
          shadowColor: LIGHT_GREY
        },
        tooltip: {
          enabled: false,
          border: {
            width: 1,
            color: LIGHT_GREY,
            dashStyle: SOLID,
            visible: true
          },
          font: {
            color: PRIMARY_TITLE_COLOR
          },
          color: WHITE,
          arrowLength: 10,
          paddingLeftRight: 18,
          paddingTopBottom: 15,
          textAlignment: "center",
          shared: false,
          location: CENTER,
          shadow: {
            opacity: 0.4,
            offsetX: 0,
            offsetY: 4,
            blur: 2,
            color: BLACK
          },
          interactive: false
        },
        legend: {
          hoverMode: "includePoints",
          verticalAlignment: TOP,
          horizontalAlignment: RIGHT,
          position: OUTSIDE,
          visible: true,
          margin: 10,
          markerSize: 12,
          border: {
            visible: false,
            width: 1,
            cornerRadius: 0,
            dashStyle: SOLID
          },
          paddingLeftRight: 20,
          paddingTopBottom: 15,
          columnCount: 0,
          rowCount: 0,
          columnItemSpacing: 20,
          rowItemSpacing: 8,
          title: {
            backgroundColor: WHITE,
            margin: {
              left: 0,
              bottom: 9,
              right: 0,
              top: 0
            },
            font: {
              size: 18,
              weight: 200
            },
            subtitle: {
              offset: 0,
              font: {
                size: 14
              },
              wordWrap: "none",
              textOverflow: "ellipsis"
            },
            wordWrap: "none",
            textOverflow: "ellipsis"
          }
        },
        "chart:common": {
          animation: {
            enabled: true,
            duration: 1e3,
            easing: "easeOutCubic",
            maxPointCountSupported: 300
          },
          commonSeriesSettings: {
            border: {
              visible: false,
              width: 2
            },
            showInLegend: true,
            visible: true,
            hoverMode: "nearestPoint",
            selectionMode: "includePoints",
            hoverStyle: {
              hatching: {
                direction: RIGHT,
                width: 2,
                step: 6,
                opacity: 0.75
              },
              highlight: true,
              border: {
                visible: false,
                width: 3
              }
            },
            selectionStyle: {
              hatching: {
                direction: RIGHT,
                width: 2,
                step: 6,
                opacity: 0.5
              },
              highlight: true,
              border: {
                visible: false,
                width: 3
              }
            },
            valueErrorBar: {
              displayMode: "auto",
              value: 1,
              color: BLACK,
              lineWidth: 2,
              edgeLength: 8
            },
            label: {
              visible: false,
              alignment: CENTER,
              rotationAngle: 0,
              horizontalOffset: 0,
              verticalOffset: 0,
              radialOffset: 0,
              showForZeroValues: true,
              customizeText: void 0,
              maxLabelCount: void 0,
              position: OUTSIDE,
              font: {
                color: WHITE
              },
              border: {
                visible: false,
                width: 1,
                color: LIGHT_GREY,
                dashStyle: SOLID
              },
              connector: {
                visible: false,
                width: 1
              }
            }
          },
          seriesSelectionMode: "single",
          pointSelectionMode: "single",
          equalRowHeight: true,
          dataPrepareSettings: {
            checkTypeForAllData: false,
            convertToAxisDataType: true,
            sortingMethod: true
          },
          title: {
            margin: 10
          },
          adaptiveLayout: {
            width: 80,
            height: 80,
            keepLabels: true
          },
          Hd: {
            legend: {
              itemTextPosition: LEFT
            }
          },
          resolveLabelOverlapping: NONE
        },
        "chart:common:axis": {
          visible: true,
          valueMarginsEnabled: true,
          placeholderSize: null,
          logarithmBase: 10,
          discreteAxisDivisionMode: "betweenLabels",
          aggregatedPointsPosition: "betweenTicks",
          width: 1,
          label: {
            visible: true
          },
          grid: {
            visible: false,
            width: 1
          },
          minorGrid: {
            visible: false,
            width: 1,
            opacity: 0.3
          },
          tick: {
            visible: true,
            width: 1,
            length: 7,
            shift: 3
          },
          minorTick: {
            visible: false,
            width: 1,
            opacity: 0.3,
            length: 7,
            shift: 3
          },
          stripStyle: {
            paddingLeftRight: 10,
            paddingTopBottom: 5
          },
          constantLineStyle: {
            width: 1,
            color: BLACK,
            dashStyle: SOLID,
            label: {
              visible: true,
              position: INSIDE
            }
          },
          marker: {
            label: {}
          }
        },
        "chart:common:annotation": {
          font: {
            color: "#333333"
          },
          tooltipEnabled: true,
          border: {
            width: 1,
            color: "#dddddd",
            dashStyle: SOLID,
            visible: true
          },
          color: WHITE,
          opacity: 0.9,
          arrowLength: 14,
          arrowWidth: 14,
          paddingLeftRight: 10,
          paddingTopBottom: 10,
          shadow: {
            opacity: 0.15,
            offsetX: 0,
            offsetY: 1,
            blur: 4,
            color: BLACK
          },
          image: {
            width: 30,
            height: 30
          },
          wordWrap: "normal",
          textOverflow: "ellipsis",
          allowDragging: false
        },
        chart: {
          commonSeriesSettings: {
            type: "line",
            stack: "default",
            aggregation: {
              enabled: void 0
            },
            point: {
              visible: true,
              symbol: "circle",
              size: 12,
              border: {
                visible: false,
                width: 1
              },
              hoverMode: "onlyPoint",
              selectionMode: "onlyPoint",
              hoverStyle: {
                border: {
                  visible: true,
                  width: 4
                }
              },
              selectionStyle: {
                border: {
                  visible: true,
                  width: 4
                }
              }
            },
            scatter: {},
            line: {
              width: 2,
              dashStyle: SOLID,
              hoverStyle: {
                width: 3,
                hatching: {
                  direction: NONE
                },
                highlight: false
              },
              selectionStyle: {
                width: 3
              }
            },
            stackedline: {
              width: 2,
              dashStyle: SOLID,
              hoverStyle: {
                width: 3,
                hatching: {
                  direction: NONE
                },
                highlight: false
              },
              selectionStyle: {
                width: 3
              }
            },
            stackedspline: {
              width: 2,
              dashStyle: SOLID,
              hoverStyle: {
                width: 3,
                hatching: {
                  direction: NONE
                },
                highlight: false
              },
              selectionStyle: {
                width: 3
              }
            },
            fullstackedline: {
              width: 2,
              dashStyle: SOLID,
              hoverStyle: {
                width: 3,
                hatching: {
                  direction: NONE
                },
                highlight: false
              },
              selectionStyle: {
                width: 3
              }
            },
            fullstackedspline: {
              width: 2,
              dashStyle: SOLID,
              hoverStyle: {
                width: 3,
                hatching: {
                  direction: NONE
                },
                highlight: false
              },
              selectionStyle: {
                width: 3
              }
            },
            stepline: {
              width: 2,
              dashStyle: SOLID,
              hoverStyle: {
                width: 3,
                hatching: {
                  direction: NONE
                },
                highlight: false
              },
              selectionStyle: {
                width: 3
              }
            },
            area: {
              point: {
                visible: false
              },
              opacity: 0.5
            },
            stackedarea: {
              point: {
                visible: false
              },
              opacity: 0.5
            },
            fullstackedarea: {
              point: {
                visible: false
              },
              opacity: 0.5
            },
            fullstackedsplinearea: {
              point: {
                visible: false
              },
              opacity: 0.5
            },
            steparea: {
              border: {
                visible: true,
                width: 2
              },
              point: {
                visible: false
              },
              hoverStyle: {
                border: {
                  visible: true,
                  width: 3
                }
              },
              selectionStyle: {
                border: {
                  visible: true,
                  width: 3
                }
              },
              opacity: 0.5
            },
            spline: {
              width: 2,
              hoverStyle: {
                width: 3,
                hatching: {
                  direction: NONE
                },
                highlight: false
              },
              selectionStyle: {
                width: 3
              }
            },
            splinearea: {
              point: {
                visible: false
              },
              opacity: 0.5
            },
            stackedsplinearea: {
              point: {
                visible: false
              },
              opacity: 0.5
            },
            bar: {
              cornerRadius: 0,
              point: {
                hoverStyle: {
                  border: {
                    visible: false
                  }
                },
                selectionStyle: {
                  border: {
                    visible: false
                  }
                }
              }
            },
            stackedbar: {
              cornerRadius: 0,
              point: {
                hoverStyle: {
                  border: {
                    visible: false
                  }
                },
                selectionStyle: {
                  border: {
                    visible: false
                  }
                }
              },
              label: {
                position: INSIDE
              }
            },
            fullstackedbar: {
              cornerRadius: 0,
              point: {
                hoverStyle: {
                  border: {
                    visible: false
                  }
                },
                selectionStyle: {
                  border: {
                    visible: false
                  }
                }
              },
              label: {
                position: INSIDE
              }
            },
            rangebar: {
              cornerRadius: 0,
              point: {
                hoverStyle: {
                  border: {
                    visible: false
                  }
                },
                selectionStyle: {
                  border: {
                    visible: false
                  }
                }
              }
            },
            rangearea: {
              point: {
                visible: false
              },
              opacity: 0.5
            },
            rangesplinearea: {
              point: {
                visible: false
              },
              opacity: 0.5
            },
            bubble: {
              opacity: 0.5,
              point: {
                hoverStyle: {
                  border: {
                    visible: false
                  }
                },
                selectionStyle: {
                  border: {
                    visible: false
                  }
                }
              }
            },
            candlestick: {
              width: 1,
              reduction: {
                color: RED
              },
              hoverStyle: {
                width: 3,
                hatching: {
                  direction: NONE
                },
                highlight: false
              },
              selectionStyle: {
                width: 3,
                highlight: false
              },
              point: {
                border: {
                  visible: true
                }
              }
            },
            stock: {
              width: 1,
              reduction: {
                color: RED
              },
              hoverStyle: {
                width: 3,
                hatching: {
                  direction: NONE
                },
                highlight: false
              },
              selectionStyle: {
                width: 3,
                highlight: false
              },
              point: {
                border: {
                  visible: true
                }
              }
            }
          },
          crosshair: {
            enabled: false,
            color: "#f05b41",
            width: 1,
            dashStyle: SOLID,
            label: {
              visible: false,
              font: {
                color: WHITE,
                size: 12
              }
            },
            verticalLine: {
              visible: true
            },
            horizontalLine: {
              visible: true
            }
          },
          commonAxisSettings: {
            multipleAxesSpacing: 5,
            forceUserTickInterval: false,
            breakStyle: {
              width: 5,
              color: "#ababab",
              line: "waved"
            },
            label: {
              displayMode: "standard",
              overlappingBehavior: "hide",
              indentFromAxis: 10,
              wordWrap: "normal",
              textOverflow: "none"
            },
            title: {
              font: {
                size: 16
              },
              margin: 6,
              alignment: CENTER
            },
            constantLineStyle: {
              paddingLeftRight: 10,
              paddingTopBottom: 10
            }
          },
          horizontalAxis: {
            position: BOTTOM,
            axisDivisionFactor: 70,
            label: {
              rotationAngle: 90,
              staggeringSpacing: 5,
              alignment: CENTER
            },
            stripStyle: {
              label: {
                horizontalAlignment: CENTER,
                verticalAlignment: TOP
              }
            },
            constantLineStyle: {
              label: {
                horizontalAlignment: RIGHT,
                verticalAlignment: TOP
              }
            },
            constantLines: []
          },
          verticalAxis: {
            position: LEFT,
            axisDivisionFactor: 40,
            label: {
              alignment: RIGHT
            },
            stripStyle: {
              label: {
                horizontalAlignment: LEFT,
                verticalAlignment: CENTER
              }
            },
            constantLineStyle: {
              label: {
                horizontalAlignment: LEFT,
                verticalAlignment: TOP
              }
            },
            constantLines: []
          },
          argumentAxis: {
            endOnTick: false,
            aggregateByCategory: true,
            workWeek: [1, 2, 3, 4, 5]
          },
          valueAxis: {
            grid: {
              visible: true
            },
            autoBreaksEnabled: false,
            maxAutoBreakCount: 4
          },
          commonPaneSettings: {
            backgroundColor: NONE,
            border: {
              color: LIGHT_GREY,
              width: 1,
              visible: false,
              top: true,
              bottom: true,
              left: true,
              right: true,
              dashStyle: SOLID
            }
          },
          scrollBar: {
            visible: false,
            offset: 5,
            color: "gray",
            width: 10
          },
          adjustOnZoom: true,
          autoHidePointMarkers: true,
          rotated: false,
          synchronizeMultiAxes: true,
          stickyHovering: true,
          barGroupPadding: 0.3,
          minBubbleSize: 12,
          maxBubbleSize: 0.2,
          zoomAndPan: {
            dragBoxStyle: {
              color: "#2a2a2a",
              opacity: 0.2
            },
            panKey: "shift",
            allowMouseWheel: true,
            allowTouchGestures: true
          }
        },
        pie: {
          innerRadius: 0.5,
          minDiameter: 0.5,
          type: "pie",
          dataPrepareSettings: {
            Sp: true
          },
          commonSeriesSettings: {
            pie: {
              border: {
                visible: false,
                width: 2,
                color: WHITE
              },
              hoverStyle: {
                hatching: {
                  direction: RIGHT,
                  width: 4,
                  step: 10,
                  opacity: 0.75
                },
                highlight: true,
                border: {
                  visible: false,
                  width: 2
                }
              },
              selectionStyle: {
                hatching: {
                  direction: RIGHT,
                  width: 4,
                  step: 10,
                  opacity: 0.5
                },
                highlight: true,
                border: {
                  visible: false,
                  width: 2
                }
              }
            },
            doughnut: {
              border: {
                visible: false,
                width: 2,
                color: WHITE
              },
              hoverStyle: {
                hatching: {
                  direction: RIGHT,
                  width: 4,
                  step: 10,
                  opacity: 0.75
                },
                highlight: true,
                border: {
                  visible: false,
                  width: 2
                }
              },
              selectionStyle: {
                hatching: {
                  direction: RIGHT,
                  width: 4,
                  step: 10,
                  opacity: 0.5
                },
                highlight: true,
                border: {
                  visible: false,
                  width: 2
                }
              }
            },
            donut: {
              border: {
                visible: false,
                width: 2,
                color: WHITE
              },
              hoverStyle: {
                hatching: {
                  direction: RIGHT,
                  width: 4,
                  step: 10,
                  opacity: 0.75
                },
                highlight: true,
                border: {
                  visible: false,
                  width: 2
                }
              },
              selectionStyle: {
                hatching: {
                  direction: RIGHT,
                  width: 4,
                  step: 10,
                  opacity: 0.5
                },
                highlight: true,
                border: {
                  visible: false,
                  width: 2
                }
              }
            },
            label: {
              textOverflow: "ellipsis",
              wordWrap: "normal"
            }
          },
          legend: {
            hoverMode: "allArgumentPoints",
            backgroundColor: NONE
          },
          adaptiveLayout: {
            keepLabels: false
          }
        },
        gauge: {
          scale: {
            tick: {
              visible: true,
              length: 5,
              width: 2,
              opacity: 1
            },
            minorTick: {
              visible: false,
              length: 3,
              width: 1,
              opacity: 1
            },
            label: {
              visible: true,
              alignment: CENTER,
              hideFirstOrLast: "last",
              overlappingBehavior: "hide"
            },
            position: TOP,
            endOnTick: false
          },
          rangeContainer: {
            offset: 0,
            width: 5,
            backgroundColor: "#808080"
          },
          valueIndicators: {
            _b: {
              color: "#c2c2c2"
            },
            rangebar: {
              space: 2,
              size: 10,
              color: "#cbc5cf",
              backgroundColor: NONE,
              text: {
                indent: 0,
                font: {
                  size: 14,
                  color: null
                }
              }
            },
            twocolorneedle: {
              secondColor: "#e18e92"
            },
            trianglemarker: {
              space: 2,
              length: 14,
              width: 13,
              color: "#8798a5"
            },
            textcloud: {
              arrowLength: 5,
              horizontalOffset: 6,
              verticalOffset: 3,
              color: "#679ec5",
              text: {
                font: {
                  color: WHITE,
                  size: 18
                }
              }
            }
          },
          indicator: {
            hasPositiveMeaning: true,
            layout: {
              horizontalAlignment: CENTER,
              verticalAlignment: BOTTOM
            },
            text: {
              font: {
                size: 18
              }
            }
          },
          qy: {
            scale: {
              scaleDivisionFactor: 17,
              orientation: OUTSIDE,
              label: {
                indentFromTick: 10
              }
            },
            rangeContainer: {
              orientation: OUTSIDE
            },
            valueIndicatorType: "rectangleneedle",
            subvalueIndicatorType: "trianglemarker",
            valueIndicators: {
              Tp: "rectangleneedle",
              _b: {
                offset: 20,
                indentFromCenter: 0,
                width: 2,
                spindleSize: 14,
                spindleGapSize: 10,
                beginAdaptingAtRadius: 50
              },
              triangleneedle: {
                width: 4
              },
              twocolorneedle: {
                space: 2,
                secondFraction: 0.4
              },
              rangebar: {
                offset: 30
              },
              trianglemarker: {
                offset: 6
              },
              textcloud: {
                offset: -6
              }
            }
          },
          sy: {
            scale: {
              scaleDivisionFactor: 25,
              horizontalOrientation: RIGHT,
              verticalOrientation: BOTTOM,
              label: {
                indentFromTick: -10
              }
            },
            rangeContainer: {
              horizontalOrientation: RIGHT,
              verticalOrientation: BOTTOM
            },
            valueIndicatorType: "rangebar",
            subvalueIndicatorType: "trianglemarker",
            valueIndicators: {
              Tp: "rectangle",
              _b: {
                offset: 2.5,
                length: 15,
                width: 15
              },
              rectangle: {
                width: 10
              },
              rangebar: {
                offset: 10,
                horizontalOrientation: RIGHT,
                verticalOrientation: BOTTOM
              },
              trianglemarker: {
                offset: 10,
                horizontalOrientation: LEFT,
                verticalOrientation: TOP
              },
              textcloud: {
                offset: -1,
                horizontalOrientation: LEFT,
                verticalOrientation: TOP
              }
            }
          }
        },
        barGauge: {
          backgroundColor: "#e0e0e0",
          relativeInnerRadius: 0.3,
          barSpacing: 4,
          resolveLabelOverlapping: "hide",
          label: {
            indent: 20,
            connectorWidth: 2,
            font: {
              size: 16
            }
          },
          legend: {
            visible: false
          },
          indicator: {
            hasPositiveMeaning: true,
            layout: {
              horizontalAlignment: CENTER,
              verticalAlignment: BOTTOM
            },
            text: {
              font: {
                size: 18
              }
            }
          }
        },
        rangeSelector: {
          scale: {
            valueMarginsEnabled: true,
            width: 1,
            color: BLACK,
            opacity: 0.1,
            showCustomBoundaryTicks: true,
            aggregateByCategory: true,
            label: {
              overlappingBehavior: "hide",
              alignment: CENTER,
              visible: true,
              topIndent: 7,
              font: {
                size: 11
              }
            },
            tick: {
              width: 1,
              color: BLACK,
              opacity: 0.17,
              visible: true,
              length: 12
            },
            minorTick: {
              width: 1,
              color: BLACK,
              opacity: 0.05,
              visible: true,
              length: 12
            },
            marker: {
              width: 1,
              color: "#000000",
              opacity: 0.1,
              visible: true,
              separatorHeight: 33,
              topIndent: 10,
              textLeftIndent: 7,
              textTopIndent: 11,
              label: {}
            },
            logarithmBase: 10,
            workWeek: [1, 2, 3, 4, 5],
            breakStyle: {
              width: 5,
              color: "#ababab",
              line: "waved"
            },
            endOnTick: false
          },
          selectedRangeColor: "#606060",
          sliderMarker: {
            visible: true,
            paddingTopBottom: 2,
            paddingLeftRight: 4,
            color: "#606060",
            invalidRangeColor: RED,
            font: {
              color: WHITE,
              size: 11
            }
          },
          sliderHandle: {
            width: 1,
            color: BLACK,
            opacity: 0.2
          },
          shutter: {
            opacity: 0.75
          },
          background: {
            color: "#c0bae1",
            visible: true,
            image: {
              location: "full"
            }
          },
          behavior: {
            snapToTicks: true,
            animationEnabled: true,
            moveSelectedRangeByClick: true,
            manualRangeSelectionEnabled: true,
            allowSlidersSwap: true,
            valueChangeMode: "onHandleRelease"
          },
          redrawOnResize: true,
          chart: {
            barGroupPadding: 0.3,
            minBubbleSize: 12,
            maxBubbleSize: 0.2,
            topIndent: 0.1,
            bottomIndent: 0,
            valueAxis: {
              inverted: false,
              logarithmBase: 10
            },
            commonSeriesSettings: {
              type: "area",
              aggregation: {
                enabled: void 0
              },
              point: {
                visible: false
              },
              scatter: {
                point: {
                  visible: true
                }
              }
            }
          }
        },
        map: {
          title: {
            margin: 10
          },
          background: {
            borderWidth: 1,
            borderColor: "#cacaca"
          },
          layer: {
            label: {
              enabled: false,
              stroke: WHITE,
              "stroke-width": 1,
              "stroke-opacity": 0.7,
              font: {
                color: SOME_GREY,
                size: 12
              }
            }
          },
          "layer:area": {
            borderWidth: 1,
            borderColor: WHITE,
            color: "#d2d2d2",
            hoveredBorderColor: GREY_GREEN,
            selectedBorderWidth: 2,
            selectedBorderColor: GREY_GREEN,
            label: {
              "stroke-width": 2,
              font: {
                size: 16
              }
            }
          },
          "layer:line": {
            borderWidth: 2,
            color: "#ba8365",
            hoveredColor: "#a94813",
            selectedBorderWidth: 3,
            selectedColor: "#e55100",
            label: {
              "stroke-width": 2,
              font: {
                size: 16
              }
            }
          },
          "layer:marker": {
            label: {
              enabled: true,
              "stroke-width": 1,
              font: {
                size: 12
              }
            }
          },
          "layer:marker:dot": {
            borderWidth: 2,
            borderColor: WHITE,
            size: 8,
            selectedStep: 2,
            backStep: 18,
            backColor: WHITE,
            backOpacity: 0.32,
            shadow: true
          },
          "layer:marker:bubble": {
            minSize: 20,
            maxSize: 50,
            hoveredBorderWidth: 1,
            hoveredBorderColor: GREY_GREEN,
            selectedBorderWidth: 2,
            selectedBorderColor: GREY_GREEN
          },
          "layer:marker:pie": {
            size: 50,
            hoveredBorderWidth: 1,
            hoveredBorderColor: GREY_GREEN,
            selectedBorderWidth: 2,
            selectedBorderColor: GREY_GREEN
          },
          "layer:marker:image": {
            size: 20
          },
          legend: {
            verticalAlignment: BOTTOM,
            horizontalAlignment: RIGHT,
            position: INSIDE,
            backgroundOpacity: 0.65,
            border: {
              visible: true
            },
            paddingLeftRight: 16,
            paddingTopBottom: 12
          },
          controlBar: {
            borderColor: "#5d5d5d",
            borderWidth: 3,
            color: WHITE,
            margin: 20,
            opacity: 0.3
          },
          Hd: {
            legend: {
              itemTextPosition: LEFT
            }
          }
        },
        treeMap: {
          tile: {
            border: {
              width: 1,
              opacity: 0.2,
              color: "#000000"
            },
            color: "#5f8b95",
            hoverStyle: {
              hatching: {
                opacity: 0.75,
                step: 6,
                width: 2,
                direction: "right"
              },
              border: {}
            },
            selectionStyle: {
              hatching: {
                opacity: 0.5,
                step: 6,
                width: 2,
                direction: "right"
              },
              border: {
                opacity: 1
              }
            },
            label: {
              visible: true,
              paddingLeftRight: 5,
              paddingTopBottom: 4,
              font: {
                color: "#ffffff",
                weight: 600
              },
              shadow: {
                opacity: 0.6,
                offsetX: 0,
                offsetY: 1,
                blur: 2,
                color: "#000000"
              },
              wordWrap: "normal",
              textOverflow: "ellipsis"
            }
          },
          group: {
            padding: 4,
            border: {
              width: 1
            },
            color: "#eeeeee",
            hoverStyle: {
              hatching: {
                opacity: 0,
                step: 6,
                width: 2,
                direction: "right"
              },
              border: {}
            },
            selectionStyle: {
              hatching: {
                opacity: 0,
                step: 6,
                width: 2,
                direction: "right"
              },
              border: {}
            },
            label: {
              visible: true,
              paddingLeftRight: 5,
              paddingTopBottom: 4,
              font: {
                color: SECONDARY_TITLE_COLOR,
                weight: 600
              },
              textOverflow: "ellipsis"
            }
          },
          title: {
            subtitle: {}
          },
          tooltip: {},
          loadingIndicator: {}
        },
        sparkline: {
          lineColor: "#666666",
          lineWidth: 2,
          areaOpacity: 0.2,
          minColor: "#e8c267",
          maxColor: "#e55253",
          barPositiveColor: "#a9a9a9",
          barNegativeColor: "#d7d7d7",
          winColor: "#a9a9a9",
          lossColor: "#d7d7d7",
          firstLastColor: "#666666",
          pointSymbol: "circle",
          pointColor: WHITE,
          pointSize: 4,
          type: "line",
          argumentField: "arg",
          valueField: "val",
          winlossThreshold: 0,
          showFirstLast: true,
          showMinMax: false,
          tooltip: {
            enabled: true
          }
        },
        bullet: {
          color: "#e8c267",
          targetColor: "#666666",
          targetWidth: 4,
          showTarget: true,
          showZeroLevel: true,
          tooltip: {
            enabled: true
          }
        },
        polar: {
          commonSeriesSettings: {
            type: "scatter",
            closed: true,
            point: {
              visible: true,
              symbol: "circle",
              size: 12,
              border: {
                visible: false,
                width: 1
              },
              hoverMode: "onlyPoint",
              selectionMode: "onlyPoint",
              hoverStyle: {
                border: {
                  visible: true,
                  width: 4
                },
                size: 12
              },
              selectionStyle: {
                border: {
                  visible: true,
                  width: 4
                },
                size: 12
              }
            },
            scatter: {},
            line: {
              width: 2,
              dashStyle: SOLID,
              hoverStyle: {
                width: 3,
                hatching: {
                  direction: NONE
                }
              },
              selectionStyle: {
                width: 3
              }
            },
            area: {
              point: {
                visible: false
              },
              opacity: 0.5
            },
            stackedline: {
              width: 2
            },
            bar: {
              opacity: 0.8
            },
            stackedbar: {
              opacity: 0.8
            }
          },
          adaptiveLayout: {
            width: 80,
            height: 80,
            keepLabels: true
          },
          barGroupPadding: 0.3,
          commonAxisSettings: {
            visible: true,
            forceUserTickInterval: false,
            label: {
              overlappingBehavior: "hide",
              indentFromAxis: 5
            },
            grid: {
              visible: true
            },
            minorGrid: {
              visible: true
            },
            tick: {
              visible: true
            },
            title: {
              font: {
                size: 16
              },
              margin: 10
            }
          },
          argumentAxis: {
            startAngle: 0,
            firstPointOnStartAngle: false,
            period: void 0
          },
          valueAxis: {
            endOnTick: false,
            tick: {
              visible: false
            }
          },
          horizontalAxis: {
            position: TOP,
            axisDivisionFactor: 50,
            label: {
              alignment: CENTER
            }
          },
          verticalAxis: {
            position: TOP,
            axisDivisionFactor: 30,
            label: {
              alignment: RIGHT
            }
          }
        },
        funnel: {
          sortData: true,
          valueField: "val",
          colorField: "color",
          argumentField: "arg",
          hoverEnabled: true,
          selectionMode: "single",
          item: {
            border: {
              visible: false,
              width: 2,
              color: WHITE
            },
            hoverStyle: {
              hatching: {
                opacity: 0.75,
                step: 6,
                width: 2,
                direction: RIGHT
              },
              border: {}
            },
            selectionStyle: {
              hatching: {
                opacity: 0.5,
                step: 6,
                width: 2,
                direction: RIGHT
              },
              border: {}
            }
          },
          title: {
            margin: 10
          },
          adaptiveLayout: {
            width: 80,
            height: 80,
            keepLabels: true
          },
          legend: {
            visible: false
          },
          Hd: {
            legend: {
              itemTextPosition: LEFT
            }
          },
          tooltip: {
            customizeTooltip: function(info) {
              return {
                text: info.item.argument + " " + info.valueText
              };
            }
          },
          inverted: false,
          algorithm: "dynamicSlope",
          neckWidth: 0,
          neckHeight: 0,
          resolveLabelOverlapping: "shift",
          label: {
            textOverflow: "ellipsis",
            wordWrap: "normal",
            visible: true,
            horizontalAlignment: RIGHT,
            horizontalOffset: 0,
            verticalOffset: 0,
            showForZeroValues: false,
            customizeText: function(info) {
              return info.item.argument + " " + info.valueText;
            },
            position: "columns",
            font: {
              color: WHITE
            },
            border: {
              visible: false,
              width: 1,
              color: LIGHT_GREY,
              dashStyle: SOLID
            },
            connector: {
              visible: true,
              width: 1,
              opacity: 0.5
            }
          }
        },
        sankey: {
          sourceField: "source",
          targetField: "target",
          weightField: "weight",
          hoverEnabled: true,
          alignment: CENTER,
          adaptiveLayout: {
            width: 80,
            height: 80,
            keepLabels: true
          },
          label: {
            visible: true,
            horizontalOffset: 8,
            verticalOffset: 0,
            overlappingBehavior: "ellipsis",
            useNodeColors: false,
            font: {
              color: BLACK,
              weight: 500
            },
            border: {
              visible: false,
              width: 2,
              color: WHITE
            },
            customizeText: function(info) {
              return info.title;
            },
            shadow: {
              opacity: 0.2,
              offsetX: 0,
              offsetY: 1,
              blur: 1,
              color: WHITE
            }
          },
          title: {
            margin: 10,
            font: {
              size: 28,
              weight: 200
            },
            subtitle: {
              font: {
                size: 16
              }
            }
          },
          tooltip: {
            enabled: true
          },
          node: {
            padding: 30,
            width: 8,
            opacity: 1,
            border: {
              color: WHITE,
              width: 1,
              visible: false
            },
            hoverStyle: {
              hatching: {
                opacity: 0.75,
                step: 6,
                width: 2,
                direction: RIGHT
              },
              border: {}
            }
          },
          link: {
            color: "#888888",
            colorMode: "none",
            opacity: 0.3,
            border: {
              color: WHITE,
              width: 1,
              visible: false
            },
            hoverStyle: {
              opacity: 0.5,
              hatching: {
                opacity: 0.75,
                step: 6,
                width: 2,
                direction: RIGHT
              },
              border: {}
            }
          }
        }
      },
      baseThemeName: void 0
    }, {
      theme: {
        name: "generic.light.compact"
      },
      baseThemeName: "generic.light"
    }];
    exports.default = _default;
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/devextreme/cjs/viz/core/themes/generic.carmine.js
var require_generic_carmine = __commonJS({
  "node_modules/devextreme/cjs/viz/core/themes/generic.carmine.js"(exports, module) {
    "use strict";
    exports.default = void 0;
    var ACCENT_COLOR = "#f05b41";
    var BACKGROUND_COLOR = "#fff";
    var TITLE_COLOR = "#333";
    var SUBTITLE_COLOR = "#8899a8";
    var TEXT_COLOR = "#707070";
    var BORDER_COLOR = "#dee1e3";
    var _default = [{
      theme: {
        name: "generic.carmine",
        defaultPalette: "Carmine",
        backgroundColor: BACKGROUND_COLOR,
        primaryTitleColor: TITLE_COLOR,
        secondaryTitleColor: SUBTITLE_COLOR,
        gridColor: BORDER_COLOR,
        axisColor: TEXT_COLOR,
        export: {
          backgroundColor: BACKGROUND_COLOR,
          font: {
            color: TITLE_COLOR
          },
          button: {
            default: {
              color: TITLE_COLOR,
              borderColor: "#b1b7bd",
              backgroundColor: BACKGROUND_COLOR
            },
            hover: {
              color: TITLE_COLOR,
              borderColor: "#b1b7bd",
              backgroundColor: "#faf2f0"
            },
            focus: {
              color: TITLE_COLOR,
              borderColor: "#6d7781",
              backgroundColor: "#faf2f0"
            },
            active: {
              color: TITLE_COLOR,
              borderColor: "#6d7781",
              backgroundColor: "#f5e7e4"
            }
          }
        },
        legend: {
          font: {
            color: TEXT_COLOR
          }
        },
        tooltip: {
          color: BACKGROUND_COLOR,
          border: {
            color: BORDER_COLOR
          },
          font: {
            color: TITLE_COLOR
          }
        },
        "chart:common": {
          commonSeriesSettings: {
            label: {
              border: {
                color: BORDER_COLOR
              }
            }
          }
        },
        "chart:common:annotation": {
          font: {
            color: TITLE_COLOR
          },
          border: {
            color: BORDER_COLOR
          },
          color: BACKGROUND_COLOR
        },
        chart: {
          commonPaneSettings: {
            border: {
              color: BORDER_COLOR
            }
          },
          commonAxisSettings: {
            breakStyle: {
              color: "#c1c5c7"
            }
          }
        },
        rangeSelector: {
          scale: {
            breakStyle: {
              color: "#c1c5c7"
            },
            tick: {
              opacity: 0.12
            }
          },
          selectedRangeColor: ACCENT_COLOR,
          sliderMarker: {
            color: ACCENT_COLOR
          },
          sliderHandle: {
            color: ACCENT_COLOR,
            opacity: 0.5
          }
        },
        sparkline: {
          pointColor: BACKGROUND_COLOR,
          minColor: "#f0ad4e",
          maxColor: "#f74d61"
        },
        treeMap: {
          group: {
            color: BORDER_COLOR,
            label: {
              font: {
                color: SUBTITLE_COLOR
              }
            }
          }
        },
        bullet: {
          color: ACCENT_COLOR
        },
        gauge: {
          valueIndicators: {
            rangebar: {
              color: ACCENT_COLOR
            },
            textcloud: {
              color: ACCENT_COLOR
            }
          }
        }
      },
      baseThemeName: "generic.light"
    }, {
      theme: {
        name: "generic.carmine.compact"
      },
      baseThemeName: "generic.carmine"
    }];
    exports.default = _default;
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/devextreme/cjs/viz/core/themes/generic.dark.js
var require_generic_dark = __commonJS({
  "node_modules/devextreme/cjs/viz/core/themes/generic.dark.js"(exports, module) {
    "use strict";
    exports.default = void 0;
    var WHITE = "#ffffff";
    var BLACK = "#000000";
    var SOME_GREY = "#2b2b2b";
    var RANGE_COLOR = "#b5b5b5";
    var GREY_GREEN = "#303030";
    var AREA_LAYER_COLOR = "#686868";
    var LINE_COLOR = "#c7c7c7";
    var TARGET_COLOR = "#8e8e8e";
    var POSITIVE_COLOR = "#b8b8b8";
    var BORDER_COLOR = "#494949";
    var _default = [{
      theme: {
        name: "generic.dark",
        font: {
          color: "#808080"
        },
        backgroundColor: "#2a2a2a",
        primaryTitleColor: "#dedede",
        secondaryTitleColor: "#a3a3a3",
        gridColor: "#555555",
        axisColor: "#a3a3a3",
        export: {
          backgroundColor: "#2a2a2a",
          font: {
            color: "#dbdbdb"
          },
          button: {
            default: {
              color: "#dedede",
              borderColor: "#4d4d4d",
              backgroundColor: "#2e2e2e"
            },
            hover: {
              color: "#dedede",
              borderColor: "#6c6c6c",
              backgroundColor: "#444"
            },
            focus: {
              color: "#dedede",
              borderColor: "#8d8d8d",
              backgroundColor: "#444444"
            },
            active: {
              color: "#dedede",
              borderColor: "#8d8d8d",
              backgroundColor: "#555555"
            }
          },
          shadowColor: "#292929"
        },
        tooltip: {
          color: SOME_GREY,
          border: {
            color: BORDER_COLOR
          },
          font: {
            color: "#929292"
          }
        },
        "chart:common": {
          commonSeriesSettings: {
            label: {
              border: {
                color: BORDER_COLOR
              }
            },
            valueErrorBar: {
              color: WHITE
            }
          }
        },
        "chart:common:axis": {
          constantLineStyle: {
            color: WHITE
          }
        },
        "chart:common:annotation": {
          font: {
            color: "#929292"
          },
          border: {
            color: BORDER_COLOR
          },
          color: SOME_GREY,
          shadow: {
            opacity: 8e-3,
            offsetY: 4,
            blur: 8
          }
        },
        chart: {
          commonPaneSettings: {
            border: {
              color: BORDER_COLOR
            }
          },
          commonAxisSettings: {
            breakStyle: {
              color: "#818181"
            }
          },
          zoomAndPan: {
            dragBoxStyle: {
              color: WHITE
            }
          }
        },
        gauge: {
          rangeContainer: {
            backgroundColor: RANGE_COLOR
          },
          valueIndicators: {
            _b: {
              color: RANGE_COLOR
            },
            rangebar: {
              color: "#84788b"
            },
            twocolorneedle: {
              secondColor: "#ba544d"
            },
            trianglemarker: {
              color: "#b7918f"
            },
            textcloud: {
              color: "#ba544d"
            }
          }
        },
        barGauge: {
          backgroundColor: "#3c3c3c"
        },
        rangeSelector: {
          scale: {
            tick: {
              color: WHITE,
              opacity: 0.32
            },
            minorTick: {
              color: WHITE,
              opacity: 0.1
            },
            breakStyle: {
              color: "#818181"
            }
          },
          selectedRangeColor: RANGE_COLOR,
          sliderMarker: {
            color: RANGE_COLOR,
            font: {
              color: GREY_GREEN
            }
          },
          sliderHandle: {
            color: WHITE,
            opacity: 0.2
          },
          shutter: {
            color: SOME_GREY,
            opacity: 0.9
          }
        },
        map: {
          background: {
            borderColor: "#3f3f3f"
          },
          layer: {
            label: {
              stroke: BLACK,
              font: {
                color: WHITE
              }
            }
          },
          "layer:area": {
            borderColor: GREY_GREEN,
            color: AREA_LAYER_COLOR,
            hoveredBorderColor: WHITE,
            selectedBorderColor: WHITE
          },
          "layer:line": {
            color: "#c77244",
            hoveredColor: "#ff5d04",
            selectedColor: "#ff784f"
          },
          "layer:marker:bubble": {
            hoveredBorderColor: WHITE,
            selectedBorderColor: WHITE
          },
          "layer:marker:pie": {
            hoveredBorderColor: WHITE,
            selectedBorderColor: WHITE
          },
          legend: {
            border: {
              color: "#3f3f3f"
            },
            font: {
              color: WHITE
            }
          },
          controlBar: {
            borderColor: LINE_COLOR,
            color: GREY_GREEN
          }
        },
        treeMap: {
          group: {
            color: "#4c4c4c",
            label: {
              font: {
                color: "#a3a3a3"
              }
            }
          }
        },
        sparkline: {
          lineColor: LINE_COLOR,
          firstLastColor: LINE_COLOR,
          barPositiveColor: POSITIVE_COLOR,
          barNegativeColor: TARGET_COLOR,
          winColor: POSITIVE_COLOR,
          lossColor: TARGET_COLOR,
          pointColor: GREY_GREEN
        },
        bullet: {
          targetColor: TARGET_COLOR
        },
        funnel: {
          item: {
            border: {
              color: "#2a2a2a"
            }
          }
        },
        sankey: {
          label: {
            font: {
              color: WHITE
            },
            shadow: {
              opacity: 0
            }
          },
          node: {
            border: {
              color: "#2a2a2a"
            }
          },
          link: {
            color: "#888888",
            border: {
              color: "#2a2a2a"
            },
            hoverStyle: {
              color: "#bbbbbb"
            }
          }
        }
      },
      baseThemeName: "generic.light"
    }, {
      theme: {
        name: "generic.dark.compact"
      },
      baseThemeName: "generic.dark"
    }];
    exports.default = _default;
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/devextreme/cjs/viz/core/themes/generic.contrast.js
var require_generic_contrast = __commonJS({
  "node_modules/devextreme/cjs/viz/core/themes/generic.contrast.js"(exports, module) {
    "use strict";
    exports.default = void 0;
    var WHITE = "#ffffff";
    var BLACK = "#000000";
    var CONTRAST_ACTIVE = "#cf00da";
    var MARKER_COLOR = "#f8ca00";
    var AREA_LAYER_COLOR = "#686868";
    var _default = [{
      theme: {
        name: "generic.contrast",
        defaultPalette: "Bright",
        font: {
          color: WHITE
        },
        backgroundColor: BLACK,
        primaryTitleColor: WHITE,
        secondaryTitleColor: WHITE,
        gridColor: WHITE,
        axisColor: WHITE,
        export: {
          backgroundColor: BLACK,
          font: {
            color: WHITE
          },
          button: {
            default: {
              color: WHITE,
              borderColor: WHITE,
              backgroundColor: BLACK
            },
            hover: {
              color: WHITE,
              borderColor: WHITE,
              backgroundColor: "#cf00d7"
            },
            focus: {
              color: WHITE,
              borderColor: "#cf00d7",
              backgroundColor: BLACK
            },
            active: {
              color: BLACK,
              borderColor: WHITE,
              backgroundColor: WHITE
            }
          },
          borderColor: WHITE,
          menuButtonColor: BLACK,
          activeBackgroundColor: WHITE,
          activeColor: BLACK,
          selectedBorderColor: CONTRAST_ACTIVE,
          selectedColor: CONTRAST_ACTIVE,
          shadowColor: "none"
        },
        tooltip: {
          border: {
            color: WHITE
          },
          font: {
            color: WHITE
          },
          color: BLACK
        },
        "chart:common": {
          commonSeriesSettings: {
            valueErrorBar: {
              color: WHITE
            },
            hoverStyle: {
              hatching: {
                opacity: 0.5
              }
            },
            selectionStyle: {
              hatching: {
                opacity: 0.35
              }
            },
            label: {
              font: {
                color: WHITE
              },
              border: {
                color: WHITE
              }
            }
          }
        },
        "chart:common:axis": {
          constantLineStyle: {
            color: WHITE
          }
        },
        "chart:common:annotation": {
          font: {
            color: WHITE
          },
          border: {
            color: WHITE
          },
          color: BLACK
        },
        chart: {
          commonSeriesSettings: {},
          crosshair: {
            color: "#cf00d7"
          },
          commonPaneSettings: {
            backgroundColor: BLACK,
            border: {
              color: WHITE
            }
          },
          scrollBar: {
            color: WHITE
          },
          commonAxisSettings: {
            breakStyle: {
              color: "#cf00d7"
            }
          },
          zoomAndPan: {
            dragBoxStyle: {
              color: WHITE,
              opacity: 0.7
            }
          }
        },
        pie: {
          commonSeriesSettings: {
            pie: {
              hoverStyle: {
                hatching: {
                  opacity: 0.5
                }
              },
              selectionStyle: {
                hatching: {
                  opacity: 0.35
                }
              }
            },
            doughnut: {
              hoverStyle: {
                hatching: {
                  opacity: 0.5
                }
              },
              selectionStyle: {
                hatching: {
                  opacity: 0.35
                }
              }
            },
            donut: {
              hoverStyle: {
                hatching: {
                  opacity: 0.5
                }
              },
              selectionStyle: {
                hatching: {
                  opacity: 0.35
                }
              }
            }
          }
        },
        gauge: {
          rangeContainer: {
            backgroundColor: WHITE
          },
          valueIndicators: {
            _b: {
              color: WHITE
            },
            rangebar: {
              color: WHITE,
              backgroundColor: BLACK
            },
            twocolorneedle: {
              secondColor: WHITE
            },
            trianglemarker: {
              color: WHITE
            },
            textcloud: {
              color: WHITE,
              text: {
                font: {
                  color: BLACK
                }
              }
            }
          }
        },
        barGauge: {
          backgroundColor: "#3c3c3c"
        },
        rangeSelector: {
          scale: {
            tick: {
              color: WHITE,
              opacity: 0.4
            },
            minorTick: {
              color: WHITE,
              opacity: 0.12
            },
            breakStyle: {
              color: "#cf00d7"
            }
          },
          selectedRangeColor: CONTRAST_ACTIVE,
          sliderMarker: {
            color: CONTRAST_ACTIVE
          },
          sliderHandle: {
            color: CONTRAST_ACTIVE,
            opacity: 1
          },
          shutter: {
            opacity: 0.75
          },
          background: {
            color: BLACK
          }
        },
        map: {
          background: {
            borderColor: WHITE
          },
          layer: {
            label: {
              stroke: BLACK,
              font: {
                color: WHITE
              }
            }
          },
          "layer:area": {
            borderColor: BLACK,
            color: AREA_LAYER_COLOR,
            hoveredBorderColor: WHITE,
            selectedBorderColor: WHITE,
            label: {
              font: {
                opacity: 1
              }
            }
          },
          "layer:line": {
            color: "#267cff",
            hoveredColor: "#f613ff",
            selectedColor: WHITE
          },
          "layer:marker:dot": {
            borderColor: BLACK,
            color: MARKER_COLOR,
            backColor: BLACK,
            backOpacity: 0.32
          },
          "layer:marker:bubble": {
            color: MARKER_COLOR,
            hoveredBorderColor: WHITE,
            selectedBorderColor: WHITE
          },
          "layer:marker:pie": {
            hoveredBorderColor: WHITE,
            selectedBorderColor: WHITE
          },
          controlBar: {
            borderColor: WHITE,
            color: BLACK,
            opacity: 0.3
          }
        },
        treeMap: {
          tile: {
            color: "#70c92f"
          },
          group: {
            color: "#797979",
            label: {
              font: {
                color: WHITE
              }
            }
          }
        },
        sparkline: {
          pointColor: BLACK
        },
        bullet: {},
        polar: {
          commonSeriesSettings: {}
        },
        funnel: {
          label: {
            connector: {
              opacity: 1
            }
          }
        },
        sankey: {
          label: {
            font: {
              color: WHITE
            },
            shadow: {
              opacity: 0
            }
          },
          node: {
            border: {
              visible: true,
              width: 1,
              color: WHITE
            }
          },
          link: {
            opacity: 0.5,
            border: {
              visible: true,
              width: 1,
              color: WHITE
            },
            hoverStyle: {
              opacity: 0.9
            }
          }
        }
      },
      baseThemeName: "generic.light"
    }, {
      theme: {
        name: "generic.contrast.compact"
      },
      baseThemeName: "generic.contrast"
    }];
    exports.default = _default;
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/devextreme/cjs/viz/core/themes/generic.darkmoon.js
var require_generic_darkmoon = __commonJS({
  "node_modules/devextreme/cjs/viz/core/themes/generic.darkmoon.js"(exports, module) {
    "use strict";
    exports.default = void 0;
    var ACCENT_COLOR = "#3debd3";
    var BACKGROUND_COLOR = "#465672";
    var TITLE_COLOR = "#fff";
    var SUBTITLE_COLOR = "#919bac";
    var TEXT_COLOR = "#c7ccd4";
    var BORDER_COLOR = "#596980";
    var _default = [{
      theme: {
        name: "generic.darkmoon",
        defaultPalette: "Dark Moon",
        backgroundColor: BACKGROUND_COLOR,
        primaryTitleColor: TITLE_COLOR,
        secondaryTitleColor: SUBTITLE_COLOR,
        gridColor: BORDER_COLOR,
        axisColor: TEXT_COLOR,
        export: {
          backgroundColor: BACKGROUND_COLOR,
          font: {
            color: TITLE_COLOR
          },
          button: {
            default: {
              color: TITLE_COLOR,
              borderColor: "#7a889e",
              backgroundColor: BACKGROUND_COLOR
            },
            hover: {
              color: TITLE_COLOR,
              borderColor: "#9da8b8",
              backgroundColor: "#596e92"
            },
            focus: {
              color: TITLE_COLOR,
              borderColor: "#c4cad4",
              backgroundColor: "#596e92"
            },
            active: {
              color: TITLE_COLOR,
              borderColor: "#c4cad4",
              backgroundColor: "#6b80a4"
            }
          }
        },
        legend: {
          font: {
            color: TEXT_COLOR
          }
        },
        tooltip: {
          color: "#62789e",
          border: {
            color: BORDER_COLOR
          },
          font: {
            color: TITLE_COLOR
          }
        },
        "chart:common": {
          commonSeriesSettings: {
            label: {
              border: {
                color: BORDER_COLOR
              }
            }
          }
        },
        "chart:common:annotation": {
          font: {
            color: TITLE_COLOR
          },
          border: {
            color: BORDER_COLOR
          },
          color: "#62789e"
        },
        chart: {
          commonPaneSettings: {
            border: {
              color: BORDER_COLOR
            }
          },
          commonAxisSettings: {
            breakStyle: {
              color: "#73869e"
            }
          }
        },
        gauge: {
          valueIndicators: {
            rangebar: {
              color: ACCENT_COLOR
            },
            textcloud: {
              color: ACCENT_COLOR,
              text: {
                font: {
                  color: BACKGROUND_COLOR
                }
              }
            }
          }
        },
        barGauge: {
          backgroundColor: "#526280"
        },
        funnel: {
          item: {
            border: {
              color: BACKGROUND_COLOR
            }
          }
        },
        sparkline: {
          pointColor: BACKGROUND_COLOR,
          minColor: "#f0ad4e",
          maxColor: "#f9517e"
        },
        treeMap: {
          group: {
            color: BORDER_COLOR,
            label: {
              font: {
                color: TITLE_COLOR
              }
            }
          }
        },
        map: {
          background: {
            borderColor: BORDER_COLOR
          },
          "layer:area": {
            color: "#97a3b6",
            borderColor: BACKGROUND_COLOR
          }
        },
        rangeSelector: {
          shutter: {
            color: BACKGROUND_COLOR
          },
          scale: {
            breakStyle: {
              color: "#73869e"
            },
            tick: {
              opacity: 0.2
            }
          },
          selectedRangeColor: ACCENT_COLOR,
          sliderMarker: {
            color: ACCENT_COLOR,
            font: {
              color: "#000"
            }
          },
          sliderHandle: {
            color: ACCENT_COLOR,
            opacity: 0.5
          }
        },
        bullet: {
          color: ACCENT_COLOR
        },
        sankey: {
          link: {
            border: {
              color: BACKGROUND_COLOR
            }
          },
          node: {
            border: {
              color: BACKGROUND_COLOR
            }
          }
        }
      },
      baseThemeName: "generic.dark"
    }, {
      theme: {
        name: "generic.darkmoon.compact"
      },
      baseThemeName: "generic.darkmoon"
    }];
    exports.default = _default;
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/devextreme/cjs/viz/core/themes/generic.darkviolet.js
var require_generic_darkviolet = __commonJS({
  "node_modules/devextreme/cjs/viz/core/themes/generic.darkviolet.js"(exports, module) {
    "use strict";
    exports.default = void 0;
    var ACCENT_COLOR = "#9c63ff";
    var BACKGROUND_COLOR = "#17171f";
    var TITLE_COLOR = "#f5f6f7";
    var SUBTITLE_COLOR = "#fff";
    var TEXT_COLOR = "#b2b2b6";
    var BORDER_COLOR = "#343840";
    var _default = [{
      theme: {
        name: "generic.darkviolet",
        defaultPalette: "Dark Violet",
        backgroundColor: BACKGROUND_COLOR,
        primaryTitleColor: TITLE_COLOR,
        secondaryTitleColor: SUBTITLE_COLOR,
        gridColor: BORDER_COLOR,
        axisColor: TEXT_COLOR,
        export: {
          backgroundColor: BACKGROUND_COLOR,
          font: {
            color: TITLE_COLOR
          },
          button: {
            default: {
              color: TITLE_COLOR,
              borderColor: "#414152",
              backgroundColor: BACKGROUND_COLOR
            },
            hover: {
              color: TITLE_COLOR,
              borderColor: "#5c5c74",
              backgroundColor: "#2d2d3c"
            },
            focus: {
              color: TITLE_COLOR,
              borderColor: "#7c7c97",
              backgroundColor: "#2d2d3c"
            },
            active: {
              color: TITLE_COLOR,
              borderColor: "#7c7c97",
              backgroundColor: "#3c3c51"
            }
          }
        },
        legend: {
          font: {
            color: TEXT_COLOR
          }
        },
        tooltip: {
          color: BACKGROUND_COLOR,
          border: {
            color: "#414152"
          },
          font: {
            color: TITLE_COLOR
          }
        },
        "chart:common": {
          commonSeriesSettings: {
            label: {
              border: {
                color: BORDER_COLOR
              }
            }
          }
        },
        "chart:common:annotation": {
          font: {
            color: TITLE_COLOR
          },
          border: {
            color: "#414152"
          },
          color: BACKGROUND_COLOR
        },
        chart: {
          commonPaneSettings: {
            border: {
              color: BORDER_COLOR
            }
          },
          commonAxisSettings: {
            breakStyle: {
              color: "#575e6b"
            }
          }
        },
        funnel: {
          item: {
            border: {
              color: BACKGROUND_COLOR
            }
          }
        },
        sparkline: {
          pointColor: BACKGROUND_COLOR,
          minColor: "#f0ad4e",
          maxColor: "#d9534f"
        },
        treeMap: {
          group: {
            color: BORDER_COLOR,
            label: {
              font: {
                color: SUBTITLE_COLOR
              }
            }
          }
        },
        rangeSelector: {
          shutter: {
            color: BACKGROUND_COLOR
          },
          scale: {
            breakStyle: {
              color: "#575e6b"
            },
            tick: {
              opacity: 0.2
            }
          },
          selectedRangeColor: ACCENT_COLOR,
          sliderMarker: {
            color: ACCENT_COLOR,
            font: {
              color: "#fff"
            }
          },
          sliderHandle: {
            color: ACCENT_COLOR,
            opacity: 0.5
          }
        },
        bullet: {
          color: ACCENT_COLOR
        },
        gauge: {
          valueIndicators: {
            rangebar: {
              color: ACCENT_COLOR
            },
            textcloud: {
              color: ACCENT_COLOR
            }
          }
        },
        sankey: {
          link: {
            border: {
              color: BACKGROUND_COLOR
            }
          },
          node: {
            border: {
              color: BACKGROUND_COLOR
            }
          }
        }
      },
      baseThemeName: "generic.dark"
    }, {
      theme: {
        name: "generic.darkviolet.compact"
      },
      baseThemeName: "generic.darkviolet"
    }];
    exports.default = _default;
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/devextreme/cjs/viz/core/themes/generic.greenmist.js
var require_generic_greenmist = __commonJS({
  "node_modules/devextreme/cjs/viz/core/themes/generic.greenmist.js"(exports, module) {
    "use strict";
    exports.default = void 0;
    var ACCENT_COLOR = "#3cbab2";
    var BACKGROUND_COLOR = "#f5f5f5";
    var TITLE_COLOR = "#28484f";
    var SUBTITLE_COLOR = "#7eb2be";
    var TEXT_COLOR = "#657c80";
    var BORDER_COLOR = "#dedede";
    var _default = [{
      theme: {
        name: "generic.greenmist",
        defaultPalette: "Green Mist",
        backgroundColor: BACKGROUND_COLOR,
        primaryTitleColor: TITLE_COLOR,
        secondaryTitleColor: SUBTITLE_COLOR,
        gridColor: BORDER_COLOR,
        axisColor: TEXT_COLOR,
        export: {
          backgroundColor: BACKGROUND_COLOR,
          font: {
            color: TITLE_COLOR
          },
          button: {
            default: {
              color: TITLE_COLOR,
              borderColor: "#a2b4b8",
              backgroundColor: BACKGROUND_COLOR
            },
            hover: {
              color: TITLE_COLOR,
              borderColor: "#7f989e",
              backgroundColor: "rgba(222, 222, 222, 0.4)"
            },
            focus: {
              color: TITLE_COLOR,
              borderColor: "#5f777c",
              backgroundColor: "rgba(222, 222, 222, 0.4)"
            },
            active: {
              color: TITLE_COLOR,
              borderColor: "#5f777c",
              backgroundColor: "rgba(222, 222, 222, 0.8)"
            }
          }
        },
        legend: {
          font: {
            color: TEXT_COLOR
          }
        },
        tooltip: {
          color: "#fff",
          border: {
            color: BORDER_COLOR
          },
          font: {
            color: TITLE_COLOR
          }
        },
        "chart:common": {
          commonSeriesSettings: {
            label: {
              border: {
                color: BORDER_COLOR
              }
            }
          }
        },
        "chart:common:annotation": {
          color: "#fff",
          border: {
            color: BORDER_COLOR
          },
          font: {
            color: TITLE_COLOR
          }
        },
        chart: {
          commonPaneSettings: {
            border: {
              color: BORDER_COLOR
            }
          },
          commonAxisSettings: {
            breakStyle: {
              color: "#c1c1c1"
            }
          }
        },
        funnel: {
          item: {
            border: {
              color: BACKGROUND_COLOR
            }
          }
        },
        sparkline: {
          pointColor: BACKGROUND_COLOR,
          minColor: "#ffc852",
          maxColor: "#f74a5e"
        },
        treeMap: {
          group: {
            color: BORDER_COLOR,
            label: {
              font: {
                color: SUBTITLE_COLOR
              }
            }
          }
        },
        rangeSelector: {
          shutter: {
            color: BACKGROUND_COLOR
          },
          scale: {
            breakStyle: {
              color: "#c1c1c1"
            },
            tick: {
              opacity: 0.12
            }
          },
          selectedRangeColor: ACCENT_COLOR,
          sliderMarker: {
            color: ACCENT_COLOR
          },
          sliderHandle: {
            color: ACCENT_COLOR,
            opacity: 0.5
          }
        },
        bullet: {
          color: ACCENT_COLOR
        },
        gauge: {
          valueIndicators: {
            rangebar: {
              color: ACCENT_COLOR
            },
            textcloud: {
              color: ACCENT_COLOR
            }
          }
        }
      },
      baseThemeName: "generic.light"
    }, {
      theme: {
        name: "generic.greenmist.compact"
      },
      baseThemeName: "generic.greenmist"
    }];
    exports.default = _default;
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/devextreme/cjs/viz/core/themes/generic.softblue.js
var require_generic_softblue = __commonJS({
  "node_modules/devextreme/cjs/viz/core/themes/generic.softblue.js"(exports, module) {
    "use strict";
    exports.default = void 0;
    var ACCENT_COLOR = "#7ab8eb";
    var BACKGROUND_COLOR = "#fff";
    var TITLE_COLOR = "#333";
    var SUBTITLE_COLOR = "#99a1a8";
    var TEXT_COLOR = "#707070";
    var BORDER_COLOR = "#e8eaeb";
    var _default = [{
      theme: {
        name: "generic.softblue",
        defaultPalette: "Soft Blue",
        backgroundColor: BACKGROUND_COLOR,
        primaryTitleColor: TITLE_COLOR,
        secondaryTitleColor: SUBTITLE_COLOR,
        gridColor: BORDER_COLOR,
        axisColor: TEXT_COLOR,
        export: {
          backgroundColor: BACKGROUND_COLOR,
          font: {
            color: TITLE_COLOR
          },
          button: {
            default: {
              color: TITLE_COLOR,
              borderColor: "#c9d0d4",
              backgroundColor: BACKGROUND_COLOR
            },
            hover: {
              color: TITLE_COLOR,
              borderColor: "#a7b2b9",
              backgroundColor: "#e6e6e6"
            },
            focus: {
              color: TITLE_COLOR,
              borderColor: "#82929b",
              backgroundColor: "#e6e6e6"
            },
            active: {
              color: TITLE_COLOR,
              borderColor: "#82929b",
              backgroundColor: "#d4d4d4"
            }
          }
        },
        legend: {
          font: {
            color: TEXT_COLOR
          }
        },
        tooltip: {
          color: BACKGROUND_COLOR,
          border: {
            color: BORDER_COLOR
          },
          font: {
            color: TITLE_COLOR
          }
        },
        "chart:common": {
          commonSeriesSettings: {
            label: {
              border: {
                color: BORDER_COLOR
              }
            }
          }
        },
        "chart:common:annotation": {
          color: BACKGROUND_COLOR,
          border: {
            color: BORDER_COLOR
          },
          font: {
            color: TITLE_COLOR
          }
        },
        chart: {
          commonPaneSettings: {
            border: {
              color: BORDER_COLOR
            }
          },
          commonAxisSettings: {
            breakStyle: {
              color: "#cfd2d3"
            }
          }
        },
        rangeSelector: {
          scale: {
            breakStyle: {
              color: "#cfd2d3"
            },
            tick: {
              opacity: 0.12
            }
          },
          selectedRangeColor: ACCENT_COLOR,
          sliderMarker: {
            color: ACCENT_COLOR
          },
          sliderHandle: {
            color: ACCENT_COLOR,
            opacity: 0.5
          }
        },
        sparkline: {
          pointColor: BACKGROUND_COLOR,
          minColor: "#f0ad4e",
          maxColor: "#d9534f"
        },
        treeMap: {
          group: {
            color: BORDER_COLOR,
            label: {
              font: {
                color: SUBTITLE_COLOR
              }
            }
          }
        },
        bullet: {
          color: ACCENT_COLOR
        },
        gauge: {
          valueIndicators: {
            rangebar: {
              color: ACCENT_COLOR
            },
            textcloud: {
              color: ACCENT_COLOR
            }
          }
        }
      },
      baseThemeName: "generic.light"
    }, {
      theme: {
        name: "generic.softblue.compact"
      },
      baseThemeName: "generic.softblue"
    }];
    exports.default = _default;
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/devextreme/cjs/viz/core/themes/material.js
var require_material = __commonJS({
  "node_modules/devextreme/cjs/viz/core/themes/material.js"(exports, module) {
    "use strict";
    exports.default = void 0;
    var FONT_FAMILY = "'Roboto', 'RobotoFallback', 'Helvetica', 'Arial', sans-serif";
    var LIGHT_TITLE_COLOR = "rgba(0,0,0,0.87)";
    var LIGHT_LABEL_COLOR = "rgba(0,0,0,0.54)";
    var DARK_TITLE_COLOR = "rgba(255,255,255,0.87)";
    var DARK_LABEL_COLOR = "rgba(255,255,255,0.54)";
    var DARK_BACKGROUND_COLOR = "#363640";
    var WHITE = "#ffffff";
    var BLACK = "#000000";
    var RANGE_COLOR = "#b5b5b5";
    var AREA_LAYER_COLOR = "#686868";
    var LINE_COLOR = "#c7c7c7";
    var TARGET_COLOR = "#8e8e8e";
    var POSITIVE_COLOR = "#b8b8b8";
    var LABEL_BORDER_COLOR = "#494949";
    var BREAK_STYLE_COLOR = "#818181";
    var themes = [{
      theme: {
        name: "material",
        defaultPalette: "Material",
        font: {
          family: FONT_FAMILY
        },
        title: {
          margin: {
            top: 20,
            bottom: 20,
            left: 0,
            right: 0
          },
          font: {
            size: 20,
            family: FONT_FAMILY,
            weight: 500
          },
          horizontalAlignment: "left",
          subtitle: {
            font: {
              size: 14
            },
            horizontalAlignment: "left"
          }
        },
        tooltip: {
          shadow: {
            opacity: 0
          },
          border: {
            visible: false
          },
          paddingLeftRight: 8,
          paddingTopBottom: 6,
          arrowLength: 0,
          location: "edge",
          color: "#616161",
          font: {
            color: WHITE
          },
          cornerRadius: 4
        },
        chart: {
          commonAxisSettings: {
            minorTick: {
              opacity: 0.5
            },
            label: {
              font: {
                size: 11
              }
            }
          },
          commonAnnotationSettings: {
            font: {
              color: WHITE
            },
            border: {
              color: "#616161"
            },
            color: "#616161",
            arrowLength: 14,
            arrowWidth: 0,
            shadow: {
              opacity: 0.08,
              offsetY: 4,
              blur: 8
            },
            cornerRadius: 4
          }
        },
        pie: {
          title: {
            horizontalAlignment: "center",
            subtitle: {
              horizontalAlignment: "center"
            }
          }
        },
        polar: {
          commonAxisSettings: {
            minorTick: {
              opacity: 0.5
            }
          },
          title: {
            horizontalAlignment: "center",
            subtitle: {
              horizontalAlignment: "center"
            }
          }
        },
        funnel: {
          title: {
            horizontalAlignment: "center",
            subtitle: {
              horizontalAlignment: "center"
            }
          }
        },
        gauge: {
          title: {
            horizontalAlignment: "center",
            subtitle: {
              horizontalAlignment: "center"
            }
          }
        },
        barGauge: {
          title: {
            horizontalAlignment: "center",
            subtitle: {
              horizontalAlignment: "center"
            }
          }
        },
        rangeSelector: {
          sliderHandle: {
            opacity: 0.5
          }
        },
        treeMap: {
          group: {
            label: {
              font: {
                weight: 500
              }
            }
          }
        }
      },
      baseThemeName: "generic.light"
    }, {
      theme: {
        name: "material.light",
        gridColor: "#e0e0e0",
        axisColor: LIGHT_LABEL_COLOR,
        primaryTitleColor: LIGHT_TITLE_COLOR,
        legend: {
          font: {
            color: LIGHT_LABEL_COLOR
          }
        },
        chart: {
          scrollBar: {
            color: "#bfbfbf",
            opacity: 0.7
          }
        },
        gauge: {
          rangeContainer: {
            backgroundColor: "rgba(0,0,0,0.2)"
          }
        },
        barGauge: {
          backgroundColor: "#efefef"
        }
      },
      baseThemeName: "material"
    }, {
      theme: {
        name: "material.dark",
        gridColor: "#515159",
        backgroundColor: DARK_BACKGROUND_COLOR,
        axisColor: DARK_LABEL_COLOR,
        font: {
          color: DARK_LABEL_COLOR
        },
        primaryTitleColor: DARK_TITLE_COLOR,
        secondaryTitleColor: DARK_TITLE_COLOR,
        tooltip: {
          color: "#000"
        },
        export: {
          backgroundColor: DARK_BACKGROUND_COLOR,
          font: {
            color: "#dbdbdb"
          },
          button: {
            default: {
              color: "#dedede",
              borderColor: "#4d4d4d",
              backgroundColor: DARK_BACKGROUND_COLOR
            },
            hover: {
              color: "#dedede",
              borderColor: "#6c6c6c",
              backgroundColor: "#3f3f4b"
            },
            focus: {
              color: "#dedede",
              borderColor: "#8d8d8d",
              backgroundColor: "#494956"
            },
            active: {
              color: "#dedede",
              borderColor: "#8d8d8d",
              backgroundColor: "#494956"
            }
          },
          shadowColor: "#292929"
        },
        "chart:common": {
          commonSeriesSettings: {
            label: {
              border: {
                color: LABEL_BORDER_COLOR
              }
            },
            valueErrorBar: {
              color: WHITE
            }
          }
        },
        "chart:common:axis": {
          constantLineStyle: {
            color: WHITE
          }
        },
        "chart:common:annotation": {
          border: {
            color: "#000"
          },
          color: "#000"
        },
        chart: {
          commonPaneSettings: {
            border: {
              color: LABEL_BORDER_COLOR
            }
          },
          commonAxisSettings: {
            breakStyle: {
              color: BREAK_STYLE_COLOR
            }
          },
          zoomAndPan: {
            dragBoxStyle: {
              color: WHITE
            }
          }
        },
        gauge: {
          rangeContainer: {
            backgroundColor: RANGE_COLOR
          },
          valueIndicators: {
            _b: {
              color: RANGE_COLOR
            },
            rangebar: {
              color: "#84788b"
            },
            twocolorneedle: {
              secondColor: "#ba544d"
            },
            trianglemarker: {
              color: "#b7918f"
            },
            textcloud: {
              color: "#ba544d"
            }
          }
        },
        barGauge: {
          backgroundColor: "#3c3c3c"
        },
        rangeSelector: {
          scale: {
            tick: {
              color: WHITE,
              opacity: 0.32
            },
            minorTick: {
              color: WHITE,
              opacity: 0.1
            },
            breakStyle: {
              color: BREAK_STYLE_COLOR
            }
          },
          selectedRangeColor: RANGE_COLOR,
          sliderMarker: {
            color: RANGE_COLOR,
            font: {
              color: DARK_BACKGROUND_COLOR
            }
          },
          sliderHandle: {
            color: WHITE,
            opacity: 0.2
          },
          shutter: {
            color: WHITE,
            opacity: 0.1
          }
        },
        map: {
          background: {
            borderColor: "#3f3f3f"
          },
          layer: {
            label: {
              stroke: BLACK,
              font: {
                color: WHITE
              }
            }
          },
          "layer:area": {
            borderColor: DARK_BACKGROUND_COLOR,
            color: AREA_LAYER_COLOR,
            hoveredBorderColor: WHITE,
            selectedBorderColor: WHITE
          },
          "layer:line": {
            color: "#c77244",
            hoveredColor: "#ff5d04",
            selectedColor: "#ff784f"
          },
          "layer:marker:bubble": {
            hoveredBorderColor: WHITE,
            selectedBorderColor: WHITE
          },
          "layer:marker:pie": {
            hoveredBorderColor: WHITE,
            selectedBorderColor: WHITE
          },
          legend: {
            border: {
              color: "#3f3f3f"
            },
            font: {
              color: WHITE
            }
          },
          controlBar: {
            borderColor: LINE_COLOR,
            color: DARK_BACKGROUND_COLOR
          }
        },
        treeMap: {
          group: {
            color: "#4c4c4c",
            label: {
              font: {
                color: "#a3a3a3"
              }
            }
          }
        },
        sparkline: {
          lineColor: LINE_COLOR,
          firstLastColor: LINE_COLOR,
          barPositiveColor: POSITIVE_COLOR,
          barNegativeColor: TARGET_COLOR,
          winColor: POSITIVE_COLOR,
          lossColor: TARGET_COLOR,
          pointColor: DARK_BACKGROUND_COLOR
        },
        bullet: {
          targetColor: TARGET_COLOR
        },
        funnel: {
          item: {
            border: {
              color: DARK_BACKGROUND_COLOR
            }
          }
        },
        sankey: {
          label: {
            font: {
              color: WHITE
            }
          }
        }
      },
      baseThemeName: "material"
    }];
    function getMaterialColorScheme(accentName, themeName, accentColor) {
      return {
        theme: {
          name: "material." + accentName + "." + themeName,
          rangeSelector: {
            selectedRangeColor: accentColor,
            sliderMarker: {
              color: accentColor
            },
            sliderHandle: {
              color: accentColor
            }
          },
          map: {
            "layer:marker:dot": {
              color: accentColor
            },
            "layer:marker:bubble": {
              color: accentColor
            },
            legend: {
              markerColor: accentColor
            }
          },
          bullet: {
            color: accentColor
          },
          gauge: {
            valueIndicators: {
              rangebar: {
                color: accentColor
              },
              textcloud: {
                color: accentColor
              }
            }
          }
        },
        baseThemeName: "material." + themeName
      };
    }
    var materialAccents = {
      blue: "#03a9f4",
      lime: "#cddc39",
      orange: "#ff5722",
      purple: "#9c27b0",
      teal: "#009688"
    };
    for (accent in materialAccents) {
      if (Object.prototype.hasOwnProperty.call(materialAccents, accent)) {
        color = materialAccents[accent];
        themes.push(getMaterialColorScheme(accent, "light", color), getMaterialColorScheme(accent, "dark", color), {
          theme: {
            name: "material.".concat(accent, ".light.compact")
          },
          baseThemeName: "material.".concat(accent, ".light")
        }, {
          theme: {
            name: "material.".concat(accent, ".dark.compact")
          },
          baseThemeName: "material.".concat(accent, ".dark")
        });
      }
    }
    var _default = themes;
    exports.default = _default;
    module.exports = exports.default;
    module.exports.default = exports.default;
    var color;
    var accent;
  }
});

// node_modules/devextreme/cjs/viz/themes.js
var require_themes2 = __commonJS({
  "node_modules/devextreme/cjs/viz/themes.js"(exports) {
    "use strict";
    exports.addCacheItem = addCacheItem;
    exports.currentTheme = currentTheme;
    exports.getTheme = getTheme;
    exports.refreshTheme = refreshTheme;
    exports.registerTheme = registerTheme;
    exports.registerThemeSchemeAlias = registerThemeSchemeAlias;
    exports.removeCacheItem = removeCacheItem;
    var _extend2 = require_extend();
    var _iterator = require_iterator();
    var _utils = require_utils();
    var _themes = require_themes();
    var _type = require_type();
    var _generic = _interopRequireDefault(require_generic_light());
    var _generic2 = _interopRequireDefault(require_generic_carmine());
    var _generic3 = _interopRequireDefault(require_generic_dark());
    var _generic4 = _interopRequireDefault(require_generic_contrast());
    var _generic5 = _interopRequireDefault(require_generic_darkmoon());
    var _generic6 = _interopRequireDefault(require_generic_darkviolet());
    var _generic7 = _interopRequireDefault(require_generic_greenmist());
    var _generic8 = _interopRequireDefault(require_generic_softblue());
    var _material = _interopRequireDefault(require_material());
    function _interopRequireDefault(obj) {
      return obj && obj.j ? obj : {
        default: obj
      };
    }
    var themes = {};
    var themesMapping = {};
    var themesSchemeMapping = {};
    var _extend = _extend2.extend;
    var _each = _iterator.each;
    var currentThemeName = null;
    var defaultTheme;
    var nextCacheUid = 0;
    var widgetsCache = {};
    function getTheme(themeName) {
      var name = (0, _utils.normalizeEnum)(themeName);
      return themes[name] || themes[themesMapping[name] || currentTheme()];
    }
    function findThemeNameByName(name, scheme) {
      return themesMapping[name + "." + scheme] || themesSchemeMapping[name + "." + scheme] || themesMapping[name];
    }
    function findThemeNameByPlatform(platform, version, scheme) {
      return findThemeNameByName(platform + version, scheme) || findThemeNameByName(platform, scheme);
    }
    function currentTheme(themeName, colorScheme) {
      if (!arguments.length) {
        return currentThemeName || findThemeNameByName((0, _themes.current)()) || defaultTheme;
      }
      var scheme = (0, _utils.normalizeEnum)(colorScheme);
      currentThemeName = (themeName && themeName.platform ? findThemeNameByPlatform((0, _utils.normalizeEnum)(themeName.platform), themeName.version, scheme) : findThemeNameByName((0, _utils.normalizeEnum)(themeName), scheme)) || currentThemeName;
      return this;
    }
    function getThemeInfo(themeName, splitter) {
      var k = themeName.indexOf(splitter);
      return k > 0 ? {
        name: themeName.substring(0, k),
        scheme: themeName.substring(k + 1)
      } : null;
    }
    function registerThemeName(themeName, targetThemeName) {
      var themeInfo = getThemeInfo(themeName, ".") || {
        name: themeName
      };
      var name = themeInfo.name;
      var scheme = themeInfo.scheme;
      if (scheme) {
        themesMapping[name] = themesMapping[name] || targetThemeName;
        themesMapping[name + "." + scheme] = targetThemeName;
      } else {
        themesMapping[name] = targetThemeName;
      }
    }
    function registerTheme(theme, baseThemeName) {
      var themeName = (0, _utils.normalizeEnum)(theme && theme.name);
      if (themeName) {
        theme.isDefault && (defaultTheme = themeName);
        registerThemeName(themeName, themeName);
        themes[themeName] = _extend(true, {}, getTheme(baseThemeName), patchTheme(theme));
      }
    }
    function registerThemeSchemeAlias(from, to) {
      themesSchemeMapping[from] = to;
    }
    function mergeScalar(target, field, source, sourceValue) {
      var _value = source ? source[field] : sourceValue;
      if (void 0 !== _value && void 0 === target[field]) {
        target[field] = _value;
      }
    }
    function mergeObject(target, field, source, sourceValue) {
      var _value = source ? source[field] : sourceValue;
      if (void 0 !== _value) {
        target[field] = _extend(true, {}, _value, target[field]);
      }
    }
    function patchTheme(theme) {
      theme = _extend(true, {
        loadingIndicator: {
          font: {}
        },
        export: {
          font: {}
        },
        legend: {
          font: {},
          border: {}
        },
        title: {
          font: {}
        },
        tooltip: {
          font: {}
        },
        "chart:common": {},
        "chart:common:axis": {
          grid: {},
          minorGrid: {},
          tick: {},
          minorTick: {},
          title: {
            font: {}
          },
          label: {
            font: {}
          }
        },
        "chart:common:annotation": {
          font: {},
          border: {}
        },
        chart: {
          commonSeriesSettings: {
            candlestick: {}
          }
        },
        pie: {},
        polar: {},
        gauge: {
          scale: {
            tick: {},
            minorTick: {},
            label: {
              font: {}
            }
          }
        },
        barGauge: {},
        funnel: {},
        sankey: {},
        map: {
          background: {}
        },
        treeMap: {
          tile: {
            selectionStyle: {
              border: {}
            }
          },
          group: {
            border: {},
            selectionStyle: {
              border: {}
            },
            label: {
              font: {}
            }
          }
        },
        rangeSelector: {
          scale: {
            tick: {},
            minorTick: {},
            label: {
              font: {}
            }
          },
          chart: {}
        },
        sparkline: {},
        bullet: {}
      }, theme);
      mergeScalar(theme.loadingIndicator, "backgroundColor", theme);
      mergeScalar(theme.chart.commonSeriesSettings.candlestick, "innerColor", null, theme.backgroundColor);
      mergeScalar(theme.map.background, "color", null, theme.backgroundColor);
      mergeScalar(theme.title.font, "color", null, theme.primaryTitleColor);
      mergeObject(theme.title, "subtitle", null, theme.title);
      mergeScalar(theme.legend.font, "color", null, theme.secondaryTitleColor);
      mergeScalar(theme.legend.border, "color", null, theme.gridColor);
      patchAxes(theme);
      _each(["chart", "pie", "polar", "gauge", "barGauge", "map", "treeMap", "funnel", "rangeSelector", "sparkline", "bullet", "sankey"], function(_, section) {
        mergeScalar(theme[section], "redrawOnResize", theme);
        mergeScalar(theme[section], "containerBackgroundColor", null, theme.backgroundColor);
        mergeObject(theme[section], "tooltip", theme);
        mergeObject(theme[section], "export", theme);
      });
      _each(["chart", "pie", "polar", "gauge", "barGauge", "map", "treeMap", "funnel", "rangeSelector", "sankey"], function(_, section) {
        mergeObject(theme[section], "loadingIndicator", theme);
        mergeObject(theme[section], "legend", theme);
        mergeObject(theme[section], "title", theme);
      });
      _each(["chart", "pie", "polar"], function(_, section) {
        mergeObject(theme, section, null, theme["chart:common"]);
      });
      _each(["chart", "polar"], function(_, section) {
        theme[section] = theme[section] || {};
        mergeObject(theme[section], "commonAxisSettings", null, theme["chart:common:axis"]);
      });
      _each(["chart", "polar", "map", "pie"], function(_, section) {
        theme[section] = theme[section] || {};
        mergeObject(theme[section], "commonAnnotationSettings", null, theme["chart:common:annotation"]);
      });
      mergeObject(theme.rangeSelector.chart, "commonSeriesSettings", theme.chart);
      mergeObject(theme.rangeSelector.chart, "dataPrepareSettings", theme.chart);
      mergeScalar(theme.treeMap.group.border, "color", null, theme.gridColor);
      mergeScalar(theme.treeMap.tile.selectionStyle.border, "color", null, theme.primaryTitleColor);
      mergeScalar(theme.treeMap.group.selectionStyle.border, "color", null, theme.primaryTitleColor);
      mergeScalar(theme.map.legend, "backgroundColor", theme);
      patchMapLayers(theme);
      return theme;
    }
    function patchAxes(theme) {
      var commonAxisSettings = theme["chart:common:axis"];
      _each([commonAxisSettings.grid, commonAxisSettings.minorGrid], function(_, obj) {
        mergeScalar(obj, "color", null, theme.gridColor);
      });
      _each([commonAxisSettings, commonAxisSettings.tick, commonAxisSettings.minorTick, commonAxisSettings.label.font], function(_, obj) {
        mergeScalar(obj, "color", null, theme.axisColor);
      });
      mergeScalar(commonAxisSettings.title.font, "color", null, theme.secondaryTitleColor);
      mergeScalar(theme.gauge.scale.label.font, "color", null, theme.axisColor);
      mergeScalar(theme.gauge.scale.tick, "color", null, theme.backgroundColor);
      mergeScalar(theme.gauge.scale.minorTick, "color", null, theme.backgroundColor);
      mergeScalar(theme.rangeSelector.scale.label.font, "color", null, theme.axisColor);
    }
    function patchMapLayers(theme) {
      var map = theme.map;
      _each(["area", "line", "marker"], function(_, section) {
        mergeObject(map, "layer:" + section, null, map.layer);
      });
      _each(["dot", "bubble", "pie", "image"], function(_, section) {
        mergeObject(map, "layer:marker:" + section, null, map["layer:marker"]);
      });
    }
    function addCacheItem(target) {
      var cacheUid = ++nextCacheUid;
      target.ch = cacheUid;
      widgetsCache[cacheUid] = target;
    }
    function removeCacheItem(target) {
      delete widgetsCache[target.ch];
    }
    function refreshTheme() {
      _each(widgetsCache, function() {
        this.refresh();
      });
      return this;
    }
    if ((0, _type.isEmptyObject)(themes) && (0, _type.isEmptyObject)(themesMapping) && !defaultTheme) {
      [].concat(_generic.default, _generic2.default, _generic3.default, _generic4.default, _generic5.default, _generic6.default, _generic7.default, _generic8.default, _material.default).forEach(function(t) {
        registerTheme(t.theme, t.baseThemeName);
      });
    }
  }
});

// node_modules/devextreme/cjs/viz/core/base_theme_manager.js
var require_base_theme_manager = __commonJS({
  "node_modules/devextreme/cjs/viz/core/base_theme_manager.js"(exports) {
    "use strict";
    exports.BaseThemeManager = void 0;
    var _class = _interopRequireDefault(require_class());
    var _extend2 = require_extend();
    var _type = require_type();
    var _iterator = require_iterator();
    var _palette = require_palette();
    var _utils = require_utils();
    var _themes = require_themes2();
    function _interopRequireDefault(obj) {
      return obj && obj.j ? obj : {
        default: obj
      };
    }
    var _getTheme = _themes.getTheme;
    var _addCacheItem = _themes.addCacheItem;
    var _removeCacheItem = _themes.removeCacheItem;
    var _extend = _extend2.extend;
    var _each = _iterator.each;
    function getThemePart(theme, path) {
      var _theme = theme;
      path && _each(path.split("."), function(_, pathItem) {
        return _theme = _theme[pathItem];
      });
      return _theme;
    }
    var BaseThemeManager = _class.default.inherit({
      ctor: function(options) {
        this.Dc = options.themeSection;
        this.qb = options.fontFields || [];
        _addCacheItem(this);
      },
      dispose: function() {
        _removeCacheItem(this);
        this.dh = this.rb = this.Ue = null;
        return this;
      },
      setCallback: function(callback) {
        this.dh = callback;
        return this;
      },
      setTheme: function(theme, rtl) {
        this.Vp = theme;
        this.Hd = rtl;
        return this.refresh();
      },
      refresh: function() {
        var current = this.Vp || {};
        var theme = _getTheme(current.name || current);
        this.Wp = theme.name;
        this.Ve = theme.defaultPalette;
        this.Ue = _extend({}, theme.font, current.font);
        this.Dc && _each(this.Dc.split("."), function(_, path) {
          theme = _extend(true, {}, theme[path]);
        });
        this.rb = _extend(true, {}, theme, (0, _type.isString)(current) ? {} : current);
        this.Xj();
        if ((0, _utils.parseScalar)(this.Hd, this.rb.rtlEnabled)) {
          _extend(true, this.rb, this.rb.Hd);
        }
        this.dh();
        return this;
      },
      theme: function(path) {
        return getThemePart(this.rb, path);
      },
      themeName: function() {
        return this.Wp;
      },
      createPalette: function(palette, options) {
        return (0, _palette.createPalette)(palette, options, this.Ve);
      },
      createDiscretePalette: function(palette, count) {
        return (0, _palette.getDiscretePalette)(palette, count, this.Ve);
      },
      createGradientPalette: function(palette) {
        return (0, _palette.getGradientPalette)(palette, this.Ve);
      },
      getAccentColor: function(palette) {
        return (0, _palette.getAccentColor)(palette, this.Ve);
      },
      Xj: function() {
        var that = this;
        _each(that.qb || [], function(_, path) {
          that.Xp(getThemePart(that.rb, path));
        });
      },
      Xp: function(font) {
        _extend(font, this.Ue, _extend({}, font));
      }
    });
    exports.BaseThemeManager = BaseThemeManager;
  }
});

// node_modules/devextreme/cjs/core/utils/comparator.js
var require_comparator = __commonJS({
  "node_modules/devextreme/cjs/core/utils/comparator.js"(exports) {
    "use strict";
    exports.equals = void 0;
    var _dom_adapter = _interopRequireDefault(require_dom_adapter());
    var _data = require_data();
    var _type = require_type();
    function _interopRequireDefault(obj) {
      return obj && obj.j ? obj : {
        default: obj
      };
    }
    function _typeof(obj) {
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    var hasNegation = function(oldValue, newValue) {
      return 1 / oldValue === 1 / newValue;
    };
    var equals = function(oldValue, newValue) {
      oldValue = (0, _data.toComparable)(oldValue, true);
      newValue = (0, _data.toComparable)(newValue, true);
      if (oldValue && newValue && (0, _type.isRenderer)(oldValue) && (0, _type.isRenderer)(newValue)) {
        return newValue.is(oldValue);
      }
      var oldValueIsNaN = oldValue !== oldValue;
      var newValueIsNaN = newValue !== newValue;
      if (oldValueIsNaN && newValueIsNaN) {
        return true;
      }
      if (0 === oldValue && 0 === newValue) {
        return hasNegation(oldValue, newValue);
      }
      if (null === oldValue || "object" !== _typeof(oldValue) || _dom_adapter.default.isElementNode(oldValue)) {
        return oldValue === newValue;
      }
      return false;
    };
    exports.equals = equals;
  }
});

// node_modules/devextreme/cjs/core/options/utils.js
var require_utils3 = __commonJS({
  "node_modules/devextreme/cjs/core/options/utils.js"(exports) {
    "use strict";
    exports.normalizeOptions = exports.getParentName = exports.getNestedOptionValue = exports.getFieldName = exports.deviceMatch = exports.createDefaultOptionRules = exports.convertRulesToOptions = void 0;
    var _devices = _interopRequireDefault(require_devices());
    var _type = require_type();
    var _common = require_common();
    var _extend = require_extend();
    var _data = require_data();
    function _interopRequireDefault(obj) {
      return obj && obj.j ? obj : {
        default: obj
      };
    }
    function _typeof(obj) {
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _defineProperty(obj, key, value) {
      key = _toPropertyKey(key);
      if (key in obj) {
        Object.defineProperty(obj, key, {
          value,
          enumerable: true,
          configurable: true,
          writable: true
        });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return "symbol" === _typeof(key) ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if ("object" !== _typeof(input) || null === input) {
        return input;
      }
      var prim = input[Symbol.toPrimitive];
      if (void 0 !== prim) {
        var res = prim.call(input, hint || "default");
        if ("object" !== _typeof(res)) {
          return res;
        }
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return ("string" === hint ? String : Number)(input);
    }
    var cachedGetters = {};
    var convertRulesToOptions = function(rules) {
      var currentDevice = _devices.default.current();
      return rules.reduce(function(options, _ref) {
        var device = _ref.device, ruleOptions = _ref.options;
        var deviceFilter = device || {};
        var match = (0, _type.isFunction)(deviceFilter) ? deviceFilter(currentDevice) : deviceMatch(currentDevice, deviceFilter);
        if (match) {
          (0, _extend.extend)(true, options, ruleOptions);
        }
        return options;
      }, {});
    };
    exports.convertRulesToOptions = convertRulesToOptions;
    var normalizeOptions = function(options, value) {
      return "string" !== typeof options ? options : _defineProperty({}, options, value);
    };
    exports.normalizeOptions = normalizeOptions;
    var deviceMatch = function(device, filter) {
      return (0, _type.isEmptyObject)(filter) || (0, _common.findBestMatches)(device, [filter]).length > 0;
    };
    exports.deviceMatch = deviceMatch;
    var getFieldName = function(fullName) {
      return fullName.substr(fullName.lastIndexOf(".") + 1);
    };
    exports.getFieldName = getFieldName;
    var getParentName = function(fullName) {
      return fullName.substr(0, fullName.lastIndexOf("."));
    };
    exports.getParentName = getParentName;
    var getNestedOptionValue = function(optionsObject, name) {
      cachedGetters[name] = cachedGetters[name] || (0, _data.compileGetter)(name);
      return cachedGetters[name](optionsObject, {
        functionsAsIs: true
      });
    };
    exports.getNestedOptionValue = getNestedOptionValue;
    var createDefaultOptionRules = function() {
      var options = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [];
      return options;
    };
    exports.createDefaultOptionRules = createDefaultOptionRules;
  }
});

// node_modules/devextreme/cjs/core/options/option_manager.js
var require_option_manager = __commonJS({
  "node_modules/devextreme/cjs/core/options/option_manager.js"(exports) {
    "use strict";
    exports.OptionManager = void 0;
    var _data = require_data();
    var _common = require_common();
    var _comparator = require_comparator();
    var _extend = require_extend();
    var _type = require_type();
    var _utils = require_utils3();
    var cachedGetters = {};
    var cachedSetters = {};
    var OptionManager = function() {
      function OptionManager2(options, optionsByReference) {
        this.e = options;
        this.Id = optionsByReference;
        this.eh;
        this.fh;
        this.Yj;
      }
      var _proto = OptionManager2.prototype;
      _proto.Yp = function(options, rulesOptions) {
        (0, _extend.extend)(true, options, rulesOptions);
        for (var fieldName in this.Id) {
          if (Object.prototype.hasOwnProperty.call(rulesOptions, fieldName)) {
            options[fieldName] = rulesOptions[fieldName];
          }
        }
      };
      _proto.Zp = function(name, value, merge, silent) {
        var previousValue = this.get(this.e, name, false);
        if (!(0, _comparator.equals)(previousValue, value)) {
          var path = (0, _data.getPathParts)(name);
          !silent && this.eh(name, previousValue, value);
          cachedSetters[name] = cachedSetters[name] || (0, _data.compileSetter)(name);
          cachedSetters[name](this.e, value, {
            functionsAsIs: true,
            merge: (0, _type.isDefined)(merge) ? merge : !this.Id[name],
            unwrapObservables: path.length > 1 && !!this.Id[path[0]]
          });
          !silent && this.fh(name, value, previousValue);
        }
      };
      _proto.Zj = function(options, name, value, silent) {
        if ((0, _type.isPlainObject)(value)) {
          for (var valueName in value) {
            this.Zj(options, "".concat(name, ".").concat(valueName), value[valueName]);
          }
        }
        this.Yj(options, name, value, silent);
      };
      _proto.get = function() {
        var options = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this.e;
        var name = arguments.length > 1 ? arguments[1] : void 0;
        var unwrapObservables = arguments.length > 2 ? arguments[2] : void 0;
        cachedGetters[name] = cachedGetters[name] || (0, _data.compileGetter)(name);
        return cachedGetters[name](options, {
          functionsAsIs: true,
          unwrapObservables
        });
      };
      _proto.set = function(options, value, merge, silent) {
        options = (0, _utils.normalizeOptions)(options, value);
        for (var name in options) {
          this.Zj(options, name, options[name], silent);
        }
        for (var _name in options) {
          this.Zp(_name, options[_name], merge, silent);
        }
      };
      _proto.onRelevantNamesPrepared = function(callBack) {
        this.Yj = callBack;
      };
      _proto.onChanging = function(callBack) {
        this.eh = callBack;
      };
      _proto.onChanged = function(callBack) {
        this.fh = callBack;
      };
      _proto.dispose = function() {
        this.eh = _common.noop;
        this.fh = _common.noop;
      };
      return OptionManager2;
    }();
    exports.OptionManager = OptionManager;
  }
});

// node_modules/devextreme/cjs/core/options/index.js
var require_options = __commonJS({
  "node_modules/devextreme/cjs/core/options/index.js"(exports) {
    "use strict";
    exports.Options = void 0;
    var _type = require_type();
    var _common = require_common();
    var _option_manager = require_option_manager();
    var _data = require_data();
    var _utils = require_utils3();
    var _extend = require_extend();
    function _typeof(obj) {
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _extends() {
      _extends = Object.assign ? Object.assign.bind() : function(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends.apply(this, arguments);
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) {
          descriptor.writable = true;
        }
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) {
        _defineProperties(Constructor.prototype, protoProps);
      }
      if (staticProps) {
        _defineProperties(Constructor, staticProps);
      }
      Object.defineProperty(Constructor, "prototype", {
        writable: false
      });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return "symbol" === _typeof(key) ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if ("object" !== _typeof(input) || null === input) {
        return input;
      }
      var prim = input[Symbol.toPrimitive];
      if (void 0 !== prim) {
        var res = prim.call(input, hint || "default");
        if ("object" !== _typeof(res)) {
          return res;
        }
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return ("string" === hint ? String : Number)(input);
    }
    var Options = function() {
      function Options2(options, defaultOptions, optionsByReference, deprecatedOptions) {
        var _this = this;
        this.gh;
        this.hh;
        this.ih;
        this._b = defaultOptions;
        this.Ec = deprecatedOptions;
        this.We = [];
        this._p();
        this.Ka = new _option_manager.OptionManager(options, optionsByReference);
        this.Ka.onRelevantNamesPrepared(function(options2, name, value, silent) {
          return _this.$p(options2, name, value, silent);
        });
        this.jh = {};
        this.Xe = [];
      }
      var _proto = Options2.prototype;
      _proto._p = function() {
        for (var optionName in this.Ec) {
          this.We.push(optionName);
        }
      };
      _proto._j = function(rules) {
        rules = Array.isArray(rules) ? this.Xe.concat(rules) : this.Xe;
        return (0, _utils.convertRulesToOptions)(rules);
      };
      _proto.aq = function(option) {
        var info = this.Ec[option];
        if (info) {
          this.gh(option, info);
        }
      };
      _proto.$p = function(options, name, value, silent) {
        if (name) {
          var normalizedName = this.$j(name, silent);
          if (normalizedName && normalizedName !== name) {
            this.bq(options, normalizedName, value);
            this.cq(options, name);
          }
        }
      };
      _proto.bq = function(options, fullName, value) {
        var fieldName = "";
        var fieldObject = null;
        do {
          fieldName = fieldName ? ".".concat(fieldName) : "";
          fieldName = (0, _utils.getFieldName)(fullName) + fieldName;
          fullName = (0, _utils.getParentName)(fullName);
          fieldObject = fullName ? this.Ka.get(options, fullName, false) : options;
        } while (!fieldObject);
        fieldObject[fieldName] = value;
      };
      _proto.cq = function(options, name) {
        delete options[name];
        var previousFieldName = (0, _utils.getParentName)(name);
        var fieldObject = previousFieldName ? this.Ka.get(options, previousFieldName, false) : options;
        if (fieldObject) {
          delete fieldObject[(0, _utils.getFieldName)(name)];
        }
      };
      _proto.$j = function(name, silent) {
        if (this.We.length && name) {
          for (var i = 0; i < this.We.length; i++) {
            if (this.We[i] === name) {
              var deprecate = this.Ec[name];
              if (deprecate) {
                !silent && this.aq(name);
                return deprecate.alias || name;
              }
            }
          }
        }
        return name;
      };
      _proto.addRules = function(rules) {
        this.Xe = rules.concat(this.Xe);
      };
      _proto.applyRules = function(rules) {
        var options = this._j(rules);
        this.silent(options);
      };
      _proto.dispose = function() {
        this.gh = _common.noop;
        this.hh = _common.noop;
        this.ih = _common.noop;
        this.Ka.dispose();
      };
      _proto.onChanging = function(callBack) {
        this.Ka.onChanging(callBack);
      };
      _proto.onChanged = function(callBack) {
        this.Ka.onChanged(callBack);
      };
      _proto.onDeprecated = function(callBack) {
        this.gh = callBack;
      };
      _proto.onStartChange = function(callBack) {
        this.hh = callBack;
      };
      _proto.onEndChange = function(callBack) {
        this.ih = callBack;
      };
      _proto.isInitial = function(name) {
        var value = this.silent(name);
        var initialValue = this.initial(name);
        var areFunctions = (0, _type.isFunction)(value) && (0, _type.isFunction)(initialValue);
        return areFunctions ? value.toString() === initialValue.toString() : (0, _common.equalByValue)(value, initialValue);
      };
      _proto.initial = function(name) {
        return (0, _utils.getNestedOptionValue)(this.ty, name);
      };
      _proto.option = function(options, value) {
        var isGetter = arguments.length < 2 && "object" !== (0, _type.type)(options);
        if (isGetter) {
          return this.Ka.get(void 0, this.$j(options));
        } else {
          this.hh();
          try {
            this.Ka.set(options, value);
          } finally {
            this.ih();
          }
        }
      };
      _proto.silent = function(options, value) {
        var isGetter = arguments.length < 2 && "object" !== (0, _type.type)(options);
        if (isGetter) {
          return this.Ka.get(void 0, options, void 0, true);
        } else {
          this.Ka.set(options, value, void 0, true);
        }
      };
      _proto.reset = function(name) {
        var _this2 = this;
        if (name) {
          var fullPath = (0, _data.getPathParts)(name);
          var value = fullPath.reduce(function(value2, field) {
            return value2 ? value2[field] : _this2.initial(field);
          }, null);
          var defaultValue = (0, _type.isObject)(value) ? _extends({}, value) : value;
          this.Ka.set(name, defaultValue, false);
        }
      };
      _proto.getAliasesByName = function(name) {
        var _this3 = this;
        return Object.keys(this.Ec).filter(function(aliasName) {
          return name === _this3.Ec[aliasName].alias;
        });
      };
      _proto.isDeprecated = function(name) {
        return Object.prototype.hasOwnProperty.call(this.Ec, name);
      };
      _proto.cache = function(name, options) {
        var isGetter = arguments.length < 2;
        if (isGetter) {
          return this.jh[name];
        } else {
          this.jh[name] = (0, _extend.extend)(this.jh[name], options);
        }
      };
      _createClass(Options2, [{
        key: "_initial",
        get: function() {
          if (!this.Ye) {
            var rulesOptions = this._j(this.silent("defaultOptionsRules"));
            this.Ye = this._b;
            this.Ka.Yp(this.Ye, rulesOptions);
          }
          return this.Ye;
        },
        set: function(value) {
          this.Ye = value;
        }
      }]);
      return Options2;
    }();
    exports.Options = Options;
  }
});

// node_modules/devextreme/cjs/core/action.js
var require_action = __commonJS({
  "node_modules/devextreme/cjs/core/action.js"(exports, module) {
    "use strict";
    exports.default = void 0;
    var _renderer = _interopRequireDefault(require_renderer());
    var _window = require_window();
    var _type = require_type();
    var _iterator = require_iterator();
    function _interopRequireDefault(obj) {
      return obj && obj.j ? obj : {
        default: obj
      };
    }
    var Action = function() {
      function Action2(action, config) {
        config = config || {};
        this.dq = action;
        this.Y = config.context || (0, _window.getWindow)();
        this.fq = config.beforeExecute;
        this.gq = config.afterExecute;
        this.hq = config.component;
        this.iq = config.validatingTargetName;
        var excludeValidators = this.jq = {};
        if (config.excludeValidators) {
          for (var i = 0; i < config.excludeValidators.length; i++) {
            excludeValidators[config.excludeValidators[i]] = true;
          }
        }
      }
      var _proto = Action2.prototype;
      _proto.execute = function() {
        var e = {
          action: this.dq,
          args: Array.prototype.slice.call(arguments),
          context: this.Y,
          component: this.hq,
          validatingTargetName: this.iq,
          cancel: false,
          handled: false
        };
        var beforeExecute = this.fq;
        var afterExecute = this.gq;
        var argsBag = e.args[0] || {};
        if (!this.kq(e)) {
          return;
        }
        null === beforeExecute || void 0 === beforeExecute ? void 0 : beforeExecute.call(this.Y, e);
        if (e.cancel) {
          return;
        }
        var result = this.lq(e);
        if (argsBag.cancel) {
          return;
        }
        null === afterExecute || void 0 === afterExecute ? void 0 : afterExecute.call(this.Y, e);
        return result;
      };
      _proto.kq = function(e) {
        var excludeValidators = this.jq;
        var executors = Action2.executors;
        for (var name in executors) {
          if (!excludeValidators[name]) {
            var _executor$validate;
            var executor = executors[name];
            null === (_executor$validate = executor.validate) || void 0 === _executor$validate ? void 0 : _executor$validate.call(executor, e);
            if (e.cancel) {
              return false;
            }
          }
        }
        return true;
      };
      _proto.lq = function(e) {
        var result;
        var executors = Action2.executors;
        for (var name in executors) {
          var _executor$execute;
          var executor = executors[name];
          null === (_executor$execute = executor.execute) || void 0 === _executor$execute ? void 0 : _executor$execute.call(executor, e);
          if (e.handled) {
            result = e.result;
            break;
          }
        }
        return result;
      };
      Action2.registerExecutor = function(name, executor) {
        if ((0, _type.isPlainObject)(name)) {
          (0, _iterator.each)(name, Action2.registerExecutor);
          return;
        }
        Action2.executors[name] = executor;
      };
      Action2.unregisterExecutor = function() {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        (0, _iterator.each)(args, function() {
          delete Action2.executors[this];
        });
      };
      return Action2;
    }();
    exports.default = Action;
    Action.executors = {};
    var createValidatorByTargetElement = function(condition) {
      return function(e) {
        if (!e.args.length) {
          return;
        }
        var args = e.args[0];
        var element = args[e.validatingTargetName] || args.element;
        if (element && condition((0, _renderer.default)(element))) {
          e.cancel = true;
        }
      };
    };
    Action.registerExecutor({
      disabled: {
        validate: createValidatorByTargetElement(function($target) {
          return $target.is(".dx-state-disabled, .dx-state-disabled *");
        })
      },
      readOnly: {
        validate: createValidatorByTargetElement(function($target) {
          return $target.is(".dx-state-readonly, .dx-state-readonly *:not(.dx-state-independent)");
        })
      },
      undefined: {
        execute: function(e) {
          if (!e.action) {
            e.result = void 0;
            e.handled = true;
          }
        }
      },
      func: {
        execute: function(e) {
          if ((0, _type.isFunction)(e.action)) {
            e.result = e.action.call(e.context, e.args[0]);
            e.handled = true;
          }
        }
      }
    });
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/devextreme/cjs/core/postponed_operations.js
var require_postponed_operations = __commonJS({
  "node_modules/devextreme/cjs/core/postponed_operations.js"(exports) {
    "use strict";
    exports.PostponedOperations = void 0;
    var _deferred = require_deferred();
    var _type = require_type();
    function _toConsumableArray(arr) {
      return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
    }
    function _nonIterableSpread() {
      throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _unsupportedIterableToArray(o, minLen) {
      if (!o) {
        return;
      }
      if ("string" === typeof o) {
        return _arrayLikeToArray(o, minLen);
      }
      var n = Object.prototype.toString.call(o).slice(8, -1);
      if ("Object" === n && o.constructor) {
        n = o.constructor.name;
      }
      if ("Map" === n || "Set" === n) {
        return Array.from(o);
      }
      if ("Arguments" === n || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) {
        return _arrayLikeToArray(o, minLen);
      }
    }
    function _iterableToArray(iter) {
      if ("undefined" !== typeof Symbol && null != iter[Symbol.iterator] || null != iter["@@iterator"]) {
        return Array.from(iter);
      }
    }
    function _arrayWithoutHoles(arr) {
      if (Array.isArray(arr)) {
        return _arrayLikeToArray(arr);
      }
    }
    function _arrayLikeToArray(arr, len) {
      if (null == len || len > arr.length) {
        len = arr.length;
      }
      for (var i = 0, arr2 = new Array(len); i < len; i++) {
        arr2[i] = arr[i];
      }
      return arr2;
    }
    var PostponedOperations = function() {
      function PostponedOperations2() {
        this.$b = {};
      }
      var _proto = PostponedOperations2.prototype;
      _proto.add = function(key, fn, postponedPromise) {
        if (key in this.$b) {
          postponedPromise && this.$b[key].promises.push(postponedPromise);
        } else {
          var completePromise = new _deferred.Deferred();
          this.$b[key] = {
            fn,
            completePromise,
            promises: postponedPromise ? [postponedPromise] : []
          };
        }
        return this.$b[key].completePromise.promise();
      };
      _proto.callPostponedOperations = function() {
        for (var key in this.$b) {
          var operation = this.$b[key];
          if ((0, _type.isDefined)(operation)) {
            if (operation.promises && operation.promises.length) {
              _deferred.when.apply(void 0, _toConsumableArray(operation.promises)).done(operation.fn).then(operation.completePromise.resolve);
            } else {
              operation.fn().done(operation.completePromise.resolve);
            }
          }
        }
        this.$b = {};
      };
      return PostponedOperations2;
    }();
    exports.PostponedOperations = PostponedOperations;
  }
});

// node_modules/devextreme/cjs/core/component.js
var require_component = __commonJS({
  "node_modules/devextreme/cjs/core/component.js"(exports) {
    "use strict";
    exports.Component = void 0;
    var _config = _interopRequireDefault(require_config());
    var _extend = require_extend();
    var _index = require_options();
    var _utils = require_utils3();
    var _class = _interopRequireDefault(require_class());
    var _action = _interopRequireDefault(require_action());
    var _errors = _interopRequireDefault(require_errors());
    var _callbacks = _interopRequireDefault(require_callbacks());
    var _events_strategy = require_events_strategy();
    var _public_component = require_public_component();
    var _postponed_operations = require_postponed_operations();
    var _type = require_type();
    var _common = require_common();
    var _data = require_data();
    function _interopRequireDefault(obj) {
      return obj && obj.j ? obj : {
        default: obj
      };
    }
    var getEventName = function(actionName) {
      return actionName.charAt(2).toLowerCase() + actionName.substr(3);
    };
    var isInnerOption = function(optionName) {
      return 0 === optionName.indexOf("_", 0);
    };
    var Component2 = _class.default.inherit({
      mq: function() {
        this.nq = {};
      },
      oq: function() {
        return this.nq;
      },
      Ze: function() {
        return {
          onInitialized: null,
          onOptionChanged: null,
          onDisposing: null,
          defaultOptionsRules: null
        };
      },
      pq: function() {
        return [];
      },
      bk: function(rules) {
        this.e.applyRules(rules);
      },
      qq: function(rules) {
        return (0, _utils.convertRulesToOptions)(rules);
      },
      rq: function(name) {
        return this.e.isInitial(name);
      },
      tq: function() {
        this.Id = {};
      },
      uq: function() {
        return this.Id;
      },
      ctor: function() {
        var options = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
        var _optionChangedCallbacks = options.kh, _disposingCallbacks = options.ck;
        this.NAME = (0, _public_component.name)(this.constructor);
        this.q = _events_strategy.EventsStrategy.create(this, options.eventsStrategy);
        this._e = 0;
        this.kh = _optionChangedCallbacks || (0, _callbacks.default)();
        this.ck = _disposingCallbacks || (0, _callbacks.default)();
        this.postponedOperations = new _postponed_operations.PostponedOperations();
        this.vq(options);
      },
      vq: function(options) {
        var _this = this;
        this.beginUpdate();
        try {
          this.tq();
          this.mq();
          this.e = new _index.Options(this.Ze(), this.Ze(), this.uq(), this.oq());
          this.e.onChanging(function(name, previousValue, value) {
            return _this.ac && _this.wq(name, previousValue, value);
          });
          this.e.onDeprecated(function(option, info) {
            return _this.xq(option, info);
          });
          this.e.onChanged(function(name, value, previousValue) {
            return _this.yq(name, value, previousValue);
          });
          this.e.onStartChange(function() {
            return _this.beginUpdate();
          });
          this.e.onEndChange(function() {
            return _this.endUpdate();
          });
          this.e.addRules(this.pq());
          if (options && options.onInitializing) {
            options.onInitializing.apply(this, [options]);
          }
          this.bk(options.defaultOptionsRules);
          this.zq(options);
        } finally {
          this.endUpdate();
        }
      },
      zq: function(options) {
        this.option(options);
      },
      G: function() {
        var _this2 = this;
        this.dk();
        this.on("disposing", function(args) {
          _this2.ck.fireWith(_this2, [args]);
        });
      },
      xq: function(option, info) {
        var message = info.message || "Use the '".concat(info.alias, "' option instead");
        _errors.default.log("W0001", this.NAME, option, info.since, message);
      },
      uy: function(since, alias) {
        _errors.default.log("W0000", this.NAME, since, "Use the '".concat(alias, "' widget instead"));
      },
      dk: function() {
        this.Aq = this.bc("onOptionChanged", {
          excludeValidators: ["disabled", "readOnly"]
        });
      },
      Bq: function() {
        this.Cq = this.bc("onDisposing", {
          excludeValidators: ["disabled", "readOnly"]
        });
      },
      $e: function(args) {
        switch (args.name) {
          case "onDisposing":
          case "onInitialized":
            break;
          case "onOptionChanged":
            this.dk();
        }
      },
      lh: function() {
        this.kh.empty();
        this.Bq();
        this.Cq();
        this.q.dispose();
        this.e.dispose();
        this.sb = true;
      },
      ek: function() {
        this._e++;
      },
      fk: function() {
        this._e = Math.max(this._e - 1, 0);
      },
      Jd: function() {
        return 0 === this._e;
      },
      gk: function() {
        return !this.hk && !this.ac;
      },
      isInitialized: function() {
        return this.ac;
      },
      Dq: function() {
        this.postponedOperations.callPostponedOperations();
        this.gk() && this.Eq();
      },
      Eq: function() {
        this.hk = true;
        try {
          this.G();
        } finally {
          this.hk = false;
          this.ek();
          this.bc("onInitialized", {
            excludeValidators: ["disabled", "readOnly"]
          })();
          this.fk();
          this.ac = true;
        }
      },
      instance: function() {
        return this;
      },
      beginUpdate: function() {
        this.ek();
      },
      endUpdate: function() {
        this.fk();
        this.Jd() && this.Dq();
      },
      wq: _common.noop,
      yq: function(option, value, previousValue) {
        if (this.ac) {
          var optionNames = [option].concat(this.e.getAliasesByName(option));
          for (var i = 0; i < optionNames.length; i++) {
            var name = optionNames[i];
            var args = {
              name: (0, _data.getPathParts)(name)[0],
              fullName: name,
              value,
              previousValue
            };
            if (!isInnerOption(name)) {
              this.kh.fireWith(this, [(0, _extend.extend)(this.mh(), args)]);
              this.Aq((0, _extend.extend)({}, args));
            }
            if (!this.sb && this.ik !== name) {
              this.$e(args);
            }
          }
        }
      },
      initialOption: function(name) {
        return this.e.initial(name);
      },
      jk: function() {
        return {
          context: this,
          component: this
        };
      },
      mh: function() {
        return {
          component: this
        };
      },
      Fq: function(actionSource, config) {
        var _this3 = this;
        var action;
        return function(e) {
          if (!(0, _type.isDefined)(e)) {
            e = {};
          }
          if (!(0, _type.isPlainObject)(e)) {
            e = {
              actionValue: e
            };
          }
          action = action || new _action.default(actionSource, (0, _extend.extend)(config, _this3.jk()));
          return action.execute.call(action, (0, _extend.extend)(e, _this3.mh()));
        };
      },
      bc: function(optionName, config) {
        var _this4 = this;
        var action;
        var eventName;
        var actionFunc;
        var result = function() {
          if (!eventName) {
            config = config || {};
            if ("string" !== typeof optionName) {
              throw _errors.default.Error("E0008");
            }
            if (0 === optionName.indexOf("on")) {
              eventName = getEventName(optionName);
            }
            actionFunc = _this4.option(optionName);
          }
          if (!action && !actionFunc && !config.beforeExecute && !config.afterExecute && !_this4.q.hasEvent(eventName)) {
            return;
          }
          if (!action) {
            var beforeExecute = config.beforeExecute;
            config.beforeExecute = function() {
              for (var _len2 = arguments.length, props = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
                props[_key2] = arguments[_key2];
              }
              beforeExecute && beforeExecute.apply(_this4, props);
              _this4.q.fireEvent(eventName, props[0].args);
            };
            action = _this4.Fq(actionFunc, config);
          }
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          if ((0, _config.default)().wrapActionsBeforeExecute) {
            var beforeActionExecute = _this4.option("beforeActionExecute") || _common.noop;
            var wrappedAction = beforeActionExecute(_this4, action, config) || action;
            return wrappedAction.apply(_this4, args);
          }
          return action.apply(_this4, args);
        };
        if ((0, _config.default)().wrapActionsBeforeExecute) {
          return result;
        }
        var onActionCreated = this.option("onActionCreated") || _common.noop;
        return onActionCreated(this, result, config) || result;
      },
      on: function(eventName, eventHandler) {
        this.q.on(eventName, eventHandler);
        return this;
      },
      off: function(eventName, eventHandler) {
        this.q.off(eventName, eventHandler);
        return this;
      },
      hasActionSubscription: function(actionName) {
        return !!this.e.silent(actionName) || this.q.hasEvent(getEventName(actionName));
      },
      isOptionDeprecated: function(name) {
        return this.e.isDeprecated(name);
      },
      Gq: function(name, value) {
        this.ik = name;
        this.option(name, value);
        this.ik = false;
      },
      lk: function(name, context) {
        var value = this.option(name);
        if ((0, _type.isFunction)(value)) {
          return value.bind(context)();
        }
        return value;
      },
      option: function() {
        var _this$_options;
        return (_this$_options = this.e).option.apply(_this$_options, arguments);
      },
      resetOption: function(name) {
        this.beginUpdate();
        this.e.reset(name);
        this.endUpdate();
      }
    });
    exports.Component = Component2;
  }
});

// node_modules/devextreme/cjs/core/utils/dom.js
var require_dom = __commonJS({
  "node_modules/devextreme/cjs/core/utils/dom.js"(exports) {
    "use strict";
    exports.resetActiveElement = exports.replaceWith = exports.normalizeTemplateElement = exports.isElementInDom = exports.insertBefore = exports.extractTemplateMarkup = exports.createTextElementHiddenCopy = exports.contains = exports.closestCommonParent = exports.clipboardText = exports.clearSelection = void 0;
    var _dom_adapter = _interopRequireDefault(require_dom_adapter());
    var _renderer = _interopRequireDefault(require_renderer());
    var _iterator = require_iterator();
    var _type = require_type();
    var _window = require_window();
    function _interopRequireDefault(obj) {
      return obj && obj.j ? obj : {
        default: obj
      };
    }
    var window2 = (0, _window.getWindow)();
    var getRootNodeHost = function(element) {
      if (!element.getRootNode) {
        return;
      }
      var host = element.getRootNode().host;
      if ((0, _type.isString)(host)) {
        return;
      }
      return host;
    };
    var resetActiveElement = function() {
      var activeElement = _dom_adapter.default.getActiveElement();
      if (activeElement && activeElement !== _dom_adapter.default.getBody()) {
        var _activeElement$blur;
        null === (_activeElement$blur = activeElement.blur) || void 0 === _activeElement$blur ? void 0 : _activeElement$blur.call(activeElement);
      }
    };
    exports.resetActiveElement = resetActiveElement;
    var clearSelection = function() {
      var selection = window2.getSelection();
      if (!selection) {
        return;
      }
      if ("Caret" === selection.type) {
        return;
      }
      if (selection.empty) {
        selection.empty();
      } else if (selection.removeAllRanges) {
        try {
          selection.removeAllRanges();
        } catch (e) {
        }
      }
    };
    exports.clearSelection = clearSelection;
    var closestCommonParent = function(startTarget, endTarget) {
      var $startTarget = (0, _renderer.default)(startTarget);
      var $endTarget = (0, _renderer.default)(endTarget);
      if ($startTarget[0] === $endTarget[0]) {
        return $startTarget[0];
      }
      var $startParents = $startTarget.parents();
      var $endParents = $endTarget.parents();
      var startingParent = Math.min($startParents.length, $endParents.length);
      for (var i = -startingParent; i < 0; i++) {
        if ($startParents.get(i) === $endParents.get(i)) {
          return $startParents.get(i);
        }
      }
    };
    exports.closestCommonParent = closestCommonParent;
    var extractTemplateMarkup = function(element) {
      element = (0, _renderer.default)(element);
      var templateTag = element.length && element.filter(function() {
        var $node = (0, _renderer.default)(this);
        return $node.is("script[type]") && $node.attr("type").indexOf("script") < 0;
      });
      if (templateTag.length) {
        return templateTag.eq(0).html();
      } else {
        element = (0, _renderer.default)("<div>").append(element);
        return element.html();
      }
    };
    exports.extractTemplateMarkup = extractTemplateMarkup;
    var normalizeTemplateElement = function normalizeTemplateElement2(element) {
      var $element = (0, _type.isDefined)(element) && (element.nodeType || (0, _type.isRenderer)(element)) ? (0, _renderer.default)(element) : (0, _renderer.default)("<div>").html(element).contents();
      if (1 === $element.length) {
        if ($element.is("script")) {
          $element = normalizeTemplateElement2($element.html().trim());
        } else if ($element.is("table")) {
          $element = $element.children("tbody").contents();
        }
      }
      return $element;
    };
    exports.normalizeTemplateElement = normalizeTemplateElement;
    var clipboardText = function(event, text) {
      var clipboard = event.originalEvent && event.originalEvent.clipboardData || window2.clipboardData;
      if (!text) {
        return clipboard && clipboard.getData("Text");
      }
      clipboard && clipboard.setData("Text", text);
    };
    exports.clipboardText = clipboardText;
    var contains = function contains2(container, element) {
      if (!element) {
        return false;
      }
      if ((0, _type.isWindow)(container)) {
        return contains2(container.document, element);
      }
      return container.contains(element) || contains2(container, getRootNodeHost(element));
    };
    exports.contains = contains;
    var createTextElementHiddenCopy = function(element, text, options) {
      var elementStyles = window2.getComputedStyle((0, _renderer.default)(element).get(0));
      var includePaddings = options && options.includePaddings;
      return (0, _renderer.default)("<div>").text(text).css({
        fontStyle: elementStyles.fontStyle,
        fontVariant: elementStyles.fontVariant,
        fontWeight: elementStyles.fontWeight,
        fontSize: elementStyles.fontSize,
        fontFamily: elementStyles.fontFamily,
        letterSpacing: elementStyles.letterSpacing,
        border: elementStyles.border,
        paddingTop: includePaddings ? elementStyles.paddingTop : "",
        paddingRight: includePaddings ? elementStyles.paddingRight : "",
        paddingBottom: includePaddings ? elementStyles.paddingBottom : "",
        paddingLeft: includePaddings ? elementStyles.paddingLeft : "",
        visibility: "hidden",
        whiteSpace: "pre",
        position: "absolute",
        float: "left"
      });
    };
    exports.createTextElementHiddenCopy = createTextElementHiddenCopy;
    var insertBefore = function(element, newElement) {
      if (newElement) {
        _dom_adapter.default.insertElement(element.parentNode, newElement, element);
      }
      return element;
    };
    exports.insertBefore = insertBefore;
    var replaceWith = function(element, newElement) {
      if (!(newElement && newElement[0])) {
        return;
      }
      if (newElement.is(element)) {
        return element;
      }
      (0, _iterator.each)(newElement, function(_, currentElement) {
        insertBefore(element[0], currentElement);
      });
      element.remove();
      return newElement;
    };
    exports.replaceWith = replaceWith;
    var isElementInDom = function($element) {
      var element = null === $element || void 0 === $element ? void 0 : $element.get(0);
      var shadowHost = null === element || void 0 === element ? void 0 : element.getRootNode().host;
      return !!(0, _renderer.default)(shadowHost || element).closest((0, _window.getWindow)().document).length;
    };
    exports.isElementInDom = isElementInDom;
  }
});

// node_modules/devextreme/cjs/events/visibility_change.js
var require_visibility_change = __commonJS({
  "node_modules/devextreme/cjs/events/visibility_change.js"(exports) {
    "use strict";
    exports.triggerShownEvent = exports.triggerResizeEvent = exports.triggerHidingEvent = void 0;
    var _renderer = _interopRequireDefault(require_renderer());
    var _events_engine = _interopRequireDefault(require_events_engine());
    function _interopRequireDefault(obj) {
      return obj && obj.j ? obj : {
        default: obj
      };
    }
    var triggerVisibilityChangeEvent = function(eventName) {
      return function(element) {
        var $element = (0, _renderer.default)(element || "body");
        var changeHandlers = $element.filter(".dx-visibility-change-handler").add($element.find(".dx-visibility-change-handler"));
        for (var i = 0; i < changeHandlers.length; i++) {
          _events_engine.default.triggerHandler(changeHandlers[i], eventName);
        }
      };
    };
    var triggerShownEvent = triggerVisibilityChangeEvent("dxshown");
    exports.triggerShownEvent = triggerShownEvent;
    var triggerHidingEvent = triggerVisibilityChangeEvent("dxhiding");
    exports.triggerHidingEvent = triggerHidingEvent;
    var triggerResizeEvent = triggerVisibilityChangeEvent("dxresize");
    exports.triggerResizeEvent = triggerResizeEvent;
  }
});

// node_modules/devextreme/cjs/core/templates/template_base.js
var require_template_base = __commonJS({
  "node_modules/devextreme/cjs/core/templates/template_base.js"(exports) {
    "use strict";
    exports.renderedCallbacks = exports.TemplateBase = void 0;
    var _renderer = _interopRequireDefault(require_renderer());
    var _dom_adapter = _interopRequireDefault(require_dom_adapter());
    var _callbacks = _interopRequireDefault(require_callbacks());
    var _dom = require_dom();
    var _visibility_change = require_visibility_change();
    var _errors = _interopRequireDefault(require_errors());
    function _interopRequireDefault(obj) {
      return obj && obj.j ? obj : {
        default: obj
      };
    }
    var renderedCallbacks = (0, _callbacks.default)({
      syncStrategy: true
    });
    exports.renderedCallbacks = renderedCallbacks;
    var TemplateBase = function() {
      function TemplateBase2() {
      }
      var _proto = TemplateBase2.prototype;
      _proto.render = function(options) {
        options = options || {};
        var onRendered = options.onRendered;
        delete options.onRendered;
        var $result;
        if (options.renovated && options.transclude && this.I) {
          $result = (0, _renderer.default)("<div>").append(this.I).contents();
        } else {
          $result = this.bf(options);
        }
        this.Hq($result, options.container);
        renderedCallbacks.fire($result, options.container);
        onRendered && onRendered();
        return $result;
      };
      _proto.Hq = function($result, container) {
        if (!container) {
          return;
        }
        var $container = (0, _renderer.default)(container);
        var resultInContainer = (0, _dom.contains)($container.get(0), $result.get(0));
        $container.append($result);
        if (resultInContainer) {
          return;
        }
        var resultInBody = _dom_adapter.default.getBody().contains($container.get(0));
        if (!resultInBody) {
          return;
        }
        (0, _visibility_change.triggerShownEvent)($result);
      };
      _proto.bf = function() {
        throw _errors.default.Error("E0001");
      };
      return TemplateBase2;
    }();
    exports.TemplateBase = TemplateBase;
  }
});

// node_modules/devextreme/cjs/core/templates/function_template.js
var require_function_template = __commonJS({
  "node_modules/devextreme/cjs/core/templates/function_template.js"(exports) {
    "use strict";
    exports.FunctionTemplate = void 0;
    var _template_base = require_template_base();
    var _dom = require_dom();
    function _inheritsLoose(subClass, superClass) {
      subClass.prototype = Object.create(superClass.prototype);
      subClass.prototype.constructor = subClass;
      _setPrototypeOf(subClass, superClass);
    }
    function _setPrototypeOf(o, p) {
      _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(o2, p2) {
        o2.__proto__ = p2;
        return o2;
      };
      return _setPrototypeOf(o, p);
    }
    var FunctionTemplate = function(_TemplateBase) {
      _inheritsLoose(FunctionTemplate2, _TemplateBase);
      function FunctionTemplate2(render2) {
        var _this;
        _this = _TemplateBase.call(this) || this;
        _this.cf = render2;
        return _this;
      }
      var _proto = FunctionTemplate2.prototype;
      _proto.bf = function(options) {
        return (0, _dom.normalizeTemplateElement)(this.cf(options));
      };
      return FunctionTemplate2;
    }(_template_base.TemplateBase);
    exports.FunctionTemplate = FunctionTemplate;
  }
});

// node_modules/devextreme/cjs/core/templates/empty_template.js
var require_empty_template = __commonJS({
  "node_modules/devextreme/cjs/core/templates/empty_template.js"(exports) {
    "use strict";
    exports.EmptyTemplate = void 0;
    var _renderer = _interopRequireDefault(require_renderer());
    var _template_base = require_template_base();
    function _interopRequireDefault(obj) {
      return obj && obj.j ? obj : {
        default: obj
      };
    }
    function _inheritsLoose(subClass, superClass) {
      subClass.prototype = Object.create(superClass.prototype);
      subClass.prototype.constructor = subClass;
      _setPrototypeOf(subClass, superClass);
    }
    function _setPrototypeOf(o, p) {
      _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(o2, p2) {
        o2.__proto__ = p2;
        return o2;
      };
      return _setPrototypeOf(o, p);
    }
    var EmptyTemplate = function(_TemplateBase) {
      _inheritsLoose(EmptyTemplate2, _TemplateBase);
      function EmptyTemplate2() {
        return _TemplateBase.apply(this, arguments) || this;
      }
      var _proto = EmptyTemplate2.prototype;
      _proto.bf = function() {
        return (0, _renderer.default)();
      };
      return EmptyTemplate2;
    }(_template_base.TemplateBase);
    exports.EmptyTemplate = EmptyTemplate;
  }
});

// node_modules/devextreme/cjs/core/templates/child_default_template.js
var require_child_default_template = __commonJS({
  "node_modules/devextreme/cjs/core/templates/child_default_template.js"(exports) {
    "use strict";
    exports.ChildDefaultTemplate = void 0;
    var _template_base = require_template_base();
    function _inheritsLoose(subClass, superClass) {
      subClass.prototype = Object.create(superClass.prototype);
      subClass.prototype.constructor = subClass;
      _setPrototypeOf(subClass, superClass);
    }
    function _setPrototypeOf(o, p) {
      _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(o2, p2) {
        o2.__proto__ = p2;
        return o2;
      };
      return _setPrototypeOf(o, p);
    }
    var ChildDefaultTemplate = function(_TemplateBase) {
      _inheritsLoose(ChildDefaultTemplate2, _TemplateBase);
      function ChildDefaultTemplate2(name) {
        var _this;
        _this = _TemplateBase.call(this) || this;
        _this.name = name;
        return _this;
      }
      return ChildDefaultTemplate2;
    }(_template_base.TemplateBase);
    exports.ChildDefaultTemplate = ChildDefaultTemplate;
  }
});

// node_modules/devextreme/cjs/core/templates/template_engine_registry.js
var require_template_engine_registry = __commonJS({
  "node_modules/devextreme/cjs/core/templates/template_engine_registry.js"(exports) {
    "use strict";
    exports.getCurrentTemplateEngine = getCurrentTemplateEngine;
    exports.registerTemplateEngine = registerTemplateEngine;
    exports.setTemplateEngine = setTemplateEngine;
    var _type = require_type();
    var _errors = _interopRequireDefault(require_errors());
    function _interopRequireDefault(obj) {
      return obj && obj.j ? obj : {
        default: obj
      };
    }
    var templateEngines = {};
    var currentTemplateEngine;
    function registerTemplateEngine(name, templateEngine) {
      templateEngines[name] = templateEngine;
    }
    function setTemplateEngine(templateEngine) {
      if ((0, _type.isString)(templateEngine)) {
        currentTemplateEngine = templateEngines[templateEngine];
        if (!currentTemplateEngine) {
          throw _errors.default.Error("E0020", templateEngine);
        }
      } else {
        currentTemplateEngine = templateEngine;
      }
    }
    function getCurrentTemplateEngine() {
      return currentTemplateEngine;
    }
  }
});

// node_modules/devextreme/cjs/core/templates/template.js
var require_template = __commonJS({
  "node_modules/devextreme/cjs/core/templates/template.js"(exports) {
    "use strict";
    exports.Template = void 0;
    var _renderer = _interopRequireDefault(require_renderer());
    var _template_base = require_template_base();
    var _dom = require_dom();
    var _template_engine_registry = require_template_engine_registry();
    function _interopRequireDefault(obj) {
      return obj && obj.j ? obj : {
        default: obj
      };
    }
    function _inheritsLoose(subClass, superClass) {
      subClass.prototype = Object.create(superClass.prototype);
      subClass.prototype.constructor = subClass;
      _setPrototypeOf(subClass, superClass);
    }
    function _setPrototypeOf(o, p) {
      _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(o2, p2) {
        o2.__proto__ = p2;
        return o2;
      };
      return _setPrototypeOf(o, p);
    }
    (0, _template_engine_registry.registerTemplateEngine)("default", {
      compile: function(element) {
        return (0, _dom.normalizeTemplateElement)(element);
      },
      render: function(template, model, index) {
        return template.clone();
      }
    });
    (0, _template_engine_registry.setTemplateEngine)("default");
    var Template = function(_TemplateBase) {
      _inheritsLoose(Template2, _TemplateBase);
      function Template2(element) {
        var _this;
        _this = _TemplateBase.call(this) || this;
        _this.I = element;
        return _this;
      }
      var _proto = Template2.prototype;
      _proto.bf = function(options) {
        var transclude = options.transclude;
        if (!transclude && !this.nk) {
          this.nk = (0, _template_engine_registry.getCurrentTemplateEngine)().compile(this.I);
        }
        return (0, _renderer.default)("<div>").append(transclude ? this.I : (0, _template_engine_registry.getCurrentTemplateEngine)().render(this.nk, options.model, options.index)).contents();
      };
      _proto.source = function() {
        return (0, _renderer.default)(this.I).clone();
      };
      return Template2;
    }(_template_base.TemplateBase);
    exports.Template = Template;
  }
});

// node_modules/devextreme/cjs/core/utils/array.js
var require_array = __commonJS({
  "node_modules/devextreme/cjs/core/utils/array.js"(exports) {
    "use strict";
    exports.wrapToArray = exports.removeDuplicates = exports.normalizeIndexes = exports.groupBy = exports.getUniqueValues = exports.getIntersection = void 0;
    var _type = require_type();
    var _object = require_object();
    var _config2 = _interopRequireDefault(require_config());
    function _interopRequireDefault(obj) {
      return obj && obj.j ? obj : {
        default: obj
      };
    }
    function _toConsumableArray(arr) {
      return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
    }
    function _nonIterableSpread() {
      throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _unsupportedIterableToArray(o, minLen) {
      if (!o) {
        return;
      }
      if ("string" === typeof o) {
        return _arrayLikeToArray(o, minLen);
      }
      var n = Object.prototype.toString.call(o).slice(8, -1);
      if ("Object" === n && o.constructor) {
        n = o.constructor.name;
      }
      if ("Map" === n || "Set" === n) {
        return Array.from(o);
      }
      if ("Arguments" === n || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) {
        return _arrayLikeToArray(o, minLen);
      }
    }
    function _iterableToArray(iter) {
      if ("undefined" !== typeof Symbol && null != iter[Symbol.iterator] || null != iter["@@iterator"]) {
        return Array.from(iter);
      }
    }
    function _arrayWithoutHoles(arr) {
      if (Array.isArray(arr)) {
        return _arrayLikeToArray(arr);
      }
    }
    function _arrayLikeToArray(arr, len) {
      if (null == len || len > arr.length) {
        len = arr.length;
      }
      for (var i = 0, arr2 = new Array(len); i < len; i++) {
        arr2[i] = arr[i];
      }
      return arr2;
    }
    function createOccurrenceMap(array) {
      return array.reduce(function(map, value) {
        var _map$get;
        var count = (null !== (_map$get = map.get(value)) && void 0 !== _map$get ? _map$get : 0) + 1;
        map.set(value, count);
        return map;
      }, /* @__PURE__ */ new Map());
    }
    var wrapToArray = function(item) {
      return Array.isArray(item) ? item : [item];
    };
    exports.wrapToArray = wrapToArray;
    var getUniqueValues = function(values) {
      return _toConsumableArray(new Set(values));
    };
    exports.getUniqueValues = getUniqueValues;
    var getIntersection = function(firstArray, secondArray) {
      var toRemoveMap = createOccurrenceMap(secondArray);
      return firstArray.filter(function(value) {
        var occurrencesCount = toRemoveMap.get(value);
        occurrencesCount && toRemoveMap.set(value, occurrencesCount - 1);
        return occurrencesCount;
      });
    };
    exports.getIntersection = getIntersection;
    var removeDuplicates = function() {
      var from = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [];
      var toRemove = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : [];
      var toRemoveMap = createOccurrenceMap(toRemove);
      return from.filter(function(value) {
        var occurrencesCount = toRemoveMap.get(value);
        occurrencesCount && toRemoveMap.set(value, occurrencesCount - 1);
        return !occurrencesCount;
      });
    };
    exports.removeDuplicates = removeDuplicates;
    var normalizeIndexes = function(items, indexPropName, currentItem, needIndexCallback) {
      var indexedItems = {};
      var _config = (0, _config2.default)(), useLegacyVisibleIndex = _config.useLegacyVisibleIndex;
      var currentIndex = 0;
      var shouldUpdateIndex = function(item) {
        return !(0, _type.isDefined)(item[indexPropName]) && (!needIndexCallback || needIndexCallback(item));
      };
      items.forEach(function(item) {
        var index = item[indexPropName];
        if (index >= 0) {
          indexedItems[index] = indexedItems[index] || [];
          if (item === currentItem) {
            indexedItems[index].unshift(item);
          } else {
            indexedItems[index].push(item);
          }
        } else {
          item[indexPropName] = void 0;
        }
      });
      if (!useLegacyVisibleIndex) {
        items.forEach(function(item) {
          if (shouldUpdateIndex(item)) {
            while (indexedItems[currentIndex]) {
              currentIndex++;
            }
            indexedItems[currentIndex] = [item];
            currentIndex++;
          }
        });
      }
      currentIndex = 0;
      (0, _object.orderEach)(indexedItems, function(index, items2) {
        items2.forEach(function(item) {
          if (index >= 0) {
            item[indexPropName] = currentIndex++;
          }
        });
      });
      if (useLegacyVisibleIndex) {
        items.forEach(function(item) {
          if (shouldUpdateIndex(item)) {
            item[indexPropName] = currentIndex++;
          }
        });
      }
    };
    exports.normalizeIndexes = normalizeIndexes;
    var groupBy = function(array, getGroupName) {
      return array.reduce(function(groupedResult, item) {
        var _groupedResult$groupN;
        var groupName = getGroupName(item);
        groupedResult[groupName] = null !== (_groupedResult$groupN = groupedResult[groupName]) && void 0 !== _groupedResult$groupN ? _groupedResult$groupN : [];
        groupedResult[groupName].push(item);
        return groupedResult;
      }, {});
    };
    exports.groupBy = groupBy;
  }
});

// node_modules/devextreme/cjs/core/utils/template_manager.js
var require_template_manager = __commonJS({
  "node_modules/devextreme/cjs/core/utils/template_manager.js"(exports) {
    "use strict";
    exports.validateTemplateSource = exports.templateKey = exports.suitableTemplatesByName = exports.getNormalizedTemplateArgs = exports.findTemplates = exports.defaultCreateElement = exports.addOneRenderedCall = exports.acquireTemplate = exports.acquireIntegrationTemplate = void 0;
    var _config = _interopRequireDefault(require_config());
    var _devices = _interopRequireDefault(require_devices());
    var _errors = _interopRequireDefault(require_errors());
    var _renderer = _interopRequireDefault(require_renderer());
    var _child_default_template = require_child_default_template();
    var _empty_template = require_empty_template();
    var _template = require_template();
    var _template_base = require_template_base();
    var _array = require_array();
    var _common = require_common();
    var _dom = require_dom();
    var _extend = require_extend();
    var _type = require_type();
    function _interopRequireDefault(obj) {
      return obj && obj.j ? obj : {
        default: obj
      };
    }
    var findTemplates = function(element, name) {
      var templates = (0, _renderer.default)(element).contents().filter("[".concat("data-options", '*="').concat(name, '"]'));
      return [].slice.call(templates).map(function(element2) {
        var optionsString = (0, _renderer.default)(element2).attr("data-options") || "";
        return {
          element: element2,
          options: (0, _config.default)().optionsParser(optionsString)[name]
        };
      }).filter(function(template) {
        return !!template.options;
      });
    };
    exports.findTemplates = findTemplates;
    var suitableTemplatesByName = function(rawTemplates) {
      var templatesMap = (0, _array.groupBy)(rawTemplates, function(template) {
        return template.options.name;
      });
      if (templatesMap[void 0]) {
        throw _errors.default.Error("E0023");
      }
      var result = {};
      Object.keys(templatesMap).forEach(function(name) {
        var _findBestMatches$;
        var suitableTemplate = null === (_findBestMatches$ = (0, _common.findBestMatches)(_devices.default.current(), templatesMap[name], function(template) {
          return template.options;
        })[0]) || void 0 === _findBestMatches$ ? void 0 : _findBestMatches$.element;
        if (suitableTemplate) {
          result[name] = suitableTemplate;
        }
      });
      return result;
    };
    exports.suitableTemplatesByName = suitableTemplatesByName;
    var addOneRenderedCall = function(template) {
      var _render = template.render.bind(template);
      return (0, _extend.extend)({}, template, {
        render: function(options) {
          var templateResult = _render(options);
          options && options.onRendered && options.onRendered();
          return templateResult;
        }
      });
    };
    exports.addOneRenderedCall = addOneRenderedCall;
    var getNormalizedTemplateArgs = function(options) {
      var args = [];
      if ("model" in options) {
        args.push(options.model);
      }
      if ("index" in options) {
        args.push(options.index);
      }
      args.push(options.container);
      return args;
    };
    exports.getNormalizedTemplateArgs = getNormalizedTemplateArgs;
    var validateTemplateSource = function(templateSource) {
      return "string" === typeof templateSource ? (0, _dom.normalizeTemplateElement)(templateSource) : templateSource;
    };
    exports.validateTemplateSource = validateTemplateSource;
    var templateKey = function(templateSource) {
      return (0, _type.isRenderer)(templateSource) && templateSource[0] || templateSource;
    };
    exports.templateKey = templateKey;
    var defaultCreateElement = function(element) {
      return new _template.Template(element);
    };
    exports.defaultCreateElement = defaultCreateElement;
    var acquireIntegrationTemplate = function(templateSource, templates, isAsyncTemplate, skipTemplates) {
      var integrationTemplate = null;
      if (!skipTemplates || -1 === skipTemplates.indexOf(templateSource)) {
        integrationTemplate = templates[templateSource];
        if (integrationTemplate && !(integrationTemplate instanceof _template_base.TemplateBase) && !isAsyncTemplate) {
          integrationTemplate = addOneRenderedCall(integrationTemplate);
        }
      }
      return integrationTemplate;
    };
    exports.acquireIntegrationTemplate = acquireIntegrationTemplate;
    var acquireTemplate = function(templateSource, createTemplate, templates, isAsyncTemplate, skipTemplates, defaultTemplates) {
      if (null == templateSource) {
        return new _empty_template.EmptyTemplate();
      }
      if (templateSource instanceof _child_default_template.ChildDefaultTemplate) {
        return defaultTemplates[templateSource.name];
      }
      if (templateSource instanceof _template_base.TemplateBase) {
        return templateSource;
      }
      if ((0, _type.isFunction)(templateSource.render) && !(0, _type.isRenderer)(templateSource)) {
        return isAsyncTemplate ? templateSource : addOneRenderedCall(templateSource);
      }
      if (templateSource.nodeType || (0, _type.isRenderer)(templateSource)) {
        return createTemplate((0, _renderer.default)(templateSource));
      }
      return acquireIntegrationTemplate(templateSource, templates, isAsyncTemplate, skipTemplates) || defaultTemplates[templateSource] || createTemplate(templateSource);
    };
    exports.acquireTemplate = acquireTemplate;
  }
});

// node_modules/devextreme/cjs/core/template_manager.js
var require_template_manager2 = __commonJS({
  "node_modules/devextreme/cjs/core/template_manager.js"(exports) {
    "use strict";
    exports.TemplateManager = void 0;
    var _renderer = _interopRequireDefault(require_renderer());
    var _type = require_type();
    var _common = require_common();
    var _extend = require_extend();
    var _function_template = require_function_template();
    var _empty_template = require_empty_template();
    var _template_manager = require_template_manager();
    function _interopRequireDefault(obj) {
      return obj && obj.j ? obj : {
        default: obj
      };
    }
    function _typeof(obj) {
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) {
          descriptor.writable = true;
        }
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) {
        _defineProperties(Constructor.prototype, protoProps);
      }
      if (staticProps) {
        _defineProperties(Constructor, staticProps);
      }
      Object.defineProperty(Constructor, "prototype", {
        writable: false
      });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return "symbol" === _typeof(key) ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if ("object" !== _typeof(input) || null === input) {
        return input;
      }
      var prim = input[Symbol.toPrimitive];
      if (void 0 !== prim) {
        var res = prim.call(input, hint || "default");
        if ("object" !== _typeof(res)) {
          return res;
        }
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return ("string" === hint ? String : Number)(input);
    }
    var TEXT_NODE = 3;
    var ANONYMOUS_TEMPLATE_NAME = "template";
    var TEMPLATE_OPTIONS_NAME = "dxTemplate";
    var TEMPLATE_WRAPPER_CLASS = "dx-template-wrapper";
    var DX_POLYMORPH_WIDGET_TEMPLATE = new _function_template.FunctionTemplate(function(_ref) {
      var model = _ref.model, parent = _ref.parent;
      var widgetName = model.widget;
      if (!widgetName) {
        return (0, _renderer.default)();
      }
      var widgetElement = (0, _renderer.default)("<div>");
      var widgetOptions = model.options || {};
      if (parent) {
        parent.Iq(widgetElement, widgetName, widgetOptions);
      } else {
        widgetElement[widgetName](widgetOptions);
      }
      return widgetElement;
    });
    var TemplateManager = function() {
      function TemplateManager2(createElement3, anonymousTemplateName) {
        this.df = [];
        this.ef = {};
        this.ok = anonymousTemplateName || ANONYMOUS_TEMPLATE_NAME;
        this.B = createElement3 || _template_manager.defaultCreateElement;
        this.nh = this.nh.bind(this);
      }
      TemplateManager2.createDefaultOptions = function() {
        return {
          integrationOptions: {
            watchMethod: function(fn, callback) {
              var options = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {};
              if (!options.skipImmediate) {
                callback(fn());
              }
              return _common.noop;
            },
            templates: {
              "dx-polymorph-widget": DX_POLYMORPH_WIDGET_TEMPLATE
            },
            useDeferUpdateForTemplates: true
          }
        };
      };
      var _proto = TemplateManager2.prototype;
      _proto.addDefaultTemplates = function(templates) {
        this.ef = (0, _extend.extend)({}, this.ef, templates);
      };
      _proto.dispose = function() {
        this.df.forEach(function(tempTemplate) {
          tempTemplate.template.dispose && tempTemplate.template.dispose();
        });
        this.df = [];
      };
      _proto.extractTemplates = function($el) {
        var templates = this.Jq($el);
        var anonymousTemplateMeta = this.Kq($el);
        return {
          templates,
          anonymousTemplateMeta
        };
      };
      _proto.Jq = function($el) {
        var _this = this;
        var templates = (0, _template_manager.findTemplates)($el, TEMPLATE_OPTIONS_NAME);
        var suitableTemplates = (0, _template_manager.suitableTemplatesByName)(templates);
        templates.forEach(function(_ref2) {
          var element = _ref2.element, name = _ref2.options.name;
          if (element === suitableTemplates[name]) {
            (0, _renderer.default)(element).addClass(TEMPLATE_WRAPPER_CLASS).detach();
          } else {
            (0, _renderer.default)(element).remove();
          }
        });
        return Object.keys(suitableTemplates).map(function(name) {
          return {
            name,
            template: _this.Kd(suitableTemplates[name])
          };
        });
      };
      _proto.Kq = function($el) {
        var $anonymousTemplate = $el.contents().detach();
        var $notJunkTemplateContent = $anonymousTemplate.filter(function(_, element) {
          var isTextNode = element.nodeType === TEXT_NODE;
          var isEmptyText = (0, _renderer.default)(element).text().trim().length < 1;
          return !(isTextNode && isEmptyText);
        });
        return $notJunkTemplateContent.length > 0 ? {
          template: this.Kd($anonymousTemplate),
          name: this.ok
        } : {};
      };
      _proto.nh = function(templateSource) {
        var cachedTemplate = this.df.filter(function(tempTemplate) {
          return tempTemplate.source === (0, _template_manager.templateKey)(templateSource);
        })[0];
        if (cachedTemplate) {
          return cachedTemplate.template;
        }
        var template = this.Kd(templateSource);
        this.df.push({
          template,
          source: (0, _template_manager.templateKey)(templateSource)
        });
        return template;
      };
      _proto.Kd = function(templateSource) {
        return this.B((0, _template_manager.validateTemplateSource)(templateSource));
      };
      _proto.getTemplate = function(templateSource, templates, _ref3, context) {
        var _this2 = this;
        var isAsyncTemplate = _ref3.isAsyncTemplate, skipTemplates = _ref3.skipTemplates;
        if (!(0, _type.isFunction)(templateSource)) {
          return (0, _template_manager.acquireTemplate)(templateSource, this.nh, templates, isAsyncTemplate, skipTemplates, this.ef);
        }
        return new _function_template.FunctionTemplate(function(options) {
          var templateSourceResult = templateSource.apply(context, (0, _template_manager.getNormalizedTemplateArgs)(options));
          if (!(0, _type.isDefined)(templateSourceResult)) {
            return new _empty_template.EmptyTemplate();
          }
          var dispose = false;
          var template = (0, _template_manager.acquireTemplate)(templateSourceResult, function(templateSource2) {
            if (templateSource2.nodeType || (0, _type.isRenderer)(templateSource2) && !(0, _renderer.default)(templateSource2).is("script")) {
              return new _function_template.FunctionTemplate(function() {
                return templateSource2;
              });
            }
            dispose = true;
            return _this2.Kd(templateSource2);
          }, templates, isAsyncTemplate, skipTemplates, _this2.ef);
          var result = template.render(options);
          dispose && template.dispose && template.dispose();
          return result;
        });
      };
      _createClass(TemplateManager2, [{
        key: "anonymousTemplateName",
        get: function() {
          return this.ok;
        }
      }]);
      return TemplateManager2;
    }();
    exports.TemplateManager = TemplateManager;
  }
});

// node_modules/devextreme/cjs/core/element.js
var require_element = __commonJS({
  "node_modules/devextreme/cjs/core/element.js"(exports) {
    "use strict";
    exports.getPublicElement = getPublicElement;
    exports.setPublicElementWrapper = setPublicElementWrapper;
    var strategy = function(element) {
      return element && element.get(0);
    };
    function getPublicElement(element) {
      return strategy(element);
    }
    function setPublicElementWrapper(newStrategy) {
      strategy = newStrategy;
    }
  }
});

// node_modules/devextreme/cjs/events/core/keyboard_processor.js
var require_keyboard_processor = __commonJS({
  "node_modules/devextreme/cjs/events/core/keyboard_processor.js"(exports, module) {
    "use strict";
    exports.default = void 0;
    var _renderer = _interopRequireDefault(require_renderer());
    var _events_engine = _interopRequireDefault(require_events_engine());
    var _class = _interopRequireDefault(require_class());
    var _index = require_utils2();
    function _interopRequireDefault(obj) {
      return obj && obj.j ? obj : {
        default: obj
      };
    }
    var COMPOSITION_START_EVENT = "compositionstart";
    var COMPOSITION_END_EVENT = "compositionend";
    var KEYDOWN_EVENT = "keydown";
    var NAMESPACE = "KeyboardProcessor";
    var createKeyDownOptions = function(e) {
      return {
        keyName: (0, _index.normalizeKeyName)(e),
        key: e.key,
        code: e.code,
        ctrl: e.ctrlKey,
        location: e.location,
        metaKey: e.metaKey,
        shift: e.shiftKey,
        alt: e.altKey,
        which: e.which,
        originalEvent: e
      };
    };
    var KeyboardProcessor = _class.default.inherit({
      pk: (0, _index.addNamespace)(KEYDOWN_EVENT, NAMESPACE),
      qk: (0, _index.addNamespace)(COMPOSITION_START_EVENT, NAMESPACE),
      rk: (0, _index.addNamespace)(COMPOSITION_END_EVENT, NAMESPACE),
      ctor: function(options) {
        var _this = this;
        options = options || {};
        if (options.element) {
          this.I = (0, _renderer.default)(options.element);
        }
        if (options.focusTarget) {
          this.oh = options.focusTarget;
        }
        this.tb = options.handler;
        if (this.I) {
          this.vk = function(e) {
            var focusTargets = (0, _renderer.default)(_this.oh).toArray();
            var isNotFocusTarget = _this.oh && _this.oh !== e.target && !focusTargets.includes(e.target);
            var shouldSkipProcessing = _this.wk && 229 === e.which || _this.xk || isNotFocusTarget;
            _this.wk = false;
            if (!shouldSkipProcessing) {
              _this.process(e);
            }
          };
          this.gf = this.toggleProcessing.bind(this);
          _events_engine.default.on(this.I, this.pk, this.vk);
          _events_engine.default.on(this.I, this.qk, this.gf);
          _events_engine.default.on(this.I, this.rk, this.gf);
        }
      },
      dispose: function() {
        if (this.I) {
          _events_engine.default.off(this.I, this.pk, this.vk);
          _events_engine.default.off(this.I, this.qk, this.gf);
          _events_engine.default.off(this.I, this.rk, this.gf);
        }
        this.I = void 0;
        this.tb = void 0;
      },
      process: function(e) {
        this.tb(createKeyDownOptions(e));
      },
      toggleProcessing: function(_ref) {
        var type = _ref.type;
        this.xk = type === COMPOSITION_START_EVENT;
        this.wk = !this.xk;
      }
    });
    KeyboardProcessor.createKeyDownOptions = createKeyDownOptions;
    var _default = KeyboardProcessor;
    exports.default = _default;
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/devextreme/cjs/events/short.js
var require_short = __commonJS({
  "node_modules/devextreme/cjs/events/short.js"(exports) {
    "use strict";
    exports.visibility = exports.resize = exports.keyboard = exports.hover = exports.focus = exports.dxClick = exports.click = exports.active = void 0;
    var _events_engine = _interopRequireDefault(require_events_engine());
    var _keyboard_processor = _interopRequireDefault(require_keyboard_processor());
    var _index = require_utils2();
    function _interopRequireDefault(obj) {
      return obj && obj.j ? obj : {
        default: obj
      };
    }
    function addNamespace(event, namespace) {
      return namespace ? (0, _index.addNamespace)(event, namespace) : event;
    }
    function executeAction(action, args) {
      return "function" === typeof action ? action(args) : action.execute(args);
    }
    var active = {
      on: function($el, active2, inactive, opts) {
        var selector = opts.selector, showTimeout = opts.showTimeout, hideTimeout = opts.hideTimeout, namespace = opts.namespace;
        _events_engine.default.on($el, addNamespace("dxactive", namespace), selector, {
          timeout: showTimeout
        }, function(event) {
          return executeAction(active2, {
            event,
            element: event.currentTarget
          });
        });
        _events_engine.default.on($el, addNamespace("dxinactive", namespace), selector, {
          timeout: hideTimeout
        }, function(event) {
          return executeAction(inactive, {
            event,
            element: event.currentTarget
          });
        });
      },
      off: function($el, _ref) {
        var namespace = _ref.namespace, selector = _ref.selector;
        _events_engine.default.off($el, addNamespace("dxactive", namespace), selector);
        _events_engine.default.off($el, addNamespace("dxinactive", namespace), selector);
      }
    };
    exports.active = active;
    var resize = {
      on: function($el, resize2) {
        var _ref2 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {}, namespace = _ref2.namespace;
        _events_engine.default.on($el, addNamespace("dxresize", namespace), resize2);
      },
      off: function($el) {
        var _ref3 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, namespace = _ref3.namespace;
        _events_engine.default.off($el, addNamespace("dxresize", namespace));
      }
    };
    exports.resize = resize;
    var hover = {
      on: function($el, start, end, _ref4) {
        var selector = _ref4.selector, namespace = _ref4.namespace;
        _events_engine.default.on($el, addNamespace("dxhoverend", namespace), selector, function(event) {
          return end(event);
        });
        _events_engine.default.on($el, addNamespace("dxhoverstart", namespace), selector, function(event) {
          return executeAction(start, {
            element: event.target,
            event
          });
        });
      },
      off: function($el, _ref5) {
        var selector = _ref5.selector, namespace = _ref5.namespace;
        _events_engine.default.off($el, addNamespace("dxhoverstart", namespace), selector);
        _events_engine.default.off($el, addNamespace("dxhoverend", namespace), selector);
      }
    };
    exports.hover = hover;
    var visibility = {
      on: function($el, shown, hiding, _ref6) {
        var namespace = _ref6.namespace;
        _events_engine.default.on($el, addNamespace("dxhiding", namespace), hiding);
        _events_engine.default.on($el, addNamespace("dxshown", namespace), shown);
      },
      off: function($el, _ref7) {
        var namespace = _ref7.namespace;
        _events_engine.default.off($el, addNamespace("dxhiding", namespace));
        _events_engine.default.off($el, addNamespace("dxshown", namespace));
      }
    };
    exports.visibility = visibility;
    var focus = {
      on: function($el, focusIn, focusOut, _ref8) {
        var namespace = _ref8.namespace;
        _events_engine.default.on($el, addNamespace("focusin", namespace), focusIn);
        _events_engine.default.on($el, addNamespace("focusout", namespace), focusOut);
      },
      off: function($el, _ref9) {
        var namespace = _ref9.namespace;
        _events_engine.default.off($el, addNamespace("focusin", namespace));
        _events_engine.default.off($el, addNamespace("focusout", namespace));
      },
      trigger: function($el) {
        return _events_engine.default.trigger($el, "focus");
      }
    };
    exports.focus = focus;
    var dxClick = {
      on: function($el, click2) {
        var _ref10 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {}, namespace = _ref10.namespace;
        _events_engine.default.on($el, addNamespace("dxclick", namespace), click2);
      },
      off: function($el) {
        var _ref11 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, namespace = _ref11.namespace;
        _events_engine.default.off($el, addNamespace("dxclick", namespace));
      }
    };
    exports.dxClick = dxClick;
    var click = {
      on: function($el, click2) {
        var _ref12 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {}, namespace = _ref12.namespace;
        _events_engine.default.on($el, addNamespace("click", namespace), click2);
      },
      off: function($el) {
        var _ref13 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, namespace = _ref13.namespace;
        _events_engine.default.off($el, addNamespace("click", namespace));
      }
    };
    exports.click = click;
    var index = 0;
    var keyboardProcessors = {};
    var generateListenerId = function() {
      return "keyboardProcessorId".concat(index++);
    };
    var keyboard = {
      on: function(element, focusTarget, handler) {
        var listenerId = generateListenerId();
        keyboardProcessors[listenerId] = new _keyboard_processor.default({
          element,
          focusTarget,
          handler
        });
        return listenerId;
      },
      off: function(listenerId) {
        if (listenerId && keyboardProcessors[listenerId]) {
          keyboardProcessors[listenerId].dispose();
          delete keyboardProcessors[listenerId];
        }
      },
      wy: function(listenerId) {
        return keyboardProcessors[listenerId];
      }
    };
    exports.keyboard = keyboard;
  }
});

// node_modules/devextreme/cjs/core/dom_component.js
var require_dom_component = __commonJS({
  "node_modules/devextreme/cjs/core/dom_component.js"(exports, module) {
    "use strict";
    exports.default = void 0;
    var _renderer = _interopRequireDefault(require_renderer());
    var _config = _interopRequireDefault(require_config());
    var _errors = _interopRequireDefault(require_errors());
    var _resize_callbacks = _interopRequireDefault(require_resize_callbacks());
    var _component = require_component();
    var _template_manager = require_template_manager2();
    var _public_component = require_public_component();
    var _shadow_dom = require_shadow_dom();
    var _element_data = require_element_data();
    var _iterator = require_iterator();
    var _extend = require_extend();
    var _element = require_element();
    var _common = require_common();
    var _type = require_type();
    var _window = require_window();
    var _short = require_short();
    function _interopRequireDefault(obj) {
      return obj && obj.j ? obj : {
        default: obj
      };
    }
    var abstract = _component.Component.abstract;
    var DOMComponent = _component.Component.inherit({
      Ze: function() {
        return (0, _extend.extend)(this.callBase(), {
          width: void 0,
          height: void 0,
          rtlEnabled: (0, _config.default)().rtlEnabled,
          elementAttr: {},
          disabled: false,
          integrationOptions: {}
        }, this.yk() ? _template_manager.TemplateManager.createDefaultOptions() : {});
      },
      ctor: function(element, options) {
        this.zk = null;
        this.B(element);
        (0, _public_component.attachInstanceToElement)(this.Ba, this, this.lh);
        this.callBase(options);
      },
      B: function(element) {
        this.Ba = (0, _renderer.default)(element);
      },
      Lq: function() {
        return ["rtlEnabled", "disabled", "templatesRenderAsynchronously"];
      },
      Mq: function(optionNames) {
        var _this = this;
        if (!this.option("_ignoreFunctionValueDeprecation")) {
          optionNames.forEach(function(optionName) {
            if ((0, _type.isFunction)(_this.option(optionName))) {
              _errors.default.log("W0017", optionName);
            }
          });
        }
      },
      hf: abstract,
      ph: abstract,
      G: function() {
        this.callBase();
        this.Mq(["width", "height", "maxHeight", "maxWidth", "minHeight", "minWidth", "popupHeight", "popupWidth"]);
        this.Nq();
        this.Oq();
      },
      bk: function(instanceCustomRules) {
        this.callBase([].concat(this.constructor.Ld || [], instanceCustomRules || []));
      },
      rq: function(name) {
        var isCustomOption = this.constructor.Ld && Object.prototype.hasOwnProperty.call(this.qq(this.constructor.Ld), name);
        return !isCustomOption && this.callBase(name);
      },
      Nq: function() {
        if (this.qh()) {
          var windowResizeCallBack = this.Pq = this.ph.bind(this);
          _resize_callbacks.default.add(windowResizeCallBack);
        }
      },
      qh: function() {
        return this.ph !== abstract;
      },
      Ak: function() {
        this.Qq();
        (0, _window.hasWindow)() && this.cf();
      },
      Qq: function() {
        var _ref = this.option() || {}, rtlEnabled = _ref.rtlEnabled;
        this.jf();
        this.Rq(rtlEnabled);
        this.Bk();
        this.Ck();
      },
      cf: function() {
        this.Dk();
        (0, _shadow_dom.addShadowDomStyles)(this.$element());
      },
      jf: function() {
        var _ref2 = this.option() || {}, elementAttr = _ref2.elementAttr;
        var attributes = (0, _extend.extend)({}, elementAttr);
        var classNames = attributes.class;
        delete attributes.class;
        this.$element().attr(attributes).removeClass(this.zk).addClass(classNames);
        this.zk = classNames;
      },
      Bk: function() {
        if (this.qh()) {
          this.Sq();
        }
        if (this.Ek()) {
          var $element = this.$element();
          $element.addClass("dx-visibility-change-handler");
        }
      },
      Ck: function() {
        var $element = this.$element();
        var element = $element.get(0);
        var width = this.lk("width", element);
        var height = this.lk("height", element);
        if (this.Tq(element, height, width)) {
          $element.css({
            width: null === width ? "" : width,
            height: null === height ? "" : height
          });
        }
      },
      Tq: function(element, height, width) {
        return !!((0, _type.isDefined)(width) || (0, _type.isDefined)(height) || element.style.width || element.style.height);
      },
      Sq: function() {
        var _this2 = this;
        var $el = this.$element();
        var namespace = "".concat(this.NAME, "VisibilityChange");
        _short.resize.off($el, {
          namespace
        });
        _short.resize.on($el, function() {
          return _this2.ph();
        }, {
          namespace
        });
      },
      Dk: function() {
        var _this3 = this;
        if (this.Ek()) {
          var $el = this.$element();
          var namespace = "".concat(this.NAME, "VisibilityChange");
          this.kf = !this.Md();
          _short.visibility.off($el, {
            namespace
          });
          _short.visibility.on($el, function() {
            return _this3.Fk("shown");
          }, function() {
            return _this3.Fk("hiding");
          }, {
            namespace
          });
        }
      },
      Md: function() {
        var $element = this.$element();
        return $element.is(":visible");
      },
      Fk: function(action) {
        var isVisible = this.Md();
        if (isVisible) {
          if ("hiding" === action && !this.kf) {
            this.hf(false);
            this.kf = true;
          } else if ("shown" === action && this.kf) {
            this.kf = false;
            this.hf(true);
          }
        }
      },
      Ek: function() {
        return this.hf !== abstract && (0, _window.hasWindow)();
      },
      cc: _common.noop,
      Gk: function() {
        var _this$option = this.option(), modelByElement = _this$option.modelByElement;
        var $element = this.$element();
        return modelByElement ? modelByElement($element) : void 0;
      },
      Uq: function() {
        if (this.Jd()) {
          throw _errors.default.Error("E0007");
        }
        this.Hk = true;
      },
      Vq: function() {
        this.cc();
        this.Ak();
      },
      lh: function() {
        this.Fc && this.Fc.dispose();
        this.callBase();
        this.cc();
        this.Wq();
      },
      Wq: function() {
        if (this.qh()) {
          _resize_callbacks.default.remove(this.Pq);
        }
      },
      Rq: function(rtl) {
        var $element = this.$element();
        $element.toggleClass("dx-rtl", rtl);
      },
      Iq: function(element, component) {
        var _this4 = this;
        var config = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {};
        var synchronizableOptions = (0, _common.grep)(this.Lq(), function(value) {
          return !(value in config);
        });
        var _this$option2 = this.option(), integrationOptions = _this$option2.integrationOptions;
        var _this$option3 = this.option(), nestedComponentOptions = _this$option3.nestedComponentOptions;
        nestedComponentOptions = nestedComponentOptions || _common.noop;
        var nestedComponentConfig = (0, _extend.extend)({
          integrationOptions
        }, nestedComponentOptions(this));
        synchronizableOptions.forEach(function(optionName) {
          return nestedComponentConfig[optionName] = _this4.option(optionName);
        });
        this.Xq(config, nestedComponentConfig);
        var instance = void 0;
        if ((0, _type.isString)(component)) {
          var $element = (0, _renderer.default)(element)[component](config);
          instance = $element[component]("instance");
        } else if (element) {
          instance = component.getInstance(element);
          if (instance) {
            instance.option(config);
          } else {
            instance = new component(element, config);
          }
        }
        if (instance) {
          var optionChangedHandler = function(_ref3) {
            var name = _ref3.name, value = _ref3.value;
            if (synchronizableOptions.includes(name)) {
              instance.option(name, value);
            }
          };
          this.on("optionChanged", optionChangedHandler);
          instance.on("disposing", function() {
            return _this4.off("optionChanged", optionChangedHandler);
          });
        }
        return instance;
      },
      Xq: function(config, extendConfig) {
        (0, _iterator.each)(extendConfig, function(key, value) {
          !Object.prototype.hasOwnProperty.call(config, key) && (config[key] = value);
        });
      },
      jk: function() {
        var $element = this.$element();
        var context = this.Gk($element);
        return (0, _extend.extend)(this.callBase(), {
          context
        });
      },
      mh: function() {
        var $element = this.$element();
        var model = this.Gk($element);
        var element = this.element();
        return (0, _extend.extend)(this.callBase(), {
          element,
          model
        });
      },
      $e: function(args) {
        switch (args.name) {
          case "width":
          case "height":
            this.Ck();
            break;
          case "rtlEnabled":
            this.Uq();
            break;
          case "elementAttr":
            this.jf();
            break;
          case "disabled":
          case "integrationOptions":
            break;
          default:
            this.callBase(args);
        }
      },
      Yq: function(element) {
        var attrs = element.attributes;
        for (var i = attrs.length - 1; i >= 0; i--) {
          var attr = attrs[i];
          if (attr) {
            var name = attr.name;
            if (!name.indexOf("aria-") || -1 !== name.indexOf("dx-") || "role" === name || "style" === name || "tabindex" === name) {
              element.removeAttribute(name);
            }
          }
        }
      },
      Zq: function(element) {
        element.className = element.className.split(" ").filter(function(cssClass) {
          return 0 !== cssClass.lastIndexOf("dx-", 0);
        }).join(" ");
      },
      _q: function(renderRequired) {
        if (renderRequired) {
          this.Ak();
        } else if (this.Hk) {
          this.Hk = false;
          this.Vq();
        }
      },
      endUpdate: function() {
        var renderRequired = this.gk();
        this.callBase();
        this.Jd() && this._q(renderRequired);
      },
      $element: function() {
        return this.Ba;
      },
      element: function() {
        var $element = this.$element();
        return (0, _element.getPublicElement)($element);
      },
      dispose: function() {
        var element = this.$element().get(0);
        (0, _element_data.cleanDataRecursive)(element, true);
        element.textContent = "";
        this.Yq(element);
        this.Zq(element);
      },
      resetOption: function(optionName) {
        this.callBase(optionName);
        if ("width" === optionName || "height" === optionName) {
          var initialOption = this.initialOption(optionName);
          !(0, _type.isDefined)(initialOption) && this.$element().css(optionName, "");
        }
      },
      $q: function() {
        return;
      },
      Oq: function() {
        if (this.Fc || !this.yk()) {
          return;
        }
        var _this$option4 = this.option(), _this$option4$integra = _this$option4.integrationOptions, integrationOptions = void 0 === _this$option4$integra ? {} : _this$option4$integra;
        var createTemplate = integrationOptions.createTemplate;
        this.Fc = new _template_manager.TemplateManager(createTemplate, this.$q());
        this.Ik();
      },
      Ik: function() {
        var _this5 = this;
        var _this$_templateManage = this.Fc.extractTemplates(this.$element()), templates = _this$_templateManage.templates, anonymousTemplateMeta = _this$_templateManage.anonymousTemplateMeta;
        var anonymousTemplate = this.option("integrationOptions.templates.".concat(anonymousTemplateMeta.name));
        templates.forEach(function(_ref4) {
          var name = _ref4.name, template = _ref4.template;
          _this5.e.silent("integrationOptions.templates.".concat(name), template);
        });
        if (anonymousTemplateMeta.name && !anonymousTemplate) {
          this.e.silent("integrationOptions.templates.".concat(anonymousTemplateMeta.name), anonymousTemplateMeta.template);
          this.e.silent("_hasAnonymousTemplateContent", true);
        }
      },
      xy: function(optionName) {
        return this.Gc(this.option(optionName));
      },
      Gc: function(templateSource) {
        var templates = this.option("integrationOptions.templates");
        var isAsyncTemplate = this.option("templatesRenderAsynchronously");
        var skipTemplates = this.option("integrationOptions.skipTemplates");
        return this.Fc.getTemplate(templateSource, templates, {
          isAsyncTemplate,
          skipTemplates
        }, this);
      },
      yy: function(name, template) {
        this.Gq("integrationOptions.templates." + name, this.Fc.Kd(template));
      },
      yk: function() {
        return true;
      }
    });
    DOMComponent.getInstance = function(element) {
      return (0, _public_component.getInstanceByElement)((0, _renderer.default)(element), this);
    };
    DOMComponent.defaultOptions = function(rule) {
      this.Ld = this.Ld || [];
      this.Ld.push(rule);
    };
    var _default = DOMComponent;
    exports.default = _default;
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/devextreme/cjs/viz/core/helpers.js
var require_helpers = __commonJS({
  "node_modules/devextreme/cjs/viz/core/helpers.js"(exports) {
    "use strict";
    exports.changes = changes;
    exports.expand = expand;
    exports.replaceInherit = void 0;
    var _extend2 = require_extend();
    var _window = require_window();
    var _common = require_common();
    var isServerSide = !(0, _window.hasWindow)();
    function Flags() {
      this.reset();
    }
    Flags.prototype = {
      constructor: Flags,
      add: function(codes) {
        var i;
        var ii = codes.length;
        var flags = this.rh;
        for (i = 0; i < ii; ++i) {
          flags[codes[i]] = 1;
        }
      },
      has: function(code) {
        return this.rh[code] > 0;
      },
      count: function() {
        return Object.keys(this.rh).length;
      },
      reset: function() {
        this.rh = {};
      }
    };
    function combineMaps(baseMap, thisMap) {
      return baseMap !== thisMap ? (0, _extend2.extend)({}, baseMap, thisMap) : (0, _extend2.extend)({}, baseMap);
    }
    function combineLists(baseList, thisList) {
      return baseList !== thisList ? baseList.concat(thisList) : baseList.slice();
    }
    function buildTotalChanges(proto) {
      proto.cr = proto.Hc.concat(proto.lf, proto.Ic);
    }
    function addChange(settings) {
      var proto = this.prototype;
      var code = settings.code;
      proto["_change_" + code] = settings.handler;
      if (settings.isThemeDependent) {
        proto.Jc.push(code);
      }
      if (settings.option) {
        proto.ua[settings.option] = code;
      }
      (settings.isOptionChange ? proto.Hc : proto.Ic).push(code);
      buildTotalChanges(proto);
    }
    function createChainExecutor() {
      var executeChain = function executeChain2() {
        var i;
        var ii = executeChain2.Nd.length;
        var result;
        for (i = 0; i < ii; ++i) {
          result = executeChain2.Nd[i].apply(this, arguments);
        }
        return result;
      };
      executeChain.Nd = [];
      executeChain.add = function(item) {
        executeChain.Nd.push(item);
      };
      executeChain.copy = function(executor) {
        executeChain.Nd = executor.Nd.slice();
      };
      return executeChain;
    }
    function expand(target, name, expander) {
      var current = target[name];
      if (!current) {
        current = expander;
      } else if (!current.add) {
        current = createChainExecutor();
        current.add(target[name]);
        current.add(expander);
      } else {
        if (false === Object.prototype.hasOwnProperty.call(target, name)) {
          current = createChainExecutor();
          current.copy(target[name]);
        }
        current.add(expander);
      }
      target[name] = current;
    }
    function addPlugin(plugin) {
      var proto = this.prototype;
      proto.Kc.push(plugin);
      plugin.fontFields && proto.qb.push.apply(proto.qb, plugin.fontFields);
      if (plugin.members) {
        (0, _extend2.extend)(this.prototype, plugin.members);
      }
      if (plugin.customize) {
        plugin.customize(this);
      }
      if (plugin.extenders) {
        Object.keys(plugin.extenders).forEach(function(key) {
          var func = plugin.extenders[key];
          expand(proto, key, func);
        }, this);
      }
    }
    var replaceInherit = isServerSide ? function(widget) {
      var _inherit = widget.inherit;
      widget.inherit = function() {
        var result = _inherit.apply(this, arguments);
        var proto = result.prototype;
        ["_plugins", "_eventsMap", "_initialChanges", "_themeDependentChanges", "_optionChangesMap", "_optionChangesOrder", "_layoutChangesOrder", "_customChangesOrder", "_totalChangesOrder"].forEach(function(key) {
          proto[key] = {};
        });
        result.addPlugin = _common.noop;
        return result;
      };
      widget.addChange = _common.noop;
      widget.addPlugin = _common.noop;
    } : function(widget) {
      var _inherit = widget.inherit;
      widget.inherit = function() {
        var proto = this.prototype;
        var plugins = proto.Kc;
        var fontFields = proto.qb;
        var eventsMap = proto.Ib;
        var initialChanges = proto.Od;
        var themeDependentChanges = proto.Jc;
        var optionChangesMap = proto.ua;
        var partialOptionChangesMap = proto.mf;
        var partialOptionChangesPath = proto.nf;
        var optionChangesOrder = proto.Hc;
        var layoutChangesOrder = proto.lf;
        var customChangesOrder = proto.Ic;
        var result = _inherit.apply(this, arguments);
        proto = result.prototype;
        proto.Kc = combineLists(plugins, proto.Kc);
        proto.qb = combineLists(fontFields, proto.qb);
        proto.Ib = combineMaps(eventsMap, proto.Ib);
        proto.Od = combineLists(initialChanges, proto.Od);
        proto.Jc = combineLists(themeDependentChanges, proto.Jc);
        proto.ua = combineMaps(optionChangesMap, proto.ua);
        proto.mf = combineMaps(partialOptionChangesMap, proto.mf);
        proto.nf = combineMaps(partialOptionChangesPath, proto.nf);
        proto.Hc = combineLists(optionChangesOrder, proto.Hc);
        proto.lf = combineLists(layoutChangesOrder, proto.lf);
        proto.Ic = combineLists(customChangesOrder, proto.Ic);
        buildTotalChanges(proto);
        result.addPlugin = addPlugin;
        return result;
      };
      widget.prototype.Kc = [];
      widget.prototype.qb = [];
      widget.addChange = addChange;
      widget.addPlugin = addPlugin;
    };
    exports.replaceInherit = replaceInherit;
    function changes() {
      return new Flags();
    }
  }
});

// node_modules/devextreme/cjs/viz/core/errors_warnings.js
var require_errors_warnings = __commonJS({
  "node_modules/devextreme/cjs/viz/core/errors_warnings.js"(exports, module) {
    "use strict";
    exports.default = void 0;
    var _error = _interopRequireDefault(require_error());
    var _errors = _interopRequireDefault(require_errors());
    function _interopRequireDefault(obj) {
      return obj && obj.j ? obj : {
        default: obj
      };
    }
    var _default = (0, _error.default)(_errors.default.ERROR_MESSAGES, {
      E2001: "Invalid data source",
      E2002: "Axis type and data type are incompatible",
      E2003: 'The "{0}" data source field contains data of unsupported type',
      E2004: 'The "{0}" data source field is inconsistent',
      E2005: 'The value field "{0}" is absent in the data source or all its values are negative',
      E2006: "A cycle is detected in provided data",
      E2007: 'The value field "{0}" is absent in the data source',
      E2008: 'The value field "{0}" must be a string',
      E2009: 'The value field "{0}" must be a positive numeric value',
      E2101: "Unknown series type: {0}",
      E2102: "Ambiguity occurred between two value axes with the same name",
      E2103: 'The "{0}" option is given an invalid value. Assign a function instead',
      E2104: "Invalid logarithm base",
      E2105: 'Invalid value of a "{0}"',
      E2202: "Invalid {0} scale value",
      E2203: "The range you are trying to set is invalid",
      W2002: "The {0} series cannot be drawn because the {1} data field is missing",
      W2003: "Tick interval is too small",
      W2101: 'The "{0}" pane does not exist; the last pane is used by default',
      W2102: 'A value axis with the "{0}" name was created automatically',
      W2103: "The chart title was hidden due to the container size",
      W2104: "The legend was hidden due to the container size",
      W2105: 'The title of the "{0}" axis was hidden due to the container size',
      W2106: 'The labels of the "{0}" axis were hidden due to the container size',
      W2107: "The export menu was hidden due to the container size",
      W2108: "The browser does not support exporting images to {0} format.",
      W2301: "Invalid value range"
    });
    exports.default = _default;
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/devextreme/cjs/core/utils/svg.js
var require_svg = __commonJS({
  "node_modules/devextreme/cjs/core/utils/svg.js"(exports) {
    "use strict";
    exports.HIDDEN_FOR_EXPORT = void 0;
    exports.getSvgElement = getSvgElement;
    exports.getSvgMarkup = getSvgMarkup;
    var _dom_adapter = _interopRequireDefault(require_dom_adapter());
    var _window = require_window();
    var _renderer = _interopRequireDefault(require_renderer());
    function _interopRequireDefault(obj) {
      return obj && obj.j ? obj : {
        default: obj
      };
    }
    var window2 = (0, _window.getWindow)();
    function getMarkup(element, backgroundColor) {
      var temp = _dom_adapter.default.createElement("div");
      var clone = element.cloneNode(true);
      if (backgroundColor) {
        (0, _renderer.default)(clone).css("backgroundColor", backgroundColor);
      }
      temp.appendChild(clone);
      return temp.innerHTML;
    }
    function fixNamespaces(markup) {
      var first = true;
      if (-1 === markup.indexOf("xmlns:xlink")) {
        markup = markup.replace("<svg", '<svg xmlns:xlink="http://www.w3.org/1999/xlink"');
      }
      markup = markup.replace(/xmlns="[\s\S]*?"/gi, function(match) {
        if (!first) {
          return "";
        }
        first = false;
        return match;
      });
      return markup.replace(/xmlns:NS1="[\s\S]*?"/gi, "").replace(/NS1:xmlns:xlink="([\s\S]*?)"/gi, 'xmlns:xlink="$1"');
    }
    function decodeHtmlEntities(markup) {
      return markup.replace(/&quot;/gi, "&#34;").replace(/&amp;/gi, "&#38;").replace(/&apos;/gi, "&#39;").replace(/&lt;/gi, "&#60;").replace(/&gt;/gi, "&#62;").replace(/&nbsp;/gi, "&#160;").replace(/&shy;/gi, "&#173;");
    }
    var HIDDEN_FOR_EXPORT = "hidden-for-export";
    exports.HIDDEN_FOR_EXPORT = HIDDEN_FOR_EXPORT;
    function getSvgMarkup(element, backgroundColor) {
      return fixNamespaces(decodeHtmlEntities(getMarkup(element, backgroundColor)));
    }
    function getSvgElement(markup) {
      return _dom_adapter.default.isNode(markup) ? markup : new window2.DOMParser().parseFromString(markup, "image/svg+xml").childNodes[0];
    }
  }
});

// node_modules/devextreme/cjs/animation/frame.js
var require_frame = __commonJS({
  "node_modules/devextreme/cjs/animation/frame.js"(exports) {
    "use strict";
    exports.cancelAnimationFrame = cancelAnimationFrame;
    exports.requestAnimationFrame = requestAnimationFrame;
    var _window = require_window();
    var _call_once = _interopRequireDefault(require_call_once());
    function _interopRequireDefault(obj) {
      return obj && obj.j ? obj : {
        default: obj
      };
    }
    var window2 = (0, _window.hasWindow)() ? (0, _window.getWindow)() : {};
    var FRAME_ANIMATION_STEP_TIME = 1e3 / 60;
    var request = function(callback) {
      return setTimeout(callback, FRAME_ANIMATION_STEP_TIME);
    };
    var cancel = function(requestID) {
      clearTimeout(requestID);
    };
    var setAnimationFrameMethods = (0, _call_once.default)(function() {
      var nativeRequest = window2.requestAnimationFrame || window2.webkitRequestAnimationFrame || window2.mozRequestAnimationFrame || window2.oRequestAnimationFrame || window2.msRequestAnimationFrame;
      var nativeCancel = window2.cancelAnimationFrame || window2.webkitCancelAnimationFrame || window2.mozCancelAnimationFrame || window2.oCancelAnimationFrame || window2.msCancelAnimationFrame;
      if (nativeRequest && nativeCancel) {
        request = nativeRequest;
        cancel = nativeCancel;
      }
    });
    function requestAnimationFrame() {
      setAnimationFrameMethods();
      return request.apply(window2, arguments);
    }
    function cancelAnimationFrame() {
      setAnimationFrameMethods();
      cancel.apply(window2, arguments);
    }
  }
});

// node_modules/devextreme/cjs/viz/core/renderers/animation.js
var require_animation = __commonJS({
  "node_modules/devextreme/cjs/viz/core/renderers/animation.js"(exports) {
    "use strict";
    exports.AnimationController = AnimationController;
    exports.easingFunctions = exports.animationSvgStep = void 0;
    var _frame = require_frame();
    var noop = function() {
    };
    var easingFunctions = {
      easeOutCubic: function(pos, start2, end) {
        return 1 === pos ? end : (1 - Math.pow(1 - pos, 3)) * (end - start2) + +start2;
      },
      linear: function(pos, start2, end) {
        return 1 === pos ? end : pos * (end - start2) + +start2;
      }
    };
    exports.easingFunctions = easingFunctions;
    var animationSvgStep = {
      segments: function(elem, params, progress, easing, currentParams) {
        var from = params.from;
        var to = params.to;
        var curSeg;
        var seg;
        var i;
        var j;
        var segments = [];
        for (i = 0; i < from.length; i++) {
          curSeg = from[i];
          seg = [curSeg[0]];
          if (curSeg.length > 1) {
            for (j = 1; j < curSeg.length; j++) {
              seg.push(easing(progress, curSeg[j], to[i][j]));
            }
          }
          segments.push(seg);
        }
        currentParams.segments = params.end && 1 === progress ? params.end : segments;
        elem.attr({
          segments
        });
      },
      arc: function(elem, params, progress, easing) {
        var from = params.from;
        var to = params.to;
        var current = {};
        for (var i in from) {
          current[i] = easing(progress, from[i], to[i]);
        }
        elem.attr(current);
      },
      transform: function(elem, params, progress, easing, currentParams) {
        var from = params.from;
        var to = params.to;
        var current = {};
        for (var i in from) {
          current[i] = currentParams[i] = easing(progress, from[i], to[i]);
        }
        elem.attr(current);
      },
      base: function(elem, params, progress, easing, currentParams, attributeName) {
        var obj = {};
        obj[attributeName] = currentParams[attributeName] = easing(progress, params.from, params.to);
        elem.attr(obj);
      },
      dr: noop,
      complete: function(element, currentSettings) {
        element.attr(currentSettings);
      }
    };
    exports.animationSvgStep = animationSvgStep;
    function step(now) {
      var animateStep = this.Jk;
      var attrName;
      this.Pd = this.er(now);
      for (attrName in this.params) {
        var anim = animateStep[attrName] || animateStep.base;
        anim(this.element, this.params[attrName], this.Pd, this.Kk, this.Lk, attrName);
      }
      this.options.step && this.options.step(this.Kk(this.Pd, 0, 1), this.Pd);
      if (1 === this.Pd) {
        return this.stop();
      }
      return true;
    }
    function delayTick(now) {
      if (now - this.Mk >= this.delay) {
        this.tick = step;
      }
      return true;
    }
    function start(now) {
      this.Mk = now;
      this.tick = this.delay ? delayTick : step;
      return true;
    }
    function Animation(element, params, options) {
      this.Pd = 0;
      this.element = element;
      this.params = params;
      this.options = options;
      this.duration = options.partitionDuration ? options.duration * options.partitionDuration : options.duration;
      this.delay = options.delay && options.duration * options.delay || 0;
      this.Jk = options.animateStep || animationSvgStep;
      this.Kk = easingFunctions[options.easing] || easingFunctions.easeOutCubic;
      this.Lk = {};
      this.tick = start;
    }
    Animation.prototype = {
      er: function(now) {
        return Math.min(1, (now - this.delay - this.Mk) / this.duration);
      },
      stop: function(disableComplete) {
        var options = this.options;
        var animateStep = this.Jk;
        this.stop = this.tick = noop;
        animateStep.complete && animateStep.complete(this.element, this.Lk);
        options.complete && !disableComplete && options.complete();
      }
    };
    function AnimationController(element) {
      this.pf = 0;
      this.Qd = null;
      this.qf = {};
      this.element = element;
    }
    AnimationController.prototype = {
      Nk: function() {
        var that = this;
        var animations = that.qf;
        var activeAnimation = 0;
        var now = (/* @__PURE__ */ new Date()).getTime();
        var an;
        var endAnimation = that.Ok;
        for (an in animations) {
          if (!animations[an].tick(now)) {
            delete animations[an];
          }
          activeAnimation++;
        }
        if (0 === activeAnimation) {
          that.stop();
          that.Pk = endAnimation && setTimeout(function() {
            if (0 === that.pf) {
              endAnimation();
              that.Ok = null;
            }
          });
          return;
        }
        that.Qd = _frame.requestAnimationFrame.call(null, function() {
          that.Nk();
        }, that.element);
      },
      addAnimation: function(animation) {
        var that = this;
        that.qf[that.pf++] = animation;
        clearTimeout(that.Pk);
        if (!that.Qd) {
          clearTimeout(that.Qk);
          that.Qk = setTimeout(function() {
            that.Qd = 1;
            that.Nk();
          }, 0);
        }
      },
      animateElement: function(elem, params, options) {
        if (elem && params && options) {
          elem.animation && elem.animation.stop();
          this.addAnimation(elem.animation = new Animation(elem, params, options));
        }
      },
      onEndAnimation: function(endAnimation) {
        this.pf ? this.Ok = endAnimation : endAnimation();
      },
      dispose: function() {
        this.stop();
        this.element = null;
      },
      stop: function() {
        this.qf = {};
        this.pf = 0;
        (0, _frame.cancelAnimationFrame)(this.Qd);
        clearTimeout(this.Qk);
        clearTimeout(this.Pk);
        this.Qd = null;
      },
      lock: function() {
        var an;
        var animations = this.qf;
        var unstoppable;
        var hasUnstoppableInAnimations;
        for (an in animations) {
          unstoppable = animations[an].options.unstoppable;
          hasUnstoppableInAnimations = hasUnstoppableInAnimations || unstoppable;
          if (!unstoppable) {
            animations[an].stop(true);
            delete animations[an];
          }
        }
        !hasUnstoppableInAnimations && this.stop();
      }
    };
  }
});

// node_modules/devextreme/cjs/viz/core/renderers/renderer.js
var require_renderer2 = __commonJS({
  "node_modules/devextreme/cjs/viz/core/renderers/renderer.js"(exports) {
    "use strict";
    exports.RectSvgElement = exports.PathSvgElement = exports.ArcSvgElement = void 0;
    exports.Renderer = Renderer;
    exports.TextSvgElement = exports.SvgElement = void 0;
    exports.getFuncIri = getFuncIri;
    exports.processHatchingAttrs = processHatchingAttrs;
    exports.refreshPaths = void 0;
    var _renderer = _interopRequireDefault(require_renderer());
    var _dom_adapter = _interopRequireDefault(require_dom_adapter());
    var _window = require_window();
    var _call_once = _interopRequireDefault(require_call_once());
    var _events_engine = _interopRequireDefault(require_events_engine());
    var _svg = require_svg();
    var _animation = require_animation();
    var _utils = require_utils();
    var _type = require_type();
    function _interopRequireDefault(obj) {
      return obj && obj.j ? obj : {
        default: obj
      };
    }
    function _slicedToArray(arr, i) {
      return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
    }
    function _nonIterableRest() {
      throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _unsupportedIterableToArray(o, minLen) {
      if (!o) {
        return;
      }
      if ("string" === typeof o) {
        return _arrayLikeToArray(o, minLen);
      }
      var n = Object.prototype.toString.call(o).slice(8, -1);
      if ("Object" === n && o.constructor) {
        n = o.constructor.name;
      }
      if ("Map" === n || "Set" === n) {
        return Array.from(o);
      }
      if ("Arguments" === n || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) {
        return _arrayLikeToArray(o, minLen);
      }
    }
    function _arrayLikeToArray(arr, len) {
      if (null == len || len > arr.length) {
        len = arr.length;
      }
      for (var i = 0, arr2 = new Array(len); i < len; i++) {
        arr2[i] = arr[i];
      }
      return arr2;
    }
    function _iterableToArrayLimit(arr, i) {
      var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"];
      if (null != _i) {
        var _s, _e, _x, _r, _arr = [], _n = true, _d = false;
        try {
          if (_x = (_i = _i.call(arr)).next, 0 === i) {
            if (Object(_i) !== _i) {
              return;
            }
            _n = false;
          } else {
            for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = true) {
            }
          }
        } catch (err) {
          _d = true, _e = err;
        } finally {
          try {
            if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) {
              return;
            }
          } finally {
            if (_d) {
              throw _e;
            }
          }
        }
        return _arr;
      }
    }
    function _arrayWithHoles(arr) {
      if (Array.isArray(arr)) {
        return arr;
      }
    }
    var window2 = (0, _window.getWindow)();
    var max = Math.max, round = Math.round;
    var SHARPING_CORRECTION = 0.5;
    var ARC_COORD_PREC = 5;
    var LIGHTENING_HASH = "@filter::lightening";
    var pxAddingExceptions = {
      "column-count": true,
      "fill-opacity": true,
      "flex-grow": true,
      "flex-shrink": true,
      "font-weight": true,
      "line-height": true,
      opacity: true,
      order: true,
      orphans: true,
      widows: true,
      "z-index": true,
      zoom: true
    };
    var KEY_TEXT = "text";
    var KEY_STROKE = "stroke";
    var KEY_STROKE_WIDTH = "stroke-width";
    var KEY_STROKE_OPACITY = "stroke-opacity";
    var KEY_FONT_SIZE = "font-size";
    var KEY_FONT_STYLE = "font-style";
    var KEY_FONT_WEIGHT = "font-weight";
    var KEY_TEXT_DECORATION = "text-decoration";
    var KEY_TEXTS_ALIGNMENT = "textsAlignment";
    var NONE = "none";
    var DEFAULT_FONT_SIZE = 12;
    var ELLIPSIS = "...";
    var objectCreate = function() {
      if (!Object.create) {
        return function(proto) {
          var F = function() {
          };
          F.prototype = proto;
          return new F();
        };
      } else {
        return function(proto) {
          return Object.create(proto);
        };
      }
    }();
    var DEFAULTS = {
      scaleX: 1,
      scaleY: 1,
      "pointer-events": null
    };
    var getBackup = (0, _call_once.default)(function() {
      var backupContainer = _dom_adapter.default.createElement("div");
      backupContainer.style.left = "-9999px";
      backupContainer.style.position = "absolute";
      return {
        backupContainer,
        backupCounter: 0
      };
    });
    function backupRoot(root) {
      if (0 === getBackup().backupCounter) {
        _dom_adapter.default.getBody().appendChild(getBackup().backupContainer);
      }
      ++getBackup().backupCounter;
      root.append({
        element: getBackup().backupContainer
      });
    }
    function restoreRoot(root, container) {
      root.append({
        element: container
      });
      --getBackup().backupCounter;
      if (0 === getBackup().backupCounter) {
        _dom_adapter.default.getBody().removeChild(getBackup().backupContainer);
      }
    }
    function isObjectArgument(value) {
      return value && "string" !== typeof value;
    }
    function createElement3(tagName) {
      return _dom_adapter.default.createElementNS("http://www.w3.org/2000/svg", tagName);
    }
    function getFuncIri(id, pathModified) {
      return null !== id ? "url(" + (pathModified ? window2.location.href.split("#")[0] : "") + "#" + id + ")" : id;
    }
    function extend(target, source) {
      var key;
      for (key in source) {
        target[key] = source[key];
      }
      return target;
    }
    var preserveAspectRatioMap = {
      full: NONE,
      lefttop: "xMinYMin",
      leftcenter: "xMinYMid",
      leftbottom: "xMinYMax",
      centertop: "xMidYMin",
      center: "xMidYMid",
      centerbottom: "xMidYMax",
      righttop: "xMaxYMin",
      rightcenter: "xMaxYMid",
      rightbottom: "xMaxYMax"
    };
    function processHatchingAttrs(element, attrs) {
      if (attrs.hatching && "none" !== (0, _utils.normalizeEnum)(attrs.hatching.direction)) {
        attrs = extend({}, attrs);
        attrs.fill = element.rf = element.renderer.lockDefsElements({
          color: attrs.fill,
          hatching: attrs.hatching
        }, element.rf, "pattern");
        delete attrs.filter;
      } else if (element.rf) {
        element.renderer.releaseDefsElements(element.rf);
        element.rf = null;
        delete attrs.filter;
      } else if (attrs.filter) {
        attrs = extend({}, attrs);
        attrs.filter = element.sf = element.renderer.lockDefsElements({}, element.sf, "filter");
      } else if (element.sf) {
        element.renderer.releaseDefsElements(element.sf);
        element.sf = null;
      }
      delete attrs.hatching;
      return attrs;
    }
    var buildArcPath = function(x, y, innerR, outerR, startAngleCos, startAngleSin, endAngleCos, endAngleSin, isCircle, longFlag) {
      return ["M", (x + outerR * startAngleCos).toFixed(ARC_COORD_PREC), (y - outerR * startAngleSin).toFixed(ARC_COORD_PREC), "A", outerR.toFixed(ARC_COORD_PREC), outerR.toFixed(ARC_COORD_PREC), 0, longFlag, 0, (x + outerR * endAngleCos).toFixed(ARC_COORD_PREC), (y - outerR * endAngleSin).toFixed(ARC_COORD_PREC), isCircle ? "M" : "L", (x + innerR * endAngleCos).toFixed(5), (y - innerR * endAngleSin).toFixed(ARC_COORD_PREC), "A", innerR.toFixed(ARC_COORD_PREC), innerR.toFixed(ARC_COORD_PREC), 0, longFlag, 1, (x + innerR * startAngleCos).toFixed(ARC_COORD_PREC), (y - innerR * startAngleSin).toFixed(ARC_COORD_PREC), "Z"].join(" ");
    };
    function buildPathSegments(points, type) {
      var list = [
        ["M", 0, 0]
      ];
      switch (type) {
        case "line":
          list = buildLineSegments(points);
          break;
        case "area":
          list = buildLineSegments(points, true);
          break;
        case "bezier":
          list = buildCurveSegments(points);
          break;
        case "bezierarea":
          list = buildCurveSegments(points, true);
      }
      return list;
    }
    function buildLineSegments(points, close) {
      return buildSegments(points, buildSimpleLineSegment, close);
    }
    function buildCurveSegments(points, close) {
      return buildSegments(points, buildSimpleCurveSegment, close);
    }
    function buildSegments(points, buildSimpleSegment, close) {
      var _points$;
      var i;
      var ii;
      var list = [];
      if (null !== (_points$ = points[0]) && void 0 !== _points$ && _points$.length) {
        for (i = 0, ii = points.length; i < ii; ++i) {
          buildSimpleSegment(points[i], close, list);
        }
      } else {
        buildSimpleSegment(points, close, list);
      }
      return list;
    }
    function buildSimpleLineSegment(points, close, list) {
      var i = 0;
      var k0 = list.length;
      var k = k0;
      var ii = (points || []).length;
      if (ii) {
        if (void 0 !== points[0].x) {
          for (; i < ii; ) {
            list[k++] = ["L", points[i].x, points[i++].y];
          }
        } else {
          for (; i < ii; ) {
            list[k++] = ["L", points[i++], points[i++]];
          }
        }
        list[k0][0] = "M";
      } else {
        list[k] = ["M", 0, 0];
      }
      close && list.push(["Z"]);
      return list;
    }
    function buildSimpleCurveSegment(points, close, list) {
      var i;
      var k = list.length;
      var ii = (points || []).length;
      if (ii) {
        if (void 0 !== points[0].x) {
          list[k++] = ["M", points[0].x, points[0].y];
          for (i = 1; i < ii; ) {
            list[k++] = ["C", points[i].x, points[i++].y, points[i].x, points[i++].y, points[i].x, points[i++].y];
          }
        } else {
          list[k++] = ["M", points[0], points[1]];
          for (i = 2; i < ii; ) {
            list[k++] = ["C", points[i++], points[i++], points[i++], points[i++], points[i++], points[i++]];
          }
        }
      } else {
        list[k] = ["M", 0, 0];
      }
      close && list.push(["Z"]);
      return list;
    }
    function combinePathParam(segments) {
      var d = [];
      var k = 0;
      var i;
      var ii = segments.length;
      var segment;
      var j;
      var jj;
      for (i = 0; i < ii; ++i) {
        segment = segments[i];
        for (j = 0, jj = segment.length; j < jj; ++j) {
          d[k++] = segment[j];
        }
      }
      return d.join(" ");
    }
    function compensateSegments(oldSegments, newSegments, type) {
      var oldLength = oldSegments.length;
      var newLength = newSegments.length;
      var i;
      var originalNewSegments;
      var makeEqualSegments = -1 !== type.indexOf("area") ? makeEqualAreaSegments : makeEqualLineSegments;
      if (0 === oldLength) {
        for (i = 0; i < newLength; i++) {
          oldSegments.push(newSegments[i].slice(0));
        }
      } else if (oldLength < newLength) {
        makeEqualSegments(oldSegments, newSegments, type);
      } else if (oldLength > newLength) {
        originalNewSegments = newSegments.slice(0);
        makeEqualSegments(newSegments, oldSegments, type);
      }
      return originalNewSegments;
    }
    function prepareConstSegment(constSeg, type) {
      var x = constSeg[constSeg.length - 2];
      var y = constSeg[constSeg.length - 1];
      switch (type) {
        case "line":
        case "area":
          constSeg[0] = "L";
          break;
        case "bezier":
        case "bezierarea":
          constSeg[0] = "C";
          constSeg[1] = constSeg[3] = constSeg[5] = x;
          constSeg[2] = constSeg[4] = constSeg[6] = y;
      }
    }
    function makeEqualLineSegments(short, long, type) {
      var constSeg = short[short.length - 1].slice();
      var i = short.length;
      prepareConstSegment(constSeg, type);
      for (; i < long.length; i++) {
        short[i] = constSeg.slice(0);
      }
    }
    function makeEqualAreaSegments(short, long, type) {
      var i;
      var head;
      var shortLength = short.length;
      var longLength = long.length;
      var constsSeg1;
      var constsSeg2;
      if ((shortLength - 1) % 2 === 0 && (longLength - 1) % 2 === 0) {
        i = (shortLength - 1) / 2 - 1;
        head = short.slice(0, i + 1);
        constsSeg1 = head[head.length - 1].slice(0);
        constsSeg2 = short.slice(i + 1)[0].slice(0);
        prepareConstSegment(constsSeg1, type);
        prepareConstSegment(constsSeg2, type);
        for (var j = i; j < (longLength - 1) / 2 - 1; j++) {
          short.splice(j + 1, 0, constsSeg1);
          short.splice(j + 3, 0, constsSeg2);
        }
      }
    }
    function baseCss(that, styles) {
      var elemStyles = that.t;
      var key;
      var value;
      styles = styles || {};
      for (key in styles) {
        value = styles[key];
        if ((0, _type.isDefined)(value)) {
          value += "number" === typeof value && !pxAddingExceptions[key] ? "px" : "";
          elemStyles[key] = "" !== value ? value : null;
        }
      }
      for (key in elemStyles) {
        value = elemStyles[key];
        if (value) {
          that.element.style[key] = value;
        } else if (null === value) {
          that.element.style[key] = "";
        }
      }
      return that;
    }
    function fixFuncIri(wrapper, attribute) {
      var element = wrapper.element;
      var id = wrapper.attr(attribute);
      if (id && -1 !== id.indexOf("DevExpress")) {
        element.removeAttribute(attribute);
        element.setAttribute(attribute, getFuncIri(id, wrapper.renderer.pathModified));
      }
    }
    function baseAttr(that, attrs) {
      attrs = attrs || {};
      var settings = that.Ca;
      var attributes = {};
      var key;
      var value;
      var elem = that.element;
      var renderer = that.renderer;
      var rtl = renderer.rtl;
      var hasTransformations;
      var recalculateDashStyle;
      var sw;
      var i;
      if (!isObjectArgument(attrs)) {
        if (attrs in settings) {
          return settings[attrs];
        }
        if (attrs in DEFAULTS) {
          return DEFAULTS[attrs];
        }
        return 0;
      }
      extend(attributes, attrs);
      for (key in attributes) {
        value = attributes[key];
        if (void 0 === value) {
          continue;
        }
        settings[key] = value;
        if ("align" === key) {
          key = "text-anchor";
          value = {
            left: rtl ? "end" : "start",
            center: "middle",
            right: rtl ? "start" : "end"
          }[value] || null;
        } else if ("dashStyle" === key) {
          recalculateDashStyle = true;
          continue;
        } else if (key === KEY_STROKE_WIDTH) {
          recalculateDashStyle = true;
        } else if (value && ("fill" === key || "clip-path" === key || "filter" === key) && 0 === value.indexOf("DevExpress")) {
          that.Rk();
          value = getFuncIri(value, renderer.pathModified);
        } else if (/^(translate(X|Y)|rotate[XY]?|scale(X|Y)|sharp|sharpDirection)$/i.test(key)) {
          hasTransformations = true;
          continue;
        } else if (/^(x|y|d)$/i.test(key)) {
          hasTransformations = true;
        }
        if (null === value) {
          elem.removeAttribute(key);
        } else {
          elem.setAttribute(key, value);
        }
      }
      if (recalculateDashStyle && "dashStyle" in settings) {
        value = settings.dashStyle;
        sw = ("_originalSW" in that ? that.Sk : settings[KEY_STROKE_WIDTH]) || 1;
        key = "stroke-dasharray";
        value = null === value ? "" : (0, _utils.normalizeEnum)(value);
        if ("" === value || "solid" === value || value === NONE) {
          that.element.removeAttribute(key);
        } else {
          value = value.replace(/longdash/g, "8,3,").replace(/dash/g, "4,3,").replace(/dot/g, "1,3,").replace(/,$/, "").split(",");
          i = value.length;
          while (i--) {
            value[i] = parseInt(value[i]) * sw;
          }
          that.element.setAttribute(key, value.join(","));
        }
      }
      if (hasTransformations) {
        that.gr();
      }
      return that;
    }
    function pathAttr(attrs) {
      var segments;
      if (isObjectArgument(attrs)) {
        attrs = extend({}, attrs);
        segments = attrs.segments;
        if ("points" in attrs) {
          segments = buildPathSegments(attrs.points, this.type);
          delete attrs.points;
        }
        if (segments) {
          attrs.d = combinePathParam(segments);
          this.segments = segments;
          delete attrs.segments;
        }
      }
      return baseAttr(this, attrs);
    }
    function arcAttr(attrs) {
      var settings = this.Ca;
      var x;
      var y;
      var innerRadius;
      var outerRadius;
      var startAngle;
      var endAngle;
      if (isObjectArgument(attrs)) {
        attrs = extend({}, attrs);
        if ("x" in attrs || "y" in attrs || "innerRadius" in attrs || "outerRadius" in attrs || "startAngle" in attrs || "endAngle" in attrs) {
          settings.x = x = "x" in attrs ? attrs.x : settings.x;
          delete attrs.x;
          settings.y = y = "y" in attrs ? attrs.y : settings.y;
          delete attrs.y;
          settings.innerRadius = innerRadius = "innerRadius" in attrs ? attrs.innerRadius : settings.innerRadius;
          delete attrs.innerRadius;
          settings.outerRadius = outerRadius = "outerRadius" in attrs ? attrs.outerRadius : settings.outerRadius;
          delete attrs.outerRadius;
          settings.startAngle = startAngle = "startAngle" in attrs ? attrs.startAngle : settings.startAngle;
          delete attrs.startAngle;
          settings.endAngle = endAngle = "endAngle" in attrs ? attrs.endAngle : settings.endAngle;
          delete attrs.endAngle;
          attrs.d = buildArcPath.apply(null, (0, _utils.normalizeArcParams)(x, y, innerRadius, outerRadius, startAngle, endAngle));
        }
      }
      return baseAttr(this, attrs);
    }
    function rectAttr(attrs) {
      var x;
      var y;
      var width;
      var height;
      var sw;
      var maxSW;
      var newSW;
      if (isObjectArgument(attrs)) {
        attrs = extend({}, attrs);
        if (void 0 !== attrs.x || void 0 !== attrs.y || void 0 !== attrs.width || void 0 !== attrs.height || void 0 !== attrs[KEY_STROKE_WIDTH]) {
          void 0 !== attrs.x ? x = this.ir = attrs.x : x = this.ir || 0;
          void 0 !== attrs.y ? y = this.jr = attrs.y : y = this.jr || 0;
          void 0 !== attrs.width ? width = this.kr = attrs.width : width = this.kr || 0;
          void 0 !== attrs.height ? height = this.lr = attrs.height : height = this.lr || 0;
          void 0 !== attrs[KEY_STROKE_WIDTH] ? sw = this.Sk = attrs[KEY_STROKE_WIDTH] : sw = this.Sk;
          maxSW = ~~((width < height ? width : height) / 2);
          newSW = (sw || 0) < maxSW ? sw || 0 : maxSW;
          attrs.x = x + newSW / 2;
          attrs.y = y + newSW / 2;
          attrs.width = width - newSW;
          attrs.height = height - newSW;
          ((sw || 0) !== newSW || !(0 === newSW && void 0 === sw)) && (attrs[KEY_STROKE_WIDTH] = newSW);
        }
        if ("sharp" in attrs) {
          delete attrs.sharp;
        }
      }
      return baseAttr(this, attrs);
    }
    function textAttr(attrs) {
      var isResetRequired;
      if (!isObjectArgument(attrs)) {
        return baseAttr(this, attrs);
      }
      attrs = extend({}, attrs);
      var settings = this.Ca;
      var wasStroked = (0, _type.isDefined)(settings[KEY_STROKE]) && (0, _type.isDefined)(settings[KEY_STROKE_WIDTH]);
      if (void 0 !== attrs[KEY_TEXT]) {
        settings[KEY_TEXT] = attrs[KEY_TEXT];
        delete attrs[KEY_TEXT];
        isResetRequired = true;
      }
      if (void 0 !== attrs[KEY_STROKE]) {
        settings[KEY_STROKE] = attrs[KEY_STROKE];
        delete attrs[KEY_STROKE];
      }
      if (void 0 !== attrs[KEY_STROKE_WIDTH]) {
        settings[KEY_STROKE_WIDTH] = attrs[KEY_STROKE_WIDTH];
        delete attrs[KEY_STROKE_WIDTH];
      }
      if (void 0 !== attrs[KEY_STROKE_OPACITY]) {
        settings[KEY_STROKE_OPACITY] = attrs[KEY_STROKE_OPACITY];
        delete attrs[KEY_STROKE_OPACITY];
      }
      if (void 0 !== attrs[KEY_TEXTS_ALIGNMENT]) {
        alignTextNodes(this, attrs[KEY_TEXTS_ALIGNMENT]);
        delete attrs[KEY_TEXTS_ALIGNMENT];
      }
      var isStroked = (0, _type.isDefined)(settings[KEY_STROKE]) && (0, _type.isDefined)(settings[KEY_STROKE_WIDTH]);
      baseAttr(this, attrs);
      isResetRequired = isResetRequired || isStroked !== wasStroked && settings[KEY_TEXT];
      if (isResetRequired) {
        createTextNodes(this, settings.text, isStroked);
        this.sh = false;
      }
      if (isResetRequired || void 0 !== attrs.x || void 0 !== attrs.y) {
        locateTextNodes(this);
      }
      if (isStroked) {
        strokeTextNodes(this);
      }
      return this;
    }
    function textCss(styles) {
      styles = styles || {};
      baseCss(this, styles);
      if (KEY_FONT_SIZE in styles) {
        locateTextNodes(this);
      }
      return this;
    }
    function orderHtmlTree(list, line, node, parentStyle, parentClassName) {
      var style;
      var realStyle;
      var i;
      var ii;
      var nodes;
      if (void 0 !== node.wholeText) {
        list.push({
          value: node.wholeText,
          style: parentStyle,
          className: parentClassName,
          line,
          height: parentStyle[KEY_FONT_SIZE] || 0
        });
      } else if ("BR" === node.tagName) {
        ++line;
      } else if (_dom_adapter.default.isElementNode(node)) {
        extend(style = {}, parentStyle);
        switch (node.tagName) {
          case "B":
          case "STRONG":
            style[KEY_FONT_WEIGHT] = "bold";
            break;
          case "I":
          case "EM":
            style[KEY_FONT_STYLE] = "italic";
            break;
          case "U":
            style[KEY_TEXT_DECORATION] = "underline";
        }
        realStyle = node.style;
        realStyle.color && (style.fill = realStyle.color);
        realStyle.fontSize && (style[KEY_FONT_SIZE] = realStyle.fontSize);
        realStyle.fontStyle && (style[KEY_FONT_STYLE] = realStyle.fontStyle);
        realStyle.fontWeight && (style[KEY_FONT_WEIGHT] = realStyle.fontWeight);
        realStyle.textDecoration && (style[KEY_TEXT_DECORATION] = realStyle.textDecoration);
        for (i = 0, nodes = node.childNodes, ii = nodes.length; i < ii; ++i) {
          line = orderHtmlTree(list, line, nodes[i], style, node.className || parentClassName);
        }
      }
      return line;
    }
    function adjustLineHeights(items) {
      var i;
      var ii;
      var currentItem = items[0];
      var item;
      for (i = 1, ii = items.length; i < ii; ++i) {
        item = items[i];
        if (item.line === currentItem.line) {
          currentItem.height = maxLengthFontSize(currentItem.height, item.height);
          currentItem.inherits = currentItem.inherits || 0 === parseFloat(item.height);
          item.height = NaN;
        } else {
          currentItem = item;
        }
      }
    }
    function removeExtraAttrs(html) {
      var findStyleAndClassAttrs = /(style|class)\s*=\s*(["'])(?:(?!\2).)*\2\s?/gi;
      return html.replace(/(?:(<[a-z0-9]+\s*))([\s\S]*?)(>|\/>)/gi, function(allTagAttrs, p1, p2, p3) {
        p2 = (p2 && p2.match(findStyleAndClassAttrs) || []).map(function(str) {
          return str;
        }).join(" ");
        return p1 + p2 + p3;
      });
    }
    function parseHTML(text) {
      var items = [];
      var div = _dom_adapter.default.createElement("div");
      div.innerHTML = text.replace(/\r/g, "").replace(/\n/g, "<br/>").replace(/style=/g, "data-style=");
      div.querySelectorAll("[data-style]").forEach(function(element) {
        element.style = element.getAttribute("data-style");
        element.removeAttribute("data-style");
      });
      orderHtmlTree(items, 0, div, {}, "");
      adjustLineHeights(items);
      return items;
    }
    function parseMultiline(text) {
      var texts = text.replace(/\r/g, "").split(/\n/g);
      var i = 0;
      var items = [];
      for (; i < texts.length; i++) {
        items.push({
          value: texts[i].trim(),
          height: 0,
          line: i
        });
      }
      return items;
    }
    function createTspans(items, element, fieldName) {
      var i;
      var ii;
      var item;
      for (i = 0, ii = items.length; i < ii; ++i) {
        item = items[i];
        item[fieldName] = createElement3("tspan");
        item[fieldName].appendChild(_dom_adapter.default.createTextNode(item.value));
        item.style && baseCss({
          element: item[fieldName],
          t: {}
        }, item.style);
        item.className && item[fieldName].setAttribute("class", item.className);
        element.appendChild(item[fieldName]);
      }
    }
    function restoreText() {
      if (this.sh) {
        this.attr({
          text: this.Ca.text
        });
      }
    }
    function applyEllipsis(maxWidth) {
      var lines;
      var hasEllipsis = false;
      var i;
      var ii;
      var lineParts;
      var j;
      var jj;
      var text;
      restoreText.call(this);
      var ellipsis = this.renderer.text(ELLIPSIS).attr(this.t).append(this.renderer.root);
      var ellipsisWidth = ellipsis.getBBox().width;
      if (this.uh().width > maxWidth) {
        if (maxWidth - ellipsisWidth < 0) {
          maxWidth = 0;
        } else {
          maxWidth -= ellipsisWidth;
        }
        lines = prepareLines(this.element, this.Da, maxWidth);
        for (i = 0, ii = lines.length; i < ii; ++i) {
          lineParts = lines[i].parts;
          if (1 === lines[i].commonLength) {
            continue;
          }
          for (j = 0, jj = lineParts.length; j < jj; ++j) {
            text = lineParts[j];
            if ((0, _type.isDefined)(text.endIndex)) {
              setNewText(text, text.endIndex);
              hasEllipsis = true;
            } else if (text.startBox > maxWidth) {
              removeTextSpan(text);
            }
          }
        }
      }
      ellipsis.remove();
      this.sh = hasEllipsis;
      return hasEllipsis;
    }
    function cloneAndRemoveAttrs(node) {
      var clone;
      if (node) {
        clone = node.cloneNode();
        clone.removeAttribute("y");
        clone.removeAttribute("x");
      }
      return clone || node;
    }
    function detachTitleElements(element) {
      var titleElements = _dom_adapter.default.querySelectorAll(element, "title");
      for (var i = 0; i < titleElements.length; i++) {
        element.removeChild(titleElements[i]);
      }
      return titleElements;
    }
    function detachAndStoreTitleElements(element) {
      var titleElements = detachTitleElements(element);
      return function() {
        for (var i = 0; i < titleElements.length; i++) {
          element.appendChild(titleElements[i]);
        }
      };
    }
    function setMaxSize(maxWidth, maxHeight) {
      var options = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {};
      var that = this;
      var lines = [];
      var textChanged = false;
      var textIsEmpty = false;
      var ellipsisMaxWidth = maxWidth;
      restoreText.call(that);
      var restoreTitleElement = detachAndStoreTitleElements(this.element);
      var ellipsis = that.renderer.text(ELLIPSIS).attr(that.t).append(that.renderer.root);
      var ellipsisWidth = ellipsis.getBBox().width;
      var _that$_getElementBBox = that.uh(), width = _that$_getElementBBox.width, height = _that$_getElementBBox.height;
      if ((width || height) && (width > maxWidth || maxHeight && height > maxHeight)) {
        if (maxWidth - ellipsisWidth < 0) {
          ellipsisMaxWidth = 0;
        } else {
          ellipsisMaxWidth -= ellipsisWidth;
        }
        lines = applyOverflowRules(that.element, that.Da, maxWidth, ellipsisMaxWidth, options);
        lines = setMaxHeight(lines, ellipsisMaxWidth, options, maxHeight, parseFloat(this.Tk()));
        this.Da = lines.reduce(function(texts, line) {
          return texts.concat(line.parts);
        }, []).filter(function(t) {
          return "" !== t.value;
        }).map(function(t) {
          t.stroke && t.tspan.parentNode.appendChild(t.stroke);
          return t;
        }).map(function(t) {
          t.tspan.parentNode.appendChild(t.tspan);
          return t;
        });
        !this.Da.length && (this.Da = null);
        textChanged = true;
        if (this.Da) {
          locateTextNodes(this);
        } else {
          this.element.textContent = "";
          textIsEmpty = true;
        }
      }
      ellipsis.remove();
      that.sh = textChanged;
      restoreTitleElement();
      return {
        rowCount: lines.length,
        textChanged,
        textIsEmpty
      };
    }
    function getIndexForEllipsis(text, maxWidth, startBox, endBox) {
      var k;
      var kk;
      if (startBox <= maxWidth && endBox > maxWidth) {
        for (k = 1, kk = text.value.length; k <= kk; ++k) {
          if (startBox + text.tspan.getSubStringLength(0, k) > maxWidth) {
            return k - 1;
          }
        }
      }
    }
    function getTextWidth(text) {
      return text.value.length ? text.tspan.getSubStringLength(0, text.value.length) : 0;
    }
    function prepareLines(element, texts, maxWidth) {
      var lines = [];
      var i;
      var ii;
      var text;
      var startBox;
      var endBox;
      if (texts) {
        for (i = 0, ii = texts.length; i < ii; ++i) {
          text = texts[i];
          if (!lines[text.line]) {
            text.startBox = startBox = 0;
            lines.push({
              commonLength: text.value.length,
              parts: [text]
            });
          } else {
            text.startBox = startBox;
            lines[text.line].parts.push(text);
            lines[text.line].commonLength += text.value.length;
          }
          endBox = startBox + text.tspan.getSubStringLength(0, text.value.length);
          text.endIndex = getIndexForEllipsis(text, maxWidth, startBox, endBox);
          startBox = endBox;
        }
      } else {
        text = {
          value: element.textContent,
          tspan: element
        };
        text.startBox = startBox = 0;
        endBox = startBox + getTextWidth(text);
        text.endIndex = getIndexForEllipsis(text, maxWidth, startBox, endBox);
        lines = [{
          commonLength: element.textContent.length,
          parts: [text]
        }];
      }
      return lines;
    }
    function getSpaceBreakIndex(text, maxWidth) {
      var initialIndices = text.startBox > 0 ? [0] : [];
      var spaceIndices = text.value.split("").reduce(function(indices, char, index) {
        if (" " === char) {
          indices.push(index);
        }
        return indices;
      }, initialIndices);
      var spaceIndex = 0;
      while (void 0 !== spaceIndices[spaceIndex + 1] && text.startBox + text.tspan.getSubStringLength(0, spaceIndices[spaceIndex + 1]) < maxWidth) {
        spaceIndex++;
      }
      return spaceIndices[spaceIndex];
    }
    function getWordBreakIndex(text, maxWidth) {
      for (var i = 0; i < text.value.length - 1; i++) {
        if (text.startBox + text.tspan.getSubStringLength(0, i + 1) > maxWidth) {
          return i;
        }
      }
    }
    function getEllipsisString(ellipsisMaxWidth, _ref) {
      var hideOverflowEllipsis = _ref.hideOverflowEllipsis;
      return hideOverflowEllipsis && 0 === ellipsisMaxWidth ? "" : ELLIPSIS;
    }
    function setEllipsis(text, ellipsisMaxWidth, options) {
      var ellipsis = getEllipsisString(ellipsisMaxWidth, options);
      if (text.value.length && text.tspan.parentNode) {
        for (var i = text.value.length - 1; i >= 1; i--) {
          if (text.startBox + text.tspan.getSubStringLength(0, i) < ellipsisMaxWidth) {
            setNewText(text, i, ellipsis);
            break;
          } else if (1 === i) {
            setNewText(text, 0, ellipsis);
          }
        }
      }
    }
    function wordWrap(text, maxWidth, ellipsisMaxWidth, options, lastStepBreakIndex) {
      var wholeText = text.value;
      var breakIndex;
      if ("none" !== options.wordWrap) {
        breakIndex = "normal" === options.wordWrap ? getSpaceBreakIndex(text, maxWidth) : getWordBreakIndex(text, maxWidth);
      }
      var restLines = [];
      var restText;
      if (isFinite(breakIndex) && !(0 === lastStepBreakIndex && 0 === breakIndex)) {
        setNewText(text, breakIndex, "");
        var newTextOffset = " " === wholeText[breakIndex] ? 1 : 0;
        var restString = wholeText.slice(breakIndex + newTextOffset);
        if (restString.length) {
          var restTspan = cloneAndRemoveAttrs(text.tspan);
          restTspan.textContent = restString;
          text.tspan.parentNode.appendChild(restTspan);
          restText = extend(extend({}, text), {
            value: restString,
            startBox: 0,
            height: 0,
            tspan: restTspan,
            stroke: cloneAndRemoveAttrs(text.stroke),
            endBox: restTspan.getSubStringLength(0, restString.length)
          });
          restText.stroke && (restText.stroke.textContent = restString);
          if (restText.endBox > maxWidth) {
            restLines = wordWrap(restText, maxWidth, ellipsisMaxWidth, options, breakIndex);
            if (!restLines.length) {
              return [];
            }
          }
        }
      }
      if (text.value.length) {
        if ("ellipsis" === options.textOverflow && text.tspan.getSubStringLength(0, text.value.length) > maxWidth) {
          setEllipsis(text, ellipsisMaxWidth, options);
        }
        if ("hide" === options.textOverflow && text.tspan.getSubStringLength(0, text.value.length) > maxWidth) {
          return [];
        }
      } else {
        text.tspan.parentNode.removeChild(text.tspan);
      }
      var parts = [];
      if (restText) {
        parts.push(restText);
      }
      return [{
        commonLength: wholeText.length,
        parts
      }].concat(restLines);
    }
    function calculateLineHeight(line, lineHeight) {
      return line.parts.reduce(function(height, text) {
        return max(height, getItemLineHeight(text, lineHeight));
      }, 0);
    }
    function setMaxHeight(lines, ellipsisMaxWidth, options, maxHeight, lineHeight) {
      var textOverflow = options.textOverflow;
      if (!isFinite(maxHeight) || 0 === Number(maxHeight) || "none" === textOverflow) {
        return lines;
      }
      var result = lines.reduce(function(_ref2, l, index, arr) {
        var _ref3 = _slicedToArray(_ref2, 2), lines2 = _ref3[0], commonHeight = _ref3[1];
        var height = calculateLineHeight(l, lineHeight);
        commonHeight += height;
        if (commonHeight < maxHeight) {
          lines2.push(l);
        } else {
          l.parts.forEach(function(item) {
            removeTextSpan(item);
          });
          if ("ellipsis" === textOverflow) {
            var prevLine = arr[index - 1];
            if (prevLine) {
              var text = prevLine.parts[prevLine.parts.length - 1];
              if (!text.hasEllipsis) {
                if (0 === ellipsisMaxWidth || text.endBox < ellipsisMaxWidth) {
                  setNewText(text, text.value.length, getEllipsisString(ellipsisMaxWidth, options));
                } else {
                  setEllipsis(text, ellipsisMaxWidth, options);
                }
              }
            }
          }
        }
        return [lines2, commonHeight];
      }, [
        [],
        0
      ]);
      if ("hide" === textOverflow && result[1] > maxHeight) {
        result[0].forEach(function(l) {
          l.parts.forEach(function(item) {
            removeTextSpan(item);
          });
        });
        return [];
      }
      return result[0];
    }
    function applyOverflowRules(element, texts, maxWidth, ellipsisMaxWidth, options) {
      if (!texts) {
        var textValue = element.textContent;
        var text = {
          value: textValue,
          height: 0,
          line: 0
        };
        element.textContent = "";
        createTspans([text], element, "tspan");
        texts = [text];
      }
      return texts.reduce(function(_ref4, text2) {
        var _ref5 = _slicedToArray(_ref4, 5), lines = _ref5[0], startBox = _ref5[1], endBox = _ref5[2], stop = _ref5[3], lineNumber = _ref5[4];
        var line = lines[lines.length - 1];
        if (stop) {
          return [lines, startBox, endBox, stop];
        }
        if (!line || text2.line !== lineNumber) {
          text2.startBox = startBox = 0;
          lines.push({
            commonLength: text2.value.length,
            parts: [text2]
          });
        } else {
          text2.startBox = startBox;
          if (startBox > ellipsisMaxWidth && "none" === options.wordWrap && "ellipsis" === options.textOverflow) {
            removeTextSpan(text2);
            return [lines, startBox, endBox, stop, lineNumber];
          }
          line.parts.push(text2);
          line.commonLength += text2.value.length;
        }
        text2.endBox = endBox = startBox + getTextWidth(text2);
        startBox = endBox;
        if ((0, _type.isDefined)(maxWidth) && endBox > maxWidth) {
          var wordWrapLines = wordWrap(text2, maxWidth, ellipsisMaxWidth, options);
          if (!wordWrapLines.length) {
            lines = [];
            stop = true;
          } else {
            lines = lines.concat(wordWrapLines.filter(function(l) {
              return l.parts.length > 0;
            }));
          }
        }
        return [lines, startBox, endBox, stop, text2.line];
      }, [
        [],
        0,
        0,
        false,
        0
      ])[0];
    }
    function setNewText(text, index) {
      var insertString = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : ELLIPSIS;
      var newText = text.value.substr(0, index) + insertString;
      text.value = text.tspan.textContent = newText;
      text.stroke && (text.stroke.textContent = newText);
      if (insertString === ELLIPSIS) {
        text.hasEllipsis = true;
      }
    }
    function removeTextSpan(text) {
      text.tspan.parentNode && text.tspan.parentNode.removeChild(text.tspan);
      text.stroke && text.stroke.parentNode && text.stroke.parentNode.removeChild(text.stroke);
    }
    function createTextNodes(wrapper, text, isStroked) {
      var items;
      var parsedHtml;
      wrapper.Da = null;
      wrapper.clear();
      if (null === text) {
        return;
      }
      text = "" + text;
      if (!wrapper.renderer.encodeHtml && (/<[a-z][\s\S]*>/i.test(text) || -1 !== text.indexOf("&"))) {
        parsedHtml = removeExtraAttrs(text);
        items = parseHTML(parsedHtml);
      } else if (/\n/g.test(text)) {
        items = parseMultiline(text);
      } else if (isStroked) {
        items = [{
          value: text.trim(),
          height: 0
        }];
      }
      if (items) {
        if (items.length) {
          wrapper.Da = items;
          if (isStroked) {
            createTspans(items, wrapper.element, KEY_STROKE);
          }
          createTspans(items, wrapper.element, "tspan");
        }
      } else {
        wrapper.element.appendChild(_dom_adapter.default.createTextNode(text));
      }
    }
    function setTextNodeAttribute(item, name, value) {
      item.tspan.setAttribute(name, value);
      item.stroke && item.stroke.setAttribute(name, value);
    }
    function getItemLineHeight(item, defaultValue) {
      return item.inherits ? maxLengthFontSize(item.height, defaultValue) : item.height || defaultValue;
    }
    function locateTextNodes(wrapper) {
      if (!wrapper.Da) {
        return;
      }
      var items = wrapper.Da;
      var x = wrapper.Ca.x;
      var lineHeight = wrapper.Tk();
      var i;
      var ii;
      var item = items[0];
      setTextNodeAttribute(item, "x", x);
      setTextNodeAttribute(item, "y", wrapper.Ca.y);
      for (i = 1, ii = items.length; i < ii; ++i) {
        item = items[i];
        if (parseFloat(item.height) >= 0) {
          setTextNodeAttribute(item, "x", x);
          var height = getItemLineHeight(item, lineHeight);
          setTextNodeAttribute(item, "dy", height);
        }
      }
    }
    function alignTextNodes(wrapper, alignment) {
      if (!wrapper.Da || "center" === alignment) {
        return;
      }
      var items = wrapper.Da;
      var direction = "left" === alignment ? -1 : 1;
      var maxTextWidth = Math.max.apply(Math, items.map(function(t) {
        return getTextWidth(t);
      }));
      for (var i = 0; i < items.length; i++) {
        var item = items[i];
        var textWidth = getTextWidth(item);
        if (0 !== maxTextWidth && maxTextWidth !== textWidth) {
          setTextNodeAttribute(item, "dx", direction * round((maxTextWidth - textWidth) / 2 * 10) / 10);
        }
      }
    }
    function maxLengthFontSize(fontSize1, fontSize2) {
      var parsedHeight1 = parseFloat(fontSize1);
      var parsedHeight2 = parseFloat(fontSize2);
      var height1 = parsedHeight1 || DEFAULT_FONT_SIZE;
      var height2 = parsedHeight2 || DEFAULT_FONT_SIZE;
      return height1 > height2 ? !isNaN(parsedHeight1) ? fontSize1 : height1 : !isNaN(parsedHeight2) ? fontSize2 : height2;
    }
    function strokeTextNodes(wrapper) {
      if (!wrapper.Da) {
        return;
      }
      var items = wrapper.Da;
      var stroke = wrapper.Ca[KEY_STROKE];
      var strokeWidth = wrapper.Ca[KEY_STROKE_WIDTH];
      var strokeOpacity = wrapper.Ca[KEY_STROKE_OPACITY] || 1;
      var tspan;
      var i;
      var ii;
      for (i = 0, ii = items.length; i < ii; ++i) {
        tspan = items[i].stroke;
        tspan.setAttribute(KEY_STROKE, stroke);
        tspan.setAttribute(KEY_STROKE_WIDTH, strokeWidth);
        tspan.setAttribute(KEY_STROKE_OPACITY, strokeOpacity);
        tspan.setAttribute("stroke-linejoin", "round");
      }
    }
    function baseAnimate(that, params, options, complete) {
      options = options || {};
      var key;
      var value;
      var renderer = that.renderer;
      var settings = that.Ca;
      var animationParams = {};
      var defaults = {
        translateX: 0,
        translateY: 0,
        scaleX: 1,
        scaleY: 1,
        rotate: 0,
        rotateX: 0,
        rotateY: 0
      };
      if (complete) {
        options.complete = complete;
      }
      if (renderer.animationEnabled()) {
        for (key in params) {
          value = params[key];
          if (/^(translate(X|Y)|rotate[XY]?|scale(X|Y))$/i.test(key)) {
            animationParams.transform = animationParams.transform || {
              from: {},
              to: {}
            };
            animationParams.transform.from[key] = key in settings ? Number(settings[key].toFixed(3)) : defaults[key];
            animationParams.transform.to[key] = value;
          } else if ("arc" === key || "segments" === key) {
            animationParams[key] = value;
          } else {
            animationParams[key] = {
              from: key in settings ? settings[key] : parseFloat(that.element.getAttribute(key) || 0),
              to: value
            };
          }
        }
        renderer.animateElement(that, animationParams, extend(extend({}, renderer.vh), options));
      } else {
        options.step && options.step.call(that, 1, 1);
        options.complete && options.complete.call(that);
        that.attr(params);
      }
      return that;
    }
    function pathAnimate(params, options, complete) {
      var curSegments = this.segments || [];
      var newSegments;
      var endSegments;
      if (this.renderer.animationEnabled() && "points" in params) {
        newSegments = buildPathSegments(params.points, this.type);
        endSegments = compensateSegments(curSegments, newSegments, this.type);
        params.segments = {
          from: curSegments,
          to: newSegments,
          end: endSegments
        };
        delete params.points;
      }
      return baseAnimate(this, params, options, complete);
    }
    function arcAnimate(params, options, complete) {
      var settings = this.Ca;
      var arcParams = {
        from: {},
        to: {}
      };
      if (this.renderer.animationEnabled() && ("x" in params || "y" in params || "innerRadius" in params || "outerRadius" in params || "startAngle" in params || "endAngle" in params)) {
        arcParams.from.x = settings.x || 0;
        arcParams.from.y = settings.y || 0;
        arcParams.from.innerRadius = settings.innerRadius || 0;
        arcParams.from.outerRadius = settings.outerRadius || 0;
        arcParams.from.startAngle = settings.startAngle || 0;
        arcParams.from.endAngle = settings.endAngle || 0;
        arcParams.to.x = "x" in params ? params.x : settings.x;
        delete params.x;
        arcParams.to.y = "y" in params ? params.y : settings.y;
        delete params.y;
        arcParams.to.innerRadius = "innerRadius" in params ? params.innerRadius : settings.innerRadius;
        delete params.innerRadius;
        arcParams.to.outerRadius = "outerRadius" in params ? params.outerRadius : settings.outerRadius;
        delete params.outerRadius;
        arcParams.to.startAngle = "startAngle" in params ? params.startAngle : settings.startAngle;
        delete params.startAngle;
        arcParams.to.endAngle = "endAngle" in params ? params.endAngle : settings.endAngle;
        delete params.endAngle;
        params.arc = arcParams;
      }
      return baseAnimate(this, params, options, complete);
    }
    function buildLink(target, parameters) {
      var obj = {
        is: false,
        name: parameters.name || parameters,
        after: parameters.after
      };
      if (target) {
        obj.to = target;
      } else {
        obj.virtual = true;
      }
      return obj;
    }
    var SvgElement = function(renderer, tagName, type) {
      this.renderer = renderer;
      this.element = createElement3(tagName);
      this.Ca = {};
      this.t = {};
      if ("path" === tagName) {
        this.type = type || "line";
      }
    };
    exports.SvgElement = SvgElement;
    function removeFuncIriCallback(callback) {
      fixFuncIriCallbacks.remove(callback);
    }
    SvgElement.prototype = {
      constructor: SvgElement,
      Lc: function() {
        return this.Ba || (this.Ba = (0, _renderer.default)(this.element));
      },
      Rk: function() {
        var that = this;
        var fn = function() {
          fixFuncIri(that, "fill");
          fixFuncIri(that, "clip-path");
          fixFuncIri(that, "filter");
        };
        that.element.Uk = fn;
        fn.renderer = that.renderer;
        fixFuncIriCallbacks.add(fn);
        that.Rk = function() {
        };
      },
      Vk: function() {
        !function clearChildren(element) {
          var i;
          for (i = 0; i < element.childNodes.length; i++) {
            removeFuncIriCallback(element.childNodes[i].Uk);
            clearChildren(element.childNodes[i]);
          }
        }(this.element);
      },
      dispose: function() {
        removeFuncIriCallback(this.element.Uk);
        this.Vk();
        this.Lc().remove();
        return this;
      },
      append: function(parent) {
        (parent || this.renderer.root).element.appendChild(this.element);
        return this;
      },
      remove: function() {
        var element = this.element;
        element.parentNode && element.parentNode.removeChild(element);
        return this;
      },
      enableLinks: function() {
        this.wh = [];
        return this;
      },
      virtualLink: function(parameters) {
        linkItem({
          Qa: buildLink(null, parameters)
        }, this);
        return this;
      },
      linkAfter: function(name) {
        this.nr = name;
        return this;
      },
      linkOn: function(target, parameters) {
        this.Qa = buildLink(target, parameters);
        linkItem(this, target);
        return this;
      },
      linkOff: function() {
        unlinkItem(this);
        this.Qa = null;
        return this;
      },
      linkAppend: function() {
        var link = this.Qa;
        var items = link.to.wh;
        var i;
        var next;
        for (i = link.i + 1; (next = items[i]) && !next.Qa.is; ++i) {
        }
        this.pr(link.to, next);
        link.is = true;
        return this;
      },
      pr: function(parent, next) {
        parent.element.insertBefore(this.element, next ? next.element : null);
      },
      linkRemove: function() {
        this.remove();
        this.Qa.is = false;
        return this;
      },
      clear: function() {
        this.Vk();
        this.Lc().empty();
        return this;
      },
      toBackground: function() {
        var elem = this.element;
        var parent = elem.parentNode;
        parent && parent.insertBefore(elem, parent.firstChild);
        return this;
      },
      toForeground: function() {
        var elem = this.element;
        var parent = elem.parentNode;
        parent && parent.appendChild(elem);
        return this;
      },
      attr: function(attrs) {
        return baseAttr(this, attrs);
      },
      smartAttr: function(attrs) {
        return this.attr(processHatchingAttrs(this, attrs));
      },
      css: function(styles) {
        return baseCss(this, styles);
      },
      animate: function(params, options, complete) {
        return baseAnimate(this, params, options, complete);
      },
      sharp: function(pos, sharpDirection) {
        return this.attr({
          sharp: pos || true,
          sharpDirection
        });
      },
      gr: function() {
        var tr = this.Ca;
        var rotateX;
        var rotateY;
        var transformations = [];
        var sharpMode = tr.sharp;
        var trDirection = tr.sharpDirection || 1;
        var strokeOdd = tr[KEY_STROKE_WIDTH] % 2;
        var correctionX = strokeOdd && ("h" === sharpMode || true === sharpMode) ? SHARPING_CORRECTION * trDirection : 0;
        var correctionY = strokeOdd && ("v" === sharpMode || true === sharpMode) ? SHARPING_CORRECTION * trDirection : 0;
        transformations.push("translate(" + ((tr.translateX || 0) + correctionX) + "," + ((tr.translateY || 0) + correctionY) + ")");
        if (tr.rotate) {
          if ("rotateX" in tr) {
            rotateX = tr.rotateX;
          } else {
            rotateX = tr.x;
          }
          if ("rotateY" in tr) {
            rotateY = tr.rotateY;
          } else {
            rotateY = tr.y;
          }
          transformations.push("rotate(" + tr.rotate + "," + (rotateX || 0) + "," + (rotateY || 0) + ")");
        }
        var scaleXDefined = (0, _type.isDefined)(tr.scaleX);
        var scaleYDefined = (0, _type.isDefined)(tr.scaleY);
        if (scaleXDefined || scaleYDefined) {
          transformations.push("scale(" + (scaleXDefined ? tr.scaleX : 1) + "," + (scaleYDefined ? tr.scaleY : 1) + ")");
        }
        if (transformations.length) {
          this.element.setAttribute("transform", transformations.join(" "));
        }
      },
      move: function(x, y, animate, animOptions) {
        var obj = {};
        (0, _type.isDefined)(x) && (obj.translateX = x);
        (0, _type.isDefined)(y) && (obj.translateY = y);
        if (!animate) {
          this.attr(obj);
        } else {
          this.animate(obj, animOptions);
        }
        return this;
      },
      rotate: function(angle, x, y, animate, animOptions) {
        var obj = {
          rotate: angle || 0
        };
        (0, _type.isDefined)(x) && (obj.rotateX = x);
        (0, _type.isDefined)(y) && (obj.rotateY = y);
        if (!animate) {
          this.attr(obj);
        } else {
          this.animate(obj, animOptions);
        }
        return this;
      },
      uh: function() {
        var elem = this.element;
        var bBox;
        try {
          bBox = elem.getBBox && elem.getBBox();
        } catch (e) {
        }
        return bBox || {
          x: 0,
          y: 0,
          width: elem.offsetWidth || 0,
          height: elem.offsetHeight || 0
        };
      },
      getBBox: function() {
        var transformation = this.Ca;
        var bBox = this.uh();
        if (transformation.rotate) {
          bBox = (0, _utils.rotateBBox)(bBox, [("rotateX" in transformation ? transformation.rotateX : transformation.x) || 0, ("rotateY" in transformation ? transformation.rotateY : transformation.y) || 0], -transformation.rotate);
        } else {
          bBox = (0, _utils.normalizeBBox)(bBox);
        }
        return bBox;
      },
      markup: function() {
        return (0, _svg.getSvgMarkup)(this.element);
      },
      getOffset: function() {
        return this.Lc().offset();
      },
      stopAnimation: function(disableComplete) {
        var animation = this.animation;
        animation && animation.stop(disableComplete);
        return this;
      },
      setTitle: function(text) {
        var titleElem = createElement3("title");
        titleElem.textContent = text || "";
        this.element.appendChild(titleElem);
      },
      removeTitle: function() {
        detachTitleElements(this.element);
      },
      data: function(obj, val) {
        var elem = this.element;
        var key;
        if (void 0 !== val) {
          elem[obj] = val;
        } else {
          for (key in obj) {
            elem[key] = obj[key];
          }
        }
        return this;
      },
      on: function() {
        var args = [this.Lc()];
        args.push.apply(args, arguments);
        _events_engine.default.on.apply(_events_engine.default, args);
        return this;
      },
      off: function() {
        var args = [this.Lc()];
        args.push.apply(args, arguments);
        _events_engine.default.off.apply(_events_engine.default, args);
        return this;
      },
      trigger: function() {
        var args = [this.Lc()];
        args.push.apply(args, arguments);
        _events_engine.default.trigger.apply(_events_engine.default, args);
        return this;
      }
    };
    var PathSvgElement = function(renderer, type) {
      SvgElement.call(this, renderer, "path", type);
    };
    exports.PathSvgElement = PathSvgElement;
    PathSvgElement.prototype = objectCreate(SvgElement.prototype);
    extend(PathSvgElement.prototype, {
      constructor: PathSvgElement,
      attr: pathAttr,
      animate: pathAnimate
    });
    var ArcSvgElement = function(renderer) {
      SvgElement.call(this, renderer, "path", "arc");
    };
    exports.ArcSvgElement = ArcSvgElement;
    ArcSvgElement.prototype = objectCreate(SvgElement.prototype);
    extend(ArcSvgElement.prototype, {
      constructor: ArcSvgElement,
      attr: arcAttr,
      animate: arcAnimate
    });
    var RectSvgElement = function(renderer) {
      SvgElement.call(this, renderer, "rect");
    };
    exports.RectSvgElement = RectSvgElement;
    RectSvgElement.prototype = objectCreate(SvgElement.prototype);
    extend(RectSvgElement.prototype, {
      constructor: RectSvgElement,
      attr: rectAttr
    });
    var TextSvgElement = function(renderer) {
      SvgElement.call(this, renderer, "text");
      this.css({
        "white-space": "pre"
      });
    };
    exports.TextSvgElement = TextSvgElement;
    TextSvgElement.prototype = objectCreate(SvgElement.prototype);
    extend(TextSvgElement.prototype, {
      constructor: TextSvgElement,
      attr: textAttr,
      css: textCss,
      applyEllipsis,
      setMaxSize,
      restoreText,
      Tk: function() {
        return !isNaN(parseFloat(this.t[KEY_FONT_SIZE])) ? this.t[KEY_FONT_SIZE] : DEFAULT_FONT_SIZE;
      }
    });
    function updateIndexes(items, k) {
      var i;
      var item;
      for (i = k; item = items[i]; ++i) {
        item.Qa.i = i;
      }
    }
    function linkItem(target, container) {
      var items = container.wh;
      var key = target.Qa.after = target.Qa.after || container.nr;
      var i;
      var item;
      if (key) {
        for (i = 0; (item = items[i]) && item.Qa.name !== key; ++i) {
        }
        if (item) {
          for (++i; (item = items[i]) && item.Qa.after === key; ++i) {
          }
        }
      } else {
        i = items.length;
      }
      items.splice(i, 0, target);
      updateIndexes(items, i);
    }
    function unlinkItem(target) {
      var i;
      var items = target.Qa.to.wh;
      for (i = 0; items[i] !== target; ++i) {
      }
      items.splice(i, 1);
      updateIndexes(items, i);
    }
    function Renderer(options) {
      this.root = this.B("svg", {
        xmlns: "http://www.w3.org/2000/svg",
        version: "1.1",
        fill: NONE,
        stroke: NONE,
        "stroke-width": 0
      }).attr({
        class: options.cssClass
      }).css({
        "line-height": "normal",
        "-ms-user-select": NONE,
        "-moz-user-select": NONE,
        "-webkit-user-select": NONE,
        "-webkit-tap-highlight-color": "rgba(0, 0, 0, 0)",
        display: "block",
        overflow: "hidden"
      });
      this.G();
      this.pathModified = !!options.pathModified;
      this.Wk = (0, _renderer.default)(options.container);
      this.root.append({
        element: options.container
      });
      this.tf = 0;
      this.uf = false;
    }
    Renderer.prototype = {
      constructor: Renderer,
      G: function() {
        this.db = this.B("defs").append(this.root);
        this.vf = new _animation.AnimationController(this.root.element);
        this.vh = {
          enabled: true,
          duration: 1e3,
          easing: "easeOutCubic"
        };
      },
      setOptions: function(options) {
        this.rtl = !!options.rtl;
        this.encodeHtml = !!options.encodeHtml;
        this.updateAnimationOptions(options.animation || {});
        this.root.attr({
          direction: this.rtl ? "rtl" : "ltr"
        });
        return this;
      },
      B: function(tagName, attr, type) {
        var elem = new SvgElement(this, tagName, type);
        attr && elem.attr(attr);
        return elem;
      },
      lock: function() {
        if (0 === this.tf) {
          this.uf = !this.Wk.is(":visible");
          if (this.uf) {
            backupRoot(this.root);
          }
        }
        ++this.tf;
        return this;
      },
      unlock: function() {
        --this.tf;
        if (0 === this.tf) {
          if (this.uf) {
            restoreRoot(this.root, this.Wk[0]);
          }
          this.uf = false;
        }
        return this;
      },
      resize: function(width, height) {
        if (width >= 0 && height >= 0) {
          this.root.attr({
            width,
            height
          });
        }
        return this;
      },
      dispose: function() {
        var key;
        this.root.dispose();
        this.db.dispose();
        this.vf.dispose();
        fixFuncIriCallbacks.removeByRenderer(this);
        for (key in this) {
          this[key] = null;
        }
        return this;
      },
      animationEnabled: function() {
        return !!this.vh.enabled;
      },
      updateAnimationOptions: function(newOptions) {
        extend(this.vh, newOptions);
        return this;
      },
      stopAllAnimations: function(lock) {
        this.vf[lock ? "lock" : "stop"]();
        return this;
      },
      animateElement: function(element, params, options) {
        this.vf.animateElement(element, params, options);
        return this;
      },
      svg: function() {
        return this.root.markup();
      },
      getRootOffset: function() {
        return this.root.getOffset();
      },
      onEndAnimation: function(endAnimation) {
        this.vf.onEndAnimation(endAnimation);
      },
      rect: function(x, y, width, height) {
        var elem = new RectSvgElement(this);
        return elem.attr({
          x: x || 0,
          y: y || 0,
          width: width || 0,
          height: height || 0
        });
      },
      simpleRect: function() {
        return this.B("rect");
      },
      circle: function(x, y, r) {
        return this.B("circle", {
          cx: x || 0,
          cy: y || 0,
          r: r || 0
        });
      },
      g: function() {
        return this.B("g");
      },
      image: function(x, y, w, h, href, location) {
        var image = this.B("image", {
          x: x || 0,
          y: y || 0,
          width: w || 0,
          height: h || 0,
          preserveAspectRatio: preserveAspectRatioMap[(0, _utils.normalizeEnum)(location)] || NONE
        });
        image.element.setAttributeNS("http://www.w3.org/1999/xlink", "href", href || "");
        return image;
      },
      path: function(points, type) {
        var elem = new PathSvgElement(this, type);
        return elem.attr({
          points: points || []
        });
      },
      arc: function(x, y, innerRadius, outerRadius, startAngle, endAngle) {
        var elem = new ArcSvgElement(this);
        return elem.attr({
          x: x || 0,
          y: y || 0,
          innerRadius: innerRadius || 0,
          outerRadius: outerRadius || 0,
          startAngle: startAngle || 0,
          endAngle: endAngle || 0
        });
      },
      text: function(_text, x, y) {
        var elem = new TextSvgElement(this);
        return elem.attr({
          text: _text,
          x: x || 0,
          y: y || 0
        });
      },
      linearGradient: function(stops) {
        var id = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : (0, _utils.getNextDefsSvgId)();
        var rotationAngle = arguments.length > 2 ? arguments[2] : void 0;
        var gradient = this.B("linearGradient", {
          id,
          gradientTransform: "rotate(".concat(rotationAngle || 0, ")")
        }).append(this.db);
        gradient.id = id;
        this.Xk(stops, gradient);
        return gradient;
      },
      radialGradient: function(stops, id) {
        var gradient = this.B("radialGradient", {
          id
        }).append(this.db);
        this.Xk(stops, gradient);
        return gradient;
      },
      Xk: function(stops, group) {
        var _this = this;
        stops.forEach(function(stop) {
          var _stop$stopColor;
          _this.B("stop", {
            offset: stop.offset,
            "stop-color": null !== (_stop$stopColor = stop["stop-color"]) && void 0 !== _stop$stopColor ? _stop$stopColor : stop.color,
            "stop-opacity": stop.opacity
          }).append(group);
        });
      },
      pattern: function(color, hatching, _id) {
        hatching = hatching || {};
        var step = hatching.step || 6;
        var stepTo2 = step / 2;
        var stepBy15 = 1.5 * step;
        var id = _id || (0, _utils.getNextDefsSvgId)();
        var d = "right" === (0, _utils.normalizeEnum)(hatching.direction) ? "M " + stepTo2 + " " + -stepTo2 + " L " + -stepTo2 + " " + stepTo2 + " M 0 " + step + " L " + step + " 0 M " + stepBy15 + " " + stepTo2 + " L " + stepTo2 + " " + stepBy15 : "M 0 0 L " + step + " " + step + " M " + -stepTo2 + " " + stepTo2 + " L " + stepTo2 + " " + stepBy15 + " M " + stepTo2 + " " + -stepTo2 + " L " + stepBy15 + " " + stepTo2;
        var pattern = this.B("pattern", {
          id,
          width: step,
          height: step,
          patternUnits: "userSpaceOnUse"
        }).append(this.db);
        pattern.id = id;
        this.rect(0, 0, step, step).attr({
          fill: color,
          opacity: hatching.opacity
        }).append(pattern);
        new PathSvgElement(this).attr({
          d,
          "stroke-width": hatching.width || 1,
          stroke: color
        }).append(pattern);
        return pattern;
      },
      customPattern: function(id, template, width, height) {
        var option = {
          id,
          width,
          height,
          patternContentUnits: "userSpaceOnUse",
          patternUnits: this.qr(width, height)
        };
        var pattern = this.B("pattern", option).append(this.db);
        template.render({
          container: pattern.element
        });
        return pattern;
      },
      qr: function(width, height) {
        if (Number(width) && Number(height)) {
          return "userSpaceOnUse";
        }
      },
      zy: function(points, offset) {
        return points.map(function(point, index) {
          if (index % 2 !== 0) {
            return point + offset;
          }
          return point;
        });
      },
      clipShape: function(method, methodArgs) {
        var id = (0, _utils.getNextDefsSvgId)();
        var clipPath = this.B("clipPath", {
          id
        }).append(this.db);
        var shape = method.apply(this, methodArgs).append(clipPath);
        shape.id = id;
        shape.remove = function() {
          throw "Not implemented";
        };
        shape.dispose = function() {
          clipPath.dispose();
          clipPath = null;
          return this;
        };
        return shape;
      },
      clipRect: function(x, y, width, height) {
        return this.clipShape(this.rect, arguments);
      },
      clipCircle: function(x, y, radius) {
        return this.clipShape(this.circle, arguments);
      },
      shadowFilter: function(x, y, width, height, offsetX, offsetY, blur, color, opacity) {
        var id = (0, _utils.getNextDefsSvgId)();
        var filter = this.B("filter", {
          id,
          x: x || 0,
          y: y || 0,
          width: width || 0,
          height: height || 0
        }).append(this.db);
        var gaussianBlur = this.B("feGaussianBlur", {
          in: "SourceGraphic",
          result: "gaussianBlurResult",
          stdDeviation: blur || 0
        }).append(filter);
        var offset = this.B("feOffset", {
          in: "gaussianBlurResult",
          result: "offsetResult",
          dx: offsetX || 0,
          dy: offsetY || 0
        }).append(filter);
        var flood = this.B("feFlood", {
          result: "floodResult",
          "flood-color": color || "",
          "flood-opacity": opacity
        }).append(filter);
        var composite = this.B("feComposite", {
          in: "floodResult",
          in2: "offsetResult",
          operator: "in",
          result: "compositeResult"
        }).append(filter);
        var finalComposite = this.B("feComposite", {
          in: "SourceGraphic",
          in2: "compositeResult",
          operator: "over"
        }).append(filter);
        filter.id = id;
        filter.gaussianBlur = gaussianBlur;
        filter.offset = offset;
        filter.flood = flood;
        filter.composite = composite;
        filter.finalComposite = finalComposite;
        filter.attr = function(attrs) {
          var filterAttrs = {};
          var offsetAttrs = {};
          var floodAttrs = {};
          "x" in attrs && (filterAttrs.x = attrs.x);
          "y" in attrs && (filterAttrs.y = attrs.y);
          "width" in attrs && (filterAttrs.width = attrs.width);
          "height" in attrs && (filterAttrs.height = attrs.height);
          baseAttr(this, filterAttrs);
          "blur" in attrs && this.gaussianBlur.attr({
            stdDeviation: attrs.blur
          });
          "offsetX" in attrs && (offsetAttrs.dx = attrs.offsetX);
          "offsetY" in attrs && (offsetAttrs.dy = attrs.offsetY);
          this.offset.attr(offsetAttrs);
          "color" in attrs && (floodAttrs["flood-color"] = attrs.color);
          "opacity" in attrs && (floodAttrs["flood-opacity"] = attrs.opacity);
          this.flood.attr(floodAttrs);
          return this;
        };
        return filter;
      },
      brightFilter: function(type, slope) {
        var id = (0, _utils.getNextDefsSvgId)();
        var filter = this.B("filter", {
          id
        }).append(this.db);
        var componentTransferElement = this.B("feComponentTransfer").append(filter);
        var attrs = {
          type,
          slope
        };
        filter.id = id;
        this.B("feFuncR", attrs).append(componentTransferElement);
        this.B("feFuncG", attrs).append(componentTransferElement);
        this.B("feFuncB", attrs).append(componentTransferElement);
        return filter;
      },
      getGrayScaleFilter: function() {
        if (this.Yk) {
          return this.Yk;
        }
        var id = (0, _utils.getNextDefsSvgId)();
        var filter = this.B("filter", {
          id
        }).append(this.db);
        this.B("feColorMatrix").attr({
          type: "matrix",
          values: "0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0 0.6 0"
        }).append(filter);
        filter.id = id;
        this.Yk = filter;
        return filter;
      },
      lightenFilter: function(id) {
        var filter = this.B("filter", {
          id
        }).append(this.db);
        this.B("feColorMatrix", {
          type: "matrix",
          values: "".concat(1.3, " 0 0 0 0 0 ").concat(1.3, " 0 0 0 0 0 ").concat(1.3, " 0 0 0 0 0 1 0")
        }).append(filter);
        filter.id = id;
        return filter;
      },
      initDefsElements: function() {
        var storage = this.yh = this.yh || {
          byHash: {},
          baseId: (0, _utils.getNextDefsSvgId)()
        };
        var byHash = storage.byHash;
        var name;
        for (name in byHash) {
          byHash[name].pattern.dispose();
        }
        storage.byHash = {};
        storage.refToHash = {};
        storage.nextId = 0;
      },
      drawPattern: function(_ref6, storageId, nextId) {
        var color = _ref6.color, hatching = _ref6.hatching;
        return this.pattern(color, hatching, "".concat(storageId, "-hatching-").concat(nextId++));
      },
      drawFilter: function(_, storageId, nextId) {
        return this.lightenFilter("".concat(storageId, "-lightening-").concat(nextId++));
      },
      lockDefsElements: function(attrs, ref, type) {
        var storage = this.yh;
        var storageItem;
        var hash = "pattern" === type ? getHatchingHash(attrs) : LIGHTENING_HASH;
        var method = "pattern" === type ? this.drawPattern : this.drawFilter;
        var pattern;
        if (storage.refToHash[ref] !== hash) {
          if (ref) {
            this.releaseDefsElements(ref);
          }
          storageItem = storage.byHash[hash];
          if (!storageItem) {
            pattern = method.call(this, attrs, storage.baseId, storage.nextId++);
            storageItem = storage.byHash[hash] = {
              pattern,
              count: 0
            };
            storage.refToHash[pattern.id] = hash;
          }
          ++storageItem.count;
          ref = storageItem.pattern.id;
        }
        return ref;
      },
      releaseDefsElements: function(ref) {
        var storage = this.yh;
        var hash = storage.refToHash[ref];
        var storageItem = storage.byHash[hash];
        if (storageItem && 0 === --storageItem.count) {
          storageItem.pattern.dispose();
          delete storage.byHash[hash];
          delete storage.refToHash[ref];
        }
      }
    };
    function getHatchingHash(_ref7) {
      var color = _ref7.color, hatching = _ref7.hatching;
      return "@" + color + "::" + hatching.step + ":" + hatching.width + ":" + hatching.opacity + ":" + hatching.direction;
    }
    var fixFuncIriCallbacks = function() {
      var callbacks = [];
      return {
        add: function(fn) {
          callbacks.push(fn);
        },
        remove: function(fn) {
          callbacks = callbacks.filter(function(el) {
            return el !== fn;
          });
        },
        removeByRenderer: function(renderer) {
          callbacks = callbacks.filter(function(el) {
            return el.renderer !== renderer;
          });
        },
        fire: function() {
          callbacks.forEach(function(fn) {
            fn();
          });
        }
      };
    }();
    var refreshPaths = function() {
      fixFuncIriCallbacks.fire();
    };
    exports.refreshPaths = refreshPaths;
  }
});

// node_modules/devextreme/cjs/viz/core/layout.js
var require_layout = __commonJS({
  "node_modules/devextreme/cjs/viz/core/layout.js"(exports, module) {
    "use strict";
    exports.default = void 0;
    var _utils = require_utils();
    var _min = Math.min;
    var _max = Math.max;
    var _round = Math.round;
    var ALIGN_START = 0;
    var ALIGN_MIDDLE = 1;
    var ALIGN_END = 2;
    var horizontalAlignmentMap = {
      left: ALIGN_START,
      center: ALIGN_MIDDLE,
      right: ALIGN_END
    };
    var verticalAlignmentMap = {
      top: ALIGN_START,
      center: ALIGN_MIDDLE,
      bottom: ALIGN_END
    };
    var sideMap = {
      horizontal: 0,
      vertical: 1
    };
    var slicersMap = {};
    var BBOX_CEIL_CORRECTION = 2;
    slicersMap[ALIGN_START] = function(a, b, size) {
      return [a, _min(b, a + size)];
    };
    slicersMap[ALIGN_MIDDLE] = function(a, b, size) {
      return [_max(a, (a + b - size) / 2), _min(b, (a + b + size) / 2)];
    };
    slicersMap[ALIGN_END] = function(a, b, size) {
      return [_max(a, b - size), b];
    };
    function pickValue(value, map, defaultValue) {
      var val = (0, _utils.normalizeEnum)(value);
      return val in map ? map[val] : defaultValue;
    }
    function normalizeLayoutOptions(options) {
      var side = pickValue(options.side, sideMap, 1);
      var alignment = [pickValue(options.horizontalAlignment, horizontalAlignmentMap, ALIGN_MIDDLE), pickValue(options.verticalAlignment, verticalAlignmentMap, ALIGN_START)];
      return {
        side,
        primary: bringToEdge(alignment[side]),
        secondary: alignment[1 - side],
        weak: options.weak,
        priority: options.priority || 0,
        header: options.header,
        position: options.position
      };
    }
    function bringToEdge(primary) {
      return primary < 2 ? 0 : 2;
    }
    function getConjugateSide(side) {
      return 1 - side;
    }
    function getSlice(alignment, a, b, size) {
      return slicersMap[alignment](a, b, size);
    }
    function getShrink(alignment, size) {
      return (alignment > 0 ? -1 : 1) * size;
    }
    function processForward(item, rect, minSize) {
      var side = item.side;
      var size = item.element.measure([rect[2] - rect[0], rect[3] - rect[1]]);
      var minSide = "indside" === item.position ? 0 : minSize[side];
      var isValid = size[side] < rect[2 + side] - rect[side] - minSide;
      if (isValid) {
        if ("inside" !== item.position) {
          rect[item.primary + side] += getShrink(item.primary, size[side]);
        }
        item.size = size;
      }
      return isValid;
    }
    function processRectBackward(item, rect, alignmentRect) {
      var primarySide = item.side;
      var secondarySide = getConjugateSide(primarySide);
      var itemRect = [];
      var secondary = getSlice(item.secondary, alignmentRect[secondarySide], alignmentRect[2 + secondarySide], item.size[secondarySide]);
      itemRect[primarySide] = _round(itemRect[2 + primarySide] = rect[item.primary + primarySide] + ("inside" === item.position ? getShrink(item.primary, item.size[primarySide]) : 0));
      itemRect[item.primary + primarySide] = _round(rect[item.primary + primarySide] - getShrink(item.primary, item.size[primarySide]));
      if ("inside" !== item.position) {
        rect[item.primary + primarySide] = itemRect[item.primary + primarySide];
      }
      itemRect[secondarySide] = _round(secondary[0]);
      itemRect[2 + secondarySide] = _round(secondary[1]);
      return itemRect;
    }
    function processBackward(item, rect, alignmentRect, fitRect, size, targetRect) {
      var itemRect = processRectBackward(item, rect, alignmentRect);
      var itemFitRect = processRectBackward(item, fitRect, fitRect);
      if (size[item.side] > 0) {
        size[item.side] -= item.size[item.side];
        targetRect[item.primary + item.side] = itemRect[item.primary + item.side];
        item.element.freeSpace();
      } else {
        item.element.move(itemRect, itemFitRect);
      }
    }
    function Layout() {
      this.Ah = [];
    }
    Layout.prototype = {
      constructor: Layout,
      dispose: function() {
        this.Ah = null;
      },
      add: function(target) {
        this.Ah.push(target);
      },
      forward: function(targetRect, minSize) {
        var rect = targetRect.slice();
        var targets = createTargets(this.Ah);
        var i;
        var ii = targets.length;
        var cache = [];
        for (i = 0; i < ii; ++i) {
          if (processForward(targets[i], rect, minSize)) {
            cache.push(targets[i]);
          } else {
            targets[i].element.freeSpace();
          }
        }
        this.ch = cache.reverse();
        return rect;
      },
      backward: function(targetRect, alignmentRect) {
        var size = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : [0, 0];
        var backwardRect = targetRect.slice();
        var fitRect = targetRect.slice();
        var targets = this.ch;
        var targetSide = 0;
        var target;
        var i;
        var ii = targets.length;
        for (i = 0; i < ii; ++i) {
          target = targets[i];
          if (target.side !== targetSide) {
            backwardRect = targetRect.slice();
          }
          processBackward(target, backwardRect, alignmentRect, fitRect, size, targetRect);
          targetSide = target.side;
        }
        return size;
      }
    };
    function createTargets(targets) {
      var i;
      var ii = targets.length;
      var collection = [];
      var layout;
      for (i = 0; i < ii; ++i) {
        layout = targets[i].layoutOptions();
        if (layout) {
          layout = normalizeLayoutOptions(layout);
          layout.element = targets[i];
          collection.push(layout);
        }
      }
      collection.sort(function(a, b) {
        return b.side - a.side || a.priority - b.priority;
      });
      collection = processWeakItems(collection);
      return collection;
    }
    function processWeakItems(collection) {
      var weakItem = collection.filter(function(item) {
        return true === item.weak;
      })[0];
      var headerItem;
      if (weakItem) {
        headerItem = collection.filter(function(item) {
          return weakItem.primary === item.primary && item.side === weakItem.side && item !== weakItem;
        })[0];
      }
      if (weakItem && headerItem) {
        return [makeHeader(headerItem, weakItem)].concat(collection.filter(function(item) {
          return !(item === headerItem || item === weakItem);
        }));
      }
      return collection;
    }
    function processBackwardHeaderRect(element, rect) {
      var rectCopy = rect.slice();
      var itemRect = processRectBackward(element, rectCopy, rectCopy);
      itemRect[element.side] = rect[element.side];
      itemRect[2 + element.side] = rect[2 + element.side];
      return itemRect;
    }
    function makeHeader(header, weakElement) {
      var side = header.side;
      var primary = header.primary;
      var secondary = header.secondary;
      return {
        side,
        primary,
        secondary,
        priority: 0,
        element: {
          measure: function(targetSize) {
            var result = targetSize.slice();
            var weakSize = weakElement.element.measure(targetSize.slice());
            targetSize[primary] -= weakSize[primary];
            var headerSize = header.element.measure(targetSize.slice());
            result[side] = weakSize[side] = headerSize[side] = Math.max(headerSize[side], weakSize[side]);
            weakElement.size = weakSize;
            header.size = headerSize;
            return result;
          },
          move: function(rect, fitRect) {
            if (fitRect[2] - fitRect[0] < header.size[0] + weakElement.size[0] - BBOX_CEIL_CORRECTION) {
              this.freeSpace();
              return;
            }
            var weakRect = processBackwardHeaderRect(weakElement, fitRect);
            fitRect[2 + weakElement.primary] = weakRect[weakElement.primary];
            var headerFitReact = processBackwardHeaderRect(header, fitRect);
            if (fitRect[2 + weakElement.primary] < rect[2 + weakElement.primary] && header.size[header.primary] > rect[2 + header.primary] - rect[header.primary]) {
              rect[2 + weakElement.primary] = fitRect[2 + weakElement.primary];
            }
            var headerRect = processBackwardHeaderRect(header, rect);
            if (headerRect[2 + weakElement.primary] > fitRect[2 + weakElement.primary]) {
              rect[2 + weakElement.primary] = fitRect[2 + weakElement.primary];
              headerRect = processBackwardHeaderRect(header, rect);
            }
            weakElement.element.move(weakRect);
            header.element.move(headerRect, headerFitReact);
          },
          freeSpace: function() {
            header.element.freeSpace();
            weakElement.element.freeSpace();
          }
        }
      };
    }
    var _default = Layout;
    exports.default = _default;
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/devextreme/cjs/common/charts.js
var require_charts = __commonJS({
  "node_modules/devextreme/cjs/common/charts.js"(exports) {
    "use strict";
    exports.registerPattern = exports.registerGradient = exports.getGraphicObjects = void 0;
    var _utils = require_utils();
    function _extends() {
      _extends = Object.assign ? Object.assign.bind() : function(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends.apply(this, arguments);
    }
    var graphicObjects = {};
    var registerPattern = function(options) {
      var id = (0, _utils.getNextDefsSvgId)();
      graphicObjects[id] = _extends({
        type: "pattern"
      }, options);
      return id;
    };
    exports.registerPattern = registerPattern;
    var registerGradient = function(type, options) {
      var id = (0, _utils.getNextDefsSvgId)();
      graphicObjects[id] = _extends({
        type
      }, options);
      return id;
    };
    exports.registerGradient = registerGradient;
    var getGraphicObjects = function() {
      return graphicObjects;
    };
    exports.getGraphicObjects = getGraphicObjects;
  }
});

// node_modules/devextreme/cjs/core/resize_observer.js
var require_resize_observer = __commonJS({
  "node_modules/devextreme/cjs/core/resize_observer.js"(exports, module) {
    "use strict";
    exports.default = void 0;
    var _common = require_common();
    var _window = require_window();
    var window2 = (0, _window.getWindow)();
    var ResizeObserverMock = {
      observe: _common.noop,
      unobserve: _common.noop,
      disconnect: _common.noop
    };
    var ResizeObserverSingleton = function() {
      function ResizeObserverSingleton2() {
        var _this = this;
        if (!(0, _window.hasWindow)() || !window2.ResizeObserver) {
          return ResizeObserverMock;
        }
        this.wf = /* @__PURE__ */ new Map();
        this.Bh = new window2.ResizeObserver(function(entries) {
          entries.forEach(function(entry) {
            var _this$_callbacksMap$g;
            null === (_this$_callbacksMap$g = _this.wf.get(entry.target)) || void 0 === _this$_callbacksMap$g ? void 0 : _this$_callbacksMap$g(entry);
          });
        });
      }
      var _proto = ResizeObserverSingleton2.prototype;
      _proto.observe = function(element, callback) {
        this.wf.set(element, callback);
        this.Bh.observe(element);
      };
      _proto.unobserve = function(element) {
        this.wf.delete(element);
        this.Bh.unobserve(element);
      };
      _proto.disconnect = function() {
        this.wf.clear();
        this.Bh.disconnect();
      };
      return ResizeObserverSingleton2;
    }();
    var resizeObserverSingleton = new ResizeObserverSingleton();
    var _default = resizeObserverSingleton;
    exports.default = _default;
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/devextreme/cjs/viz/core/base_widget.utils.js
var require_base_widget_utils = __commonJS({
  "node_modules/devextreme/cjs/viz/core/base_widget.utils.js"(exports) {
    "use strict";
    exports.createEventTrigger = createEventTrigger;
    exports.createIncidentOccurred = void 0;
    exports.createResizeHandler = createResizeHandler;
    var _version = require_version();
    var _string = require_string();
    var _errors_warnings = _interopRequireDefault(require_errors_warnings());
    var _iterator = require_iterator();
    var _resize_callbacks = _interopRequireDefault(require_resize_callbacks());
    var _resize_observer = _interopRequireDefault(require_resize_observer());
    var _utils = require_utils();
    function _interopRequireDefault(obj) {
      return obj && obj.j ? obj : {
        default: obj
      };
    }
    var ERROR_MESSAGES = _errors_warnings.default.ERROR_MESSAGES;
    function createEventTrigger(eventsMap, callbackGetter) {
      var triggers = {};
      (0, _iterator.each)(eventsMap, function(name, info) {
        if (info.name) {
          createEvent(name);
        }
      });
      var changes;
      triggerEvent.change = function(name) {
        var eventInfo = eventsMap[name];
        if (eventInfo) {
          (changes = changes || {})[name] = eventInfo;
        }
        return !!eventInfo;
      };
      triggerEvent.applyChanges = function() {
        if (changes) {
          (0, _iterator.each)(changes, function(name, eventInfo) {
            createEvent(eventInfo.newName || name);
          });
          changes = null;
        }
      };
      triggerEvent.dispose = function() {
        eventsMap = callbackGetter = triggers = null;
      };
      return triggerEvent;
      function createEvent(name) {
        var eventInfo = eventsMap[name];
        triggers[eventInfo.name] = callbackGetter(name, eventInfo.actionSettings);
      }
      function triggerEvent(name, arg, complete) {
        triggers[name](arg);
        complete && complete();
      }
    }
    var createIncidentOccurred = function(widgetName, eventTrigger) {
      return function(id, args) {
        eventTrigger("incidentOccurred", {
          target: {
            id,
            type: "E" === id[0] ? "error" : "warning",
            args,
            text: _string.format.apply(null, [ERROR_MESSAGES[id]].concat(args || [])),
            widget: widgetName,
            version: _version.version
          }
        });
      };
    };
    exports.createIncidentOccurred = createIncidentOccurred;
    function getResizeManager(resizeCallback) {
      return function(observe, unsubscribe) {
        var _createDeferredHandle = createDeferredHandler(resizeCallback, unsubscribe), handler = _createDeferredHandle.handler, dispose = _createDeferredHandle.dispose;
        observe(handler);
        return dispose;
      };
    }
    function createDeferredHandler(callback, unsubscribe) {
      var timeout;
      var handler = function() {
        clearTimeout(timeout);
        timeout = setTimeout(callback, 100);
      };
      return {
        handler,
        dispose: function() {
          clearTimeout(timeout);
          unsubscribe(handler);
        }
      };
    }
    function createResizeHandler(contentElement, redrawOnResize, resize) {
      var disposeHandler;
      var resizeManager = getResizeManager(resize);
      if ("windowonly" === (0, _utils.normalizeEnum)(redrawOnResize)) {
        disposeHandler = resizeManager(function(handler) {
          return _resize_callbacks.default.add(handler);
        }, function(handler) {
          return _resize_callbacks.default.remove(handler);
        });
      } else if (true === redrawOnResize) {
        disposeHandler = resizeManager(function(handler) {
          return _resize_observer.default.observe(contentElement, handler);
        }, function() {
          return _resize_observer.default.unobserve(contentElement);
        });
      }
      return disposeHandler;
    }
  }
});

// node_modules/devextreme/cjs/viz/core/base_widget.js
var require_base_widget = __commonJS({
  "node_modules/devextreme/cjs/viz/core/base_widget.js"(exports, module) {
    "use strict";
    exports.default = void 0;
    var _renderer = _interopRequireDefault(require_renderer());
    var _common = require_common();
    var _window = require_window();
    var _dom_adapter = _interopRequireDefault(require_dom_adapter());
    var _type2 = require_type();
    var _iterator = require_iterator();
    var _extend = require_extend();
    var _base_theme_manager = require_base_theme_manager();
    var _dom_component = _interopRequireDefault(require_dom_component());
    var _helpers = require_helpers();
    var _utils = require_utils();
    var _errors_warnings = _interopRequireDefault(require_errors_warnings());
    var _renderer2 = require_renderer2();
    var _size = require_size();
    var _layout = _interopRequireDefault(require_layout());
    var _devices = _interopRequireDefault(require_devices());
    var _events_engine = _interopRequireDefault(require_events_engine());
    var _deferred = require_deferred();
    var _charts = require_charts();
    var _base_widget = require_base_widget_utils();
    function _interopRequireDefault(obj) {
      return obj && obj.j ? obj : {
        default: obj
      };
    }
    function _extends() {
      _extends = Object.assign ? Object.assign.bind() : function(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends.apply(this, arguments);
    }
    var _floor = Math.floor;
    var _log = _errors_warnings.default.log;
    var SIZE_CHANGING_THRESHOLD = 1;
    var OPTION_RTL_ENABLED = "rtlEnabled";
    var SIZED_ELEMENT_CLASS = "dx-sized-element";
    var _option = _dom_component.default.prototype.option;
    function getTrue() {
      return true;
    }
    function getFalse() {
      return false;
    }
    function areCanvasesDifferent(canvas1, canvas2) {
      return !(Math.abs(canvas1.width - canvas2.width) < SIZE_CHANGING_THRESHOLD && Math.abs(canvas1.height - canvas2.height) < SIZE_CHANGING_THRESHOLD && canvas1.left === canvas2.left && canvas1.top === canvas2.top && canvas1.right === canvas2.right && canvas1.bottom === canvas2.bottom);
    }
    function defaultOnIncidentOccurred(e) {
      if (!e.component.q.hasEvent("incidentOccurred")) {
        _log.apply(null, [e.target.id].concat(e.target.args || []));
      }
    }
    function pickPositiveValue(values) {
      return values.reduce(function(result, value) {
        return value > 0 && !result ? value : result;
      }, 0);
    }
    var getEmptyComponent = function() {
      var emptyComponentConfig = {
        Ik: function() {
        },
        ctor: function(element, options) {
          this.callBase(element, options);
          var sizedElement = _dom_adapter.default.createElement("div");
          var width = options && (0, _type2.isNumeric)(options.width) ? options.width + "px" : "100%";
          var height = options && (0, _type2.isNumeric)(options.height) ? options.height + "px" : this.Zk().height + "px";
          _dom_adapter.default.setStyle(sizedElement, "width", width);
          _dom_adapter.default.setStyle(sizedElement, "height", height);
          _dom_adapter.default.setClass(sizedElement, SIZED_ELEMENT_CLASS);
          _dom_adapter.default.insertElement(element, sizedElement);
        }
      };
      var EmptyComponent = _dom_component.default.inherit(emptyComponentConfig);
      var originalInherit = EmptyComponent.inherit;
      EmptyComponent.inherit = function(config) {
        for (var field in config) {
          if ((0, _type2.isFunction)(config[field]) && "_" !== field.substr(0, 1) && "option" !== field || "_dispose" === field || "_optionChanged" === field) {
            config[field] = _common.noop;
          }
        }
        return originalInherit.call(this, config);
      };
      return EmptyComponent;
    };
    function callForEach(functions) {
      functions.forEach(function(c) {
        return c();
      });
    }
    function floorCanvasDimensions(canvas) {
      return _extends({}, canvas, {
        height: _floor(canvas.height),
        width: _floor(canvas.width)
      });
    }
    var isServerSide = !(0, _window.hasWindow)();
    function sizeIsValid(value) {
      return (0, _type2.isDefined)(value) && value > 0;
    }
    var baseWidget = isServerSide ? getEmptyComponent() : _dom_component.default.inherit({
      Ib: {
        onIncidentOccurred: {
          name: "incidentOccurred",
          actionSettings: {
            excludeValidators: ["disabled"]
          }
        },
        onDrawn: {
          name: "drawn",
          actionSettings: {
            excludeValidators: ["disabled"]
          }
        }
      },
      Ze: function() {
        return (0, _extend.extend)(this.callBase(), {
          onIncidentOccurred: defaultOnIncidentOccurred
        });
      },
      rr: true,
      G: function() {
        var that = this;
        that.Ba.children("." + SIZED_ELEMENT_CLASS).remove();
        that.dc = {};
        that.callBase.apply(that, arguments);
        that._k = 0;
        that.xf = 0;
        that.$k = true;
        that.ub = (0, _helpers.changes)();
        that.Ch();
        that.D = that.al();
        that.D.setCallback(function() {
          that._(that.Jc);
        });
        that.jf();
        that.vr();
        var linkTarget = that.rr && that.n.root;
        linkTarget && linkTarget.enableLinks().virtualLink("core").virtualLink("peripheral");
        that.Bk();
        that.Dk();
        that.Dh(this.Md());
        that.wr();
        that.ea = (0, _base_widget.createIncidentOccurred)(that.NAME, that.u);
        that.Mc = new _layout.default();
        linkTarget && linkTarget.linkAfter("core");
        that.xr();
        that.bl();
        linkTarget && linkTarget.linkAfter();
        that.La(that.Od);
      },
      al: function() {
        return new _base_theme_manager.BaseThemeManager(this.Eh());
      },
      Eh: function() {
        return {
          themeSection: this.Dc,
          fontFields: this.qb
        };
      },
      Od: ["LAYOUT", "RESIZE_HANDLER", "THEME", "DISABLED"],
      xr: function() {
        var that = this;
        (0, _iterator.each)(that.Kc, function(_, plugin) {
          plugin.init.call(that);
        });
      },
      yr: function() {
        var that = this;
        (0, _iterator.each)(that.Kc.slice().reverse(), function(_, plugin) {
          plugin.dispose.call(that);
        });
      },
      La: function(codes) {
        this.ub.add(codes);
      },
      Ch: function() {
        ++this._k;
      },
      cl: function() {
        if (0 === --this._k && this.ub.count() > 0 && !this.Fh) {
          this.n.lock();
          this.Fh = true;
          this.dl();
          this.ub.reset();
          this.Fh = false;
          this.fl();
          this.n.unlock();
          if (this.Rd) {
            this.zr();
          }
          this.resolveItemsDeferred(this.P ? [this.P] : []);
          this.xf++;
          this.Ar();
          this.xf--;
        }
      },
      resolveItemsDeferred: function(items) {
        this.Br(this.Cr(items));
      },
      Dr: function(items) {
        return items.reduce(function(prev, i) {
          return {
            items: prev.items.concat(i.getTemplatesDef()),
            groups: prev.groups.concat(i.getTemplatesGroups())
          };
        }, {
          items: [],
          groups: []
        });
      },
      Cr: function(items) {
        var elements = this.Dr(items);
        var extraItems = this.Er();
        return {
          items: extraItems.items.concat(elements.items),
          groups: extraItems.groups.concat(elements.groups),
          launchRequest: [extraItems.launchRequest],
          doneRequest: [extraItems.doneRequest]
        };
      },
      Er: function() {
        return {
          items: [],
          groups: [],
          launchRequest: function() {
          },
          doneRequest: function() {
          }
        };
      },
      Br: function(_ref) {
        var items = _ref.items, launchRequest = _ref.launchRequest, doneRequest = _ref.doneRequest, groups = _ref.groups;
        var that = this;
        that.Gh(groups, "hidden");
        if (that.hl) {
          that.hl = false;
          callForEach(doneRequest);
          return;
        }
        var syncRendering = true;
        _deferred.when.apply(that, items).done(function() {
          if (syncRendering) {
            that.Gh(groups, "visible");
            return;
          }
          callForEach(launchRequest);
          that.hl = true;
          var changes = ["LAYOUT", "FULL_RENDER"];
          if (that.$k) {
            changes.push("FORCE_FIRST_DRAWING");
            that.$k = false;
          } else {
            changes.push("FORCE_DRAWING");
          }
          that._(changes);
          that.Gh(groups, "visible");
        });
        syncRendering = false;
      },
      Gh: function(groups, visibility) {
        groups.forEach(function(g) {
          return g.attr({
            visibility
          });
        });
      },
      zr: function() {
        var queue = this.Rd;
        this.Rd = null;
        this.beginUpdate();
        (0, _iterator.each)(queue, function(_, action) {
          action();
        });
        this.endUpdate();
      },
      _: function(codes) {
        this.Ch();
        this.La(codes);
        this.cl();
      },
      dl: function() {
        var changes = this.ub;
        var order = this.cr;
        var i;
        var ii = order.length;
        for (i = 0; i < ii; ++i) {
          if (changes.has(order[i])) {
            this["_change_" + order[i]]();
          }
        }
      },
      Hc: ["EVENTS", "THEME", "RENDERER", "RESIZE_HANDLER"],
      lf: ["ELEMENT_ATTR", "CONTAINER_SIZE", "LAYOUT"],
      Ic: ["DISABLED"],
      Ay: function() {
        this.u.applyChanges();
      },
      By: function() {
        this.Fr();
      },
      Cy: function() {
        this.Gr();
      },
      Dy: function() {
        this.Hr();
      },
      Ey: function() {
        this.jf();
        this.La(["CONTAINER_SIZE"]);
      },
      Fy: function() {
        this.Ir();
      },
      Gy: function() {
        this.il();
      },
      Hy: function() {
        var renderer = this.n;
        var root = renderer.root;
        if (this.option("disabled")) {
          this.jl = root.attr("pointer-events");
          root.attr({
            "pointer-events": "none",
            filter: renderer.getGrayScaleFilter().id
          });
        } else if ("none" === root.attr("pointer-events")) {
          root.attr({
            "pointer-events": (0, _type2.isDefined)(this.jl) ? this.jl : null,
            filter: null
          });
        }
      },
      Jc: ["RENDERER"],
      vr: function() {
        var rawCanvas = this.ll();
        this.A = floorCanvasDimensions(rawCanvas);
        this.n = new _renderer2.Renderer({
          cssClass: this.Jb + " " + this.Jr,
          pathModified: this.option("pathModified"),
          container: this.Ba[0]
        });
        this.n.resize(this.A.width, this.A.height);
      },
      Kr: function() {
        this.n.dispose();
      },
      Lr: function() {
        for (var id in this.dc) {
          this.dc[id].dispose();
        }
        this.dc = null;
      },
      yf: _common.noop,
      render: function() {
        this._(["CONTAINER_SIZE"]);
        var visible = this.Md();
        this.Dh(visible);
        !visible && this.Nc();
      },
      Dh: function(subscribe) {
        var $parents = (0, _renderer.default)(this.n.root.element).parents();
        if ("generic" === _devices.default.real().platform) {
          $parents = $parents.add((0, _window.getWindow)());
        }
        this.Hh = this.Hh || function() {
          this.Nc();
        }.bind(this);
        _events_engine.default.off((0, _renderer.default)().add(this.Mr), "scroll.viz_widgets", this.Hh);
        if (subscribe) {
          _events_engine.default.on($parents, "scroll.viz_widgets", this.Hh);
          this.Mr = $parents;
        }
      },
      Nc: _common.noop,
      lh: function() {
        var that = this;
        if (this.sb) {
          return;
        }
        that.callBase.apply(that, arguments);
        that.Dh(false);
        that.ol();
        that.Mc.dispose();
        that.u.dispose();
        that.ql();
        that.yr();
        that.Lr();
        that.Kr();
        that.D.dispose();
        that.D = that.n = that.u = null;
      },
      wr: function() {
        var that = this;
        that.u = (0, _base_widget.createEventTrigger)(that.Ib, function(name, actionSettings) {
          return that.bc(name, actionSettings);
        });
      },
      ll: function() {
        var that = this;
        var size = that.option("size") || {};
        var margin = that.option("margin") || {};
        var defaultCanvas = that.Zk() || {};
        var getSizeOfSide = function(size2, side, getter) {
          if (sizeIsValid(size2[side]) || !(0, _window.hasWindow)()) {
            return 0;
          }
          var elementSize = getter(that.Ba);
          return elementSize <= 1 ? 0 : elementSize;
        };
        var elementWidth = getSizeOfSide(size, "width", function(x) {
          return (0, _size.getWidth)(x);
        });
        var elementHeight = getSizeOfSide(size, "height", function(x) {
          return (0, _size.getHeight)(x);
        });
        var canvas = {
          width: size.width <= 0 ? 0 : pickPositiveValue([size.width, elementWidth, defaultCanvas.width]),
          height: size.height <= 0 ? 0 : pickPositiveValue([size.height, elementHeight, defaultCanvas.height]),
          left: pickPositiveValue([margin.left, defaultCanvas.left]),
          top: pickPositiveValue([margin.top, defaultCanvas.top]),
          right: pickPositiveValue([margin.right, defaultCanvas.right]),
          bottom: pickPositiveValue([margin.bottom, defaultCanvas.bottom])
        };
        if (canvas.width - canvas.left - canvas.right <= 0 || canvas.height - canvas.top - canvas.bottom <= 0) {
          canvas = {
            width: 0,
            height: 0
          };
        }
        return canvas;
      },
      Ir: function() {
        var rawCanvas = this.ll();
        if (areCanvasesDifferent(this.A, rawCanvas) || this.rl) {
          this.A = floorCanvasDimensions(rawCanvas);
          this.Nr(true);
          this.n.resize(this.A.width, this.A.height);
          this.La(["LAYOUT"]);
        }
      },
      Nr: _common.noop,
      tl: function() {
        return [0, 0];
      },
      Or: _common.noop,
      il: function() {
        var canvas = this.A;
        var layout = this.Mc;
        var rect = canvas.width > 0 && canvas.height > 0 ? [canvas.left, canvas.top, canvas.width - canvas.right, canvas.height - canvas.bottom] : [0, 0, 0, 0];
        rect = layout.forward(rect, this.tl());
        var nextRect = this.Pr(rect) || rect;
        layout.backward(nextRect, this.Or() || nextRect);
      },
      Ea: function(name, isScalar) {
        var theme = this.D.theme(name);
        var option = this.option(name);
        return isScalar ? void 0 !== option ? option : theme : (0, _extend.extend)(true, {}, theme, option);
      },
      Hr: function() {
        var that = this;
        var redrawOnResize = (0, _utils.parseScalar)(that.Ea("redrawOnResize", true), true);
        if (that.zf) {
          that.ol();
        }
        that.zf = (0, _base_widget.createResizeHandler)(that.Ba[0], redrawOnResize, function() {
          return that._(["CONTAINER_SIZE"]);
        });
      },
      ol: function() {
        if (this.zf) {
          this.zf();
          this.zf = null;
        }
      },
      ul: _common.noop,
      beginUpdate: function() {
        var that = this;
        if (that.ac && that.Jd()) {
          that.ul();
          that.Ch();
        }
        that.callBase.apply(that, arguments);
        return that;
      },
      endUpdate: function() {
        this.callBase();
        this.Jd() && this.cl();
        return this;
      },
      option: function(name) {
        var that = this;
        if (that.ac && that.Fh && (arguments.length > 1 || (0, _type2.isObject)(name))) {
          that.Rd = that.Rd || [];
          that.Rd.push(that.Qr(arguments));
        } else {
          return _option.apply(that, arguments);
        }
      },
      Qr: function(args) {
        var that = this;
        return function() {
          _option.apply(that, args);
        };
      },
      cc: _common.noop,
      cf: _common.noop,
      $e: function(arg) {
        var that = this;
        if (that.xf) {
          return;
        }
        var partialChanges = that.getPartialChangeOptionsName(arg);
        var changes = [];
        if (partialChanges.length > 0) {
          partialChanges.forEach(function(pc) {
            return changes.push(that.mf[pc]);
          });
        } else {
          changes.push(that.ua[arg.name]);
        }
        changes = changes.filter(function(c) {
          return !!c;
        });
        if (that.u.change(arg.name)) {
          that.La(["EVENTS"]);
        } else if (changes.length > 0) {
          that.La(changes);
        } else {
          that.callBase.apply(that, arguments);
        }
      },
      Ar: _common.noop,
      fl: _common.noop,
      ua: {
        size: "CONTAINER_SIZE",
        margin: "CONTAINER_SIZE",
        redrawOnResize: "RESIZE_HANDLER",
        theme: "THEME",
        rtlEnabled: "THEME",
        encodeHtml: "THEME",
        elementAttr: "ELEMENT_ATTR",
        disabled: "DISABLED"
      },
      mf: {},
      nf: {},
      getPartialChangeOptionsName: function(changedOption) {
        var that = this;
        var fullName = changedOption.fullName;
        var sections = fullName.split(/[.]/);
        var name = changedOption.name;
        var value = changedOption.value;
        var options = this.nf[name];
        var partialChangeOptionsName = [];
        if (options) {
          if (true === options) {
            partialChangeOptionsName.push(name);
          } else {
            options.forEach(function(op) {
              fullName.indexOf(op) >= 0 && partialChangeOptionsName.push(op);
            });
            if (1 === sections.length) {
              if ("object" === (0, _type2.type)(value)) {
                that.vl(value, options, partialChangeOptionsName);
              } else if ("array" === (0, _type2.type)(value)) {
                if (value.length > 0 && value.every(function(item) {
                  return that.wl(item, options);
                })) {
                  value.forEach(function(item) {
                    return that.vl(item, options, partialChangeOptionsName);
                  });
                }
              }
            }
          }
        }
        return partialChangeOptionsName.filter(function(value2, index, self) {
          return self.indexOf(value2) === index;
        });
      },
      wl: function(optionObject, options) {
        return !Object.keys(optionObject).some(function(key) {
          return -1 === options.indexOf(key);
        });
      },
      vl: function(optionObject, options, partialChangeOptionsName) {
        var optionKeys = Object.keys(optionObject);
        if (this.wl(optionObject, options)) {
          optionKeys.forEach(function(key) {
            return options.indexOf(key) > -1 && partialChangeOptionsName.push(key);
          });
        }
      },
      hf: function() {
        this.render();
      },
      Fr: function() {
        this.D.setTheme(this.option("theme"), this.option(OPTION_RTL_ENABLED));
      },
      Ih: function() {
        return {
          rtl: this.option(OPTION_RTL_ENABLED),
          encodeHtml: this.option("encodeHtml"),
          animation: this.yf()
        };
      },
      Gr: function() {
        this.n.setOptions(this.Ih());
      },
      svg: function() {
        return this.n.svg();
      },
      getSize: function() {
        var canvas = this.A || {};
        return {
          width: canvas.width,
          height: canvas.height
        };
      },
      isReady: getFalse,
      Af: getTrue,
      Rr: function() {
        this.isReady = getFalse;
      },
      Sr: function() {
        var renderer = this.n;
        var graphics = (0, _charts.getGraphicObjects)();
        for (var id in graphics) {
          if (!this.dc[id]) {
            var _graphics$id = graphics[id], _type = _graphics$id.type, colors = _graphics$id.colors, rotationAngle = _graphics$id.rotationAngle, template = _graphics$id.template, width = _graphics$id.width, height = _graphics$id.height;
            switch (_type) {
              case "linear":
                this.dc[id] = renderer.linearGradient(colors, id, rotationAngle);
                break;
              case "radial":
                this.dc[id] = renderer.radialGradient(colors, id);
                break;
              case "pattern":
                this.dc[id] = renderer.customPattern(id, this.Gc(template), width, height);
            }
          }
        }
      },
      Oc: function() {
        var that = this;
        that.isReady = getFalse;
        if (that.Af()) {
          that.n.onEndAnimation(function() {
            that.isReady = getTrue;
          });
        }
        that.u("drawn", {});
      }
    });
    var _default = baseWidget;
    exports.default = _default;
    (0, _helpers.replaceInherit)(baseWidget);
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/devextreme/cjs/viz/core/layout_element.js
var require_layout_element = __commonJS({
  "node_modules/devextreme/cjs/viz/core/layout_element.js"(exports) {
    "use strict";
    exports.LayoutElement = LayoutElement;
    exports.WrapperLayoutElement = WrapperLayoutElement;
    var _common = require_common();
    var _object = require_object();
    var _round = Math.round;
    var defaultOffset = {
      horizontal: 0,
      vertical: 0
    };
    var alignFactors = {
      center: 0.5,
      right: 1,
      bottom: 1,
      left: 0,
      top: 0
    };
    function LayoutElement(options) {
      this.e = options;
    }
    LayoutElement.prototype = {
      constructor: LayoutElement,
      position: function(options) {
        var ofBBox = options.of.getLayoutOptions();
        var myBBox = this.getLayoutOptions();
        var at = options.at;
        var my = options.my;
        var offset = options.offset || defaultOffset;
        var shiftX = -alignFactors[my.horizontal] * myBBox.width + ofBBox.x + alignFactors[at.horizontal] * ofBBox.width + parseInt(offset.horizontal);
        var shiftY = -alignFactors[my.vertical] * myBBox.height + ofBBox.y + alignFactors[at.vertical] * ofBBox.height + parseInt(offset.vertical);
        this.shift(_round(shiftX), _round(shiftY));
      },
      getLayoutOptions: _common.noop
    };
    function WrapperLayoutElement(renderElement, bBox) {
      this.xl = renderElement;
      this.Tr = bBox;
    }
    var wrapperLayoutElementPrototype = WrapperLayoutElement.prototype = (0, _object.clone)(LayoutElement.prototype);
    wrapperLayoutElementPrototype.constructor = WrapperLayoutElement;
    wrapperLayoutElementPrototype.getLayoutOptions = function() {
      return this.Tr || this.xl.getBBox();
    };
    wrapperLayoutElementPrototype.shift = function(shiftX, shiftY) {
      var bBox = this.getLayoutOptions();
      this.xl.move(_round(shiftX - bBox.x), _round(shiftY - bBox.y));
    };
  }
});

// node_modules/devextreme/cjs/viz/core/title.js
var require_title = __commonJS({
  "node_modules/devextreme/cjs/viz/core/title.js"(exports) {
    "use strict";
    exports.plugin = exports.Title = void 0;
    var _type = require_type();
    var _extend = require_extend();
    var _utils = require_utils();
    var _layout_element = require_layout_element();
    var _Number = Number;
    var parseHorizontalAlignment = (0, _utils.enumParser)(["left", "center", "right"]);
    var parseVerticalAlignment = (0, _utils.enumParser)(["top", "bottom"]);
    var DEFAULT_MARGIN = 10;
    function hasText(text) {
      return !!(text && String(text).length > 0);
    }
    function processTitleLength(elem, text, width, options, placeholderSize) {
      if (elem.attr({
        text
      }).setMaxSize(width, placeholderSize, options).textChanged) {
        elem.setTitle(text);
      }
    }
    function pickMarginValue(value) {
      return value >= 0 ? _Number(value) : DEFAULT_MARGIN;
    }
    function validateMargin(margin) {
      var result;
      if (margin >= 0) {
        result = {
          left: _Number(margin),
          top: _Number(margin),
          right: _Number(margin),
          bottom: _Number(margin)
        };
      } else {
        margin = margin || {};
        result = {
          left: pickMarginValue(margin.left),
          top: pickMarginValue(margin.top),
          right: pickMarginValue(margin.right),
          bottom: pickMarginValue(margin.bottom)
        };
      }
      return result;
    }
    function checkRect(rect, boundingRect) {
      return rect[2] - rect[0] < boundingRect.width || rect[3] - rect[1] < boundingRect.height;
    }
    var Title = function(params) {
      this.Jh = params;
      this.p = params.renderer.g().attr({
        class: params.cssClass
      }).linkOn(params.root || params.renderer.root, "title");
      this.Pc = false;
    };
    exports.Title = Title;
    (0, _extend.extend)(Title.prototype, _layout_element.LayoutElement.prototype, {
      dispose: function() {
        this.p.linkRemove();
        this.p.linkOff();
        if (this.Kb) {
          this.Bf.dispose();
          this.Kb = this.Lb = this.Bf = null;
        }
        this.Jh = this.p = this.e = null;
      },
      vb: function(options) {
        this.e = options;
        this.e.horizontalAlignment = parseHorizontalAlignment(options.horizontalAlignment, "center");
        this.e.verticalAlignment = parseVerticalAlignment(options.verticalAlignment, "top");
        this.e.margin = validateMargin(options.margin);
      },
      Ur: function() {
        var renderer = this.Jh.renderer;
        var group = this.p;
        var options = this.e;
        var align = options.horizontalAlignment;
        if (!this.Kb) {
          this.Kb = renderer.text().append(group);
          this.Lb = renderer.text();
          this.Bf = renderer.clipRect();
          group.attr({
            "clip-path": this.Bf.id
          });
        }
        this.Kb.attr({
          align,
          class: options.cssClass
        });
        this.Lb.attr({
          align,
          class: options.subtitle.cssClass
        });
        group.linkAppend();
        hasText(options.subtitle.text) ? this.Lb.append(group) : this.Lb.remove();
      },
      Vr: function() {
        var options = this.e;
        var subtitleOptions = options.subtitle;
        var titleElement = this.Kb;
        var subtitleElement = this.Lb;
        var titleBox;
        titleElement.attr({
          text: "A",
          y: 0
        }).css((0, _utils.patchFontOptions)(options.font));
        titleBox = titleElement.getBBox();
        this.Cf = titleBox.height + titleBox.y;
        titleElement.attr({
          text: options.text
        });
        titleBox = titleElement.getBBox();
        var y = -titleBox.y;
        titleElement.attr({
          y
        });
        if (hasText(subtitleOptions.text)) {
          subtitleElement.attr({
            text: subtitleOptions.text,
            y: 0
          }).css((0, _utils.patchFontOptions)(subtitleOptions.font));
        }
      },
      Wr: function() {
        var titleBox = this.Kb.getBBox();
        var element = this.Lb;
        var offset = this.e.subtitle.offset;
        element.move(0, titleBox.y + titleBox.height - element.getBBox().y - offset);
      },
      Xr: function() {
        var boundingRect = this.ma;
        var options = this.e;
        boundingRect.verticalAlignment = options.verticalAlignment;
        boundingRect.horizontalAlignment = options.horizontalAlignment;
        boundingRect.cutLayoutSide = options.verticalAlignment;
        boundingRect.cutSide = "vertical";
        boundingRect.position = {
          horizontal: options.horizontalAlignment,
          vertical: options.verticalAlignment
        };
      },
      hasText: function() {
        return this.Pc;
      },
      update: function(themeOptions, userOptions) {
        var options = (0, _extend.extend)(true, {}, themeOptions, processTitleOptions(userOptions));
        var _hasText = hasText(options.text);
        var isLayoutChanged = _hasText || _hasText !== this.Pc;
        this.Cf = 0;
        this.vb(options);
        this.ma = {};
        if (_hasText) {
          this.Ur();
          this.Vr();
        } else {
          this.p.linkRemove();
        }
        this.yl();
        this.Xr();
        this.Pc = _hasText;
        return isLayoutChanged;
      },
      draw: function(width, height) {
        if (this.Pc) {
          this.p.linkAppend();
          this.Yr(width);
          if (this.p.getBBox().height > height) {
            this.freeSpace();
          }
        }
        return this;
      },
      Yr: function(width) {
        var options = this.e;
        var margin = options.margin;
        var maxWidth = width - margin.left - margin.right;
        var placeholderSize = options.placeholderSize;
        processTitleLength(this.Kb, options.text, maxWidth, options, placeholderSize);
        if (this.Lb) {
          if (_Number(placeholderSize) > 0) {
            placeholderSize -= this.Kb.getBBox().height;
          }
          processTitleLength(this.Lb, options.subtitle.text, maxWidth, options.subtitle, placeholderSize);
          this.Wr();
        }
        this.yl();
        var _this$getCorrectedLay = this.getCorrectedLayoutOptions(), x = _this$getCorrectedLay.x, y = _this$getCorrectedLay.y, height = _this$getCorrectedLay.height;
        this.Bf.attr({
          x,
          y,
          width,
          height
        });
      },
      getLayoutOptions: function() {
        return this.ma || null;
      },
      shift: function(x, y) {
        var box = this.getLayoutOptions();
        this.p.move(x - box.x, y - box.y);
        return this;
      },
      yl: function() {
        var options = this.e;
        var margin = options.margin;
        var boundingRect = this.ma;
        var box = this.Pc ? this.p.getBBox() : {
          width: 0,
          height: 0,
          x: 0,
          y: 0,
          isEmpty: true
        };
        if (!box.isEmpty) {
          box.height += margin.top + margin.bottom - this.Cf;
          box.width += margin.left + margin.right;
          box.x -= margin.left;
          box.y += this.Cf - margin.top;
        }
        if (options.placeholderSize > 0) {
          box.height = options.placeholderSize;
        }
        boundingRect.height = box.height;
        boundingRect.width = box.width;
        boundingRect.x = box.x;
        boundingRect.y = box.y;
      },
      getCorrectedLayoutOptions: function() {
        var srcBox = this.getLayoutOptions();
        var correction = this.Cf;
        return (0, _extend.extend)({}, srcBox, {
          y: srcBox.y - correction,
          height: srcBox.height + correction
        });
      },
      layoutOptions: function() {
        if (!this.Pc) {
          return null;
        }
        return {
          horizontalAlignment: this.ma.horizontalAlignment,
          verticalAlignment: this.ma.verticalAlignment,
          priority: 0
        };
      },
      measure: function(size) {
        this.draw(size[0], size[1]);
        return [this.ma.width, this.ma.height];
      },
      move: function(rect, fitRect) {
        var boundingRect = this.ma;
        if (checkRect(rect, boundingRect)) {
          this.shift(fitRect[0], fitRect[1]);
        } else {
          this.shift(Math.round(rect[0]), Math.round(rect[1]));
        }
      },
      freeSpace: function() {
        this.Jh.incidentOccurred("W2103");
        this.p.linkRemove();
        this.ma.width = this.ma.height = 0;
      },
      getOptions: function() {
        return this.e;
      },
      changeLink: function(root) {
        this.p.linkRemove();
        this.p.linkOn(root, "title");
      }
    });
    function processTitleOptions(options) {
      var newOptions = (0, _type.isString)(options) ? {
        text: options
      } : options || {};
      newOptions.subtitle = (0, _type.isString)(newOptions.subtitle) ? {
        text: newOptions.subtitle
      } : newOptions.subtitle || {};
      return newOptions;
    }
    var plugin = {
      name: "title",
      init: function() {
        this.U = new Title({
          renderer: this.n,
          cssClass: this.Jb + "-title",
          incidentOccurred: this.ea
        });
        this.Mc.add(this.U);
      },
      dispose: function() {
        this.U.dispose();
        this.U = null;
      },
      customize: function(constructor) {
        constructor.addChange({
          code: "TITLE",
          handler: function() {
            if (this.U.update(this.D.theme("title"), this.option("title"))) {
              this.La(["LAYOUT"]);
            }
          },
          isThemeDependent: true,
          option: "title",
          isOptionChange: true
        });
      },
      fontFields: ["title.font", "title.subtitle.font"]
    };
    exports.plugin = plugin;
  }
});

// node_modules/devextreme/cjs/viz/components/legend.js
var require_legend = __commonJS({
  "node_modules/devextreme/cjs/viz/components/legend.js"(exports) {
    "use strict";
    exports.plugin = exports.Legend = void 0;
    var _utils = require_utils();
    var _extend2 = require_extend();
    var _layout_element = require_layout_element();
    var _type = require_type();
    var _title = require_title();
    var _object = require_object();
    var _common = require_common();
    var _renderer = require_renderer2();
    var _deferred = require_deferred();
    var _Number = Number;
    var _math = Math;
    var _round = _math.round;
    var _max = _math.max;
    var _min = _math.min;
    var _ceil = _math.ceil;
    var _isDefined = _type.isDefined;
    var _isFunction = _type.isFunction;
    var _enumParser = _utils.enumParser;
    var _normalizeEnum = _utils.normalizeEnum;
    var _extend = _extend2.extend;
    var DEFAULT_MARGIN = 10;
    var DEFAULT_MARKER_HATCHING_WIDTH = 2;
    var DEFAULT_MARKER_HATCHING_STEP = 5;
    var CENTER = "center";
    var RIGHT = "right";
    var LEFT = "left";
    var TOP = "top";
    var BOTTOM = "bottom";
    var HORIZONTAL = "horizontal";
    var VERTICAL = "vertical";
    var INSIDE = "inside";
    var OUTSIDE = "outside";
    var NONE = "none";
    var HEIGHT = "height";
    var WIDTH = "width";
    var parseHorizontalAlignment = _enumParser([LEFT, CENTER, RIGHT]);
    var parseVerticalAlignment = _enumParser([TOP, BOTTOM]);
    var parseOrientation = _enumParser([VERTICAL, HORIZONTAL]);
    var parseItemTextPosition = _enumParser([LEFT, RIGHT, TOP, BOTTOM]);
    var parsePosition = _enumParser([OUTSIDE, INSIDE]);
    var parseItemsAlignment = _enumParser([LEFT, CENTER, RIGHT]);
    function getState(state, color, stateName) {
      if (!state) {
        return;
      }
      var colorFromAction = state.fill;
      return (0, _extend2.extend)({}, {
        state: stateName,
        fill: colorFromAction === NONE ? color : colorFromAction,
        opacity: state.opacity,
        filter: state.filter,
        hatching: _extend({}, state.hatching, {
          step: DEFAULT_MARKER_HATCHING_STEP,
          width: DEFAULT_MARKER_HATCHING_WIDTH
        })
      });
    }
    function getAttributes(item, state, size) {
      var attrs = (0, _renderer.processHatchingAttrs)(item, state);
      if (attrs.fill && 0 === attrs.fill.indexOf("DevExpress")) {
        attrs.fill = (0, _renderer.getFuncIri)(attrs.fill);
      }
      attrs.opacity = attrs.opacity >= 0 ? attrs.opacity : 1;
      return (0, _extend2.extend)({}, attrs, {
        size
      });
    }
    function parseMargins(options) {
      var margin = options.margin;
      if (margin >= 0) {
        margin = _Number(options.margin);
        margin = {
          top: margin,
          bottom: margin,
          left: margin,
          right: margin
        };
      } else {
        margin = {
          top: margin.top >= 0 ? _Number(margin.top) : DEFAULT_MARGIN,
          bottom: margin.bottom >= 0 ? _Number(margin.bottom) : DEFAULT_MARGIN,
          left: margin.left >= 0 ? _Number(margin.left) : DEFAULT_MARGIN,
          right: margin.right >= 0 ? _Number(margin.right) : DEFAULT_MARGIN
        };
      }
      options.margin = margin;
    }
    function getSizeItem(options, markerBBox, labelBBox) {
      var width;
      var height;
      switch (options.itemTextPosition) {
        case LEFT:
        case RIGHT:
          width = markerBBox.width + 7 + labelBBox.width;
          height = _max(markerBBox.height, labelBBox.height);
          break;
        case TOP:
        case BOTTOM:
          width = _max(markerBBox.width, labelBBox.width);
          height = markerBBox.height + 4 + labelBBox.height;
      }
      return {
        width,
        height
      };
    }
    function calculateBBoxLabelAndMarker(markerBBox, labelBBox) {
      var bBox = {};
      bBox.left = _min(markerBBox.x, labelBBox.x);
      bBox.top = _min(markerBBox.y, labelBBox.y);
      bBox.right = _max(markerBBox.x + markerBBox.width, labelBBox.x + labelBBox.width);
      bBox.bottom = _max(markerBBox.y + markerBBox.height, labelBBox.y + labelBBox.height);
      return bBox;
    }
    function applyMarkerState(id, idToIndexMap, items, stateName) {
      var item = idToIndexMap && items[idToIndexMap[id]];
      if (item) {
        item.renderMarker(item.states[stateName]);
      }
    }
    function parseOptions(options, textField, allowInsidePosition) {
      if (!options) {
        return null;
      }
      parseMargins(options);
      options.horizontalAlignment = parseHorizontalAlignment(options.horizontalAlignment, RIGHT);
      options.verticalAlignment = parseVerticalAlignment(options.verticalAlignment, options.horizontalAlignment === CENTER ? BOTTOM : TOP);
      options.orientation = parseOrientation(options.orientation, options.horizontalAlignment === CENTER ? HORIZONTAL : VERTICAL);
      options.itemTextPosition = parseItemTextPosition(options.itemTextPosition, options.orientation === HORIZONTAL ? BOTTOM : RIGHT);
      options.position = allowInsidePosition ? parsePosition(options.position, OUTSIDE) : OUTSIDE;
      options.itemsAlignment = parseItemsAlignment(options.itemsAlignment, null);
      options.hoverMode = _normalizeEnum(options.hoverMode);
      options.customizeText = _isFunction(options.customizeText) ? options.customizeText : function() {
        return this[textField];
      };
      options.customizeHint = _isFunction(options.customizeHint) ? options.customizeHint : _common.noop;
      options.ea = options.ea || _common.noop;
      return options;
    }
    function createSquareMarker(renderer, size) {
      return renderer.rect(0, 0, size, size);
    }
    function createCircleMarker(renderer, size) {
      return renderer.circle(size / 2, size / 2, size / 2);
    }
    function isCircle(type) {
      return "circle" === _normalizeEnum(type);
    }
    function inRect(rect, x, y) {
      return x >= rect.left && x <= rect.right && y >= rect.top && y <= rect.bottom;
    }
    function checkLinesSize(lines, layoutOptions, countItems, margins) {
      var position = {
        x: 0,
        y: 0
      };
      var maxMeasureLength = 0;
      var maxAltMeasureLength = 0;
      var margin = 0;
      if ("y" === layoutOptions.direction) {
        margin = margins.top + margins.bottom;
      } else {
        margin = margins.left + margins.right;
      }
      lines.forEach(function(line, i) {
        var firstItem = line[0];
        var lineLength = line.length;
        line.forEach(function(item, index) {
          var offset = item.offset || layoutOptions.spacing;
          position[layoutOptions.direction] += item[layoutOptions.measure] + (index !== lineLength - 1 ? offset : 0);
          maxMeasureLength = _max(maxMeasureLength, position[layoutOptions.direction]);
        });
        position[layoutOptions.direction] = 0;
        position[layoutOptions.altDirection] += firstItem[layoutOptions.altMeasure] + firstItem.altOffset || layoutOptions.altSpacing;
        maxAltMeasureLength = _max(maxAltMeasureLength, position[layoutOptions.altDirection]);
      });
      if (maxMeasureLength + margin > layoutOptions.length) {
        layoutOptions.countItem = decreaseItemCount(layoutOptions, countItems);
        return true;
      }
    }
    function decreaseItemCount(layoutOptions, countItems) {
      layoutOptions.altCountItem++;
      return _ceil(countItems / layoutOptions.altCountItem);
    }
    function getLineLength(line, layoutOptions) {
      return line.reduce(function(lineLength, item) {
        var offset = item.offset || layoutOptions.spacing;
        return lineLength + item[layoutOptions.measure] + offset;
      }, 0);
    }
    function getMaxLineLength(lines, layoutOptions) {
      return lines.reduce(function(maxLineLength, line) {
        return _max(maxLineLength, getLineLength(line, layoutOptions));
      }, 0);
    }
    function getInitPositionForDirection(line, layoutOptions, maxLineLength) {
      var lineLength = getLineLength(line, layoutOptions);
      var initPosition;
      switch (layoutOptions.itemsAlignment) {
        case RIGHT:
          initPosition = maxLineLength - lineLength;
          break;
        case CENTER:
          initPosition = (maxLineLength - lineLength) / 2;
          break;
        default:
          initPosition = 0;
      }
      return initPosition;
    }
    function getPos(layoutOptions) {
      switch (layoutOptions.itemTextPosition) {
        case BOTTOM:
          return {
            horizontal: CENTER,
            vertical: TOP
          };
        case TOP:
          return {
            horizontal: CENTER,
            vertical: BOTTOM
          };
        case LEFT:
          return {
            horizontal: RIGHT,
            vertical: CENTER
          };
        case RIGHT:
          return {
            horizontal: LEFT,
            vertical: CENTER
          };
      }
    }
    function getLines(lines, layoutOptions, itemIndex) {
      var tableLine = {};
      if (itemIndex % layoutOptions.countItem === 0) {
        if (layoutOptions.markerOffset) {
          lines.push([], []);
        } else {
          lines.push([]);
        }
      }
      if (layoutOptions.markerOffset) {
        tableLine.firstLine = lines[lines.length - 1];
        tableLine.secondLine = lines[lines.length - 2];
      } else {
        tableLine.firstLine = tableLine.secondLine = lines[lines.length - 1];
      }
      return tableLine;
    }
    function setMaxInLine(line, measure) {
      var maxLineSize = line.reduce(function(maxLineSize2, item) {
        var itemMeasure = item ? item[measure] : maxLineSize2;
        return _max(maxLineSize2, itemMeasure);
      }, 0);
      line.forEach(function(item) {
        if (item) {
          item[measure] = maxLineSize;
        }
      });
    }
    function transpose(array) {
      var width = array.length;
      var height = array[0].length;
      var i;
      var j;
      var transposeArray = [];
      for (i = 0; i < height; i++) {
        transposeArray[i] = [];
        for (j = 0; j < width; j++) {
          transposeArray[i][j] = array[j][i];
        }
      }
      return transposeArray;
    }
    function getAlign(position) {
      switch (position) {
        case TOP:
        case BOTTOM:
          return CENTER;
        case LEFT:
          return RIGHT;
        case RIGHT:
          return LEFT;
      }
    }
    var getMarkerCreator = function(type) {
      return isCircle(type) ? createCircleMarker : createSquareMarker;
    };
    function getTitleHorizontalAlignment(options) {
      if (options.horizontalAlignment === CENTER) {
        return CENTER;
      } else if (options.itemTextPosition === RIGHT) {
        return LEFT;
      } else if (options.itemTextPosition === LEFT) {
        return RIGHT;
      } else {
        return CENTER;
      }
    }
    var Legend = function(settings) {
      this.n = settings.renderer;
      this.wb = settings.group;
      this.Zr = settings.backgroundClass;
      this._r = settings.itemGroupClass;
      this.$r = settings.textField;
      this.zl = settings.getFormatObject;
      this.ds = settings.titleGroupClass;
      this.fs = settings.allowInsidePosition;
      this.Kh = settings.widget;
      this.Lh = false;
    };
    exports.Legend = Legend;
    var _Legend = Legend;
    var legendPrototype = _Legend.prototype = (0, _object.clone)(_layout_element.LayoutElement.prototype);
    (0, _extend2.extend)(legendPrototype, {
      constructor: _Legend,
      getOptions: function() {
        return this.e;
      },
      update: function() {
        var data = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [];
        var options = arguments.length > 1 ? arguments[1] : void 0;
        var themeManagerTitleOptions = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {};
        var that = this;
        options = that.e = parseOptions(options, that.$r, that.fs) || {};
        var initMarkerSize = options.markerSize;
        this.Lh = true;
        this.na = data.map(function(dataItem) {
          dataItem.size = _Number(dataItem.size > 0 ? dataItem.size : initMarkerSize);
          dataItem.marker = getAttributes(dataItem, dataItem.states.normal);
          Object.defineProperty(dataItem.marker, "size", {
            get: function() {
              return dataItem.size;
            },
            set: function(value) {
              dataItem.size = value;
            }
          });
          Object.defineProperty(dataItem.marker, "opacity", {
            get: function() {
              return dataItem.states.normal.opacity;
            },
            set: function(value) {
              dataItem.states.normal.opacity = dataItem.states.hover.opacity = dataItem.states.selection.opacity = value;
            }
          });
          return dataItem;
        });
        if (options.customizeItems) {
          that.na = options.customizeItems(data.slice()) || data;
        }
        that.ma = {
          width: 0,
          height: 0,
          x: 0,
          y: 0
        };
        if (that.isVisible() && !that.U) {
          that.U = new _title.Title({
            renderer: that.n,
            cssClass: that.ds,
            root: that.wb
          });
        }
        if (that.U) {
          var titleOptions = options.title;
          themeManagerTitleOptions.horizontalAlignment = getTitleHorizontalAlignment(options);
          that.U.update(themeManagerTitleOptions, titleOptions);
        }
        this.erase();
        return that;
      },
      isVisible: function() {
        return this.e && this.e.visible;
      },
      draw: function(width, height) {
        var items = this.gs();
        this.erase();
        if (!(this.isVisible() && items && items.length)) {
          return this;
        }
        this.va = this.n.g().enableLinks().append(this.wb);
        this.U.changeLink(this.va);
        this.hs();
        if (this.U.hasText()) {
          var horizontalPadding = this.$ ? 2 * this.e.paddingLeftRight : 0;
          this.U.draw(width - horizontalPadding, height);
        }
        this.J = this.n.g().attr({
          class: this._r
        }).append(this.va);
        this.js(items);
        this.Al(width, height);
        return this;
      },
      ls: function() {
        var options = this.e;
        var maxBBoxHeight = 0;
        this.V.forEach(function(item) {
          var labelBBox = item.label.getBBox();
          var markerBBox = item.marker.getBBox();
          item.markerBBox = markerBBox;
          item.markerSize = Math.max(markerBBox.width, markerBBox.height);
          var bBox = getSizeItem(options, markerBBox, labelBBox);
          item.labelBBox = labelBBox;
          item.bBox = bBox;
          maxBBoxHeight = _max(maxBBoxHeight, bBox.height);
        });
        if (options.equalRowHeight) {
          this.V.forEach(function(item) {
            return item.bBox.height = maxBBoxHeight;
          });
        }
      },
      Al: function(width, height) {
        var options = this.e;
        this.ec = {
          width,
          height
        };
        this.ls();
        this.ns(options);
        this.qs(options);
        var size = this.getLayoutOptions();
        if (size.width > width || size.height > height) {
          this.freeSpace();
        }
      },
      js: function(items) {
        var that = this;
        var options = that.e;
        var renderer = that.n;
        var createMarker = getMarkerCreator(options.markerShape);
        that.Df = {};
        var templateFunction = !options.markerTemplate ? function(dataItem, group) {
          var attrs = dataItem.marker;
          createMarker(renderer, attrs.size).attr({
            fill: attrs.fill,
            opacity: attrs.opacity,
            filter: attrs.filter
          }).append({
            element: group
          });
        } : options.markerTemplate;
        var template = that.Kh.Gc(templateFunction);
        var markersGroup = that.J;
        markersGroup.css((0, _utils.patchFontOptions)(options.font));
        that.Mh = [];
        that.Bl = [];
        that.V = (items || []).map(function(dataItem, i) {
          var stateOfDataItem = dataItem.states;
          var normalState = stateOfDataItem.normal;
          var normalStateFill = normalState.fill;
          dataItem.size = dataItem.marker.size;
          var states = {
            normal: (0, _extend2.extend)(normalState, {
              fill: normalStateFill || options.markerColor || options.defaultColor,
              state: "normal"
            }),
            hover: getState(stateOfDataItem.hover, normalStateFill, "hovered"),
            selection: getState(stateOfDataItem.selection, normalStateFill, "selected")
          };
          dataItem.states = states;
          var itemGroup = renderer.g().append(markersGroup);
          var markerGroup = renderer.g().attr({
            class: "dxl-marker"
          }).append(itemGroup);
          that.Mh[i] = new _deferred.Deferred();
          that.Bl.push(markerGroup);
          var item = {
            label: that.fc(dataItem, itemGroup),
            marker: markerGroup,
            renderer,
            group: itemGroup,
            tracker: {
              id: dataItem.id,
              argument: dataItem.argument,
              argumentIndex: dataItem.argumentIndex
            },
            states,
            itemTextPosition: options.itemTextPosition,
            markerOffset: 0,
            bBoxes: [],
            renderMarker: function(state) {
              dataItem.marker = getAttributes(item, state, dataItem.size);
              markerGroup.clear();
              template.render({
                model: dataItem,
                container: markerGroup.element,
                onRendered: that.Mh[i].resolve
              });
            }
          };
          item.renderMarker(states.normal);
          that.rs(dataItem, itemGroup);
          if (void 0 !== dataItem.id) {
            that.Df[dataItem.id] = i;
          }
          return item;
        });
      },
      getTemplatesGroups: function() {
        return this.Bl || [];
      },
      getTemplatesDef: function() {
        return this.Mh || [];
      },
      gs: function() {
        var items = this.na || [];
        var options = this.e || {};
        if (options.inverted) {
          items = items.slice().reverse();
        }
        return items.filter(function(i) {
          return i.visible;
        });
      },
      qs: function(options) {
        this.ss(options);
        this.ts(options.margin);
      },
      erase: function() {
        var insideLegendGroup = this.va;
        insideLegendGroup && insideLegendGroup.dispose();
        this.va = this.J = this.Cl = this.Dl = this.Nh = this.Nh = null;
        return this;
      },
      ns: function(locationOptions) {
        this.us();
        this.vs(locationOptions);
      },
      us: function() {
        this.U.hasText() && this.U.move([0, 0]);
        this.wb && this.wb.move(0, 0);
        this.$ && this.$.attr({
          x: 0,
          y: 0,
          width: 0,
          height: 0
        });
      },
      applySelected: function(id) {
        applyMarkerState(id, this.Df, this.V, "selection");
        return this;
      },
      applyHover: function(id) {
        applyMarkerState(id, this.Df, this.V, "hover");
        return this;
      },
      resetItem: function(id) {
        applyMarkerState(id, this.Df, this.V, "normal");
        return this;
      },
      fc: function(data, group) {
        var labelFormatObject = this.zl(data);
        var options = this.e;
        var align = getAlign(options.itemTextPosition);
        var text = options.customizeText.call(labelFormatObject, labelFormatObject);
        var fontStyle = _isDefined(data.textOpacity) ? {
          color: options.font.color,
          opacity: data.textOpacity
        } : {};
        return this.n.text(text, 0, 0).css((0, _utils.patchFontOptions)(fontStyle)).attr({
          align,
          class: options.cssClass
        }).append(group);
      },
      rs: function(data, group) {
        var labelFormatObject = this.zl(data);
        var text = this.e.customizeHint.call(labelFormatObject, labelFormatObject);
        if (_isDefined(text) && "" !== text) {
          group.setTitle(text);
        }
      },
      hs: function() {
        var isInside = this.e.position === INSIDE;
        var color = this.e.backgroundColor;
        var fill = color || (isInside ? this.e.containerBackgroundColor : NONE);
        if (this.e.border.visible || (isInside || color) && color !== NONE) {
          this.$ = this.n.rect(0, 0, 0, 0).attr({
            fill,
            class: this.Zr
          }).append(this.va);
        }
      },
      vs: function(options) {
        var iteration = 0;
        var layoutOptions = this.ws();
        var countItems = this.V.length;
        var lines;
        do {
          lines = [];
          this.xs(lines, layoutOptions);
          this.ys(lines, layoutOptions);
          iteration++;
        } while (checkLinesSize(lines, layoutOptions, countItems, options.margin) && iteration < countItems);
        this.zs(lines, layoutOptions);
      },
      xs: function(lines, layoutOptions) {
        this.V.forEach(function(item, i) {
          var tableLine = getLines(lines, layoutOptions, i);
          var labelBox = {
            width: item.labelBBox.width,
            height: item.labelBBox.height,
            element: item.label,
            bBox: item.labelBBox,
            pos: getPos(layoutOptions),
            itemIndex: i
          };
          var markerBox = {
            width: item.markerBBox.width,
            height: item.markerBBox.height,
            element: item.marker,
            pos: {
              horizontal: CENTER,
              vertical: CENTER
            },
            bBox: {
              width: item.markerBBox.width,
              height: item.markerBBox.height,
              x: item.markerBBox.x,
              y: item.markerBBox.y
            },
            itemIndex: i
          };
          var firstItem;
          var secondItem;
          var offsetDirection = layoutOptions.markerOffset ? "altOffset" : "offset";
          if (layoutOptions.inverseLabelPosition) {
            firstItem = labelBox;
            secondItem = markerBox;
          } else {
            firstItem = markerBox;
            secondItem = labelBox;
          }
          firstItem[offsetDirection] = layoutOptions.labelOffset;
          tableLine.secondLine.push(firstItem);
          tableLine.firstLine.push(secondItem);
        });
      },
      ys: function(lines, layoutOptions) {
        var i;
        var measure = layoutOptions.altMeasure;
        lines.forEach(function(line) {
          return setMaxInLine(line, measure);
        });
        measure = layoutOptions.measure;
        if (layoutOptions.itemsAlignment) {
          if (layoutOptions.markerOffset) {
            for (i = 0; i < lines.length; ) {
              transpose([lines[i++], lines[i++]]).forEach(processLine);
            }
          }
        } else {
          transpose(lines).forEach(processLine);
        }
        function processLine(line) {
          setMaxInLine(line, measure);
        }
      },
      zs: function(lines, layoutOptions) {
        var that = this;
        var position = {
          x: 0,
          y: 0
        };
        var maxLineLength = getMaxLineLength(lines, layoutOptions);
        lines.forEach(function(line) {
          var firstItem = line[0];
          var altOffset = firstItem.altOffset || layoutOptions.altSpacing;
          position[layoutOptions.direction] = getInitPositionForDirection(line, layoutOptions, maxLineLength);
          line.forEach(function(item) {
            var offset = item.offset || layoutOptions.spacing;
            var wrap = new _layout_element.WrapperLayoutElement(item.element, item.bBox);
            var itemBBoxOptions = {
              x: position.x,
              y: position.y,
              width: item.width,
              height: item.height
            };
            var itemBBox = new _layout_element.WrapperLayoutElement(null, itemBBoxOptions);
            var itemLegend = that.V[item.itemIndex];
            wrap.position({
              of: itemBBox,
              my: item.pos,
              at: item.pos
            });
            itemLegend.bBoxes.push(itemBBox);
            position[layoutOptions.direction] += item[layoutOptions.measure] + offset;
          });
          position[layoutOptions.altDirection] += firstItem[layoutOptions.altMeasure] + altOffset;
        });
        this.V.forEach(function(item) {
          var itemBBox = calculateBBoxLabelAndMarker(item.bBoxes[0].getLayoutOptions(), item.bBoxes[1].getLayoutOptions());
          var horizontal = that.e.columnItemSpacing / 2;
          var vertical = that.e.rowItemSpacing / 2;
          item.tracker.left = itemBBox.left - horizontal;
          item.tracker.right = itemBBox.right + horizontal;
          item.tracker.top = itemBBox.top - vertical;
          item.tracker.bottom = itemBBox.bottom + vertical;
        });
      },
      ws: function() {
        var options = this.e;
        var orientation = options.orientation;
        var layoutOptions = {
          itemsAlignment: options.itemsAlignment,
          orientation: options.orientation
        };
        var width = this.ec.width - (this.$ ? 2 * options.paddingLeftRight : 0);
        var height = this.ec.height - (this.$ ? 2 * options.paddingTopBottom : 0);
        if (orientation === HORIZONTAL) {
          layoutOptions.length = width;
          layoutOptions.spacing = options.columnItemSpacing;
          layoutOptions.direction = "x";
          layoutOptions.measure = WIDTH;
          layoutOptions.altMeasure = HEIGHT;
          layoutOptions.altDirection = "y";
          layoutOptions.altSpacing = options.rowItemSpacing;
          layoutOptions.countItem = options.columnCount;
          layoutOptions.altCountItem = options.rowCount;
          layoutOptions.marginTextLabel = 4;
          layoutOptions.labelOffset = 7;
          if (options.itemTextPosition === BOTTOM || options.itemTextPosition === TOP) {
            layoutOptions.labelOffset = 4;
            layoutOptions.markerOffset = true;
          }
        } else {
          layoutOptions.length = height;
          layoutOptions.spacing = options.rowItemSpacing;
          layoutOptions.direction = "y";
          layoutOptions.measure = HEIGHT;
          layoutOptions.altMeasure = WIDTH;
          layoutOptions.altDirection = "x";
          layoutOptions.altSpacing = options.columnItemSpacing;
          layoutOptions.countItem = options.rowCount;
          layoutOptions.altCountItem = options.columnCount;
          layoutOptions.marginTextLabel = 7;
          layoutOptions.labelOffset = 4;
          if (options.itemTextPosition === RIGHT || options.itemTextPosition === LEFT) {
            layoutOptions.labelOffset = 7;
            layoutOptions.markerOffset = true;
          }
        }
        if (!layoutOptions.countItem) {
          if (layoutOptions.altCountItem) {
            layoutOptions.countItem = _ceil(this.V.length / layoutOptions.altCountItem);
          } else {
            layoutOptions.countItem = this.V.length;
          }
        }
        if (options.itemTextPosition === TOP || options.itemTextPosition === LEFT) {
          layoutOptions.inverseLabelPosition = true;
        }
        layoutOptions.itemTextPosition = options.itemTextPosition;
        layoutOptions.altCountItem = layoutOptions.altCountItem || _ceil(this.V.length / layoutOptions.countItem);
        return layoutOptions;
      },
      ss: function(locationOptions) {
        if (!this.$) {
          return;
        }
        var border = locationOptions.border;
        var legendBox = this.El();
        var backgroundSettings = {
          x: _round(legendBox.x - locationOptions.paddingLeftRight),
          y: _round(legendBox.y - locationOptions.paddingTopBottom),
          width: _round(legendBox.width) + 2 * locationOptions.paddingLeftRight,
          height: _round(legendBox.height),
          opacity: locationOptions.backgroundOpacity
        };
        if (border.visible && border.width && border.color && border.color !== NONE) {
          backgroundSettings["stroke-width"] = border.width;
          backgroundSettings.stroke = border.color;
          backgroundSettings["stroke-opacity"] = border.opacity;
          backgroundSettings.dashStyle = border.dashStyle;
          backgroundSettings.rx = border.cornerRadius || 0;
          backgroundSettings.ry = border.cornerRadius || 0;
        }
        this.$.attr(backgroundSettings);
      },
      ts: function(margin) {
        if (!this.va) {
          return;
        }
        var box = this.El();
        box.height += margin.top + margin.bottom;
        box.widthWithoutMargins = box.width;
        box.width += margin.left + margin.right;
        box.x -= margin.left;
        box.y -= margin.top;
        this.ma = box;
      },
      El: function() {
        var markerBox = this.J.getBBox();
        var titleBox = this.U.getCorrectedLayoutOptions();
        var box = this.va.getBBox();
        var verticalPadding = this.$ ? 2 * this.e.paddingTopBottom : 0;
        box.height = markerBox.height + titleBox.height + verticalPadding;
        titleBox.width > box.width && (box.width = titleBox.width);
        return box;
      },
      getActionCallback: function(point) {
        var that = this;
        if (that.e.visible) {
          return function(act) {
            that[act](point.index);
          };
        } else {
          return _common.noop;
        }
      },
      getLayoutOptions: function() {
        var options = this.e;
        var boundingRect = this.va ? this.ma : {
          width: 0,
          height: 0,
          x: 0,
          y: 0
        };
        if (options) {
          boundingRect.verticalAlignment = options.verticalAlignment;
          boundingRect.horizontalAlignment = options.horizontalAlignment;
          if (options.orientation === HORIZONTAL) {
            boundingRect.cutLayoutSide = options.verticalAlignment;
            boundingRect.cutSide = "vertical";
          } else if (options.horizontalAlignment === CENTER) {
            boundingRect.cutLayoutSide = options.verticalAlignment;
            boundingRect.cutSide = "vertical";
          } else {
            boundingRect.cutLayoutSide = options.horizontalAlignment;
            boundingRect.cutSide = "horizontal";
          }
          boundingRect.position = {
            horizontal: options.horizontalAlignment,
            vertical: options.verticalAlignment
          };
          return boundingRect;
        }
        return null;
      },
      shift: function(x, y) {
        var box = {};
        if (this.va) {
          this.va.attr({
            translateX: x - this.ma.x,
            translateY: y - this.ma.y
          });
        }
        this.U && this.As(this.ma.widthWithoutMargins);
        this.J && this.Bs();
        if (this.va) {
          box = this.wb.getBBox();
        }
        this.Cl = box.x;
        this.Cs = box.y;
        this.Dl = box.x + box.width;
        this.Nh = box.y + box.height;
        return this;
      },
      As: function(boxWidth) {
        var title = this.U;
        var titleBox = title.getCorrectedLayoutOptions();
        if (!titleBox || !title.hasText()) {
          return;
        }
        var width = boxWidth - (this.$ ? 2 * this.e.paddingLeftRight : 0);
        var titleOptions = title.getOptions();
        var titleY = titleBox.y + titleOptions.margin.top;
        var titleX = 0;
        if (titleOptions.verticalAlignment === BOTTOM && this.J) {
          titleY += this.J.getBBox().height;
        }
        if (titleOptions.horizontalAlignment === RIGHT) {
          titleX = width - titleBox.width;
        } else if (titleOptions.horizontalAlignment === CENTER) {
          titleX = (width - titleBox.width) / 2;
        }
        title.shift(titleX, titleY);
      },
      Bs: function() {
        var titleBox = this.U.getLayoutOptions();
        var markerBox = this.J.getBBox();
        var titleOptions = this.U.getOptions() || {};
        var center = 0;
        var y = 0;
        if (titleBox.width > markerBox.width && this.e.horizontalAlignment === CENTER) {
          center = titleBox.width / 2 - markerBox.width / 2;
        }
        if (titleOptions.verticalAlignment === TOP) {
          y = titleBox.height;
        }
        if (0 !== center || 0 !== y) {
          this.J.attr({
            translateX: center,
            translateY: y
          });
          this.V.forEach(function(item) {
            item.tracker.left += center;
            item.tracker.right += center;
            item.tracker.top += y;
            item.tracker.bottom += y;
          });
        }
      },
      getPosition: function() {
        return this.e.position;
      },
      coordsIn: function(x, y) {
        return x >= this.Cl && x <= this.Dl && y >= this.Cs && y <= this.Nh;
      },
      getItemByCoord: function(x, y) {
        var items = this.V;
        var legendGroup = this.va;
        x -= legendGroup.attr("translateX");
        y -= legendGroup.attr("translateY");
        for (var i = 0; i < items.length; i++) {
          if (inRect(items[i].tracker, x, y)) {
            return items[i].tracker;
          }
        }
        return null;
      },
      dispose: function() {
        this.U && this.U.dispose();
        this.wb = this.va = this.U = this.n = this.e = this.na = this.V = null;
        return this;
      },
      layoutOptions: function() {
        if (!this.isVisible()) {
          return null;
        }
        var pos = this.getLayoutOptions();
        return {
          horizontalAlignment: this.e.horizontalAlignment,
          verticalAlignment: this.e.verticalAlignment,
          side: pos.cutSide,
          priority: 1,
          position: this.getPosition()
        };
      },
      measure: function(size) {
        if (this.Lh || !this.va) {
          this.draw(size[0], size[1]);
          this.Lh = false;
        } else {
          this.V.forEach(function(item) {
            item.bBoxes = [];
          });
          this.Al(size[0], size[1]);
        }
        var rect = this.getLayoutOptions();
        return [rect.width, rect.height];
      },
      move: function(rect) {
        this.shift(rect[0], rect[1]);
      },
      freeSpace: function() {
        this.e.ea("W2104");
        this.erase();
      }
    });
    var plugin = {
      name: "legend",
      init: function() {
        var group = this.n.g().attr({
          class: this.Jb + "-legend"
        }).enableLinks().append(this.n.root);
        this.P = new Legend({
          renderer: this.n,
          group,
          widget: this,
          itemGroupClass: this.Jb + "-item",
          titleGroupClass: this.Jb + "-title",
          textField: "text",
          getFormatObject: function(data) {
            return {
              item: data.item,
              text: data.text
            };
          }
        });
        this.Mc.add(this.P);
      },
      extenders: {
        Iy: function() {
          var that = this;
          this.V.forEach(function(item) {
            that.Ds(item.id, item.getState());
          });
        },
        Jy: function() {
          this.Fl();
        }
      },
      members: {
        Ds: function(id, state) {
          var legend = this.P;
          switch (state) {
            case "hover":
              legend.applyHover(id);
              break;
            case "selection":
              legend.applySelected(id);
              break;
            default:
              legend.resetItem(id);
          }
        },
        Fl: function() {
          if (this.P.update(this.Gl(), this.Ea("legend"), this.D.theme("legend").title)) {
            this._(["LAYOUT"]);
          }
        }
      },
      dispose: function() {
        this.P.dispose();
      },
      customize: function(constructor) {
        constructor.prototype.Ky.push(function(x, y) {
          if (this.P.coordsIn(x, y)) {
            var item = this.P.getItemByCoord(x, y);
            if (item) {
              return {
                id: item.id,
                type: "legend"
              };
            }
          }
        });
        constructor.addChange({
          code: "LEGEND",
          handler: function() {
            this.Fl();
          },
          isThemeDependent: true,
          option: "legend",
          isOptionChange: true
        });
      }
    };
    exports.plugin = plugin;
  }
});

// node_modules/devextreme/cjs/localization/ldml/date.formatter.js
var require_date_formatter = __commonJS({
  "node_modules/devextreme/cjs/localization/ldml/date.formatter.js"(exports) {
    "use strict";
    exports.getFormatter = void 0;
    function leftPad(text, length) {
      while (text.length < length) {
        text = "0" + text;
      }
      return text;
    }
    var FORMAT_TYPES = {
      3: "abbreviated",
      4: "wide",
      5: "narrow"
    };
    var LDML_FORMATTERS = {
      y: function(date, count, useUtc) {
        var year = date[useUtc ? "getUTCFullYear" : "getFullYear"]();
        if (2 === count) {
          year %= 100;
        }
        return leftPad(year.toString(), count);
      },
      M: function(date, count, useUtc, dateParts) {
        var month = date[useUtc ? "getUTCMonth" : "getMonth"]();
        var formatType = FORMAT_TYPES[count];
        if (formatType) {
          return dateParts.getMonthNames(formatType, "format")[month];
        }
        return leftPad((month + 1).toString(), Math.min(count, 2));
      },
      L: function(date, count, useUtc, dateParts) {
        var month = date[useUtc ? "getUTCMonth" : "getMonth"]();
        var formatType = FORMAT_TYPES[count];
        if (formatType) {
          return dateParts.getMonthNames(formatType, "standalone")[month];
        }
        return leftPad((month + 1).toString(), Math.min(count, 2));
      },
      Q: function(date, count, useUtc, dateParts) {
        var month = date[useUtc ? "getUTCMonth" : "getMonth"]();
        var quarter = Math.floor(month / 3);
        var formatType = FORMAT_TYPES[count];
        if (formatType) {
          return dateParts.getQuarterNames(formatType)[quarter];
        }
        return leftPad((quarter + 1).toString(), Math.min(count, 2));
      },
      E: function(date, count, useUtc, dateParts) {
        var day = date[useUtc ? "getUTCDay" : "getDay"]();
        var formatType = FORMAT_TYPES[count < 3 ? 3 : count];
        return dateParts.getDayNames(formatType)[day];
      },
      a: function(date, count, useUtc, dateParts) {
        var hours = date[useUtc ? "getUTCHours" : "getHours"]();
        var period = hours < 12 ? 0 : 1;
        var formatType = FORMAT_TYPES[count];
        return dateParts.getPeriodNames(formatType)[period];
      },
      d: function(date, count, useUtc) {
        return leftPad(date[useUtc ? "getUTCDate" : "getDate"]().toString(), Math.min(count, 2));
      },
      H: function(date, count, useUtc) {
        return leftPad(date[useUtc ? "getUTCHours" : "getHours"]().toString(), Math.min(count, 2));
      },
      h: function(date, count, useUtc) {
        var hours = date[useUtc ? "getUTCHours" : "getHours"]();
        return leftPad((hours % 12 || 12).toString(), Math.min(count, 2));
      },
      m: function(date, count, useUtc) {
        return leftPad(date[useUtc ? "getUTCMinutes" : "getMinutes"]().toString(), Math.min(count, 2));
      },
      s: function(date, count, useUtc) {
        return leftPad(date[useUtc ? "getUTCSeconds" : "getSeconds"]().toString(), Math.min(count, 2));
      },
      S: function(date, count, useUtc) {
        return leftPad(date[useUtc ? "getUTCMilliseconds" : "getMilliseconds"]().toString(), 3).substr(0, count);
      },
      x: function(date, count, useUtc) {
        var timezoneOffset = useUtc ? 0 : date.getTimezoneOffset();
        var signPart = timezoneOffset > 0 ? "-" : "+";
        var timezoneOffsetAbs = Math.abs(timezoneOffset);
        var hours = Math.floor(timezoneOffsetAbs / 60);
        var minutes = timezoneOffsetAbs % 60;
        var hoursPart = leftPad(hours.toString(), 2);
        var minutesPart = leftPad(minutes.toString(), 2);
        return signPart + hoursPart + (count >= 3 ? ":" : "") + (count > 1 || minutes ? minutesPart : "");
      },
      X: function(date, count, useUtc) {
        if (useUtc || !date.getTimezoneOffset()) {
          return "Z";
        }
        return LDML_FORMATTERS.x(date, count, useUtc);
      },
      Z: function(date, count, useUtc) {
        return LDML_FORMATTERS.X(date, count >= 5 ? 3 : 2, useUtc);
      }
    };
    var getFormatter = function(format, dateParts) {
      return function(date) {
        var charIndex;
        var formatter;
        var char;
        var charCount = 0;
        var isEscaping = false;
        var isCurrentCharEqualsNext;
        var result = "";
        if (!date) {
          return null;
        }
        if (!format) {
          return date;
        }
        var useUtc = "Z" === format[format.length - 1] || "'Z'" === format.slice(-3);
        for (charIndex = 0; charIndex < format.length; charIndex++) {
          char = format[charIndex];
          formatter = LDML_FORMATTERS[char];
          isCurrentCharEqualsNext = char === format[charIndex + 1];
          charCount++;
          if (!isCurrentCharEqualsNext) {
            if (formatter && !isEscaping) {
              result += formatter(date, charCount, useUtc, dateParts);
            }
            charCount = 0;
          }
          if ("'" === char && !isCurrentCharEqualsNext) {
            isEscaping = !isEscaping;
          } else if (isEscaping || !formatter) {
            result += char;
          }
          if ("'" === char && isCurrentCharEqualsNext) {
            charIndex++;
          }
        }
        return result;
      };
    };
    exports.getFormatter = getFormatter;
  }
});

// node_modules/devextreme/cjs/localization/default_date_names.js
var require_default_date_names = __commonJS({
  "node_modules/devextreme/cjs/localization/default_date_names.js"(exports, module) {
    "use strict";
    exports.default = void 0;
    var _iterator = require_iterator();
    var MONTHS = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
    var DAYS = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"];
    var PERIODS = ["AM", "PM"];
    var QUARTERS = ["Q1", "Q2", "Q3", "Q4"];
    var cutCaptions = function(captions, format) {
      var lengthByFormat = {
        abbreviated: 3,
        short: 2,
        narrow: 1
      };
      return (0, _iterator.map)(captions, function(caption) {
        return caption.substr(0, lengthByFormat[format]);
      });
    };
    var _default = {
      getMonthNames: function(format) {
        return cutCaptions(MONTHS, format);
      },
      getDayNames: function(format) {
        return cutCaptions(DAYS, format);
      },
      getQuarterNames: function(format) {
        return QUARTERS;
      },
      getPeriodNames: function(format) {
        return PERIODS;
      }
    };
    exports.default = _default;
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/devextreme/cjs/core/utils/date_serialization.js
var require_date_serialization = __commonJS({
  "node_modules/devextreme/cjs/core/utils/date_serialization.js"(exports, module) {
    "use strict";
    exports.default = void 0;
    var _config = _interopRequireDefault(require_config());
    var _date = require_date_formatter();
    var _default_date_names = _interopRequireDefault(require_default_date_names());
    var _type = require_type();
    function _interopRequireDefault(obj) {
      return obj && obj.j ? obj : {
        default: obj
      };
    }
    var NUMBER_SERIALIZATION_FORMAT = "number";
    var DATE_SERIALIZATION_FORMAT = "yyyy/MM/dd";
    var DATETIME_SERIALIZATION_FORMAT = "yyyy/MM/dd HH:mm:ss";
    var ISO8601_PATTERN = /^(\d{4,})(-)?(\d{2})(-)?(\d{2})(?:T(\d{2})(:)?(\d{2})?(:)?(\d{2}(?:\.(\d{1,3})\d*)?)?)?(Z|([+-])(\d{2})(:)?(\d{2})?)?$/;
    var ISO8601_TIME_PATTERN = /^(\d{2}):(\d{2})(:(\d{2}))?$/;
    var ISO8601_PATTERN_PARTS = ["", "yyyy", "", "MM", "", "dd", "THH", "", "mm", "", "ss", ".SSS"];
    var DATE_SERIALIZATION_PATTERN = /^(\d{4})\/(\d{2})\/(\d{2})$/;
    var MILLISECOND_LENGHT = 3;
    var dateParser = function(text, skipISO8601Parsing) {
      var result;
      if ((0, _type.isString)(text) && !skipISO8601Parsing) {
        result = parseISO8601String(text);
      }
      return result || parseDate(text);
    };
    function getTimePart(part) {
      return +part || 0;
    }
    function parseDate(text) {
      var isDefaultSerializationFormat = getDateSerializationFormat(text) === DATE_SERIALIZATION_FORMAT;
      var parsedValue = !(0, _type.isDate)(text) && Date.parse(text);
      if (!parsedValue && isDefaultSerializationFormat) {
        var parts = text.match(DATE_SERIALIZATION_PATTERN);
        if (parts) {
          var newDate = new Date(getTimePart(parts[1]), getTimePart(parts[2]), getTimePart(parts[3]));
          newDate.setFullYear(getTimePart(parts[1]));
          newDate.setMonth(getTimePart(parts[2]) - 1);
          newDate.setDate(getTimePart(parts[3]));
          return newDate;
        }
      }
      return (0, _type.isNumeric)(parsedValue) ? new Date(parsedValue) : text;
    }
    function parseISO8601String(text) {
      var parts = text.match(ISO8601_PATTERN);
      if (!parts) {
        parts = text.match(ISO8601_TIME_PATTERN);
        if (parts) {
          return new Date(0, 0, 0, getTimePart(parts[1]), getTimePart(parts[2]), getTimePart(parts[4]));
        }
        return;
      }
      var year = getTimePart(parts[1]);
      var month = --parts[3];
      var day = parts[5];
      var timeZoneHour = 0;
      var timeZoneMinute = 0;
      var correctYear = function(d) {
        year < 100 && d.setFullYear(year);
        return d;
      };
      timeZoneHour = getTimePart(parts[14]);
      timeZoneMinute = getTimePart(parts[16]);
      if ("-" === parts[13]) {
        timeZoneHour = -timeZoneHour;
        timeZoneMinute = -timeZoneMinute;
      }
      var hour = getTimePart(parts[6]) - timeZoneHour;
      var minute = getTimePart(parts[8]) - timeZoneMinute;
      var second = getTimePart(parts[10]);
      var millisecond = function(part) {
        part = part || "";
        return getTimePart(part) * Math.pow(10, MILLISECOND_LENGHT - part.length);
      }(parts[11]);
      if (parts[12]) {
        return correctYear(new Date(Date.UTC(year, month, day, hour, minute, second, millisecond)));
      }
      return correctYear(new Date(year, month, day, hour, minute, second, millisecond));
    }
    var getIso8601Format = function(text, useUtc) {
      var parts = text.match(ISO8601_PATTERN);
      var result = "";
      if (!parts) {
        parts = text.match(ISO8601_TIME_PATTERN);
        if (parts) {
          return parts[3] ? "HH:mm:ss" : "HH:mm";
        }
        return;
      }
      for (var i = 1; i < ISO8601_PATTERN_PARTS.length; i++) {
        if (parts[i]) {
          result += ISO8601_PATTERN_PARTS[i] || parts[i];
        }
      }
      if ("Z" === parts[12]) {
        result += "'Z'";
      }
      if (parts[14]) {
        if (parts[15]) {
          result += "xxx";
        } else if (parts[16]) {
          result += "xx";
        } else {
          result += "x";
        }
      }
      return result;
    };
    var deserializeDate = function(value) {
      if ("number" === typeof value) {
        return new Date(value);
      }
      return dateParser(value, !(0, _config.default)().forceIsoDateParsing);
    };
    var serializeDate = function(value, serializationFormat) {
      if (!serializationFormat) {
        return value;
      }
      if (!(0, _type.isDate)(value)) {
        return null;
      }
      if (serializationFormat === NUMBER_SERIALIZATION_FORMAT) {
        return value && value.valueOf ? value.valueOf() : null;
      }
      return (0, _date.getFormatter)(serializationFormat, _default_date_names.default)(value);
    };
    var getDateSerializationFormat = function(value) {
      if ("number" === typeof value) {
        return NUMBER_SERIALIZATION_FORMAT;
      } else if ((0, _type.isString)(value)) {
        var format;
        if ((0, _config.default)().forceIsoDateParsing) {
          format = getIso8601Format(value);
        }
        if (format) {
          return format;
        } else if (value.indexOf(":") >= 0) {
          return DATETIME_SERIALIZATION_FORMAT;
        } else {
          return DATE_SERIALIZATION_FORMAT;
        }
      } else if (value) {
        return null;
      }
    };
    var _default = {
      dateParser,
      deserializeDate,
      serializeDate,
      getDateSerializationFormat
    };
    exports.default = _default;
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/devextreme/cjs/viz/components/parse_utils.js
var require_parse_utils = __commonJS({
  "node_modules/devextreme/cjs/viz/components/parse_utils.js"(exports) {
    "use strict";
    exports.correctValueType = correctValueType;
    exports.getParser = void 0;
    var _common = require_common();
    var _date_serialization = _interopRequireDefault(require_date_serialization());
    var _type = require_type();
    function _interopRequireDefault(obj) {
      return obj && obj.j ? obj : {
        default: obj
      };
    }
    var parsers = {
      string: function(val) {
        return (0, _type.isDefined)(val) ? "" + val : val;
      },
      numeric: function(val) {
        if (!(0, _type.isDefined)(val)) {
          return val;
        }
        var parsedVal = Number(val);
        if (isNaN(parsedVal)) {
          parsedVal = void 0;
        }
        return parsedVal;
      },
      datetime: function(val) {
        if (!(0, _type.isDefined)(val)) {
          return val;
        }
        var parsedVal;
        var numVal = Number(val);
        if (!isNaN(numVal)) {
          parsedVal = new Date(numVal);
        } else {
          parsedVal = _date_serialization.default.deserializeDate(val);
        }
        if (isNaN(Number(parsedVal))) {
          parsedVal = void 0;
        }
        return parsedVal;
      }
    };
    function correctValueType(type) {
      return "numeric" === type || "datetime" === type || "string" === type ? type : "";
    }
    var getParser = function(valueType) {
      return parsers[correctValueType(valueType)] || _common.noop;
    };
    exports.getParser = getParser;
  }
});

// node_modules/devextreme/cjs/viz/components/data_validator.js
var require_data_validator = __commonJS({
  "node_modules/devextreme/cjs/viz/components/data_validator.js"(exports) {
    "use strict";
    exports.validateData = validateData;
    var _type = require_type();
    var _extend = require_extend();
    var _utils = require_utils();
    var _parse_utils = require_parse_utils();
    var STRING = "string";
    var NUMERIC = "numeric";
    var DATETIME = "datetime";
    var DISCRETE = "discrete";
    var SEMIDISCRETE = "semidiscrete";
    var CONTINUOUS = "continuous";
    var LOGARITHMIC = "logarithmic";
    var VALUE_TYPE = "valueType";
    var ARGUMENT_TYPE = "argumentType";
    var axisTypeParser = (0, _utils.enumParser)([STRING, NUMERIC, DATETIME]);
    var _isArray = Array.isArray;
    function groupingValues(data, others, valueField, index) {
      if (index >= 0) {
        data.slice(index).forEach(function(cell) {
          if ((0, _type.isDefined)(cell[valueField])) {
            others[valueField] += cell[valueField];
            cell[valueField] = void 0;
          }
        });
      }
    }
    function processGroups(groups) {
      groups.forEach(function(group) {
        group.valueType = group.valueAxisType = null;
        group.series.forEach(function(series) {
          series.updateDataType({});
        });
        group.valueAxis && group.valueAxis.resetTypes(VALUE_TYPE);
      });
    }
    function sortValues(data, asc, selector) {
      var func = asc ? function(a, b) {
        return a - b;
      } : function(a, b) {
        return b - a;
      };
      data.sort(function(a, b) {
        var valA = selector(a);
        var valB = selector(b);
        var aa = (0, _type.isDefined)(valA) ? 1 : 0;
        var bb = (0, _type.isDefined)(valB) ? 1 : 0;
        return aa && bb ? func(valA, valB) : func(aa, bb);
      });
      return data;
    }
    function resetArgumentAxes(axes) {
      axes && axes.forEach(function(axis) {
        axis.resetTypes(ARGUMENT_TYPE);
      });
    }
    function parseCategories(categories, parser) {
      var newArray = [];
      categories.forEach(function(category) {
        var parsedCategory = parser(category);
        void 0 !== parsedCategory && newArray.push(parsedCategory);
      });
      return newArray;
    }
    function parseAxisCategories(groupsData, parsers) {
      var argumentCategories = groupsData.argumentOptions && groupsData.argumentOptions.categories;
      groupsData.groups.forEach(function(valueGroup, i) {
        var categories = valueGroup.valueOptions && valueGroup.valueOptions.categories;
        if (categories) {
          valueGroup.valueOptions.categories = parseCategories(categories, parsers[i + 1]);
        }
      });
      if (argumentCategories) {
        groupsData.argumentOptions.categories = parseCategories(argumentCategories, parsers[0]);
      }
    }
    function eigen(x) {
      return x;
    }
    function getType(unit, type) {
      var result = type;
      if (type === STRING || (0, _type.isString)(unit)) {
        result = STRING;
      } else if (type === DATETIME || (0, _type.isDate)(unit)) {
        result = DATETIME;
      } else if ((0, _type.isNumeric)(unit)) {
        result = NUMERIC;
      }
      return result;
    }
    function correctAxisType(type, axisType, hasCategories, incidentOccurred) {
      if (type === STRING && (axisType === CONTINUOUS || axisType === LOGARITHMIC || axisType === SEMIDISCRETE)) {
        incidentOccurred("E2002");
      }
      return axisType === LOGARITHMIC ? LOGARITHMIC : hasCategories || axisType === DISCRETE || type === STRING ? DISCRETE : axisType === SEMIDISCRETE ? SEMIDISCRETE : CONTINUOUS;
    }
    function validUnit(unit, field, incidentOccurred) {
      if (unit) {
        incidentOccurred(!(0, _type.isNumeric)(unit) && !(0, _type.isDate)(unit) && !(0, _type.isString)(unit) ? "E2003" : "E2004", [field]);
      }
    }
    function createParserUnit(type, axisType, incidentOccurred) {
      var parser = type ? (0, _parse_utils.getParser)(type) : eigen;
      var filterInfinity = axisType !== DISCRETE ? function(x) {
        return isFinite(x) || void 0 === x ? x : null;
      } : eigen;
      return function(unit, field) {
        var parseUnit = filterInfinity(parser(unit));
        if (void 0 === parseUnit) {
          validUnit(unit, field, incidentOccurred);
        }
        return parseUnit;
      };
    }
    function prepareParsers(groupsData, incidentOccurred) {
      var argumentParser = createParserUnit(groupsData.argumentType, groupsData.argumentAxisType, incidentOccurred);
      var sizeParser;
      var valueParser;
      var categoryParsers = [argumentParser];
      var cache = {};
      var list = [];
      groupsData.groups.forEach(function(group, groupIndex) {
        group.series.forEach(function(series) {
          valueParser = createParserUnit(group.valueType, group.valueAxisType, incidentOccurred);
          sizeParser = createParserUnit(NUMERIC, CONTINUOUS, incidentOccurred);
          cache[series.getArgumentField()] = argumentParser;
          series.getValueFields().forEach(function(field2) {
            categoryParsers[groupIndex + 1] = valueParser;
            cache[field2] = valueParser;
          });
          if (series.getSizeField()) {
            cache[series.getSizeField()] = sizeParser;
          }
        });
      });
      for (var field in cache) {
        list.push([field, cache[field]]);
      }
      list.length && parseAxisCategories(groupsData, categoryParsers);
      return list;
    }
    function getParsedCell(cell, parsers) {
      var i;
      var ii = parsers.length;
      var obj = (0, _extend.extend)({}, cell);
      var field;
      var value;
      for (i = 0; i < ii; ++i) {
        field = parsers[i][0];
        value = cell[field];
        obj[field] = parsers[i][1](value, field);
      }
      return obj;
    }
    function parse(data, parsers) {
      var parsedData = [];
      var i;
      var ii = data.length;
      parsedData.length = ii;
      for (i = 0; i < ii; ++i) {
        parsedData[i] = getParsedCell(data[i], parsers);
      }
      return parsedData;
    }
    function findIndexByThreshold(data, valueField, threshold) {
      var i;
      var ii = data.length;
      var value;
      for (i = 0; i < ii; ++i) {
        value = data[i][valueField];
        if ((0, _type.isDefined)(value) && threshold > value) {
          break;
        }
      }
      return i;
    }
    function groupMinSlices(originalData, argumentField, valueField, smallValuesGrouping) {
      smallValuesGrouping = smallValuesGrouping || {};
      var mode = smallValuesGrouping.mode;
      var others = {};
      if (!mode || "none" === mode) {
        return;
      }
      others[argumentField] = String(smallValuesGrouping.groupName || "others");
      others[valueField] = 0;
      var data = sortValues(originalData.slice(), false, function(a) {
        return a[valueField];
      });
      groupingValues(data, others, valueField, "smallValueThreshold" === mode ? findIndexByThreshold(data, valueField, smallValuesGrouping.threshold) : smallValuesGrouping.topCount);
      others[valueField] && originalData.push(others);
    }
    function groupPieData(data, groupsData) {
      var firstSeries = groupsData.groups[0] && groupsData.groups[0].series[0];
      var isPie = firstSeries && ("pie" === firstSeries.type || "doughnut" === firstSeries.type || "donut" === firstSeries.type);
      if (!isPie) {
        return;
      }
      groupsData.groups.forEach(function(group) {
        group.series.forEach(function(series) {
          groupMinSlices(data, series.getArgumentField(), series.getValueFields()[0], series.getOptions().smallValuesGrouping);
        });
      });
    }
    function addUniqueItemToCollection(item, collection, itemsHash) {
      if (!itemsHash[item]) {
        collection.push(item);
        itemsHash[item] = true;
      }
    }
    function getUniqueArgumentFields(groupsData) {
      var uniqueArgumentFields = [];
      var hash = {};
      groupsData.groups.forEach(function(group) {
        group.series.forEach(function(series) {
          addUniqueItemToCollection(series.getArgumentField(), uniqueArgumentFields, hash);
        });
      });
      return uniqueArgumentFields;
    }
    function sort(a, b) {
      var result = a - b;
      if (isNaN(result)) {
        if (!(0, _type.isDefined)(a)) {
          return 1;
        }
        if (!(0, _type.isDefined)(b)) {
          return -1;
        }
        return 0;
      }
      return result;
    }
    function sortByArgument(data, argumentField) {
      return data.slice().sort(function(a, b) {
        return sort(a[argumentField], b[argumentField]);
      });
    }
    function sortByCallback(data, callback) {
      return data.slice().sort(callback);
    }
    function checkValueTypeOfGroup(group, cell) {
      group.series.forEach(function(series) {
        series.getValueFields().forEach(function(field) {
          group.valueType = getType(cell[field], group.valueType);
        });
      });
      return group.valueType;
    }
    function getSortByCategories(categories) {
      var hash = {};
      categories.forEach(function(value, i) {
        hash[value] = i;
      });
      return function(data, argumentField) {
        return sortValues(data.slice(), true, function(a) {
          return hash[a[argumentField]];
        });
      };
    }
    function sortData(data, groupsData, options, uniqueArgumentFields) {
      var dataByArguments = {};
      var isDiscrete = groupsData.argumentAxisType === DISCRETE;
      var userCategories = isDiscrete && groupsData.argumentOptions && groupsData.argumentOptions.categories;
      var sortFunction = function(data2) {
        return data2;
      };
      var sortingMethodOption = options.sortingMethod;
      var reSortCategories;
      if (!userCategories && (0, _type.isFunction)(sortingMethodOption)) {
        data = sortByCallback(data, sortingMethodOption);
      }
      if (isDiscrete) {
        groupsData.categories = getCategories(data, uniqueArgumentFields, userCategories);
      }
      if (userCategories || !(0, _type.isFunction)(sortingMethodOption) && groupsData.argumentType === STRING && !options.Sp) {
        sortFunction = getSortByCategories(groupsData.categories);
      } else if (true === sortingMethodOption && groupsData.argumentType !== STRING) {
        sortFunction = sortByArgument;
        reSortCategories = isDiscrete;
      }
      uniqueArgumentFields.forEach(function(field) {
        dataByArguments[field] = sortFunction(data, field);
      });
      if (reSortCategories) {
        groupsData.categories = groupsData.categories.sort(sort);
      }
      return dataByArguments;
    }
    function checkItemExistence(collection, item) {
      return -1 === collection.map(function(collectionItem) {
        return collectionItem.valueOf();
      }).indexOf(item.valueOf());
    }
    function getCategories(data, uniqueArgumentFields, userCategories) {
      var categories = userCategories ? userCategories.slice() : [];
      uniqueArgumentFields.forEach(function(field) {
        data.forEach(function(item) {
          var dataItem = item[field];
          (0, _type.isDefined)(dataItem) && checkItemExistence(categories, dataItem) && categories.push(dataItem);
        });
      });
      return categories;
    }
    function checkArgumentTypeOfGroup(series, cell, groupsData) {
      series.forEach(function(currentSeries) {
        groupsData.argumentType = getType(cell[currentSeries.getArgumentField()], groupsData.argumentType);
      });
      return groupsData.argumentType;
    }
    function checkType(data, groupsData, checkTypeForAllData) {
      var groupsWithUndefinedValueType = [];
      var groupsWithUndefinedArgumentType = [];
      var argumentTypeGroup = groupsData.argumentOptions && axisTypeParser(groupsData.argumentOptions.argumentType);
      var groupsIndexes;
      groupsData.groups.forEach(function(group) {
        if (!group.series.length) {
          return;
        }
        var valueTypeGroup = group.valueOptions && axisTypeParser(group.valueOptions.valueType);
        group.valueType = valueTypeGroup;
        groupsData.argumentType = argumentTypeGroup;
        !valueTypeGroup && groupsWithUndefinedValueType.push(group);
        !argumentTypeGroup && groupsWithUndefinedArgumentType.push(group);
      });
      if (groupsWithUndefinedValueType.length || groupsWithUndefinedArgumentType.length) {
        groupsIndexes = groupsWithUndefinedValueType.map(function(_, index) {
          return index;
        });
        data.some(function(cell) {
          var defineArg;
          groupsWithUndefinedValueType.forEach(function(group, groupIndex) {
            if (checkValueTypeOfGroup(group, cell) && groupsIndexes.indexOf(groupIndex) >= 0) {
              groupsIndexes.splice(groupIndex, 1);
            }
          });
          if (!defineArg) {
            groupsWithUndefinedArgumentType.forEach(function(group) {
              defineArg = checkArgumentTypeOfGroup(group.series, cell, groupsData);
            });
          }
          if (!checkTypeForAllData && defineArg && 0 === groupsIndexes.length) {
            return true;
          }
        });
      }
    }
    function checkAxisType(groupsData, incidentOccurred) {
      var argumentOptions = groupsData.argumentOptions || {};
      var userArgumentCategories = argumentOptions && argumentOptions.categories || [];
      var argumentAxisType = correctAxisType(groupsData.argumentType, argumentOptions.type, !!userArgumentCategories.length, incidentOccurred);
      groupsData.groups.forEach(function(group) {
        var valueOptions = group.valueOptions || {};
        var valueCategories = valueOptions.categories || [];
        var valueAxisType = correctAxisType(group.valueType, valueOptions.type, !!valueCategories.length, incidentOccurred);
        group.series.forEach(function(series) {
          var optionsSeries = {};
          optionsSeries.argumentAxisType = argumentAxisType;
          optionsSeries.valueAxisType = valueAxisType;
          groupsData.argumentAxisType = groupsData.argumentAxisType || optionsSeries.argumentAxisType;
          group.valueAxisType = group.valueAxisType || optionsSeries.valueAxisType;
          optionsSeries.argumentType = groupsData.argumentType;
          optionsSeries.valueType = group.valueType;
          optionsSeries.showZero = valueOptions.showZero;
          series.updateDataType(optionsSeries);
        });
        group.valueAxisType = group.valueAxisType || valueAxisType;
        if (group.valueAxis) {
          group.valueAxis.setTypes(group.valueAxisType, group.valueType, VALUE_TYPE);
          group.valueAxis.validate();
        }
      });
      groupsData.argumentAxisType = groupsData.argumentAxisType || argumentAxisType;
      if (groupsData.argumentAxes) {
        groupsData.argumentAxes.forEach(function(axis) {
          axis.setTypes(groupsData.argumentAxisType, groupsData.argumentType, ARGUMENT_TYPE);
          axis.validate();
        });
      }
    }
    function verifyData(source, incidentOccurred) {
      var data = [];
      var sourceIsDefined = (0, _type.isDefined)(source);
      var hasError = sourceIsDefined && !_isArray(source);
      var i;
      var ii;
      var k;
      var item;
      if (sourceIsDefined && !hasError) {
        for (i = 0, ii = source.length, k = 0; i < ii; ++i) {
          item = source[i];
          if ((0, _type.isObject)(item)) {
            data[k++] = item;
          } else if (item) {
            hasError = true;
          }
        }
      }
      if (hasError) {
        incidentOccurred("E2001");
      }
      return data;
    }
    function validateData(data, groupsData, incidentOccurred, options) {
      data = verifyData(data, incidentOccurred);
      groupsData.argumentType = groupsData.argumentAxisType = null;
      processGroups(groupsData.groups);
      resetArgumentAxes(groupsData.argumentAxes);
      checkType(data, groupsData, options.checkTypeForAllData);
      checkAxisType(groupsData, incidentOccurred);
      if (options.convertToAxisDataType) {
        data = parse(data, prepareParsers(groupsData, incidentOccurred));
      }
      groupPieData(data, groupsData);
      var dataByArgumentFields = sortData(data, groupsData, options, getUniqueArgumentFields(groupsData));
      return dataByArgumentFields;
    }
  }
});

// node_modules/devextreme/cjs/localization/utils.js
var require_utils4 = __commonJS({
  "node_modules/devextreme/cjs/localization/utils.js"(exports) {
    "use strict";
    exports.toFixed = toFixed;
    var _math = require_math();
    var DECIMAL_BASE = 10;
    function roundByAbs(value) {
      var valueSign = (0, _math.sign)(value);
      return valueSign * Math.round(Math.abs(value));
    }
    function adjustValue(value, precision) {
      var precisionMultiplier = Math.pow(DECIMAL_BASE, precision);
      var intermediateValue = (0, _math.multiplyInExponentialForm)(value, precision);
      return roundByAbs(intermediateValue) / precisionMultiplier;
    }
    function toFixed(value, precision) {
      var valuePrecision = precision || 0;
      var adjustedValue = valuePrecision > 0 ? adjustValue.apply(void 0, arguments) : value;
      return adjustedValue.toFixed(valuePrecision);
    }
  }
});

// node_modules/devextreme/cjs/localization/ldml/number.js
var require_number = __commonJS({
  "node_modules/devextreme/cjs/localization/ldml/number.js"(exports) {
    "use strict";
    exports.getFormat = getFormat;
    exports.getFormatter = getFormatter;
    var _math = require_math();
    var _utils = require_utils4();
    var DEFAULT_CONFIG = {
      thousandsSeparator: ",",
      decimalSeparator: "."
    };
    var ESCAPING_CHAR = "'";
    var MAXIMUM_NUMBER_LENGTH = 15;
    var PERCENT_EXPONENT_SHIFT = 2;
    function getGroupSizes(formatString) {
      return formatString.split(",").slice(1).map(function(str) {
        var singleQuotesLeft = 0;
        return str.split("").filter(function(char, index) {
          singleQuotesLeft += "'" === char;
          var isDigit = "#" === char || "0" === char;
          var isInStub = singleQuotesLeft % 2;
          return isDigit && !isInStub;
        }).length;
      });
    }
    function getSignParts(format) {
      var signParts = format.split(";");
      if (1 === signParts.length) {
        signParts.push("-" + signParts[0]);
      }
      return signParts;
    }
    function reverseString(str) {
      return str.toString().split("").reverse().join("");
    }
    function isPercentFormat(format) {
      return -1 !== format.indexOf("%") && !format.match(/'[^']*%[^']*'/g);
    }
    function removeStubs(str) {
      return str.replace(/'.+'/g, "");
    }
    function getNonRequiredDigitCount(floatFormat) {
      if (!floatFormat) {
        return 0;
      }
      var format = removeStubs(floatFormat);
      return format.length - format.replace(/[#]/g, "").length;
    }
    function getRequiredDigitCount(floatFormat) {
      if (!floatFormat) {
        return 0;
      }
      var format = removeStubs(floatFormat);
      return format.length - format.replace(/[0]/g, "").length;
    }
    function normalizeValueString(valuePart, minDigitCount, maxDigitCount) {
      if (!valuePart) {
        return "";
      }
      if (valuePart.length > maxDigitCount) {
        valuePart = valuePart.substr(0, maxDigitCount);
      }
      while (valuePart.length > minDigitCount && "0" === valuePart.slice(-1)) {
        valuePart = valuePart.substr(0, valuePart.length - 1);
      }
      while (valuePart.length < minDigitCount) {
        valuePart += "0";
      }
      return valuePart;
    }
    function applyGroups(valueString, groupSizes, thousandsSeparator) {
      if (!groupSizes.length) {
        return valueString;
      }
      var groups = [];
      var index = 0;
      while (valueString) {
        var groupSize = groupSizes[index];
        if (!groupSize) {
          break;
        }
        groups.push(valueString.slice(0, groupSize));
        valueString = valueString.slice(groupSize);
        if (index < groupSizes.length - 1) {
          index++;
        }
      }
      return groups.join(thousandsSeparator);
    }
    function formatNumberPart(format, valueString) {
      return format.split(ESCAPING_CHAR).map(function(formatPart, escapeIndex) {
        var isEscape = escapeIndex % 2;
        if (!formatPart && isEscape) {
          return ESCAPING_CHAR;
        }
        return isEscape ? formatPart : formatPart.replace(/[,#0]+/, valueString);
      }).join("");
    }
    function getFloatPointIndex(format) {
      var isEscape = false;
      for (var index = 0; index < format.length; index++) {
        if ("'" === format[index]) {
          isEscape = !isEscape;
        }
        if ("." === format[index] && !isEscape) {
          return index;
        }
      }
      return format.length;
    }
    function getFormatter(format, config) {
      config = config || DEFAULT_CONFIG;
      return function(value) {
        if ("number" !== typeof value || isNaN(value)) {
          return "";
        }
        var signFormatParts = getSignParts(format);
        var isPositiveZero = 1 / value === 1 / 0;
        var isPositive = value > 0 || isPositiveZero;
        var numberFormat = signFormatParts[isPositive ? 0 : 1];
        var floatPointIndex = getFloatPointIndex(numberFormat);
        var floatFormatParts = [numberFormat.substr(0, floatPointIndex), numberFormat.substr(floatPointIndex + 1)];
        var minFloatPrecision = getRequiredDigitCount(floatFormatParts[1]);
        var maxFloatPrecision = minFloatPrecision + getNonRequiredDigitCount(floatFormatParts[1]);
        if (isPercentFormat(numberFormat)) {
          value = (0, _math.multiplyInExponentialForm)(value, PERCENT_EXPONENT_SHIFT);
        }
        if (!isPositive) {
          value = -value;
        }
        var minIntegerPrecision = getRequiredDigitCount(floatFormatParts[0]);
        var maxIntegerPrecision = getNonRequiredDigitCount(floatFormatParts[0]) || config.unlimitedIntegerDigits ? void 0 : minIntegerPrecision;
        var integerLength = Math.floor(value).toString().length;
        var floatPrecision = (0, _math.fitIntoRange)(maxFloatPrecision, 0, MAXIMUM_NUMBER_LENGTH - integerLength);
        var groupSizes = getGroupSizes(floatFormatParts[0]).reverse();
        var valueParts = (0, _utils.toFixed)(value, floatPrecision < 0 ? 0 : floatPrecision).split(".");
        var valueIntegerPart = normalizeValueString(reverseString(valueParts[0]), minIntegerPrecision, maxIntegerPrecision);
        var valueFloatPart = normalizeValueString(valueParts[1], minFloatPrecision, maxFloatPrecision);
        valueIntegerPart = applyGroups(valueIntegerPart, groupSizes, config.thousandsSeparator);
        var integerString = reverseString(formatNumberPart(reverseString(floatFormatParts[0]), valueIntegerPart));
        var floatString = maxFloatPrecision ? formatNumberPart(floatFormatParts[1], valueFloatPart) : "";
        var result = integerString + (floatString.match(/\d/) ? config.decimalSeparator : "") + floatString;
        return result;
      };
    }
    function parseValue(text, isPercent, isNegative) {
      var value = (isPercent ? 0.01 : 1) * parseFloat(text) || 0;
      return isNegative ? -value : value;
    }
    function prepareValueText(valueText, formatter, isPercent, isIntegerPart) {
      var nextValueText = valueText;
      var char;
      var text;
      var nextText;
      do {
        if (nextText) {
          char = text.length === nextText.length ? "0" : "1";
          valueText = isIntegerPart ? char + valueText : valueText + char;
        }
        text = nextText || formatter(parseValue(nextValueText, isPercent));
        nextValueText = isIntegerPart ? "1" + nextValueText : nextValueText + "1";
        nextText = formatter(parseValue(nextValueText, isPercent));
      } while (text !== nextText && (isIntegerPart ? text.length === nextText.length : text.length <= nextText.length));
      if (isIntegerPart && nextText.length > text.length) {
        var hasGroups = -1 === formatter(12345).indexOf("12345");
        do {
          valueText = "1" + valueText;
        } while (hasGroups && parseValue(valueText, isPercent) < 1e5);
      }
      return valueText;
    }
    function getFormatByValueText(valueText, formatter, isPercent, isNegative) {
      var format = formatter(parseValue(valueText, isPercent, isNegative));
      var valueTextParts = valueText.split(".");
      var valueTextWithModifiedFloat = valueTextParts[0] + ".3" + valueTextParts[1].slice(1);
      var valueWithModifiedFloat = parseValue(valueTextWithModifiedFloat, isPercent, isNegative);
      var decimalSeparatorIndex = formatter(valueWithModifiedFloat).indexOf("3") - 1;
      format = format.replace(/(\d)\D(\d)/g, "$1,$2");
      if (decimalSeparatorIndex >= 0) {
        format = format.slice(0, decimalSeparatorIndex) + "." + format.slice(decimalSeparatorIndex + 1);
      }
      format = format.replace(/1+/, "1").replace(/1/g, "#");
      if (!isPercent) {
        format = format.replace("%", "'%'");
      }
      return format;
    }
    function getFormat(formatter) {
      var valueText = ".";
      var isPercent = formatter(1).indexOf("100") >= 0;
      valueText = prepareValueText(valueText, formatter, isPercent, true);
      valueText = prepareValueText(valueText, formatter, isPercent, false);
      var positiveFormat = getFormatByValueText(valueText, formatter, isPercent, false);
      var negativeFormat = getFormatByValueText(valueText, formatter, isPercent, true);
      return negativeFormat === "-" + positiveFormat ? positiveFormat : positiveFormat + ";" + negativeFormat;
    }
  }
});

// node_modules/devextreme/cjs/localization/currency.js
var require_currency = __commonJS({
  "node_modules/devextreme/cjs/localization/currency.js"(exports, module) {
    "use strict";
    exports.default = void 0;
    var _extend = require_extend();
    var _default = {
      Ef: function(value, format, formatConfig) {
        if ("currency" === format) {
          formatConfig.precision = formatConfig.precision || 0;
          var result = this.format(value, (0, _extend.extend)({}, formatConfig, {
            type: "fixedpoint"
          }));
          var currencyPart = this.getCurrencySymbol().symbol.replace(/\$/g, "$$$$");
          result = result.replace(/^(\D*)(\d.*)/, "$1" + currencyPart + "$2");
          return result;
        }
        return this.callBase.apply(this, arguments);
      },
      getCurrencySymbol: function() {
        return {
          symbol: "$"
        };
      },
      getOpenXmlCurrencyFormat: function() {
        return "$#,##0{0}_);\\($#,##0{0}\\)";
      }
    };
    exports.default = _default;
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/devextreme/cjs/localization/cldr-data/parent_locales.js
var require_parent_locales = __commonJS({
  "node_modules/devextreme/cjs/localization/cldr-data/parent_locales.js"(exports, module) {
    "use strict";
    exports.default = void 0;
    var _default = {
      "en-150": "en-001",
      "en-AG": "en-001",
      "en-AI": "en-001",
      "en-AU": "en-001",
      "en-BB": "en-001",
      "en-BM": "en-001",
      "en-BS": "en-001",
      "en-BW": "en-001",
      "en-BZ": "en-001",
      "en-CC": "en-001",
      "en-CK": "en-001",
      "en-CM": "en-001",
      "en-CX": "en-001",
      "en-CY": "en-001",
      "en-DG": "en-001",
      "en-DM": "en-001",
      "en-ER": "en-001",
      "en-FJ": "en-001",
      "en-FK": "en-001",
      "en-FM": "en-001",
      "en-GB": "en-001",
      "en-GD": "en-001",
      "en-GG": "en-001",
      "en-GH": "en-001",
      "en-GI": "en-001",
      "en-GM": "en-001",
      "en-GY": "en-001",
      "en-HK": "en-001",
      "en-IE": "en-001",
      "en-IL": "en-001",
      "en-IM": "en-001",
      "en-IN": "en-001",
      "en-IO": "en-001",
      "en-JE": "en-001",
      "en-JM": "en-001",
      "en-KE": "en-001",
      "en-KI": "en-001",
      "en-KN": "en-001",
      "en-KY": "en-001",
      "en-LC": "en-001",
      "en-LR": "en-001",
      "en-LS": "en-001",
      "en-MG": "en-001",
      "en-MO": "en-001",
      "en-MS": "en-001",
      "en-MT": "en-001",
      "en-MU": "en-001",
      "en-MV": "en-001",
      "en-MW": "en-001",
      "en-MY": "en-001",
      "en-NA": "en-001",
      "en-NF": "en-001",
      "en-NG": "en-001",
      "en-NR": "en-001",
      "en-NU": "en-001",
      "en-NZ": "en-001",
      "en-PG": "en-001",
      "en-PK": "en-001",
      "en-PN": "en-001",
      "en-PW": "en-001",
      "en-RW": "en-001",
      "en-SB": "en-001",
      "en-SC": "en-001",
      "en-SD": "en-001",
      "en-SG": "en-001",
      "en-SH": "en-001",
      "en-SL": "en-001",
      "en-SS": "en-001",
      "en-SX": "en-001",
      "en-SZ": "en-001",
      "en-TC": "en-001",
      "en-TK": "en-001",
      "en-TO": "en-001",
      "en-TT": "en-001",
      "en-TV": "en-001",
      "en-TZ": "en-001",
      "en-UG": "en-001",
      "en-VC": "en-001",
      "en-VG": "en-001",
      "en-VU": "en-001",
      "en-WS": "en-001",
      "en-ZA": "en-001",
      "en-ZM": "en-001",
      "en-ZW": "en-001",
      "en-AT": "en-150",
      "en-BE": "en-150",
      "en-CH": "en-150",
      "en-DE": "en-150",
      "en-DK": "en-150",
      "en-FI": "en-150",
      "en-NL": "en-150",
      "en-SE": "en-150",
      "en-SI": "en-150",
      "hi-Latn": "en-IN",
      "es-AR": "es-419",
      "es-BO": "es-419",
      "es-BR": "es-419",
      "es-BZ": "es-419",
      "es-CL": "es-419",
      "es-CO": "es-419",
      "es-CR": "es-419",
      "es-CU": "es-419",
      "es-DO": "es-419",
      "es-EC": "es-419",
      "es-GT": "es-419",
      "es-HN": "es-419",
      "es-MX": "es-419",
      "es-NI": "es-419",
      "es-PA": "es-419",
      "es-PE": "es-419",
      "es-PR": "es-419",
      "es-PY": "es-419",
      "es-SV": "es-419",
      "es-US": "es-419",
      "es-UY": "es-419",
      "es-VE": "es-419",
      nb: "no",
      nn: "no",
      "pt-AO": "pt-PT",
      "pt-CH": "pt-PT",
      "pt-CV": "pt-PT",
      "pt-FR": "pt-PT",
      "pt-GQ": "pt-PT",
      "pt-GW": "pt-PT",
      "pt-LU": "pt-PT",
      "pt-MO": "pt-PT",
      "pt-MZ": "pt-PT",
      "pt-ST": "pt-PT",
      "pt-TL": "pt-PT",
      "az-Arab": "und",
      "az-Cyrl": "und",
      "bal-Latn": "und",
      "blt-Latn": "und",
      "bm-Nkoo": "und",
      "bs-Cyrl": "und",
      "byn-Latn": "und",
      "cu-Glag": "und",
      "dje-Arab": "und",
      "dyo-Arab": "und",
      "en-Dsrt": "und",
      "en-Shaw": "und",
      "ff-Adlm": "und",
      "ff-Arab": "und",
      "ha-Arab": "und",
      "iu-Latn": "und",
      "kk-Arab": "und",
      "ks-Deva": "und",
      "ku-Arab": "und",
      "ky-Arab": "und",
      "ky-Latn": "und",
      "ml-Arab": "und",
      "mn-Mong": "und",
      "mni-Mtei": "und",
      "ms-Arab": "und",
      "pa-Arab": "und",
      "sat-Deva": "und",
      "sd-Deva": "und",
      "sd-Khoj": "und",
      "sd-Sind": "und",
      "shi-Latn": "und",
      "so-Arab": "und",
      "sr-Latn": "und",
      "sw-Arab": "und",
      "tg-Arab": "und",
      "ug-Cyrl": "und",
      "uz-Arab": "und",
      "uz-Cyrl": "und",
      "vai-Latn": "und",
      "wo-Arab": "und",
      "yo-Arab": "und",
      "yue-Hans": "und",
      "zh-Hant": "und",
      "zh-Hant-MO": "zh-Hant-HK"
    };
    exports.default = _default;
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/devextreme/cjs/localization/parentLocale.js
var require_parentLocale = __commonJS({
  "node_modules/devextreme/cjs/localization/parentLocale.js"(exports, module) {
    "use strict";
    exports.default = void 0;
    var PARENT_LOCALE_SEPARATOR = "-";
    var _default = function(parentLocales, locale) {
      var parentLocale = parentLocales[locale];
      if (parentLocale) {
        return "root" !== parentLocale && parentLocale;
      }
      return locale.substr(0, locale.lastIndexOf(PARENT_LOCALE_SEPARATOR));
    };
    exports.default = _default;
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/devextreme/cjs/localization/core.js
var require_core = __commonJS({
  "node_modules/devextreme/cjs/localization/core.js"(exports, module) {
    "use strict";
    exports.default = void 0;
    var _dependency_injector = _interopRequireDefault(require_dependency_injector());
    var _parent_locales = _interopRequireDefault(require_parent_locales());
    var _parentLocale = _interopRequireDefault(require_parentLocale());
    function _interopRequireDefault(obj) {
      return obj && obj.j ? obj : {
        default: obj
      };
    }
    var DEFAULT_LOCALE = "en";
    var _default = (0, _dependency_injector.default)({
      locale: function() {
        var currentLocale = DEFAULT_LOCALE;
        return function(locale) {
          if (!locale) {
            return currentLocale;
          }
          currentLocale = locale;
        };
      }(),
      getValueByClosestLocale: function(getter) {
        var locale = this.locale();
        var value = getter(locale);
        var isRootLocale;
        while (!value && !isRootLocale) {
          locale = (0, _parentLocale.default)(_parent_locales.default, locale);
          if (locale) {
            value = getter(locale);
          } else {
            isRootLocale = true;
          }
        }
        if (void 0 === value && locale !== DEFAULT_LOCALE) {
          return getter(DEFAULT_LOCALE);
        }
        return value;
      }
    });
    exports.default = _default;
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/devextreme/cjs/localization/open_xml_currency_format.js
var require_open_xml_currency_format = __commonJS({
  "node_modules/devextreme/cjs/localization/open_xml_currency_format.js"(exports, module) {
    "use strict";
    exports.default = void 0;
    var _default = function(currencySymbol, accountingFormat) {
      if (!accountingFormat) {
        return;
      }
      var encodedCurrencySymbol = currencySymbol;
      if ("string" === typeof currencySymbol) {
        encodedCurrencySymbol = "";
        for (var i = 0; i < currencySymbol.length; i++) {
          if ("$" !== currencySymbol[i]) {
            encodedCurrencySymbol += "\\";
          }
          encodedCurrencySymbol += currencySymbol[i];
        }
      }
      var encodeSymbols = {
        ".00": "{0}",
        "'": "\\'",
        "\\(": "\\(",
        "\\)": "\\)",
        " ": "\\ ",
        '"': "&quot;",
        "\\\xA4": encodedCurrencySymbol
      };
      var result = accountingFormat.split(";");
      for (var _i = 0; _i < result.length; _i++) {
        for (var symbol in encodeSymbols) {
          if (Object.prototype.hasOwnProperty.call(encodeSymbols, symbol)) {
            result[_i] = result[_i].replace(new RegExp(symbol, "g"), encodeSymbols[symbol]);
          }
        }
      }
      return 2 === result.length ? result[0] + "_);" + result[1] : result[0];
    };
    exports.default = _default;
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/devextreme/cjs/localization/cldr-data/accounting_formats.js
var require_accounting_formats = __commonJS({
  "node_modules/devextreme/cjs/localization/cldr-data/accounting_formats.js"(exports, module) {
    "use strict";
    exports.default = void 0;
    var _default = {
      af: "\xA4#,##0.00;(\xA4#,##0.00)",
      "af-NA": "\xA4#,##0.00;(\xA4#,##0.00)",
      agq: "#,##0.00\xA4",
      ak: "\xA4#,##0.00",
      am: "\xA4#,##0.00;(\xA4#,##0.00)",
      ar: "\xA4#,##0.00;(\xA4#,##0.00)",
      "ar-AE": "\xA4#,##0.00;(\xA4#,##0.00)",
      "ar-BH": "\xA4#,##0.00;(\xA4#,##0.00)",
      "ar-DJ": "\xA4#,##0.00;(\xA4#,##0.00)",
      "ar-DZ": "\xA4#,##0.00;(\xA4#,##0.00)",
      "ar-EG": "\xA4#,##0.00;(\xA4#,##0.00)",
      "ar-EH": "\xA4#,##0.00;(\xA4#,##0.00)",
      "ar-ER": "\xA4#,##0.00;(\xA4#,##0.00)",
      "ar-IL": "\xA4#,##0.00;(\xA4#,##0.00)",
      "ar-IQ": "\xA4#,##0.00;(\xA4#,##0.00)",
      "ar-JO": "\xA4#,##0.00;(\xA4#,##0.00)",
      "ar-KM": "\xA4#,##0.00;(\xA4#,##0.00)",
      "ar-KW": "\xA4#,##0.00;(\xA4#,##0.00)",
      "ar-LB": "\xA4#,##0.00;(\xA4#,##0.00)",
      "ar-LY": "\xA4#,##0.00;(\xA4#,##0.00)",
      "ar-MA": "\xA4#,##0.00;(\xA4#,##0.00)",
      "ar-MR": "\xA4#,##0.00;(\xA4#,##0.00)",
      "ar-OM": "\xA4#,##0.00;(\xA4#,##0.00)",
      "ar-PS": "\xA4#,##0.00;(\xA4#,##0.00)",
      "ar-QA": "\xA4#,##0.00;(\xA4#,##0.00)",
      "ar-SA": "\xA4#,##0.00;(\xA4#,##0.00)",
      "ar-SD": "\xA4#,##0.00;(\xA4#,##0.00)",
      "ar-SO": "\xA4#,##0.00;(\xA4#,##0.00)",
      "ar-SS": "\xA4#,##0.00;(\xA4#,##0.00)",
      "ar-SY": "\xA4#,##0.00;(\xA4#,##0.00)",
      "ar-TD": "\xA4#,##0.00;(\xA4#,##0.00)",
      "ar-TN": "\xA4#,##0.00;(\xA4#,##0.00)",
      "ar-YE": "\xA4#,##0.00;(\xA4#,##0.00)",
      as: "\xA4\xA0#,##,##0.00",
      asa: "#,##0.00\xA0\xA4",
      ast: "#,##0.00\xA0\xA4",
      az: "#,##0.00\xA0\xA4",
      "az-Cyrl": "#,##0.00\xA0\xA4",
      "az-Latn": "#,##0.00\xA0\xA4",
      bas: "#,##0.00\xA0\xA4",
      be: "#,##0.00\xA0\xA4",
      "be-tarask": "#,##0.00\xA0\xA4",
      bem: "\xA4#,##0.00;(\xA4#,##0.00)",
      bez: "#,##0.00\xA4",
      bg: "0.00\xA0\xA4;(0.00\xA0\xA4)",
      bm: "\xA4#,##0.00;(\xA4#,##0.00)",
      bn: "#,##,##0.00\xA4;(#,##,##0.00\xA4)",
      "bn-IN": "#,##,##0.00\xA4;(#,##,##0.00\xA4)",
      bo: "\xA4\xA0#,##0.00",
      "bo-IN": "\xA4\xA0#,##0.00",
      br: "#,##0.00\xA0\xA4",
      brx: "\xA4\xA0#,##,##0.00",
      bs: "#,##0.00\xA0\xA4",
      "bs-Cyrl": "#,##0.00\xA0\xA4",
      "bs-Latn": "#,##0.00\xA0\xA4",
      ca: "#,##0.00\xA0\xA4;(#,##0.00\xA0\xA4)",
      "ca-AD": "#,##0.00\xA0\xA4;(#,##0.00\xA0\xA4)",
      "ca-ES-valencia": "#,##0.00\xA0\xA4;(#,##0.00\xA0\xA4)",
      "ca-FR": "#,##0.00\xA0\xA4;(#,##0.00\xA0\xA4)",
      "ca-IT": "#,##0.00\xA0\xA4;(#,##0.00\xA0\xA4)",
      ccp: "#,##,##0.00\xA4;(#,##,##0.00\xA4)",
      "ccp-IN": "#,##,##0.00\xA4;(#,##,##0.00\xA4)",
      ce: "#,##0.00\xA0\xA4",
      ceb: "\xA4#,##0.00;(\xA4#,##0.00)",
      cgg: "\xA4#,##0.00",
      chr: "\xA4#,##0.00;(\xA4#,##0.00)",
      ckb: "\xA4\xA0#,##0.00",
      "ckb-IR": "\xA4\xA0#,##0.00",
      cs: "#,##0.00\xA0\xA4",
      cy: "\xA4#,##0.00;(\xA4#,##0.00)",
      da: "#,##0.00\xA0\xA4",
      "da-GL": "#,##0.00\xA0\xA4",
      dav: "\xA4#,##0.00;(\xA4#,##0.00)",
      de: "#,##0.00\xA0\xA4",
      "de-AT": "#,##0.00\xA0\xA4",
      "de-BE": "#,##0.00\xA0\xA4",
      "de-CH": "#,##0.00\xA0\xA4",
      "de-IT": "#,##0.00\xA0\xA4",
      "de-LI": "#,##0.00\xA0\xA4",
      "de-LU": "#,##0.00\xA0\xA4",
      dje: "#,##0.00\xA4",
      doi: "\xA4#,##0.00",
      dsb: "#,##0.00\xA0\xA4",
      dua: "#,##0.00\xA0\xA4",
      dyo: "#,##0.00\xA0\xA4",
      dz: "\xA4#,##,##0.00",
      ebu: "\xA4#,##0.00;(\xA4#,##0.00)",
      ee: "\xA4#,##0.00;(\xA4#,##0.00)",
      "ee-TG": "\xA4#,##0.00;(\xA4#,##0.00)",
      el: "#,##0.00\xA0\xA4",
      "el-CY": "#,##0.00\xA0\xA4",
      en: "\xA4#,##0.00;(\xA4#,##0.00)",
      "en-001": "\xA4#,##0.00;(\xA4#,##0.00)",
      "en-150": "#,##0.00\xA0\xA4",
      "en-AE": "\xA4#,##0.00;(\xA4#,##0.00)",
      "en-AG": "\xA4#,##0.00;(\xA4#,##0.00)",
      "en-AI": "\xA4#,##0.00;(\xA4#,##0.00)",
      "en-AS": "\xA4#,##0.00;(\xA4#,##0.00)",
      "en-AT": "\xA4\xA0#,##0.00",
      "en-AU": "\xA4#,##0.00;(\xA4#,##0.00)",
      "en-BB": "\xA4#,##0.00;(\xA4#,##0.00)",
      "en-BE": "#,##0.00\xA0\xA4",
      "en-BI": "\xA4#,##0.00;(\xA4#,##0.00)",
      "en-BM": "\xA4#,##0.00;(\xA4#,##0.00)",
      "en-BS": "\xA4#,##0.00;(\xA4#,##0.00)",
      "en-BW": "\xA4#,##0.00;(\xA4#,##0.00)",
      "en-BZ": "\xA4#,##0.00;(\xA4#,##0.00)",
      "en-CA": "\xA4#,##0.00;(\xA4#,##0.00)",
      "en-CC": "\xA4#,##0.00;(\xA4#,##0.00)",
      "en-CH": "\xA4\xA0#,##0.00;\xA4-#,##0.00",
      "en-CK": "\xA4#,##0.00;(\xA4#,##0.00)",
      "en-CM": "\xA4#,##0.00;(\xA4#,##0.00)",
      "en-CX": "\xA4#,##0.00;(\xA4#,##0.00)",
      "en-CY": "\xA4#,##0.00;(\xA4#,##0.00)",
      "en-DE": "#,##0.00\xA0\xA4",
      "en-DG": "\xA4#,##0.00;(\xA4#,##0.00)",
      "en-DK": "#,##0.00\xA0\xA4",
      "en-DM": "\xA4#,##0.00;(\xA4#,##0.00)",
      "en-ER": "\xA4#,##0.00;(\xA4#,##0.00)",
      "en-FI": "#,##0.00\xA0\xA4",
      "en-FJ": "\xA4#,##0.00;(\xA4#,##0.00)",
      "en-FK": "\xA4#,##0.00;(\xA4#,##0.00)",
      "en-FM": "\xA4#,##0.00;(\xA4#,##0.00)",
      "en-GB": "\xA4#,##0.00;(\xA4#,##0.00)",
      "en-GD": "\xA4#,##0.00;(\xA4#,##0.00)",
      "en-GG": "\xA4#,##0.00;(\xA4#,##0.00)",
      "en-GH": "\xA4#,##0.00;(\xA4#,##0.00)",
      "en-GI": "\xA4#,##0.00;(\xA4#,##0.00)",
      "en-GM": "\xA4#,##0.00;(\xA4#,##0.00)",
      "en-GU": "\xA4#,##0.00;(\xA4#,##0.00)",
      "en-GY": "\xA4#,##0.00;(\xA4#,##0.00)",
      "en-HK": "\xA4#,##0.00;(\xA4#,##0.00)",
      "en-IE": "\xA4#,##0.00;(\xA4#,##0.00)",
      "en-IL": "\xA4#,##0.00;(\xA4#,##0.00)",
      "en-IM": "\xA4#,##0.00;(\xA4#,##0.00)",
      "en-IN": "\xA4#,##0.00;(\xA4#,##0.00)",
      "en-IO": "\xA4#,##0.00;(\xA4#,##0.00)",
      "en-JE": "\xA4#,##0.00;(\xA4#,##0.00)",
      "en-JM": "\xA4#,##0.00;(\xA4#,##0.00)",
      "en-KE": "\xA4#,##0.00;(\xA4#,##0.00)",
      "en-KI": "\xA4#,##0.00;(\xA4#,##0.00)",
      "en-KN": "\xA4#,##0.00;(\xA4#,##0.00)",
      "en-KY": "\xA4#,##0.00;(\xA4#,##0.00)",
      "en-LC": "\xA4#,##0.00;(\xA4#,##0.00)",
      "en-LR": "\xA4#,##0.00;(\xA4#,##0.00)",
      "en-LS": "\xA4#,##0.00;(\xA4#,##0.00)",
      "en-MG": "\xA4#,##0.00;(\xA4#,##0.00)",
      "en-MH": "\xA4#,##0.00;(\xA4#,##0.00)",
      "en-MO": "\xA4#,##0.00;(\xA4#,##0.00)",
      "en-MP": "\xA4#,##0.00;(\xA4#,##0.00)",
      "en-MS": "\xA4#,##0.00;(\xA4#,##0.00)",
      "en-MT": "\xA4#,##0.00;(\xA4#,##0.00)",
      "en-MU": "\xA4#,##0.00;(\xA4#,##0.00)",
      "en-MV": "\xA4\xA0#,##0.00",
      "en-MW": "\xA4#,##0.00;(\xA4#,##0.00)",
      "en-MY": "\xA4#,##0.00;(\xA4#,##0.00)",
      "en-NA": "\xA4#,##0.00;(\xA4#,##0.00)",
      "en-NF": "\xA4#,##0.00;(\xA4#,##0.00)",
      "en-NG": "\xA4#,##0.00;(\xA4#,##0.00)",
      "en-NL": "\xA4\xA0#,##0.00;(\xA4\xA0#,##0.00)",
      "en-NR": "\xA4#,##0.00;(\xA4#,##0.00)",
      "en-NU": "\xA4#,##0.00;(\xA4#,##0.00)",
      "en-NZ": "\xA4#,##0.00;(\xA4#,##0.00)",
      "en-PG": "\xA4#,##0.00;(\xA4#,##0.00)",
      "en-PH": "\xA4#,##0.00;(\xA4#,##0.00)",
      "en-PK": "\xA4#,##0.00;(\xA4#,##0.00)",
      "en-PN": "\xA4#,##0.00;(\xA4#,##0.00)",
      "en-PR": "\xA4#,##0.00;(\xA4#,##0.00)",
      "en-PW": "\xA4#,##0.00;(\xA4#,##0.00)",
      "en-RW": "\xA4#,##0.00;(\xA4#,##0.00)",
      "en-SB": "\xA4#,##0.00;(\xA4#,##0.00)",
      "en-SC": "\xA4#,##0.00;(\xA4#,##0.00)",
      "en-SD": "\xA4#,##0.00;(\xA4#,##0.00)",
      "en-SE": "#,##0.00\xA0\xA4",
      "en-SG": "\xA4#,##0.00;(\xA4#,##0.00)",
      "en-SH": "\xA4#,##0.00;(\xA4#,##0.00)",
      "en-SI": "#,##0.00\xA0\xA4;(#,##0.00\xA0\xA4)",
      "en-SL": "\xA4#,##0.00;(\xA4#,##0.00)",
      "en-SS": "\xA4#,##0.00;(\xA4#,##0.00)",
      "en-SX": "\xA4#,##0.00;(\xA4#,##0.00)",
      "en-SZ": "\xA4#,##0.00;(\xA4#,##0.00)",
      "en-TC": "\xA4#,##0.00;(\xA4#,##0.00)",
      "en-TK": "\xA4#,##0.00;(\xA4#,##0.00)",
      "en-TO": "\xA4#,##0.00;(\xA4#,##0.00)",
      "en-TT": "\xA4#,##0.00;(\xA4#,##0.00)",
      "en-TV": "\xA4#,##0.00;(\xA4#,##0.00)",
      "en-TZ": "\xA4#,##0.00;(\xA4#,##0.00)",
      "en-UG": "\xA4#,##0.00;(\xA4#,##0.00)",
      "en-UM": "\xA4#,##0.00;(\xA4#,##0.00)",
      "en-VC": "\xA4#,##0.00;(\xA4#,##0.00)",
      "en-VG": "\xA4#,##0.00;(\xA4#,##0.00)",
      "en-VI": "\xA4#,##0.00;(\xA4#,##0.00)",
      "en-VU": "\xA4#,##0.00;(\xA4#,##0.00)",
      "en-WS": "\xA4#,##0.00;(\xA4#,##0.00)",
      "en-ZA": "\xA4#,##0.00;(\xA4#,##0.00)",
      "en-ZM": "\xA4#,##0.00;(\xA4#,##0.00)",
      "en-ZW": "\xA4#,##0.00;(\xA4#,##0.00)",
      eo: "\xA4\xA0#,##0.00",
      es: "#,##0.00\xA0\xA4",
      "es-419": "\xA4#,##0.00",
      "es-AR": "\xA4\xA0#,##0.00;(\xA4\xA0#,##0.00)",
      "es-BO": "\xA4#,##0.00",
      "es-BR": "\xA4#,##0.00",
      "es-BZ": "\xA4#,##0.00",
      "es-CL": "\xA4#,##0.00",
      "es-CO": "\xA4#,##0.00",
      "es-CR": "\xA4#,##0.00",
      "es-CU": "\xA4#,##0.00",
      "es-DO": "\xA4#,##0.00;(\xA4#,##0.00)",
      "es-EA": "#,##0.00\xA0\xA4",
      "es-EC": "\xA4#,##0.00",
      "es-GQ": "#,##0.00\xA0\xA4",
      "es-GT": "\xA4#,##0.00",
      "es-HN": "\xA4#,##0.00",
      "es-IC": "#,##0.00\xA0\xA4",
      "es-MX": "\xA4#,##0.00",
      "es-NI": "\xA4#,##0.00",
      "es-PA": "\xA4#,##0.00",
      "es-PE": "\xA4#,##0.00",
      "es-PH": "#,##0.00\xA0\xA4",
      "es-PR": "\xA4#,##0.00",
      "es-PY": "\xA4#,##0.00",
      "es-SV": "\xA4#,##0.00",
      "es-US": "\xA4#,##0.00",
      "es-UY": "\xA4\xA0#,##0.00;(\xA4\xA0#,##0.00)",
      "es-VE": "\xA4#,##0.00",
      et: "#,##0.00\xA0\xA4;(#,##0.00\xA0\xA4)",
      eu: "#,##0.00\xA0\xA4;(#,##0.00\xA0\xA4)",
      ewo: "#,##0.00\xA0\xA4",
      fa: "\u200E\xA4\xA0#,##0.00;\u200E(\xA4\xA0#,##0.00)",
      "fa-AF": "\xA4\xA0#,##0.00;\u200E(\xA4\xA0#,##0.00)",
      ff: "#,##0.00\xA0\xA4",
      "ff-Adlm": "\xA4\xA0#,##0.00",
      "ff-Adlm-BF": "\xA4\xA0#,##0.00",
      "ff-Adlm-CM": "\xA4\xA0#,##0.00",
      "ff-Adlm-GH": "\xA4\xA0#,##0.00",
      "ff-Adlm-GM": "\xA4\xA0#,##0.00",
      "ff-Adlm-GW": "\xA4\xA0#,##0.00",
      "ff-Adlm-LR": "\xA4\xA0#,##0.00",
      "ff-Adlm-MR": "\xA4\xA0#,##0.00",
      "ff-Adlm-NE": "\xA4\xA0#,##0.00",
      "ff-Adlm-NG": "\xA4\xA0#,##0.00",
      "ff-Adlm-SL": "\xA4\xA0#,##0.00",
      "ff-Adlm-SN": "\xA4\xA0#,##0.00",
      "ff-Latn": "#,##0.00\xA0\xA4",
      "ff-Latn-BF": "#,##0.00\xA0\xA4",
      "ff-Latn-CM": "#,##0.00\xA0\xA4",
      "ff-Latn-GH": "#,##0.00\xA0\xA4",
      "ff-Latn-GM": "#,##0.00\xA0\xA4",
      "ff-Latn-GN": "#,##0.00\xA0\xA4",
      "ff-Latn-GW": "#,##0.00\xA0\xA4",
      "ff-Latn-LR": "#,##0.00\xA0\xA4",
      "ff-Latn-MR": "#,##0.00\xA0\xA4",
      "ff-Latn-NE": "#,##0.00\xA0\xA4",
      "ff-Latn-NG": "#,##0.00\xA0\xA4",
      "ff-Latn-SL": "#,##0.00\xA0\xA4",
      fi: "#,##0.00\xA0\xA4",
      fil: "\xA4#,##0.00;(\xA4#,##0.00)",
      fo: "#,##0.00\xA0\xA4;(#,##0.00\xA0\xA4)",
      "fo-DK": "#,##0.00\xA0\xA4;(#,##0.00\xA0\xA4)",
      fr: "#,##0.00\xA0\xA4;(#,##0.00\xA0\xA4)",
      "fr-BE": "#,##0.00\xA0\xA4;(#,##0.00\xA0\xA4)",
      "fr-BF": "#,##0.00\xA0\xA4;(#,##0.00\xA0\xA4)",
      "fr-BI": "#,##0.00\xA0\xA4;(#,##0.00\xA0\xA4)",
      "fr-BJ": "#,##0.00\xA0\xA4;(#,##0.00\xA0\xA4)",
      "fr-BL": "#,##0.00\xA0\xA4;(#,##0.00\xA0\xA4)",
      "fr-CA": "#,##0.00\xA0\xA4;(#,##0.00\xA0\xA4)",
      "fr-CD": "#,##0.00\xA0\xA4;(#,##0.00\xA0\xA4)",
      "fr-CF": "#,##0.00\xA0\xA4;(#,##0.00\xA0\xA4)",
      "fr-CG": "#,##0.00\xA0\xA4;(#,##0.00\xA0\xA4)",
      "fr-CH": "#,##0.00\xA0\xA4;(#,##0.00\xA0\xA4)",
      "fr-CI": "#,##0.00\xA0\xA4;(#,##0.00\xA0\xA4)",
      "fr-CM": "#,##0.00\xA0\xA4;(#,##0.00\xA0\xA4)",
      "fr-DJ": "#,##0.00\xA0\xA4;(#,##0.00\xA0\xA4)",
      "fr-DZ": "#,##0.00\xA0\xA4;(#,##0.00\xA0\xA4)",
      "fr-GA": "#,##0.00\xA0\xA4;(#,##0.00\xA0\xA4)",
      "fr-GF": "#,##0.00\xA0\xA4;(#,##0.00\xA0\xA4)",
      "fr-GN": "#,##0.00\xA0\xA4;(#,##0.00\xA0\xA4)",
      "fr-GP": "#,##0.00\xA0\xA4;(#,##0.00\xA0\xA4)",
      "fr-GQ": "#,##0.00\xA0\xA4;(#,##0.00\xA0\xA4)",
      "fr-HT": "#,##0.00\xA0\xA4;(#,##0.00\xA0\xA4)",
      "fr-KM": "#,##0.00\xA0\xA4;(#,##0.00\xA0\xA4)",
      "fr-LU": "#,##0.00\xA0\xA4;(#,##0.00\xA0\xA4)",
      "fr-MA": "#,##0.00\xA0\xA4;(#,##0.00\xA0\xA4)",
      "fr-MC": "#,##0.00\xA0\xA4;(#,##0.00\xA0\xA4)",
      "fr-MF": "#,##0.00\xA0\xA4;(#,##0.00\xA0\xA4)",
      "fr-MG": "#,##0.00\xA0\xA4;(#,##0.00\xA0\xA4)",
      "fr-ML": "#,##0.00\xA0\xA4;(#,##0.00\xA0\xA4)",
      "fr-MQ": "#,##0.00\xA0\xA4;(#,##0.00\xA0\xA4)",
      "fr-MR": "#,##0.00\xA0\xA4;(#,##0.00\xA0\xA4)",
      "fr-MU": "#,##0.00\xA0\xA4;(#,##0.00\xA0\xA4)",
      "fr-NC": "#,##0.00\xA0\xA4;(#,##0.00\xA0\xA4)",
      "fr-NE": "#,##0.00\xA0\xA4;(#,##0.00\xA0\xA4)",
      "fr-PF": "#,##0.00\xA0\xA4;(#,##0.00\xA0\xA4)",
      "fr-PM": "#,##0.00\xA0\xA4;(#,##0.00\xA0\xA4)",
      "fr-RE": "#,##0.00\xA0\xA4;(#,##0.00\xA0\xA4)",
      "fr-RW": "#,##0.00\xA0\xA4;(#,##0.00\xA0\xA4)",
      "fr-SC": "#,##0.00\xA0\xA4;(#,##0.00\xA0\xA4)",
      "fr-SN": "#,##0.00\xA0\xA4;(#,##0.00\xA0\xA4)",
      "fr-SY": "#,##0.00\xA0\xA4;(#,##0.00\xA0\xA4)",
      "fr-TD": "#,##0.00\xA0\xA4;(#,##0.00\xA0\xA4)",
      "fr-TG": "#,##0.00\xA0\xA4;(#,##0.00\xA0\xA4)",
      "fr-TN": "#,##0.00\xA0\xA4;(#,##0.00\xA0\xA4)",
      "fr-VU": "#,##0.00\xA0\xA4;(#,##0.00\xA0\xA4)",
      "fr-WF": "#,##0.00\xA0\xA4;(#,##0.00\xA0\xA4)",
      "fr-YT": "#,##0.00\xA0\xA4;(#,##0.00\xA0\xA4)",
      fur: "\xA4\xA0#,##0.00",
      fy: "\xA4\xA0#,##0.00;(\xA4\xA0#,##0.00)",
      ga: "\xA4#,##0.00;(\xA4#,##0.00)",
      "ga-GB": "\xA4#,##0.00;(\xA4#,##0.00)",
      gd: "\xA4#,##0.00;(\xA4#,##0.00)",
      gl: "#,##0.00\xA0\xA4",
      gsw: "#,##0.00\xA0\xA4",
      "gsw-FR": "#,##0.00\xA0\xA4",
      "gsw-LI": "#,##0.00\xA0\xA4",
      gu: "\xA4#,##,##0.00;(\xA4#,##,##0.00)",
      guz: "\xA4#,##0.00;(\xA4#,##0.00)",
      gv: "\xA4#,##0.00",
      ha: "\xA4\xA0#,##0.00",
      "ha-GH": "\xA4\xA0#,##0.00",
      "ha-NE": "\xA4\xA0#,##0.00",
      haw: "\xA4#,##0.00;(\xA4#,##0.00)",
      he: "#,##0.00\xA0\xA4",
      hi: "\xA4#,##,##0.00",
      "hi-Latn": "\xA4#,##,##0.00",
      hr: "#,##0.00\xA0\xA4",
      "hr-BA": "#,##0.00\xA0\xA4",
      hsb: "#,##0.00\xA0\xA4",
      hu: "#,##0.00\xA0\xA4",
      hy: "#,##0.00\xA0\xA4",
      ia: "\xA4\xA0#,##0.00;(\xA4\xA0#,##0.00)",
      id: "\xA4#,##0.00",
      ig: "\xA4#,##0.00;(\xA4#,##0.00)",
      ii: "\xA4\xA0#,##0.00",
      is: "#,##0.00\xA0\xA4",
      it: "#,##0.00\xA0\xA4",
      "it-CH": "#,##0.00\xA0\xA4",
      "it-SM": "#,##0.00\xA0\xA4",
      "it-VA": "#,##0.00\xA0\xA4",
      ja: "\xA4#,##0.00;(\xA4#,##0.00)",
      jgo: "\xA4\xA0#,##0.00",
      jmc: "\xA4#,##0.00",
      jv: "\xA4\xA0#,##0.00",
      ka: "#,##0.00\xA0\xA4",
      kab: "#,##0.00\xA4",
      kam: "\xA4#,##0.00;(\xA4#,##0.00)",
      kde: "\xA4#,##0.00;(\xA4#,##0.00)",
      kea: "#,##0.00\xA0\xA4;(#,##0.00\xA0\xA4)",
      kgp: "\xA4\xA0#,##0.00",
      khq: "#,##0.00\xA4",
      ki: "\xA4#,##0.00;(\xA4#,##0.00)",
      kk: "#,##0.00\xA0\xA4",
      kkj: "\xA4\xA0#,##0.00",
      kl: "\xA4#,##0.00;\xA4-#,##0.00",
      kln: "\xA4#,##0.00;(\xA4#,##0.00)",
      km: "#,##0.00\xA4;(#,##0.00\xA4)",
      kn: "\xA4#,##0.00;(\xA4#,##0.00)",
      ko: "\xA4#,##0.00;(\xA4#,##0.00)",
      "ko-KP": "\xA4#,##0.00;(\xA4#,##0.00)",
      kok: "\xA4#,##0.00;(\xA4#,##0.00)",
      ks: "\xA4#,##0.00",
      "ks-Arab": "\xA4#,##0.00",
      "ks-Deva": "\xA4\xA0#,##0.00",
      ksb: "#,##0.00\xA4",
      ksf: "#,##0.00\xA0\xA4",
      ksh: "#,##0.00\xA0\xA4",
      ku: "#,##0.00\xA0\xA4;(#,##0.00\xA0\xA4)",
      kw: "\xA4#,##0.00",
      ky: "#,##0.00\xA0\xA4",
      lag: "\xA4\xA0#,##0.00",
      lb: "#,##0.00\xA0\xA4",
      lg: "#,##0.00\xA4",
      lkt: "\xA4\xA0#,##0.00",
      ln: "#,##0.00\xA0\xA4",
      "ln-AO": "#,##0.00\xA0\xA4",
      "ln-CF": "#,##0.00\xA0\xA4",
      "ln-CG": "#,##0.00\xA0\xA4",
      lo: "\xA4#,##0.00;\xA4-#,##0.00",
      lrc: "\xA4\xA0#,##0.00",
      "lrc-IQ": "\xA4\xA0#,##0.00",
      lt: "#,##0.00\xA0\xA4",
      lu: "#,##0.00\xA4",
      luo: "#,##0.00\xA4",
      luy: "\xA4#,##0.00;\xA4-\xA0#,##0.00",
      lv: "#,##0.00\xA0\xA4",
      mai: "\xA4\xA0#,##0.00",
      mas: "\xA4#,##0.00;(\xA4#,##0.00)",
      "mas-TZ": "\xA4#,##0.00;(\xA4#,##0.00)",
      mer: "\xA4#,##0.00;(\xA4#,##0.00)",
      mfe: "\xA4\xA0#,##0.00",
      mg: "\xA4#,##0.00",
      mgh: "\xA4\xA0#,##0.00",
      mgo: "\xA4\xA0#,##0.00",
      mi: "\xA4\xA0#,##0.00",
      mk: "#,##0.00\xA0\xA4",
      ml: "\xA4#,##0.00;(\xA4#,##0.00)",
      mn: "\xA4\xA0#,##0.00",
      mni: "\xA4\xA0#,##0.00",
      "mni-Beng": "\xA4\xA0#,##0.00",
      mr: "\xA4#,##0.00;(\xA4#,##0.00)",
      ms: "\xA4#,##0.00;(\xA4#,##0.00)",
      "ms-BN": "\xA4#,##0.00;(\xA4#,##0.00)",
      "ms-ID": "\xA4#,##0.00",
      "ms-SG": "\xA4#,##0.00;(\xA4#,##0.00)",
      mt: "\xA4#,##0.00",
      mua: "\xA4#,##0.00;(\xA4#,##0.00)",
      my: "\xA4\xA0#,##0.00",
      mzn: "\xA4\xA0#,##0.00",
      naq: "\xA4#,##0.00",
      nb: "\xA4\xA0#,##0.00;(\xA4\xA0#,##0.00)",
      "nb-SJ": "\xA4\xA0#,##0.00;(\xA4\xA0#,##0.00)",
      nd: "\xA4#,##0.00;(\xA4#,##0.00)",
      nds: "\xA4\xA0#,##0.00",
      "nds-NL": "\xA4\xA0#,##0.00",
      ne: "\xA4\xA0#,##,##0.00",
      "ne-IN": "\xA4\xA0#,##,##0.00",
      nl: "\xA4\xA0#,##0.00;(\xA4\xA0#,##0.00)",
      "nl-AW": "\xA4\xA0#,##0.00;(\xA4\xA0#,##0.00)",
      "nl-BE": "\xA4\xA0#,##0.00;(\xA4\xA0#,##0.00)",
      "nl-BQ": "\xA4\xA0#,##0.00;(\xA4\xA0#,##0.00)",
      "nl-CW": "\xA4\xA0#,##0.00;(\xA4\xA0#,##0.00)",
      "nl-SR": "\xA4\xA0#,##0.00;(\xA4\xA0#,##0.00)",
      "nl-SX": "\xA4\xA0#,##0.00;(\xA4\xA0#,##0.00)",
      nmg: "#,##0.00\xA0\xA4",
      nn: "#,##0.00\xA0\xA4",
      nnh: "\xA4\xA0#,##0.00",
      no: "\xA4\xA0#,##0.00;(\xA4\xA0#,##0.00)",
      nus: "\xA4#,##0.00;(\xA4#,##0.00)",
      nyn: "\xA4#,##0.00",
      om: "\xA4#,##0.00",
      "om-KE": "\xA4#,##0.00",
      or: "\xA4#,##0.00;(\xA4#,##0.00)",
      os: "\xA4\xA0#,##0.00",
      "os-RU": "\xA4\xA0#,##0.00",
      pa: "\xA4\xA0#,##0.00",
      "pa-Arab": "\xA4\xA0#,##0.00",
      "pa-Guru": "\xA4\xA0#,##0.00",
      pcm: "\xA4#,##0.00",
      pl: "#,##0.00\xA0\xA4;(#,##0.00\xA0\xA4)",
      ps: "\xA4#,##0.00;(\xA4#,##0.00)",
      "ps-PK": "\xA4#,##0.00;(\xA4#,##0.00)",
      pt: "\xA4\xA0#,##0.00",
      "pt-AO": "#,##0.00\xA0\xA4;(#,##0.00\xA0\xA4)",
      "pt-CH": "#,##0.00\xA0\xA4;(#,##0.00\xA0\xA4)",
      "pt-CV": "#,##0.00\xA0\xA4;(#,##0.00\xA0\xA4)",
      "pt-GQ": "#,##0.00\xA0\xA4;(#,##0.00\xA0\xA4)",
      "pt-GW": "#,##0.00\xA0\xA4;(#,##0.00\xA0\xA4)",
      "pt-LU": "#,##0.00\xA0\xA4;(#,##0.00\xA0\xA4)",
      "pt-MO": "#,##0.00\xA0\xA4;(#,##0.00\xA0\xA4)",
      "pt-MZ": "#,##0.00\xA0\xA4;(#,##0.00\xA0\xA4)",
      "pt-PT": "#,##0.00\xA0\xA4;(#,##0.00\xA0\xA4)",
      "pt-ST": "#,##0.00\xA0\xA4;(#,##0.00\xA0\xA4)",
      "pt-TL": "#,##0.00\xA0\xA4;(#,##0.00\xA0\xA4)",
      qu: "\xA4\xA0#,##0.00",
      "qu-BO": "\xA4\xA0#,##0.00",
      "qu-EC": "\xA4\xA0#,##0.00",
      rm: "#,##0.00\xA0\xA4",
      rn: "#,##0.00\xA4",
      ro: "#,##0.00\xA0\xA4;(#,##0.00\xA0\xA4)",
      "ro-MD": "#,##0.00\xA0\xA4;(#,##0.00\xA0\xA4)",
      rof: "\xA4#,##0.00",
      ru: "#,##0.00\xA0\xA4",
      "ru-BY": "#,##0.00\xA0\xA4",
      "ru-KG": "#,##0.00\xA0\xA4",
      "ru-KZ": "#,##0.00\xA0\xA4",
      "ru-MD": "#,##0.00\xA0\xA4",
      "ru-UA": "#,##0.00\xA0\xA4",
      rw: "\xA4\xA0#,##0.00",
      rwk: "#,##0.00\xA4",
      sa: "\xA4\xA0#,##0.00",
      sah: "#,##0.00\xA0\xA4",
      saq: "\xA4#,##0.00;(\xA4#,##0.00)",
      sat: "\xA4\xA0#,##0.00",
      "sat-Olck": "\xA4\xA0#,##0.00",
      sbp: "#,##0.00\xA4",
      sc: "#,##0.00\xA0\xA4",
      sd: "\xA4\xA0#,##0.00",
      "sd-Arab": "\xA4\xA0#,##0.00",
      "sd-Deva": "\xA4\xA0#,##0.00",
      se: "#,##0.00\xA0\xA4",
      "se-FI": "#,##0.00\xA0\xA4",
      "se-SE": "#,##0.00\xA0\xA4",
      seh: "#,##0.00\xA4",
      ses: "#,##0.00\xA4",
      sg: "\xA4#,##0.00;\xA4-#,##0.00",
      shi: "#,##0.00\xA4",
      "shi-Latn": "#,##0.00\xA4",
      "shi-Tfng": "#,##0.00\xA4",
      si: "\xA4#,##0.00;(\xA4#,##0.00)",
      sk: "#,##0.00\xA0\xA4;(#,##0.00\xA0\xA4)",
      sl: "#,##0.00\xA0\xA4;(#,##0.00\xA0\xA4)",
      smn: "#,##0.00\xA0\xA4",
      sn: "\xA4#,##0.00;(\xA4#,##0.00)",
      so: "\xA4#,##0.00;(\xA4#,##0.00)",
      "so-DJ": "\xA4#,##0.00;(\xA4#,##0.00)",
      "so-ET": "\xA4#,##0.00;(\xA4#,##0.00)",
      "so-KE": "\xA4#,##0.00;(\xA4#,##0.00)",
      sq: "#,##0.00\xA0\xA4;(#,##0.00\xA0\xA4)",
      "sq-MK": "#,##0.00\xA0\xA4;(#,##0.00\xA0\xA4)",
      "sq-XK": "#,##0.00\xA0\xA4;(#,##0.00\xA0\xA4)",
      sr: "#,##0.00\xA0\xA4;(#,##0.00\xA0\xA4)",
      "sr-Cyrl": "#,##0.00\xA0\xA4;(#,##0.00\xA0\xA4)",
      "sr-Cyrl-BA": "#,##0.00\xA0\xA4;(#,##0.00\xA0\xA4)",
      "sr-Cyrl-ME": "#,##0.00\xA0\xA4;(#,##0.00\xA0\xA4)",
      "sr-Cyrl-XK": "#,##0.00\xA0\xA4;(#,##0.00\xA0\xA4)",
      "sr-Latn": "#,##0.00\xA0\xA4;(#,##0.00\xA0\xA4)",
      "sr-Latn-BA": "#,##0.00\xA0\xA4;(#,##0.00\xA0\xA4)",
      "sr-Latn-ME": "#,##0.00\xA0\xA4;(#,##0.00\xA0\xA4)",
      "sr-Latn-XK": "#,##0.00\xA0\xA4;(#,##0.00\xA0\xA4)",
      su: "\xA4#,##0.00",
      "su-Latn": "\xA4#,##0.00",
      sv: "#,##0.00\xA0\xA4",
      "sv-AX": "#,##0.00\xA0\xA4",
      "sv-FI": "#,##0.00\xA0\xA4",
      sw: "\xA4\xA0#,##0.00",
      "sw-CD": "\xA4\xA0#,##0.00",
      "sw-KE": "\xA4\xA0#,##0.00",
      "sw-UG": "\xA4\xA0#,##0.00",
      ta: "\xA4#,##0.00;(\xA4#,##0.00)",
      "ta-LK": "\xA4#,##0.00;(\xA4#,##0.00)",
      "ta-MY": "\xA4#,##0.00;(\xA4#,##0.00)",
      "ta-SG": "\xA4#,##0.00;(\xA4#,##0.00)",
      te: "\xA4#,##0.00;(\xA4#,##0.00)",
      teo: "\xA4#,##0.00;(\xA4#,##0.00)",
      "teo-KE": "\xA4#,##0.00;(\xA4#,##0.00)",
      tg: "#,##0.00\xA0\xA4",
      th: "\xA4#,##0.00;(\xA4#,##0.00)",
      ti: "\xA4#,##0.00",
      "ti-ER": "\xA4#,##0.00",
      tk: "#,##0.00\xA0\xA4",
      to: "\xA4\xA0#,##0.00",
      tr: "\xA4#,##0.00;(\xA4#,##0.00)",
      "tr-CY": "\xA4#,##0.00;(\xA4#,##0.00)",
      tt: "#,##0.00\xA0\xA4",
      twq: "#,##0.00\xA4",
      tzm: "#,##0.00\xA0\xA4",
      ug: "\xA4#,##0.00;(\xA4#,##0.00)",
      uk: "#,##0.00\xA0\xA4",
      und: "\xA4\xA0#,##0.00",
      ur: "\xA4#,##0.00;(\xA4#,##0.00)",
      "ur-IN": "\xA4#,##0.00;(\xA4#,##0.00)",
      uz: "#,##0.00\xA0\xA4",
      "uz-Arab": "\xA4\xA0#,##0.00",
      "uz-Cyrl": "#,##0.00\xA0\xA4",
      "uz-Latn": "#,##0.00\xA0\xA4",
      vai: "\xA4#,##0.00;(\xA4#,##0.00)",
      "vai-Latn": "\xA4#,##0.00;(\xA4#,##0.00)",
      "vai-Vaii": "\xA4#,##0.00;(\xA4#,##0.00)",
      vi: "#,##0.00\xA0\xA4",
      vun: "\xA4#,##0.00",
      wae: "\xA4\xA0#,##0.00",
      wo: "\xA4\xA0#,##0.00",
      xh: "\xA4#,##0.00",
      xog: "#,##0.00\xA0\xA4",
      yav: "#,##0.00\xA0\xA4;(#,##0.00\xA0\xA4)",
      yi: "\xA4\xA0#,##0.00",
      yo: "\xA4#,##0.00;(\xA4#,##0.00)",
      "yo-BJ": "\xA4#,##0.00;(\xA4#,##0.00)",
      yrl: "\xA4\xA0#,##0.00",
      "yrl-CO": "\xA4\xA0#,##0.00",
      "yrl-VE": "\xA4\xA0#,##0.00",
      yue: "\xA4#,##0.00;(\xA4#,##0.00)",
      "yue-Hans": "\xA4#,##0.00;(\xA4#,##0.00)",
      "yue-Hant": "\xA4#,##0.00;(\xA4#,##0.00)",
      zgh: "#,##0.00\xA4",
      zh: "\xA4#,##0.00;(\xA4#,##0.00)",
      "zh-Hans": "\xA4#,##0.00;(\xA4#,##0.00)",
      "zh-Hans-HK": "\xA4#,##0.00;(\xA4#,##0.00)",
      "zh-Hans-MO": "\xA4#,##0.00;(\xA4#,##0.00)",
      "zh-Hans-SG": "\xA4#,##0.00;(\xA4#,##0.00)",
      "zh-Hant": "\xA4#,##0.00;(\xA4#,##0.00)",
      "zh-Hant-HK": "\xA4#,##0.00;(\xA4#,##0.00)",
      "zh-Hant-MO": "\xA4#,##0.00;(\xA4#,##0.00)",
      zu: "\xA4#,##0.00;(\xA4#,##0.00)"
    };
    exports.default = _default;
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/devextreme/cjs/localization/intl/number.js
var require_number2 = __commonJS({
  "node_modules/devextreme/cjs/localization/intl/number.js"(exports, module) {
    "use strict";
    exports.default = void 0;
    var _config = _interopRequireDefault(require_config());
    var _core = _interopRequireDefault(require_core());
    var _open_xml_currency_format = _interopRequireDefault(require_open_xml_currency_format());
    var _accounting_formats = _interopRequireDefault(require_accounting_formats());
    function _interopRequireDefault(obj) {
      return obj && obj.j ? obj : {
        default: obj
      };
    }
    var CURRENCY_STYLES = ["standard", "accounting"];
    var MAX_FRACTION_DIGITS = 20;
    var detectCurrencySymbolRegex = /([^\s0]+)?(\s*)0*[.,]*0*(\s*)([^\s0]+)?/;
    var formattersCache = {};
    var getFormatter = function(format) {
      var key = _core.default.locale() + "/" + JSON.stringify(format);
      if (!formattersCache[key]) {
        formattersCache[key] = new Intl.NumberFormat(_core.default.locale(), format).format;
      }
      return formattersCache[key];
    };
    var getCurrencyFormatter = function(currency) {
      return new Intl.NumberFormat(_core.default.locale(), {
        style: "currency",
        currency
      });
    };
    var _default = {
      engine: function() {
        return "intl";
      },
      Ef: function(value, format, formatConfig) {
        if ("exponential" === format) {
          return this.callBase.apply(this, arguments);
        }
        return getFormatter(this.Es(format, formatConfig, value))(value);
      },
      Es: function(format, formatConfig, value) {
        var config;
        if ("decimal" === format) {
          var fractionDigits = String(value).split(".")[1];
          config = {
            minimumIntegerDigits: formatConfig.precision || void 0,
            useGrouping: false,
            maximumFractionDigits: fractionDigits && fractionDigits.length,
            round: value < 0 ? "ceil" : "floor"
          };
        } else {
          config = this.Fs(formatConfig.precision);
        }
        if ("percent" === format) {
          config.style = "percent";
        } else if ("currency" === format) {
          var _formatConfig$useCurr;
          var useAccountingStyle = null !== (_formatConfig$useCurr = formatConfig.useCurrencyAccountingStyle) && void 0 !== _formatConfig$useCurr ? _formatConfig$useCurr : (0, _config.default)().defaultUseCurrencyAccountingStyle;
          config.style = "currency";
          config.currency = formatConfig.currency || (0, _config.default)().defaultCurrency;
          config.currencySign = CURRENCY_STYLES[+useAccountingStyle];
        }
        return config;
      },
      Fs: function(precision) {
        var config;
        if (null === precision) {
          config = {
            minimumFractionDigits: 0,
            maximumFractionDigits: MAX_FRACTION_DIGITS
          };
        } else {
          config = {
            minimumFractionDigits: precision || 0,
            maximumFractionDigits: precision || 0
          };
        }
        return config;
      },
      format: function(value, _format) {
        if ("number" !== typeof value) {
          return value;
        }
        _format = this.Mb(_format);
        if ("default" === _format.currency) {
          _format.currency = (0, _config.default)().defaultCurrency;
        }
        if (!_format || "function" !== typeof _format && !_format.type && !_format.formatter) {
          return getFormatter(_format)(value);
        }
        return this.callBase.apply(this, arguments);
      },
      Hl: function(currency) {
        var formatter = getCurrencyFormatter(currency);
        return this.Gs(formatter.format(0));
      },
      Gs: function(currencyValueString) {
        var match = detectCurrencySymbolRegex.exec(currencyValueString) || [];
        var position = match[1] ? "before" : "after";
        var symbol = match[1] || match[4] || "";
        var delimiter = match[2] || match[3] || "";
        return {
          position,
          symbol,
          delimiter
        };
      },
      getCurrencySymbol: function(currency) {
        if (!currency) {
          currency = (0, _config.default)().defaultCurrency;
        }
        var symbolInfo = this.Hl(currency);
        return {
          symbol: symbolInfo.symbol
        };
      },
      getOpenXmlCurrencyFormat: function(currency) {
        var targetCurrency = currency || (0, _config.default)().defaultCurrency;
        var currencySymbol = this.Hl(targetCurrency).symbol;
        var closestAccountingFormat = _core.default.getValueByClosestLocale(function(locale) {
          return _accounting_formats.default[locale];
        });
        return (0, _open_xml_currency_format.default)(currencySymbol, closestAccountingFormat);
      }
    };
    exports.default = _default;
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/devextreme/cjs/localization/number.js
var require_number3 = __commonJS({
  "node_modules/devextreme/cjs/localization/number.js"(exports, module) {
    "use strict";
    exports.default = void 0;
    var _dependency_injector = _interopRequireDefault(require_dependency_injector());
    var _common = require_common();
    var _iterator = require_iterator();
    var _type = require_type();
    var _number = require_number();
    var _config = _interopRequireDefault(require_config());
    var _errors = _interopRequireDefault(require_errors());
    var _utils = require_utils4();
    var _currency = _interopRequireDefault(require_currency());
    var _number2 = _interopRequireDefault(require_number2());
    function _interopRequireDefault(obj) {
      return obj && obj.j ? obj : {
        default: obj
      };
    }
    function _slicedToArray(arr, i) {
      return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
    }
    function _nonIterableRest() {
      throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _unsupportedIterableToArray(o, minLen) {
      if (!o) {
        return;
      }
      if ("string" === typeof o) {
        return _arrayLikeToArray(o, minLen);
      }
      var n = Object.prototype.toString.call(o).slice(8, -1);
      if ("Object" === n && o.constructor) {
        n = o.constructor.name;
      }
      if ("Map" === n || "Set" === n) {
        return Array.from(o);
      }
      if ("Arguments" === n || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) {
        return _arrayLikeToArray(o, minLen);
      }
    }
    function _arrayLikeToArray(arr, len) {
      if (null == len || len > arr.length) {
        len = arr.length;
      }
      for (var i = 0, arr2 = new Array(len); i < len; i++) {
        arr2[i] = arr[i];
      }
      return arr2;
    }
    function _iterableToArrayLimit(arr, i) {
      var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"];
      if (null != _i) {
        var _s, _e, _x, _r, _arr = [], _n = true, _d = false;
        try {
          if (_x = (_i = _i.call(arr)).next, 0 === i) {
            if (Object(_i) !== _i) {
              return;
            }
            _n = false;
          } else {
            for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = true) {
            }
          }
        } catch (err) {
          _d = true, _e = err;
        } finally {
          try {
            if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) {
              return;
            }
          } finally {
            if (_d) {
              throw _e;
            }
          }
        }
        return _arr;
      }
    }
    function _arrayWithHoles(arr) {
      if (Array.isArray(arr)) {
        return arr;
      }
    }
    var hasIntl = "undefined" !== typeof Intl;
    var MAX_LARGE_NUMBER_POWER = 4;
    var DECIMAL_BASE = 10;
    var NUMERIC_FORMATS = ["currency", "fixedpoint", "exponential", "percent", "decimal"];
    var LargeNumberFormatPostfixes = {
      1: "K",
      2: "M",
      3: "B",
      4: "T"
    };
    var LargeNumberFormatPowers = {
      largenumber: "auto",
      thousands: 1,
      millions: 2,
      billions: 3,
      trillions: 4
    };
    var numberLocalization = (0, _dependency_injector.default)({
      engine: function() {
        return "base";
      },
      numericFormats: NUMERIC_FORMATS,
      defaultLargeNumberFormatPostfixes: LargeNumberFormatPostfixes,
      Il: function(formatType) {
        var formatObject = {};
        if (!formatType || "string" !== typeof formatType) {
          return;
        }
        var formatList = formatType.toLowerCase().split(" ");
        (0, _iterator.each)(formatList, function(index, value) {
          if (NUMERIC_FORMATS.includes(value)) {
            formatObject.formatType = value;
          } else if (value in LargeNumberFormatPowers) {
            formatObject.power = LargeNumberFormatPowers[value];
          }
        });
        if (formatObject.power && !formatObject.formatType) {
          formatObject.formatType = "fixedpoint";
        }
        if (formatObject.formatType) {
          return formatObject;
        }
      },
      Jl: function(value, base, minPower, maxPower) {
        var number = Math.abs(value);
        var power = 0;
        if (number > 1) {
          while (number && number >= base && (void 0 === maxPower || power < maxPower)) {
            power++;
            number /= base;
          }
        } else if (number > 0 && number < 1) {
          while (number < 1 && (void 0 === minPower || power > minPower)) {
            power--;
            number *= base;
          }
        }
        return power;
      },
      Kl: function(number, power, base) {
        var result = number;
        while (power > 0) {
          result /= base;
          power--;
        }
        while (power < 0) {
          result *= base;
          power++;
        }
        return result;
      },
      Hs: function(value, formatObject, formatConfig) {
        if ("auto" === formatObject.power) {
          formatObject.power = this.Jl(value, 1e3, 0, MAX_LARGE_NUMBER_POWER);
        }
        if (formatObject.power) {
          value = this.Kl(value, formatObject.power, 1e3);
        }
        var powerPostfix = this.defaultLargeNumberFormatPostfixes[formatObject.power] || "";
        var result = this.Ef(value, formatObject.formatType, formatConfig);
        result = result.replace(/(\d|.$)(\D*)$/, "$1" + powerPostfix + "$2");
        return result;
      },
      Is: function(value, formatConfig) {
        var power = this.Jl(value, DECIMAL_BASE);
        var number = this.Kl(value, power, DECIMAL_BASE);
        if (void 0 === formatConfig.precision) {
          formatConfig.precision = 1;
        }
        if (number.toFixed(formatConfig.precision || 0) >= DECIMAL_BASE) {
          power++;
          number /= DECIMAL_BASE;
        }
        var powString = (power >= 0 ? "+" : "") + power.toString();
        return this.Ef(number, "fixedpoint", formatConfig) + "E" + powString;
      },
      Js: function(value, precision) {
        var multiplier = Math.pow(10, precision);
        var sign = value < 0 ? "-" : "";
        value = (Math.abs(value) * multiplier >>> 0) / multiplier;
        var result = value.toString();
        while (result.length < precision) {
          result = "0" + result;
        }
        return sign + result;
      },
      Ks: function(value) {
        var parts = value.toString().split(".");
        return parts[0].replace(/\B(?=(\d{3})+(?!\d))/g, (0, _config.default)().thousandsSeparator) + (parts[1] ? (0, _config.default)().decimalSeparator + parts[1] : "");
      },
      Ef: function(value, format, formatConfig) {
        if ("exponential" === format) {
          return this.Is(value, formatConfig);
        }
        if ("decimal" !== format && null !== formatConfig.precision) {
          formatConfig.precision = formatConfig.precision || 0;
        }
        if ("percent" === format) {
          value *= 100;
        }
        if (void 0 !== formatConfig.precision) {
          if ("decimal" === format) {
            value = this.Js(value, formatConfig.precision);
          } else {
            value = null === formatConfig.precision ? value.toPrecision() : (0, _utils.toFixed)(value, formatConfig.precision);
          }
        }
        if ("decimal" !== format) {
          value = this.Ks(value);
        } else {
          value = value.toString().replace(".", (0, _config.default)().decimalSeparator);
        }
        if ("percent" === format) {
          value += "%";
        }
        return value;
      },
      Mb: function(format) {
        if (!format) {
          return {};
        }
        if ("function" === typeof format) {
          return format;
        }
        if (!(0, _type.isPlainObject)(format)) {
          format = {
            type: format
          };
        }
        return format;
      },
      Ll: function() {
        return {
          decimalSeparator: this.getDecimalSeparator(),
          thousandsSeparator: this.getThousandsSeparator()
        };
      },
      getThousandsSeparator: function() {
        return this.format(1e4, "fixedPoint")[2];
      },
      getDecimalSeparator: function() {
        return this.format(1.2, {
          type: "fixedPoint",
          precision: 1
        })[1];
      },
      convertDigits: function(value, toStandard) {
        var digits = this.format(90, "decimal");
        if ("string" !== typeof value || "0" === digits[1]) {
          return value;
        }
        var fromFirstDigit = toStandard ? digits[1] : "0";
        var toFirstDigit = toStandard ? "0" : digits[1];
        var fromLastDigit = toStandard ? digits[0] : "9";
        var regExp = new RegExp("[" + fromFirstDigit + "-" + fromLastDigit + "]", "g");
        return value.replace(regExp, function(char) {
          return String.fromCharCode(char.charCodeAt(0) + (toFirstDigit.charCodeAt(0) - fromFirstDigit.charCodeAt(0)));
        });
      },
      getNegativeEtalonRegExp: function(format) {
        var separators = this.Ll();
        var digitalRegExp = new RegExp("[0-9" + (0, _common.escapeRegExp)(separators.decimalSeparator + separators.thousandsSeparator) + "]+", "g");
        var negativeEtalon = this.format(-1, format).replace(digitalRegExp, "1");
        ["\\", "(", ")", "[", "]", "*", "+", "$", "^", "?", "|", "{", "}"].forEach(function(char) {
          negativeEtalon = negativeEtalon.replace(new RegExp("\\".concat(char), "g"), "\\".concat(char));
        });
        negativeEtalon = negativeEtalon.replace(/ /g, "\\s");
        negativeEtalon = negativeEtalon.replace(/1/g, ".*");
        return new RegExp(negativeEtalon, "g");
      },
      getSign: function(text, format) {
        if (!format) {
          if ("-" === text.replace(/[^0-9-]/g, "").charAt(0)) {
            return -1;
          }
          return 1;
        }
        var negativeEtalon = this.getNegativeEtalonRegExp(format);
        return text.match(negativeEtalon) ? -1 : 1;
      },
      format: function(value, _format) {
        if ("number" !== typeof value) {
          return value;
        }
        if ("number" === typeof _format) {
          return value;
        }
        _format = _format && _format.formatter || _format;
        if ("function" === typeof _format) {
          return _format(value);
        }
        _format = this.Mb(_format);
        if (!_format.type) {
          _format.type = "decimal";
        }
        var numberConfig = this.Il(_format.type);
        if (!numberConfig) {
          var formatterConfig = this.Ll();
          formatterConfig.unlimitedIntegerDigits = _format.unlimitedIntegerDigits;
          return this.convertDigits((0, _number.getFormatter)(_format.type, formatterConfig)(value));
        }
        return this.Hs(value, numberConfig, _format);
      },
      parse: function(text, format) {
        if (!text) {
          return;
        }
        if (format && format.parser) {
          return format.parser(text);
        }
        text = this.convertDigits(text, true);
        if (format && "string" !== typeof format) {
          _errors.default.log("W0011");
        }
        var decimalSeparator = this.getDecimalSeparator();
        var regExp = new RegExp("[^0-9" + (0, _common.escapeRegExp)(decimalSeparator) + "]", "g");
        var cleanedText = text.replace(regExp, "").replace(decimalSeparator, ".").replace(/\.$/g, "");
        if ("." === cleanedText || "" === cleanedText) {
          return null;
        }
        if (this.Ls(cleanedText) > 15) {
          return NaN;
        }
        var parsed = +cleanedText * this.getSign(text, format);
        format = this.Mb(format);
        var formatConfig = this.Il(format.type);
        var power = null === formatConfig || void 0 === formatConfig ? void 0 : formatConfig.power;
        if (power) {
          if ("auto" === power) {
            var match = text.match(/\d(K|M|B|T)/);
            if (match) {
              power = Object.keys(LargeNumberFormatPostfixes).find(function(power2) {
                return LargeNumberFormatPostfixes[power2] === match[1];
              });
            }
          }
          parsed *= Math.pow(10, 3 * power);
        }
        if ("percent" === (null === formatConfig || void 0 === formatConfig ? void 0 : formatConfig.formatType)) {
          parsed /= 100;
        }
        return parsed;
      },
      Ls: function(text) {
        var _text$split = text.split("."), _text$split2 = _slicedToArray(_text$split, 2), integer = _text$split2[0], fractional = _text$split2[1];
        var calcDigitsAfterLeadingZeros = function(digits) {
          var index = -1;
          for (var i = 0; i < digits.length; i++) {
            if ("0" !== digits[i]) {
              index = i;
              break;
            }
          }
          return index > -1 ? digits.length - index : 0;
        };
        var result = 0;
        if (integer) {
          result += calcDigitsAfterLeadingZeros(integer.split(""));
        }
        if (fractional) {
          result += calcDigitsAfterLeadingZeros(fractional.split("").reverse());
        }
        return result;
      }
    });
    numberLocalization.inject(_currency.default);
    if (hasIntl) {
      numberLocalization.inject(_number2.default);
    }
    var _default = numberLocalization;
    exports.default = _default;
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/devextreme/cjs/localization/ldml/date.format.js
var require_date_format = __commonJS({
  "node_modules/devextreme/cjs/localization/ldml/date.format.js"(exports) {
    "use strict";
    exports.getFormat = void 0;
    var _number = _interopRequireDefault(require_number3());
    function _interopRequireDefault(obj) {
      return obj && obj.j ? obj : {
        default: obj
      };
    }
    var ARABIC_COMMA = "\u060C";
    var FORMAT_SEPARATORS = " .,:;/\\<>()-[]" + ARABIC_COMMA;
    var AM_PM_PATTERN = ". m.";
    var checkDigit = function(char) {
      var code = char && _number.default.convertDigits(char, false).charCodeAt(0);
      var zeroCode = _number.default.convertDigits("0", false).charCodeAt(0);
      return zeroCode <= code && code < zeroCode + 10;
    };
    var checkPatternContinue = function(text, patterns, index, isDigit) {
      var char = text[index];
      var nextChar = text[index + 1];
      if (!isDigit) {
        if ("." === char || " " === char && text.slice(index - 1, index + 3) === AM_PM_PATTERN) {
          return true;
        }
        if ("-" === char && !checkDigit(nextChar)) {
          return true;
        }
      }
      var isDigitChanged = isDigit && patterns.some(function(pattern) {
        return text[index] !== pattern[index];
      });
      return FORMAT_SEPARATORS.indexOf(char) < 0 && isDigit === checkDigit(char) && (!isDigit || isDigitChanged);
    };
    var getPatternStartIndex = function(defaultPattern, index) {
      if (!checkDigit(defaultPattern[index])) {
        while (index > 0 && !checkDigit(defaultPattern[index - 1]) && ("." === defaultPattern[index - 1] || FORMAT_SEPARATORS.indexOf(defaultPattern[index - 1]) < 0)) {
          index--;
        }
      }
      return index;
    };
    var getDifference = function(defaultPattern, patterns, processedIndexes, isDigit) {
      var i = 0;
      var result = [];
      var patternsFilter = function(pattern) {
        return defaultPattern[i] !== pattern[i] && (void 0 === isDigit || checkDigit(defaultPattern[i]) === isDigit);
      };
      if (!Array.isArray(patterns)) {
        patterns = [patterns];
      }
      for (i = 0; i < defaultPattern.length; i++) {
        if (processedIndexes.indexOf(i) < 0 && patterns.filter(patternsFilter).length) {
          i = getPatternStartIndex(defaultPattern, i);
          do {
            isDigit = checkDigit(defaultPattern[i]);
            if (!result.length && !isDigit && checkDigit(patterns[0][i])) {
              break;
            }
            result.push(i);
            processedIndexes.unshift(i);
            i++;
          } while (defaultPattern[i] && checkPatternContinue(defaultPattern, patterns, i, isDigit));
          break;
        }
      }
      if (1 === result.length && ("0" === defaultPattern[processedIndexes[0] - 1] || "\u0660" === defaultPattern[processedIndexes[0] - 1])) {
        processedIndexes.unshift(processedIndexes[0] - 1);
      }
      return result;
    };
    var replaceCharsCore = function(pattern, indexes, char, patternPositions) {
      var baseCharIndex = indexes[0];
      var patternIndex = baseCharIndex < patternPositions.length ? patternPositions[baseCharIndex] : baseCharIndex;
      indexes.forEach(function(_, index) {
        pattern = pattern.substr(0, patternIndex + index) + (char.length > 1 ? char[index] : char) + pattern.substr(patternIndex + index + 1);
      });
      if (1 === indexes.length) {
        pattern = pattern.replace("0" + char, char + char);
        pattern = pattern.replace("\u0660" + char, char + char);
      }
      return pattern;
    };
    var replaceChars = function(pattern, indexes, char, patternPositions) {
      var i;
      var index;
      var patternIndex;
      if (!checkDigit(pattern[indexes[0]] || "0")) {
        var letterCount = Math.max(indexes.length <= 3 ? 3 : 4, char.length);
        while (indexes.length > letterCount) {
          index = indexes.pop();
          patternIndex = patternPositions[index];
          patternPositions[index] = -1;
          for (i = index + 1; i < patternPositions.length; i++) {
            patternPositions[i]--;
          }
          pattern = pattern.substr(0, patternIndex) + pattern.substr(patternIndex + 1);
        }
        index = indexes[indexes.length - 1] + 1, patternIndex = index < patternPositions.length ? patternPositions[index] : index;
        while (indexes.length < letterCount) {
          indexes.push(indexes[indexes.length - 1] + 1);
          for (i = index; i < patternPositions.length; i++) {
            patternPositions[i]++;
          }
          pattern = pattern.substr(0, patternIndex) + " " + pattern.substr(patternIndex);
        }
      }
      pattern = replaceCharsCore(pattern, indexes, char, patternPositions);
      return pattern;
    };
    var formatValue = function(value, formatter) {
      if (Array.isArray(value)) {
        return value.map(function(value2) {
          return (formatter(value2) || "").toString();
        });
      }
      return (formatter(value) || "").toString();
    };
    var ESCAPE_CHARS_REGEXP = /[a-zA-Z]/g;
    var escapeChars = function(pattern, defaultPattern, processedIndexes, patternPositions) {
      var escapeIndexes = defaultPattern.split("").map(function(char, index) {
        if (processedIndexes.indexOf(index) < 0 && (char.match(ESCAPE_CHARS_REGEXP) || "'" === char)) {
          return patternPositions[index];
        }
        return -1;
      });
      pattern = pattern.split("").map(function(char, index) {
        var result = char;
        var isCurrentCharEscaped = escapeIndexes.indexOf(index) >= 0;
        var isPrevCharEscaped = index > 0 && escapeIndexes.indexOf(index - 1) >= 0;
        var isNextCharEscaped = escapeIndexes.indexOf(index + 1) >= 0;
        if (isCurrentCharEscaped) {
          if (!isPrevCharEscaped) {
            result = "'" + result;
          }
          if (!isNextCharEscaped) {
            result += "'";
          }
        }
        return result;
      }).join("");
      return pattern;
    };
    var getFormat = function(formatter) {
      var processedIndexes = [];
      var defaultPattern = formatValue(new Date(2009, 8, 8, 6, 5, 4), formatter);
      var patternPositions = defaultPattern.split("").map(function(_, index) {
        return index;
      });
      var result = defaultPattern;
      var replacedPatterns = {};
      var datePatterns = [{
        date: new Date(2009, 8, 8, 6, 5, 4, 111),
        pattern: "S"
      }, {
        date: new Date(2009, 8, 8, 6, 5, 2),
        pattern: "s"
      }, {
        date: new Date(2009, 8, 8, 6, 2, 4),
        pattern: "m"
      }, {
        date: new Date(2009, 8, 8, 18, 5, 4),
        pattern: "H",
        isDigit: true
      }, {
        date: new Date(2009, 8, 8, 2, 5, 4),
        pattern: "h",
        isDigit: true
      }, {
        date: new Date(2009, 8, 8, 18, 5, 4),
        pattern: "a",
        isDigit: false
      }, {
        date: new Date(2009, 8, 1, 6, 5, 4),
        pattern: "d"
      }, {
        date: [new Date(2009, 8, 2, 6, 5, 4), new Date(2009, 8, 3, 6, 5, 4), new Date(2009, 8, 4, 6, 5, 4)],
        pattern: "E"
      }, {
        date: new Date(2009, 9, 6, 6, 5, 4),
        pattern: "M"
      }, {
        date: new Date(1998, 8, 8, 6, 5, 4),
        pattern: "y"
      }];
      if (!result) {
        return;
      }
      datePatterns.forEach(function(test) {
        var diff = getDifference(defaultPattern, formatValue(test.date, formatter), processedIndexes, test.isDigit);
        var pattern = "M" === test.pattern && !replacedPatterns.d ? "L" : test.pattern;
        result = replaceChars(result, diff, pattern, patternPositions);
        replacedPatterns[pattern] = diff.length;
      });
      result = escapeChars(result, defaultPattern, processedIndexes, patternPositions);
      if (processedIndexes.length) {
        return result;
      }
    };
    exports.getFormat = getFormat;
  }
});

// node_modules/devextreme/cjs/localization/ldml/date.parser.js
var require_date_parser = __commonJS({
  "node_modules/devextreme/cjs/localization/ldml/date.parser.js"(exports) {
    "use strict";
    exports.isPossibleForParsingFormat = exports.getRegExpInfo = exports.getPatternSetters = exports.getParser = void 0;
    var _common = require_common();
    var _console = require_console();
    var FORMAT_TYPES = {
      3: "abbreviated",
      4: "wide",
      5: "narrow"
    };
    var monthRegExpGenerator = function(count, dateParts) {
      if (count > 2) {
        return Object.keys(FORMAT_TYPES).map(function(count2) {
          return ["format", "standalone"].map(function(type) {
            return dateParts.getMonthNames(FORMAT_TYPES[count2], type).join("|");
          }).join("|");
        }).join("|");
      }
      return 2 === count ? "1[012]|0?[1-9]" : "0??[1-9]|1[012]";
    };
    var PATTERN_REGEXPS = {
      ":": function(count, dateParts) {
        var countSuffix = count > 1 ? "{".concat(count, "}") : "";
        var timeSeparator = (0, _common.escapeRegExp)(dateParts.getTimeSeparator());
        ":" !== timeSeparator && (timeSeparator = "".concat(timeSeparator, "|:"));
        return "".concat(timeSeparator).concat(countSuffix);
      },
      y: function(count) {
        return 2 === count ? "[0-9]{".concat(count, "}") : "[0-9]+?";
      },
      M: monthRegExpGenerator,
      L: monthRegExpGenerator,
      Q: function(count, dateParts) {
        if (count > 2) {
          return dateParts.getQuarterNames(FORMAT_TYPES[count], "format").join("|");
        }
        return "0?[1-4]";
      },
      E: function(count, dateParts) {
        return "\\D*";
      },
      a: function(count, dateParts) {
        return dateParts.getPeriodNames(FORMAT_TYPES[count < 3 ? 3 : count], "format").join("|");
      },
      d: function(count) {
        return 2 === count ? "3[01]|[12][0-9]|0?[1-9]" : "0??[1-9]|[12][0-9]|3[01]";
      },
      H: function(count) {
        return 2 === count ? "2[0-3]|1[0-9]|0?[0-9]" : "0??[0-9]|1[0-9]|2[0-3]";
      },
      h: function(count) {
        return 2 === count ? "1[012]|0?[1-9]" : "0??[1-9]|1[012]";
      },
      m: function(count) {
        return 2 === count ? "[1-5][0-9]|0?[0-9]" : "0??[0-9]|[1-5][0-9]";
      },
      s: function(count) {
        return 2 === count ? "[1-5][0-9]|0?[0-9]" : "0??[0-9]|[1-5][0-9]";
      },
      S: function(count) {
        return "[0-9]{1,".concat(count, "}");
      },
      w: function(count) {
        return 2 === count ? "[1-5][0-9]|0?[0-9]" : "0??[0-9]|[1-5][0-9]";
      }
    };
    var parseNumber = Number;
    var caseInsensitiveIndexOf = function(array, value) {
      return array.map(function(item) {
        return item.toLowerCase();
      }).indexOf(value.toLowerCase());
    };
    var monthPatternParser = function(text, count, dateParts) {
      if (count > 2) {
        return ["format", "standalone"].map(function(type) {
          return Object.keys(FORMAT_TYPES).map(function(count2) {
            var monthNames = dateParts.getMonthNames(FORMAT_TYPES[count2], type);
            return caseInsensitiveIndexOf(monthNames, text);
          });
        }).reduce(function(a, b) {
          return a.concat(b);
        }).filter(function(index) {
          return index >= 0;
        })[0];
      }
      return parseNumber(text) - 1;
    };
    var PATTERN_PARSERS = {
      y: function(text, count) {
        var year = parseNumber(text);
        if (2 === count) {
          return year < 30 ? 2e3 + year : 1900 + year;
        }
        return year;
      },
      M: monthPatternParser,
      L: monthPatternParser,
      Q: function(text, count, dateParts) {
        if (count > 2) {
          return dateParts.getQuarterNames(FORMAT_TYPES[count], "format").indexOf(text);
        }
        return parseNumber(text) - 1;
      },
      E: function(text, count, dateParts) {
        var dayNames = dateParts.getDayNames(FORMAT_TYPES[count < 3 ? 3 : count], "format");
        return caseInsensitiveIndexOf(dayNames, text);
      },
      a: function(text, count, dateParts) {
        var periodNames = dateParts.getPeriodNames(FORMAT_TYPES[count < 3 ? 3 : count], "format");
        return caseInsensitiveIndexOf(periodNames, text);
      },
      d: parseNumber,
      H: parseNumber,
      h: parseNumber,
      m: parseNumber,
      s: parseNumber,
      S: function(text, count) {
        count = Math.max(count, 3);
        text = text.slice(0, 3);
        while (count < 3) {
          text += "0";
          count++;
        }
        return parseNumber(text);
      }
    };
    var ORDERED_PATTERNS = ["y", "M", "d", "h", "m", "s", "S"];
    var PATTERN_SETTERS = {
      y: "setFullYear",
      M: "setMonth",
      L: "setMonth",
      a: function(date, value, datePartValues) {
        var hours = date.getHours();
        var hourPartValue = datePartValues.h;
        if (void 0 !== hourPartValue && hourPartValue !== hours) {
          hours--;
        }
        if (!value && 12 === hours) {
          hours = 0;
        } else if (value && 12 !== hours) {
          hours += 12;
        }
        date.setHours(hours);
      },
      d: "setDate",
      H: "setHours",
      h: "setHours",
      m: "setMinutes",
      s: "setSeconds",
      S: "setMilliseconds"
    };
    var getSameCharCount = function(text, index) {
      var char = text[index];
      if (!char) {
        return 0;
      }
      var count = 0;
      do {
        index++;
        count++;
      } while (text[index] === char);
      return count;
    };
    var createPattern = function(char, count) {
      var result = "";
      for (var i = 0; i < count; i++) {
        result += char;
      }
      return result;
    };
    var getRegExpInfo = function(format, dateParts) {
      var regexpText = "";
      var stubText = "";
      var isEscaping;
      var patterns = [];
      var addPreviousStub = function() {
        if (stubText) {
          patterns.push("'".concat(stubText, "'"));
          regexpText += "".concat((0, _common.escapeRegExp)(stubText), ")");
          stubText = "";
        }
      };
      for (var i = 0; i < format.length; i++) {
        var char = format[i];
        var isEscapeChar = "'" === char;
        var regexpPart = PATTERN_REGEXPS[char];
        if (isEscapeChar) {
          isEscaping = !isEscaping;
          if ("'" !== format[i - 1]) {
            continue;
          }
        }
        if (regexpPart && !isEscaping) {
          var count = getSameCharCount(format, i);
          var pattern = createPattern(char, count);
          addPreviousStub();
          patterns.push(pattern);
          regexpText += "(".concat(regexpPart(count, dateParts), ")");
          i += count - 1;
        } else {
          if (!stubText) {
            regexpText += "(";
          }
          stubText += char;
        }
      }
      addPreviousStub();
      if (!isPossibleForParsingFormat(patterns)) {
        _console.logger.warn("The following format may be parsed incorrectly: ".concat(format, "."));
      }
      return {
        patterns,
        regexp: new RegExp("^".concat(regexpText, "$"), "i")
      };
    };
    exports.getRegExpInfo = getRegExpInfo;
    var digitFieldSymbols = ["d", "H", "h", "m", "s", "w", "M", "L", "Q"];
    var isPossibleForParsingFormat = function(patterns) {
      var isDigitPattern = function(pattern) {
        if (!pattern) {
          return false;
        }
        var char = pattern[0];
        return ["y", "S"].includes(char) || digitFieldSymbols.includes(char) && pattern.length < 3;
      };
      var possibleForParsing = true;
      var ambiguousDigitPatternsCount = 0;
      return patterns.every(function(pattern, index, patterns2) {
        if (isDigitPattern(pattern)) {
          if (function(pattern2) {
            return "S" !== pattern2[0] && 2 !== pattern2.length;
          }(pattern)) {
            possibleForParsing = ++ambiguousDigitPatternsCount < 2;
          }
          if (!isDigitPattern(patterns2[index + 1])) {
            ambiguousDigitPatternsCount = 0;
          }
        }
        return possibleForParsing;
      });
    };
    exports.isPossibleForParsingFormat = isPossibleForParsingFormat;
    var getPatternSetters = function() {
      return PATTERN_SETTERS;
    };
    exports.getPatternSetters = getPatternSetters;
    var setPatternPart = function(date, pattern, text, dateParts, datePartValues) {
      var patternChar = pattern[0];
      var partSetter = PATTERN_SETTERS[patternChar];
      var partParser = PATTERN_PARSERS[patternChar];
      if (partSetter && partParser) {
        var value = partParser(text, pattern.length, dateParts);
        datePartValues[pattern] = value;
        if (date[partSetter]) {
          date[partSetter](value);
        } else {
          partSetter(date, value, datePartValues);
        }
      }
    };
    var setPatternPartFromNow = function(date, pattern, now) {
      var setterName = PATTERN_SETTERS[pattern];
      var getterName = "g" + setterName.substr(1);
      var value = now[getterName]();
      date[setterName](value);
    };
    var getShortPatterns = function(fullPatterns) {
      return fullPatterns.map(function(pattern) {
        if ("'" === pattern[0]) {
          return "";
        } else {
          return "H" === pattern[0] ? "h" : pattern[0];
        }
      });
    };
    var getMaxOrderedPatternIndex = function(patterns) {
      var indexes = patterns.map(function(pattern) {
        return ORDERED_PATTERNS.indexOf(pattern);
      });
      return Math.max.apply(Math, indexes);
    };
    var getOrderedFormatPatterns = function(formatPatterns) {
      var otherPatterns = formatPatterns.filter(function(pattern) {
        return ORDERED_PATTERNS.indexOf(pattern) < 0;
      });
      return ORDERED_PATTERNS.concat(otherPatterns);
    };
    var getParser = function(format, dateParts) {
      var regExpInfo = getRegExpInfo(format, dateParts);
      return function(text) {
        var regExpResult = regExpInfo.regexp.exec(text);
        if (regExpResult) {
          var now = /* @__PURE__ */ new Date();
          var date = new Date(now.getFullYear(), 0, 1);
          var formatPatterns = getShortPatterns(regExpInfo.patterns);
          var maxPatternIndex = getMaxOrderedPatternIndex(formatPatterns);
          var orderedFormatPatterns = getOrderedFormatPatterns(formatPatterns);
          var datePartValues = {};
          orderedFormatPatterns.forEach(function(pattern, index) {
            if (!pattern || index < ORDERED_PATTERNS.length && index > maxPatternIndex) {
              return;
            }
            var patternIndex = formatPatterns.indexOf(pattern);
            if (patternIndex >= 0) {
              var regExpPattern = regExpInfo.patterns[patternIndex];
              var regExpText = regExpResult[patternIndex + 1];
              setPatternPart(date, regExpPattern, regExpText, dateParts, datePartValues);
            } else {
              setPatternPartFromNow(date, pattern, now);
            }
          });
          return date;
        }
        return null;
      };
    };
    exports.getParser = getParser;
  }
});

// node_modules/devextreme/cjs/localization/cldr-data/first_day_of_week_data.js
var require_first_day_of_week_data = __commonJS({
  "node_modules/devextreme/cjs/localization/cldr-data/first_day_of_week_data.js"(exports, module) {
    "use strict";
    exports.default = void 0;
    var _default = {
      "af-NA": 1,
      agq: 1,
      ak: 1,
      ar: 6,
      "ar-EH": 1,
      "ar-ER": 1,
      "ar-KM": 1,
      "ar-LB": 1,
      "ar-MA": 1,
      "ar-MR": 1,
      "ar-PS": 1,
      "ar-SO": 1,
      "ar-SS": 1,
      "ar-TD": 1,
      "ar-TN": 1,
      asa: 1,
      ast: 1,
      az: 1,
      "az-Cyrl": 1,
      bas: 1,
      be: 1,
      bem: 1,
      bez: 1,
      bg: 1,
      bm: 1,
      br: 1,
      bs: 1,
      "bs-Cyrl": 1,
      ca: 1,
      ce: 1,
      cgg: 1,
      ckb: 6,
      cs: 1,
      cy: 1,
      da: 1,
      de: 1,
      dje: 1,
      dsb: 1,
      dua: 1,
      dyo: 1,
      ee: 1,
      el: 1,
      "en-001": 1,
      "en-AE": 6,
      "en-BI": 1,
      "en-MP": 1,
      "en-MV": 5,
      "en-SD": 6,
      eo: 1,
      es: 1,
      et: 1,
      eu: 1,
      ewo: 1,
      fa: 6,
      ff: 1,
      "ff-Adlm": 1,
      fi: 1,
      fo: 1,
      fr: 1,
      "fr-DJ": 6,
      "fr-DZ": 6,
      "fr-SY": 6,
      fur: 1,
      fy: 1,
      ga: 1,
      gd: 1,
      gl: 1,
      gsw: 1,
      gv: 1,
      ha: 1,
      hr: 1,
      hsb: 1,
      hu: 1,
      hy: 1,
      ia: 1,
      ig: 1,
      is: 1,
      it: 1,
      jgo: 1,
      jmc: 1,
      ka: 1,
      kab: 6,
      kde: 1,
      kea: 1,
      khq: 1,
      kk: 1,
      kkj: 1,
      kl: 1,
      "ko-KP": 1,
      ksb: 1,
      ksf: 1,
      ksh: 1,
      ku: 1,
      kw: 1,
      ky: 1,
      lag: 1,
      lb: 1,
      lg: 1,
      ln: 1,
      lrc: 6,
      lt: 1,
      lu: 1,
      lv: 1,
      "mas-TZ": 1,
      mfe: 1,
      mg: 1,
      mgo: 1,
      mi: 1,
      mk: 1,
      mn: 1,
      ms: 1,
      mua: 1,
      mzn: 6,
      naq: 1,
      nds: 1,
      nl: 1,
      nmg: 1,
      nnh: 1,
      no: 1,
      nus: 1,
      nyn: 1,
      os: 1,
      pcm: 1,
      pl: 1,
      ps: 6,
      "pt-AO": 1,
      "pt-CH": 1,
      "pt-CV": 1,
      "pt-GQ": 1,
      "pt-GW": 1,
      "pt-LU": 1,
      "pt-ST": 1,
      "pt-TL": 1,
      "qu-BO": 1,
      "qu-EC": 1,
      rm: 1,
      rn: 1,
      ro: 1,
      rof: 1,
      ru: 1,
      rw: 1,
      rwk: 1,
      sah: 1,
      sbp: 1,
      sc: 1,
      se: 1,
      ses: 1,
      sg: 1,
      shi: 1,
      "shi-Latn": 1,
      si: 1,
      sk: 1,
      sl: 1,
      smn: 1,
      so: 1,
      "so-DJ": 6,
      sq: 1,
      sr: 1,
      "sr-Latn": 1,
      sv: 1,
      sw: 1,
      "ta-LK": 1,
      "ta-MY": 1,
      teo: 1,
      tg: 1,
      "ti-ER": 1,
      tk: 1,
      to: 1,
      tr: 1,
      tt: 1,
      twq: 1,
      tzm: 1,
      uk: 1,
      uz: 1,
      "uz-Arab": 6,
      "uz-Cyrl": 1,
      vai: 1,
      "vai-Latn": 1,
      vi: 1,
      vun: 1,
      wae: 1,
      wo: 1,
      xog: 1,
      yav: 1,
      yi: 1,
      yo: 1,
      zgh: 1
    };
    exports.default = _default;
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/devextreme/cjs/localization/intl/date.js
var require_date3 = __commonJS({
  "node_modules/devextreme/cjs/localization/intl/date.js"(exports, module) {
    "use strict";
    exports.default = void 0;
    var _extend = require_extend();
    var _core = _interopRequireDefault(require_core());
    function _interopRequireDefault(obj) {
      return obj && obj.j ? obj : {
        default: obj
      };
    }
    function _typeof(obj) {
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    var SYMBOLS_TO_REMOVE_REGEX = /[\u200E\u200F]/g;
    var NARROW_NO_BREAK_SPACE_REGEX = /[\u202F]/g;
    var getIntlFormatter = function(format) {
      return function(date) {
        if (!format.timeZoneName) {
          var year = date.getFullYear();
          var recognizableAsTwentyCentury = String(year).length < 3;
          var temporaryYearValue = recognizableAsTwentyCentury ? year + 400 : year;
          var utcDate = new Date(Date.UTC(temporaryYearValue, date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds()));
          if (recognizableAsTwentyCentury) {
            utcDate.setFullYear(year);
          }
          var utcFormat = (0, _extend.extend)({
            timeZone: "UTC"
          }, format);
          return formatDateTime(utcDate, utcFormat);
        }
        return formatDateTime(date, format);
      };
    };
    var formattersCache = {};
    var getFormatter = function(format) {
      var key = _core.default.locale() + "/" + JSON.stringify(format);
      if (!formattersCache[key]) {
        formattersCache[key] = new Intl.DateTimeFormat(_core.default.locale(), format).format;
      }
      return formattersCache[key];
    };
    function formatDateTime(date, format) {
      return getFormatter(format)(date).replace(SYMBOLS_TO_REMOVE_REGEX, "").replace(NARROW_NO_BREAK_SPACE_REGEX, " ");
    }
    var formatNumber = function(number) {
      return new Intl.NumberFormat(_core.default.locale()).format(number);
    };
    var getAlternativeNumeralsMap = function() {
      var numeralsMapCache = {};
      return function(locale) {
        if (!(locale in numeralsMapCache)) {
          if ("0" === formatNumber(0)) {
            numeralsMapCache[locale] = false;
            return false;
          }
          numeralsMapCache[locale] = {};
          for (var i = 0; i < 10; ++i) {
            numeralsMapCache[locale][formatNumber(i)] = i;
          }
        }
        return numeralsMapCache[locale];
      };
    }();
    var normalizeNumerals = function(dateString) {
      var alternativeNumeralsMap = getAlternativeNumeralsMap(_core.default.locale());
      if (!alternativeNumeralsMap) {
        return dateString;
      }
      return dateString.split("").map(function(sign) {
        return sign in alternativeNumeralsMap ? String(alternativeNumeralsMap[sign]) : sign;
      }).join("");
    };
    var removeLeadingZeroes = function(str) {
      return str.replace(/(\D)0+(\d)/g, "$1$2");
    };
    var dateStringEquals = function(actual, expected) {
      return removeLeadingZeroes(actual) === removeLeadingZeroes(expected);
    };
    var normalizeMonth = function(text) {
      return text.replace("d\u2019", "de ");
    };
    var intlFormats = {
      day: {
        day: "numeric"
      },
      dayofweek: {
        weekday: "long"
      },
      longdate: {
        weekday: "long",
        year: "numeric",
        month: "long",
        day: "numeric"
      },
      longdatelongtime: {
        weekday: "long",
        year: "numeric",
        month: "long",
        day: "numeric",
        hour: "numeric",
        minute: "numeric",
        second: "numeric"
      },
      longtime: {
        hour: "numeric",
        minute: "numeric",
        second: "numeric"
      },
      month: {
        month: "long"
      },
      monthandday: {
        month: "long",
        day: "numeric"
      },
      monthandyear: {
        year: "numeric",
        month: "long"
      },
      shortdate: {},
      shorttime: {
        hour: "numeric",
        minute: "numeric"
      },
      shortyear: {
        year: "2-digit"
      },
      year: {
        year: "numeric"
      }
    };
    Object.defineProperty(intlFormats, "shortdateshorttime", {
      get: function() {
        var defaultOptions = Intl.DateTimeFormat(_core.default.locale()).resolvedOptions();
        return {
          year: defaultOptions.year,
          month: defaultOptions.month,
          day: defaultOptions.day,
          hour: "numeric",
          minute: "numeric"
        };
      }
    });
    var getIntlFormat = function(format) {
      return "string" === typeof format && intlFormats[format.toLowerCase()];
    };
    var monthNameStrategies = {
      standalone: function(monthIndex, monthFormat) {
        var date = new Date(1999, monthIndex, 13, 1);
        var dateString = getIntlFormatter({
          month: monthFormat
        })(date);
        return dateString;
      },
      format: function(monthIndex, monthFormat) {
        var date = new Date(0, monthIndex, 13, 1);
        var dateString = normalizeMonth(getIntlFormatter({
          day: "numeric",
          month: monthFormat
        })(date));
        var parts = dateString.split(" ").filter(function(part) {
          return part.indexOf("13") < 0;
        });
        if (1 === parts.length) {
          return parts[0];
        } else if (2 === parts.length) {
          return parts[0].length > parts[1].length ? parts[0] : parts[1];
        }
        return monthNameStrategies.standalone(monthIndex, monthFormat);
      }
    };
    var _default = {
      engine: function() {
        return "intl";
      },
      getMonthNames: function(format, type) {
        var monthFormat = {
          wide: "long",
          abbreviated: "short",
          narrow: "narrow"
        }[format || "wide"];
        type = "format" === type ? type : "standalone";
        return Array.apply(null, new Array(12)).map(function(_, monthIndex) {
          return monthNameStrategies[type](monthIndex, monthFormat);
        });
      },
      getDayNames: function(format) {
        var result = function(format2) {
          return Array.apply(null, new Array(7)).map(function(_, dayIndex) {
            return getIntlFormatter({
              weekday: format2
            })(new Date(0, 0, dayIndex));
          });
        }({
          wide: "long",
          abbreviated: "short",
          short: "narrow",
          narrow: "narrow"
        }[format || "wide"]);
        return result;
      },
      getPeriodNames: function() {
        var hour12Formatter = getIntlFormatter({
          hour: "numeric",
          hour12: true
        });
        return [1, 13].map(function(hours) {
          var hourNumberText = formatNumber(1);
          var timeParts = hour12Formatter(new Date(0, 0, 1, hours)).split(hourNumberText);
          if (2 !== timeParts.length) {
            return "";
          }
          var biggerPart = timeParts[0].length > timeParts[1].length ? timeParts[0] : timeParts[1];
          return biggerPart.trim();
        });
      },
      format: function(date, _format) {
        if (!date) {
          return;
        }
        if (!_format) {
          return date;
        }
        if ("function" !== typeof _format && !_format.formatter) {
          _format = _format.type || _format;
        }
        var intlFormat = getIntlFormat(_format);
        if (intlFormat) {
          return getIntlFormatter(intlFormat)(date);
        }
        var formatType = _typeof(_format);
        if (_format.formatter || "function" === formatType || "string" === formatType) {
          return this.callBase.apply(this, arguments);
        }
        return getIntlFormatter(_format)(date);
      },
      parse: function(dateString, format) {
        var _this = this;
        var formatter;
        if (format && !format.parser && "string" === typeof dateString) {
          dateString = normalizeMonth(dateString);
          formatter = function(date) {
            return normalizeMonth(_this.format(date, format));
          };
        }
        return this.callBase(dateString, formatter || format);
      },
      Ly: function(dateString, format) {
        var _this2 = this;
        dateString = normalizeNumerals(dateString);
        var formatParts = this.getFormatParts(format);
        var dateParts = dateString.split(/\D+/).filter(function(part) {
          return part.length > 0;
        });
        if (formatParts.length !== dateParts.length) {
          return;
        }
        var dateArgs = this.Ms(formatParts, dateParts);
        var constructValidDate = function(ampmShift) {
          var parsedDate = function(dateArgs2, ampmShift2) {
            var hoursShift = ampmShift2 ? 12 : 0;
            return new Date(dateArgs2.year, dateArgs2.month, dateArgs2.day, (dateArgs2.hours + hoursShift) % 24, dateArgs2.minutes, dateArgs2.seconds);
          }(dateArgs, ampmShift);
          if (dateStringEquals(normalizeNumerals(_this2.format(parsedDate, format)), dateString)) {
            return parsedDate;
          }
        };
        return constructValidDate(false) || constructValidDate(true);
      },
      Ms: function(formatParts, dateParts) {
        var currentDate = /* @__PURE__ */ new Date();
        var dateArgs = {
          year: currentDate.getFullYear(),
          month: currentDate.getMonth(),
          day: currentDate.getDate(),
          hours: 0,
          minutes: 0,
          seconds: 0
        };
        formatParts.forEach(function(formatPart, index) {
          var datePart = dateParts[index];
          var parsed = parseInt(datePart, 10);
          if ("month" === formatPart) {
            parsed -= 1;
          }
          dateArgs[formatPart] = parsed;
        });
        return dateArgs;
      },
      formatUsesMonthName: function(format) {
        if ("object" === _typeof(format) && !(format.type || format.format)) {
          return "long" === format.month;
        }
        return this.callBase.apply(this, arguments);
      },
      formatUsesDayName: function(format) {
        if ("object" === _typeof(format) && !(format.type || format.format)) {
          return "long" === format.weekday;
        }
        return this.callBase.apply(this, arguments);
      },
      getTimeSeparator: function() {
        return normalizeNumerals(formatDateTime(new Date(2001, 1, 1, 11, 11), {
          hour: "numeric",
          minute: "numeric",
          hour12: false
        })).replace(/\d/g, "");
      },
      getFormatParts: function(format) {
        if ("string" === typeof format) {
          return this.callBase(format);
        }
        var intlFormat = (0, _extend.extend)({}, intlFormats[format.toLowerCase()]);
        var date = new Date(2001, 2, 4, 5, 6, 7);
        var formattedDate = getIntlFormatter(intlFormat)(date);
        formattedDate = normalizeNumerals(formattedDate);
        return [{
          name: "year",
          value: 1
        }, {
          name: "month",
          value: 3
        }, {
          name: "day",
          value: 4
        }, {
          name: "hours",
          value: 5
        }, {
          name: "minutes",
          value: 6
        }, {
          name: "seconds",
          value: 7
        }].map(function(part) {
          return {
            name: part.name,
            index: formattedDate.indexOf(part.value)
          };
        }).filter(function(part) {
          return part.index > -1;
        }).sort(function(a, b) {
          return a.index - b.index;
        }).map(function(part) {
          return part.name;
        });
      }
    };
    exports.default = _default;
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/devextreme/cjs/localization/date.js
var require_date4 = __commonJS({
  "node_modules/devextreme/cjs/localization/date.js"(exports, module) {
    "use strict";
    exports.default = void 0;
    var _dependency_injector = _interopRequireDefault(require_dependency_injector());
    var _type = require_type();
    var _iterator = require_iterator();
    var _errors = _interopRequireDefault(require_errors());
    var _date = require_date_formatter();
    var _date2 = require_date_format();
    var _date3 = require_date_parser();
    var _default_date_names = _interopRequireDefault(require_default_date_names());
    var _first_day_of_week_data = _interopRequireDefault(require_first_day_of_week_data());
    var _core = _interopRequireDefault(require_core());
    var _number = _interopRequireDefault(require_number3());
    var _date4 = _interopRequireDefault(require_date3());
    function _interopRequireDefault(obj) {
      return obj && obj.j ? obj : {
        default: obj
      };
    }
    var DEFAULT_DAY_OF_WEEK_INDEX = 0;
    var hasIntl = "undefined" !== typeof Intl;
    var FORMATS_TO_PATTERN_MAP = {
      shortdate: "M/d/y",
      shorttime: "h:mm a",
      longdate: "EEEE, MMMM d, y",
      longtime: "h:mm:ss a",
      monthandday: "MMMM d",
      monthandyear: "MMMM y",
      quarterandyear: "QQQ y",
      day: "d",
      year: "y",
      shortdateshorttime: "M/d/y, h:mm a",
      longdatelongtime: "EEEE, MMMM d, y, h:mm:ss a",
      month: "LLLL",
      shortyear: "yy",
      dayofweek: "EEEE",
      quarter: "QQQ",
      hour: "HH",
      minute: "mm",
      second: "ss",
      millisecond: "SSS",
      "datetime-local": "yyyy-MM-ddTHH':'mm':'ss"
    };
    var possiblePartPatterns = {
      year: ["y", "yy", "yyyy"],
      day: ["d", "dd"],
      month: ["M", "MM", "MMM", "MMMM"],
      hours: ["H", "HH", "h", "hh", "ah"],
      minutes: ["m", "mm"],
      seconds: ["s", "ss"],
      milliseconds: ["S", "SS", "SSS"]
    };
    var dateLocalization = (0, _dependency_injector.default)({
      engine: function() {
        return "base";
      },
      Ml: function(format) {
        return FORMATS_TO_PATTERN_MAP[format.toLowerCase()];
      },
      Nl: function(pattern) {
        return this.Ml(pattern) || pattern;
      },
      formatUsesMonthName: function(format) {
        return -1 !== this.Nl(format).indexOf("MMMM");
      },
      formatUsesDayName: function(format) {
        return -1 !== this.Nl(format).indexOf("EEEE");
      },
      getFormatParts: function(format) {
        var pattern = this.Ml(format) || format;
        var result = [];
        (0, _iterator.each)(pattern.split(/\W+/), function(_, formatPart) {
          (0, _iterator.each)(possiblePartPatterns, function(partName, possiblePatterns) {
            if (possiblePatterns.includes(formatPart)) {
              result.push(partName);
            }
          });
        });
        return result;
      },
      getMonthNames: function(format) {
        return _default_date_names.default.getMonthNames(format);
      },
      getDayNames: function(format) {
        return _default_date_names.default.getDayNames(format);
      },
      getQuarterNames: function(format) {
        return _default_date_names.default.getQuarterNames(format);
      },
      getPeriodNames: function(format) {
        return _default_date_names.default.getPeriodNames(format);
      },
      getTimeSeparator: function() {
        return ":";
      },
      is24HourFormat: function(format) {
        var amTime = new Date(2017, 0, 20, 11, 0, 0, 0);
        var pmTime = new Date(2017, 0, 20, 23, 0, 0, 0);
        var amTimeFormatted = this.format(amTime, format);
        var pmTimeFormatted = this.format(pmTime, format);
        for (var i = 0; i < amTimeFormatted.length; i++) {
          if (amTimeFormatted[i] !== pmTimeFormatted[i]) {
            return !isNaN(parseInt(amTimeFormatted[i]));
          }
        }
      },
      format: function(date, _format) {
        if (!date) {
          return;
        }
        if (!_format) {
          return date;
        }
        var formatter;
        if ("function" === typeof _format) {
          formatter = _format;
        } else if (_format.formatter) {
          formatter = _format.formatter;
        } else {
          _format = _format.type || _format;
          if ((0, _type.isString)(_format)) {
            _format = FORMATS_TO_PATTERN_MAP[_format.toLowerCase()] || _format;
            return _number.default.convertDigits((0, _date.getFormatter)(_format, this)(date));
          }
        }
        if (!formatter) {
          return;
        }
        return formatter(date);
      },
      parse: function(text, format) {
        var that = this;
        var ldmlFormat;
        var formatter;
        if (!text) {
          return;
        }
        if (!format) {
          return this.parse(text, "shortdate");
        }
        if (format.parser) {
          return format.parser(text);
        }
        if ("string" === typeof format && !FORMATS_TO_PATTERN_MAP[format.toLowerCase()]) {
          ldmlFormat = format;
        } else {
          formatter = function(value) {
            var text2 = that.format(value, format);
            return _number.default.convertDigits(text2, true);
          };
          try {
            ldmlFormat = (0, _date2.getFormat)(formatter);
          } catch (e) {
          }
        }
        if (ldmlFormat) {
          text = _number.default.convertDigits(text, true);
          return (0, _date3.getParser)(ldmlFormat, this)(text);
        }
        _errors.default.log("W0012");
        var result = new Date(text);
        if (!result || isNaN(result.getTime())) {
          return;
        }
        return result;
      },
      firstDayOfWeekIndex: function() {
        var index = _core.default.getValueByClosestLocale(function(locale) {
          return _first_day_of_week_data.default[locale];
        });
        return void 0 === index ? DEFAULT_DAY_OF_WEEK_INDEX : index;
      }
    });
    if (hasIntl) {
      dateLocalization.inject(_date4.default);
    }
    var _default = dateLocalization;
    exports.default = _default;
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/devextreme/cjs/format_helper.js
var require_format_helper = __commonJS({
  "node_modules/devextreme/cjs/format_helper.js"(exports, module) {
    "use strict";
    exports.default = void 0;
    var _type = require_type();
    var _date = _interopRequireDefault(require_date2());
    var _number = _interopRequireDefault(require_number3());
    var _date2 = _interopRequireDefault(require_date4());
    var _dependency_injector = _interopRequireDefault(require_dependency_injector());
    require_currency();
    function _interopRequireDefault(obj) {
      return obj && obj.j ? obj : {
        default: obj
      };
    }
    var _default = (0, _dependency_injector.default)({
      format: function(value, _format) {
        var formatIsValid = (0, _type.isString)(_format) && "" !== _format || (0, _type.isPlainObject)(_format) || (0, _type.isFunction)(_format);
        var valueIsValid = (0, _type.isNumeric)(value) || (0, _type.isDate)(value);
        if (!formatIsValid || !valueIsValid) {
          return (0, _type.isDefined)(value) ? value.toString() : "";
        }
        if ((0, _type.isFunction)(_format)) {
          return _format(value);
        }
        if ((0, _type.isString)(_format)) {
          _format = {
            type: _format
          };
        }
        if ((0, _type.isNumeric)(value)) {
          return _number.default.format(value, _format);
        }
        if ((0, _type.isDate)(value)) {
          return _date2.default.format(value, _format);
        }
      },
      getTimeFormat: function(showSecond) {
        return showSecond ? "longtime" : "shorttime";
      },
      Mb: function(format) {
        if (!Array.isArray(format)) {
          return format;
        }
        if (1 === format.length) {
          return format[0];
        }
        return function(date) {
          return format.map(function(formatPart) {
            return _date2.default.format(date, formatPart);
          }).join(" ");
        };
      },
      getDateFormatByDifferences: function(dateDifferences, intervalFormat) {
        var resultFormat = [];
        var needSpecialSecondFormatter = intervalFormat && dateDifferences.millisecond && !(dateDifferences.year || dateDifferences.month || dateDifferences.day);
        if (needSpecialSecondFormatter) {
          resultFormat.push(function(date) {
            return date.getSeconds() + date.getMilliseconds() / 1e3 + "s";
          });
        } else if (dateDifferences.millisecond) {
          resultFormat.push("millisecond");
        }
        if (dateDifferences.hour || dateDifferences.minute || !needSpecialSecondFormatter && dateDifferences.second) {
          resultFormat.unshift(this.getTimeFormat(dateDifferences.second));
        }
        if (dateDifferences.year && dateDifferences.month && dateDifferences.day) {
          if (intervalFormat && "month" === intervalFormat) {
            return "monthandyear";
          } else {
            resultFormat.unshift("shortdate");
            return this.Mb(resultFormat);
          }
        }
        if (dateDifferences.year && dateDifferences.month) {
          return "monthandyear";
        }
        if (dateDifferences.year && dateDifferences.quarter) {
          return "quarterandyear";
        }
        if (dateDifferences.year) {
          return "year";
        }
        if (dateDifferences.quarter) {
          return "quarter";
        }
        if (dateDifferences.month && dateDifferences.day) {
          if (intervalFormat) {
            resultFormat.unshift(function(date) {
              return _date2.default.getMonthNames("abbreviated")[date.getMonth()] + " " + _date2.default.format(date, "day");
            });
          } else {
            resultFormat.unshift("monthandday");
          }
          return this.Mb(resultFormat);
        }
        if (dateDifferences.month) {
          return "month";
        }
        if (dateDifferences.day) {
          if (intervalFormat) {
            resultFormat.unshift("day");
          } else {
            resultFormat.unshift(function(date) {
              return _date2.default.format(date, "dayofweek") + ", " + _date2.default.format(date, "day");
            });
          }
          return this.Mb(resultFormat);
        }
        return this.Mb(resultFormat);
      },
      getDateFormatByTicks: function(ticks) {
        var maxDiff;
        var currentDiff;
        var i;
        if (ticks.length > 1) {
          maxDiff = _date.default.getDatesDifferences(ticks[0], ticks[1]);
          for (i = 1; i < ticks.length - 1; i++) {
            currentDiff = _date.default.getDatesDifferences(ticks[i], ticks[i + 1]);
            if (maxDiff.count < currentDiff.count) {
              maxDiff = currentDiff;
            }
          }
        } else {
          maxDiff = {
            year: true,
            month: true,
            day: true,
            hour: ticks[0].getHours() > 0,
            minute: ticks[0].getMinutes() > 0,
            second: ticks[0].getSeconds() > 0,
            millisecond: ticks[0].getMilliseconds() > 0
          };
        }
        var resultFormat = this.getDateFormatByDifferences(maxDiff);
        return resultFormat;
      },
      getDateFormatByTickInterval: function(startValue, endValue, tickInterval) {
        var dateUnitInterval;
        var correctDateDifferences = function(dateDifferences2, tickInterval2, value) {
          switch (tickInterval2) {
            case "year":
            case "quarter":
              dateDifferences2.month = value;
            case "month":
              dateDifferences2.day = value;
            case "week":
            case "day":
              dateDifferences2.hour = value;
            case "hour":
              dateDifferences2.minute = value;
            case "minute":
              dateDifferences2.second = value;
            case "second":
              dateDifferences2.millisecond = value;
          }
        };
        tickInterval = (0, _type.isString)(tickInterval) ? tickInterval.toLowerCase() : tickInterval;
        var dateDifferences = _date.default.getDatesDifferences(startValue, endValue);
        if (startValue !== endValue) {
          !function(differences, minDate, maxDate) {
            if (!maxDate.getMilliseconds() && maxDate.getSeconds()) {
              if (maxDate.getSeconds() - minDate.getSeconds() === 1) {
                differences.millisecond = true;
                differences.second = false;
              }
            } else if (!maxDate.getSeconds() && maxDate.getMinutes()) {
              if (maxDate.getMinutes() - minDate.getMinutes() === 1) {
                differences.second = true;
                differences.minute = false;
              }
            } else if (!maxDate.getMinutes() && maxDate.getHours()) {
              if (maxDate.getHours() - minDate.getHours() === 1) {
                differences.minute = true;
                differences.hour = false;
              }
            } else if (!maxDate.getHours() && maxDate.getDate() > 1) {
              if (maxDate.getDate() - minDate.getDate() === 1) {
                differences.hour = true;
                differences.day = false;
              }
            } else if (1 === maxDate.getDate() && maxDate.getMonth()) {
              if (maxDate.getMonth() - minDate.getMonth() === 1) {
                differences.day = true;
                differences.month = false;
              }
            } else if (!maxDate.getMonth() && maxDate.getFullYear()) {
              if (maxDate.getFullYear() - minDate.getFullYear() === 1) {
                differences.month = true;
                differences.year = false;
              }
            }
          }(dateDifferences, startValue > endValue ? endValue : startValue, startValue > endValue ? startValue : endValue);
        }
        dateUnitInterval = _date.default.getDateUnitInterval(dateDifferences);
        correctDateDifferences(dateDifferences, dateUnitInterval, true);
        dateUnitInterval = _date.default.getDateUnitInterval(tickInterval || "second");
        correctDateDifferences(dateDifferences, dateUnitInterval, false);
        dateDifferences[{
          week: "day"
        }[dateUnitInterval] || dateUnitInterval] = true;
        var resultFormat = this.getDateFormatByDifferences(dateDifferences);
        return resultFormat;
      }
    });
    exports.default = _default;
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/devextreme/cjs/localization/default_messages.js
var require_default_messages = __commonJS({
  "node_modules/devextreme/cjs/localization/default_messages.js"(exports) {
    "use strict";
    exports.defaultMessages = void 0;
    var defaultMessages = {
      en: {
        Yes: "Yes",
        No: "No",
        Cancel: "Cancel",
        Close: "Close",
        Clear: "Clear",
        Done: "Done",
        Loading: "Loading...",
        Select: "Select...",
        Search: "Search",
        Back: "Back",
        OK: "OK",
        "dxCollectionWidget-noDataText": "No data to display",
        "dxDropDownEditor-selectLabel": "Select",
        "validation-required": "Required",
        "validation-required-formatted": "{0} is required",
        "validation-numeric": "Value must be a number",
        "validation-numeric-formatted": "{0} must be a number",
        "validation-range": "Value is out of range",
        "validation-range-formatted": "{0} is out of range",
        "validation-stringLength": "The length of the value is not correct",
        "validation-stringLength-formatted": "The length of {0} is not correct",
        "validation-custom": "Value is invalid",
        "validation-custom-formatted": "{0} is invalid",
        "validation-async": "Value is invalid",
        "validation-async-formatted": "{0} is invalid",
        "validation-compare": "Values do not match",
        "validation-compare-formatted": "{0} does not match",
        "validation-pattern": "Value does not match pattern",
        "validation-pattern-formatted": "{0} does not match pattern",
        "validation-email": "Email is invalid",
        "validation-email-formatted": "{0} is invalid",
        "validation-mask": "Value is invalid",
        "dxLookup-searchPlaceholder": "Minimum character number: {0}",
        "dxList-pullingDownText": "Pull down to refresh...",
        "dxList-pulledDownText": "Release to refresh...",
        "dxList-refreshingText": "Refreshing...",
        "dxList-pageLoadingText": "Loading...",
        "dxList-nextButtonText": "More",
        "dxList-selectAll": "Select All",
        "dxListEditDecorator-delete": "Delete",
        "dxListEditDecorator-more": "More",
        "dxScrollView-pullingDownText": "Pull down to refresh...",
        "dxScrollView-pulledDownText": "Release to refresh...",
        "dxScrollView-refreshingText": "Refreshing...",
        "dxScrollView-reachBottomText": "Loading...",
        "dxDateBox-simulatedDataPickerTitleTime": "Select time",
        "dxDateBox-simulatedDataPickerTitleDate": "Select date",
        "dxDateBox-simulatedDataPickerTitleDateTime": "Select date and time",
        "dxDateBox-validation-datetime": "Value must be a date or time",
        "dxDateRangeBox-invalidStartDateMessage": "Start value must be a date",
        "dxDateRangeBox-invalidEndDateMessage": "End value must be a date",
        "dxDateRangeBox-startDateOutOfRangeMessage": "Start date is out of range",
        "dxDateRangeBox-endDateOutOfRangeMessage": "End date is out of range",
        "dxDateRangeBox-startDateLabel": "Start Date",
        "dxDateRangeBox-endDateLabel": "End Date",
        "dxFileUploader-selectFile": "Select a file",
        "dxFileUploader-dropFile": "or Drop a file here",
        "dxFileUploader-bytes": "bytes",
        "dxFileUploader-kb": "kb",
        "dxFileUploader-Mb": "Mb",
        "dxFileUploader-Gb": "Gb",
        "dxFileUploader-upload": "Upload",
        "dxFileUploader-uploaded": "Uploaded",
        "dxFileUploader-readyToUpload": "Ready to upload",
        "dxFileUploader-uploadAbortedMessage": "Upload cancelled",
        "dxFileUploader-uploadFailedMessage": "Upload failed",
        "dxFileUploader-invalidFileExtension": "File type is not allowed",
        "dxFileUploader-invalidMaxFileSize": "File is too large",
        "dxFileUploader-invalidMinFileSize": "File is too small",
        "dxRangeSlider-ariaFrom": "From",
        "dxRangeSlider-ariaTill": "Till",
        "dxSwitch-switchedOnText": "ON",
        "dxSwitch-switchedOffText": "OFF",
        "dxForm-optionalMark": "optional",
        "dxForm-requiredMessage": "{0} is required",
        "dxNumberBox-invalidValueMessage": "Value must be a number",
        "dxNumberBox-noDataText": "No data",
        "dxDataGrid-emptyHeaderWithColumnChooserText": "Use {0} to display columns",
        "dxDataGrid-emptyHeaderWithGroupPanelText": "Drag a column from the group panel here",
        "dxDataGrid-emptyHeaderWithColumnChooserAndGroupPanelText": "Use {0} or drag a column from the group panel",
        "dxDataGrid-emptyHeaderColumnChooserText": "column chooser",
        "dxDataGrid-columnChooserTitle": "Column Chooser",
        "dxDataGrid-columnChooserEmptyText": "Drag a column here to hide it",
        "dxDataGrid-groupContinuesMessage": "Continues on the next page",
        "dxDataGrid-groupContinuedMessage": "Continued from the previous page",
        "dxDataGrid-groupHeaderText": "Group by This Column",
        "dxDataGrid-ungroupHeaderText": "Ungroup",
        "dxDataGrid-ungroupAllText": "Ungroup All",
        "dxDataGrid-editingEditRow": "Edit",
        "dxDataGrid-editingSaveRowChanges": "Save",
        "dxDataGrid-editingCancelRowChanges": "Cancel",
        "dxDataGrid-editingDeleteRow": "Delete",
        "dxDataGrid-editingUndeleteRow": "Undelete",
        "dxDataGrid-editingConfirmDeleteMessage": "Are you sure you want to delete this record?",
        "dxDataGrid-validationCancelChanges": "Cancel changes",
        "dxDataGrid-groupPanelEmptyText": "Drag a column header here to group by that column",
        "dxDataGrid-noDataText": "No data",
        "dxDataGrid-searchPanelPlaceholder": "Search...",
        "dxDataGrid-filterRowShowAllText": "(All)",
        "dxDataGrid-filterRowResetOperationText": "Reset",
        "dxDataGrid-filterRowOperationEquals": "Equals",
        "dxDataGrid-filterRowOperationNotEquals": "Does not equal",
        "dxDataGrid-filterRowOperationLess": "Less than",
        "dxDataGrid-filterRowOperationLessOrEquals": "Less than or equal to",
        "dxDataGrid-filterRowOperationGreater": "Greater than",
        "dxDataGrid-filterRowOperationGreaterOrEquals": "Greater than or equal to",
        "dxDataGrid-filterRowOperationStartsWith": "Starts with",
        "dxDataGrid-filterRowOperationContains": "Contains",
        "dxDataGrid-filterRowOperationNotContains": "Does not contain",
        "dxDataGrid-filterRowOperationEndsWith": "Ends with",
        "dxDataGrid-filterRowOperationBetween": "Between",
        "dxDataGrid-filterRowOperationBetweenStartText": "Start",
        "dxDataGrid-filterRowOperationBetweenEndText": "End",
        "dxDataGrid-ariaSearchBox": "Search box",
        "dxDataGrid-applyFilterText": "Apply filter",
        "dxDataGrid-trueText": "true",
        "dxDataGrid-falseText": "false",
        "dxDataGrid-sortingAscendingText": "Sort Ascending",
        "dxDataGrid-sortingDescendingText": "Sort Descending",
        "dxDataGrid-sortingClearText": "Clear Sorting",
        "dxDataGrid-editingSaveAllChanges": "Save changes",
        "dxDataGrid-editingCancelAllChanges": "Discard changes",
        "dxDataGrid-editingAddRow": "Add a row",
        "dxDataGrid-summaryMin": "Min: {0}",
        "dxDataGrid-summaryMinOtherColumn": "Min of {1} is {0}",
        "dxDataGrid-summaryMax": "Max: {0}",
        "dxDataGrid-summaryMaxOtherColumn": "Max of {1} is {0}",
        "dxDataGrid-summaryAvg": "Avg: {0}",
        "dxDataGrid-summaryAvgOtherColumn": "Avg of {1} is {0}",
        "dxDataGrid-summarySum": "Sum: {0}",
        "dxDataGrid-summarySumOtherColumn": "Sum of {1} is {0}",
        "dxDataGrid-summaryCount": "Count: {0}",
        "dxDataGrid-columnFixingFix": "Fix",
        "dxDataGrid-columnFixingUnfix": "Unfix",
        "dxDataGrid-columnFixingLeftPosition": "To the left",
        "dxDataGrid-columnFixingRightPosition": "To the right",
        "dxDataGrid-exportTo": "Export",
        "dxDataGrid-exportToExcel": "Export to Excel file",
        "dxDataGrid-exporting": "Exporting...",
        "dxDataGrid-excelFormat": "Excel file",
        "dxDataGrid-selectedRows": "Selected rows",
        "dxDataGrid-exportSelectedRows": "Export selected rows to {0}",
        "dxDataGrid-exportAll": "Export all data to {0}",
        "dxDataGrid-headerFilterLabel": "Filter options",
        "dxDataGrid-headerFilterIndicatorLabel": "Show filter options for column '{0}'",
        "dxDataGrid-headerFilterEmptyValue": "(Blanks)",
        "dxDataGrid-headerFilterOK": "OK",
        "dxDataGrid-headerFilterCancel": "Cancel",
        "dxDataGrid-ariaAdaptiveCollapse": "Hide additional data",
        "dxDataGrid-ariaAdaptiveExpand": "Display additional data",
        "dxDataGrid-ariaColumn": "Column",
        "dxDataGrid-ariaValue": "Value",
        "dxDataGrid-ariaFilterCell": "Filter cell",
        "dxDataGrid-ariaCollapse": "Collapse",
        "dxDataGrid-ariaExpand": "Expand",
        "dxDataGrid-ariaDataGrid": "Data grid with {0} rows and {1} columns",
        "dxDataGrid-ariaSearchInGrid": "Search in the data grid",
        "dxDataGrid-ariaSelectAll": "Select all",
        "dxDataGrid-ariaSelectRow": "Select row",
        "dxDataGrid-ariaToolbar": "Data grid toolbar",
        "dxDataGrid-filterBuilderPopupTitle": "Filter Builder",
        "dxDataGrid-filterPanelCreateFilter": "Create Filter",
        "dxDataGrid-filterPanelClearFilter": "Clear",
        "dxDataGrid-filterPanelFilterEnabledHint": "Enable the filter",
        "dxTreeList-ariaTreeList": "Tree list",
        "dxTreeList-ariaSearchInGrid": "Search in the tree list",
        "dxTreeList-ariaToolbar": "Tree list toolbar",
        "dxTreeList-editingAddRowToNode": "Add",
        "dxPager-infoText": "Page {0} of {1} ({2} items)",
        "dxPager-pagesCountText": "of",
        "dxPager-pageSize": "Items per page: {0}",
        "dxPager-pageSizesAllText": "All",
        "dxPager-page": "Page {0}",
        "dxPager-prevPage": "Previous Page",
        "dxPager-nextPage": "Next Page",
        "dxPager-ariaLabel": "Page Navigation",
        "dxPager-ariaPageSize": "Page size",
        "dxPager-ariaPageNumber": "Page number",
        "dxPivotGrid-grandTotal": "Grand Total",
        "dxPivotGrid-total": "{0} Total",
        "dxPivotGrid-fieldChooserTitle": "Field Chooser",
        "dxPivotGrid-showFieldChooser": "Show Field Chooser",
        "dxPivotGrid-expandAll": "Expand All",
        "dxPivotGrid-collapseAll": "Collapse All",
        "dxPivotGrid-sortColumnBySummary": 'Sort "{0}" by This Column',
        "dxPivotGrid-sortRowBySummary": 'Sort "{0}" by This Row',
        "dxPivotGrid-removeAllSorting": "Remove All Sorting",
        "dxPivotGrid-dataNotAvailable": "N/A",
        "dxPivotGrid-rowFields": "Row Fields",
        "dxPivotGrid-columnFields": "Column Fields",
        "dxPivotGrid-dataFields": "Data Fields",
        "dxPivotGrid-filterFields": "Filter Fields",
        "dxPivotGrid-allFields": "All Fields",
        "dxPivotGrid-columnFieldArea": "Drop Column Fields Here",
        "dxPivotGrid-dataFieldArea": "Drop Data Fields Here",
        "dxPivotGrid-rowFieldArea": "Drop Row Fields Here",
        "dxPivotGrid-filterFieldArea": "Drop Filter Fields Here",
        "dxScheduler-editorLabelTitle": "Subject",
        "dxScheduler-editorLabelStartDate": "Start Date",
        "dxScheduler-editorLabelEndDate": "End Date",
        "dxScheduler-editorLabelDescription": "Description",
        "dxScheduler-editorLabelRecurrence": "Repeat",
        "dxScheduler-openAppointment": "Open appointment",
        "dxScheduler-recurrenceNever": "Never",
        "dxScheduler-recurrenceMinutely": "Every minute",
        "dxScheduler-recurrenceHourly": "Hourly",
        "dxScheduler-recurrenceDaily": "Daily",
        "dxScheduler-recurrenceWeekly": "Weekly",
        "dxScheduler-recurrenceMonthly": "Monthly",
        "dxScheduler-recurrenceYearly": "Yearly",
        "dxScheduler-recurrenceRepeatEvery": "Repeat Every",
        "dxScheduler-recurrenceRepeatOn": "Repeat On",
        "dxScheduler-recurrenceEnd": "End repeat",
        "dxScheduler-recurrenceAfter": "After",
        "dxScheduler-recurrenceOn": "On",
        "dxScheduler-recurrenceRepeatMinutely": "minute(s)",
        "dxScheduler-recurrenceRepeatHourly": "hour(s)",
        "dxScheduler-recurrenceRepeatDaily": "day(s)",
        "dxScheduler-recurrenceRepeatWeekly": "week(s)",
        "dxScheduler-recurrenceRepeatMonthly": "month(s)",
        "dxScheduler-recurrenceRepeatYearly": "year(s)",
        "dxScheduler-switcherDay": "Day",
        "dxScheduler-switcherWeek": "Week",
        "dxScheduler-switcherWorkWeek": "Work Week",
        "dxScheduler-switcherMonth": "Month",
        "dxScheduler-switcherAgenda": "Agenda",
        "dxScheduler-switcherTimelineDay": "Timeline Day",
        "dxScheduler-switcherTimelineWeek": "Timeline Week",
        "dxScheduler-switcherTimelineWorkWeek": "Timeline Work Week",
        "dxScheduler-switcherTimelineMonth": "Timeline Month",
        "dxScheduler-recurrenceRepeatOnDate": "on date",
        "dxScheduler-recurrenceRepeatCount": "occurrence(s)",
        "dxScheduler-allDay": "All day",
        "dxScheduler-confirmRecurrenceEditMessage": "Do you want to edit only this appointment or the whole series?",
        "dxScheduler-confirmRecurrenceDeleteMessage": "Do you want to delete only this appointment or the whole series?",
        "dxScheduler-confirmRecurrenceEditSeries": "Edit series",
        "dxScheduler-confirmRecurrenceDeleteSeries": "Delete series",
        "dxScheduler-confirmRecurrenceEditOccurrence": "Edit appointment",
        "dxScheduler-confirmRecurrenceDeleteOccurrence": "Delete appointment",
        "dxScheduler-noTimezoneTitle": "No timezone",
        "dxScheduler-moreAppointments": "{0} more",
        "dxCalendar-todayButtonText": "Today",
        "dxCalendar-ariaWidgetName": "Calendar",
        "dxCalendar-ariaHotKeysInfo": "To navigate between views, press Control, and then Left Arrow or Right Arrow. To zoom in on a view, press Control, and then Down Arrow. To zoom out, press Control, and then Up Arrow.",
        "dxColorView-ariaRed": "Red",
        "dxColorView-ariaGreen": "Green",
        "dxColorView-ariaBlue": "Blue",
        "dxColorView-ariaAlpha": "Transparency",
        "dxColorView-ariaHex": "Color code",
        "dxTagBox-selected": "{0} selected",
        "dxTagBox-allSelected": "All selected ({0})",
        "dxTagBox-moreSelected": "{0} more",
        "vizExport-printingButtonText": "Print",
        "vizExport-titleMenuText": "Exporting/Printing",
        "vizExport-exportButtonText": "{0} file",
        "dxFilterBuilder-and": "And",
        "dxFilterBuilder-or": "Or",
        "dxFilterBuilder-notAnd": "Not And",
        "dxFilterBuilder-notOr": "Not Or",
        "dxFilterBuilder-addCondition": "Add Condition",
        "dxFilterBuilder-addGroup": "Add Group",
        "dxFilterBuilder-enterValueText": "<enter a value>",
        "dxFilterBuilder-filterOperationEquals": "Equals",
        "dxFilterBuilder-filterOperationNotEquals": "Does not equal",
        "dxFilterBuilder-filterOperationLess": "Is less than",
        "dxFilterBuilder-filterOperationLessOrEquals": "Is less than or equal to",
        "dxFilterBuilder-filterOperationGreater": "Is greater than",
        "dxFilterBuilder-filterOperationGreaterOrEquals": "Is greater than or equal to",
        "dxFilterBuilder-filterOperationStartsWith": "Starts with",
        "dxFilterBuilder-filterOperationContains": "Contains",
        "dxFilterBuilder-filterOperationNotContains": "Does not contain",
        "dxFilterBuilder-filterOperationEndsWith": "Ends with",
        "dxFilterBuilder-filterOperationIsBlank": "Is blank",
        "dxFilterBuilder-filterOperationIsNotBlank": "Is not blank",
        "dxFilterBuilder-filterOperationBetween": "Is between",
        "dxFilterBuilder-filterOperationAnyOf": "Is any of",
        "dxFilterBuilder-filterOperationNoneOf": "Is none of",
        "dxHtmlEditor-dialogColorCaption": "Change Font Color",
        "dxHtmlEditor-dialogBackgroundCaption": "Change Background Color",
        "dxHtmlEditor-dialogLinkCaption": "Add Link",
        "dxHtmlEditor-dialogLinkUrlField": "URL",
        "dxHtmlEditor-dialogLinkTextField": "Text",
        "dxHtmlEditor-dialogLinkTargetField": "Open link in new window",
        "dxHtmlEditor-dialogImageCaption": "Add Image",
        "dxHtmlEditor-dialogImageUrlField": "URL",
        "dxHtmlEditor-dialogImageAltField": "Alternate text",
        "dxHtmlEditor-dialogImageWidthField": "Width (px)",
        "dxHtmlEditor-dialogImageHeightField": "Height (px)",
        "dxHtmlEditor-dialogInsertTableRowsField": "Rows",
        "dxHtmlEditor-dialogInsertTableColumnsField": "Columns",
        "dxHtmlEditor-dialogInsertTableCaption": "Insert Table",
        "dxHtmlEditor-dialogUpdateImageCaption": "Update Image",
        "dxHtmlEditor-dialogImageUpdateButton": "Update",
        "dxHtmlEditor-dialogImageAddButton": "Add",
        "dxHtmlEditor-dialogImageSpecifyUrl": "From the Web",
        "dxHtmlEditor-dialogImageSelectFile": "From This Device",
        "dxHtmlEditor-dialogImageKeepAspectRatio": "Keep Aspect Ratio",
        "dxHtmlEditor-dialogImageEncodeToBase64": "Encode to Base64",
        "dxHtmlEditor-heading": "Heading",
        "dxHtmlEditor-normalText": "Normal text",
        "dxHtmlEditor-background": "Background Color",
        "dxHtmlEditor-bold": "Bold",
        "dxHtmlEditor-color": "Font Color",
        "dxHtmlEditor-font": "Font",
        "dxHtmlEditor-italic": "Italic",
        "dxHtmlEditor-link": "Add Link",
        "dxHtmlEditor-image": "Add Image",
        "dxHtmlEditor-size": "Size",
        "dxHtmlEditor-strike": "Strikethrough",
        "dxHtmlEditor-subscript": "Subscript",
        "dxHtmlEditor-superscript": "Superscript",
        "dxHtmlEditor-underline": "Underline",
        "dxHtmlEditor-blockquote": "Blockquote",
        "dxHtmlEditor-header": "Header",
        "dxHtmlEditor-increaseIndent": "Increase Indent",
        "dxHtmlEditor-decreaseIndent": "Decrease Indent",
        "dxHtmlEditor-orderedList": "Ordered List",
        "dxHtmlEditor-bulletList": "Bullet List",
        "dxHtmlEditor-alignLeft": "Align Left",
        "dxHtmlEditor-alignCenter": "Align Center",
        "dxHtmlEditor-alignRight": "Align Right",
        "dxHtmlEditor-alignJustify": "Align Justify",
        "dxHtmlEditor-codeBlock": "Code Block",
        "dxHtmlEditor-variable": "Add Variable",
        "dxHtmlEditor-undo": "Undo",
        "dxHtmlEditor-redo": "Redo",
        "dxHtmlEditor-clear": "Clear Formatting",
        "dxHtmlEditor-insertTable": "Insert Table",
        "dxHtmlEditor-insertHeaderRow": "Insert Header Row",
        "dxHtmlEditor-insertRowAbove": "Insert Row Above",
        "dxHtmlEditor-insertRowBelow": "Insert Row Below",
        "dxHtmlEditor-insertColumnLeft": "Insert Column Left",
        "dxHtmlEditor-insertColumnRight": "Insert Column Right",
        "dxHtmlEditor-deleteColumn": "Delete Column",
        "dxHtmlEditor-deleteRow": "Delete Row",
        "dxHtmlEditor-deleteTable": "Delete Table",
        "dxHtmlEditor-cellProperties": "Cell Properties",
        "dxHtmlEditor-tableProperties": "Table Properties",
        "dxHtmlEditor-insert": "Insert",
        "dxHtmlEditor-delete": "Delete",
        "dxHtmlEditor-border": "Border",
        "dxHtmlEditor-style": "Style",
        "dxHtmlEditor-width": "Width",
        "dxHtmlEditor-height": "Height",
        "dxHtmlEditor-borderColor": "Color",
        "dxHtmlEditor-tableBackground": "Background",
        "dxHtmlEditor-dimensions": "Dimensions",
        "dxHtmlEditor-alignment": "Alignment",
        "dxHtmlEditor-horizontal": "Horizontal",
        "dxHtmlEditor-vertical": "Vertical",
        "dxHtmlEditor-paddingVertical": "Vertical Padding",
        "dxHtmlEditor-paddingHorizontal": "Horizontal Padding",
        "dxHtmlEditor-pixels": "Pixels",
        "dxHtmlEditor-list": "List",
        "dxHtmlEditor-ordered": "Ordered",
        "dxHtmlEditor-bullet": "Bullet",
        "dxHtmlEditor-align": "Align",
        "dxHtmlEditor-center": "Center",
        "dxHtmlEditor-left": "Left",
        "dxHtmlEditor-right": "Right",
        "dxHtmlEditor-indent": "Indent",
        "dxHtmlEditor-justify": "Justify",
        "dxFileManager-newDirectoryName": "Untitled directory",
        "dxFileManager-rootDirectoryName": "Files",
        "dxFileManager-errorNoAccess": "Access Denied. Operation could not be completed.",
        "dxFileManager-errorDirectoryExistsFormat": "Directory '{0}' already exists.",
        "dxFileManager-errorFileExistsFormat": "File '{0}' already exists.",
        "dxFileManager-errorFileNotFoundFormat": "File '{0}' not found.",
        "dxFileManager-errorDirectoryNotFoundFormat": "Directory '{0}' not found.",
        "dxFileManager-errorWrongFileExtension": "File extension is not allowed.",
        "dxFileManager-errorMaxFileSizeExceeded": "File size exceeds the maximum allowed size.",
        "dxFileManager-errorInvalidSymbols": "This name contains invalid characters.",
        "dxFileManager-errorDefault": "Unspecified error.",
        "dxFileManager-errorDirectoryOpenFailed": "The directory cannot be opened",
        "dxFileManager-commandCreate": "New directory",
        "dxFileManager-commandRename": "Rename",
        "dxFileManager-commandMove": "Move to",
        "dxFileManager-commandCopy": "Copy to",
        "dxFileManager-commandDelete": "Delete",
        "dxFileManager-commandDownload": "Download",
        "dxFileManager-commandUpload": "Upload files",
        "dxFileManager-commandRefresh": "Refresh",
        "dxFileManager-commandThumbnails": "Thumbnails View",
        "dxFileManager-commandDetails": "Details View",
        "dxFileManager-commandClearSelection": "Clear selection",
        "dxFileManager-commandShowNavPane": "Toggle navigation pane",
        "dxFileManager-dialogDirectoryChooserMoveTitle": "Move to",
        "dxFileManager-dialogDirectoryChooserMoveButtonText": "Move",
        "dxFileManager-dialogDirectoryChooserCopyTitle": "Copy to",
        "dxFileManager-dialogDirectoryChooserCopyButtonText": "Copy",
        "dxFileManager-dialogRenameItemTitle": "Rename",
        "dxFileManager-dialogRenameItemButtonText": "Save",
        "dxFileManager-dialogCreateDirectoryTitle": "New directory",
        "dxFileManager-dialogCreateDirectoryButtonText": "Create",
        "dxFileManager-dialogDeleteItemTitle": "Delete",
        "dxFileManager-dialogDeleteItemButtonText": "Delete",
        "dxFileManager-dialogDeleteItemSingleItemConfirmation": "Are you sure you want to delete {0}?",
        "dxFileManager-dialogDeleteItemMultipleItemsConfirmation": "Are you sure you want to delete {0} items?",
        "dxFileManager-dialogButtonCancel": "Cancel",
        "dxFileManager-editingCreateSingleItemProcessingMessage": "Creating a directory inside {0}",
        "dxFileManager-editingCreateSingleItemSuccessMessage": "Created a directory inside {0}",
        "dxFileManager-editingCreateSingleItemErrorMessage": "Directory was not created",
        "dxFileManager-editingCreateCommonErrorMessage": "Directory was not created",
        "dxFileManager-editingRenameSingleItemProcessingMessage": "Renaming an item inside {0}",
        "dxFileManager-editingRenameSingleItemSuccessMessage": "Renamed an item inside {0}",
        "dxFileManager-editingRenameSingleItemErrorMessage": "Item was not renamed",
        "dxFileManager-editingRenameCommonErrorMessage": "Item was not renamed",
        "dxFileManager-editingDeleteSingleItemProcessingMessage": "Deleting an item from {0}",
        "dxFileManager-editingDeleteMultipleItemsProcessingMessage": "Deleting {0} items from {1}",
        "dxFileManager-editingDeleteSingleItemSuccessMessage": "Deleted an item from {0}",
        "dxFileManager-editingDeleteMultipleItemsSuccessMessage": "Deleted {0} items from {1}",
        "dxFileManager-editingDeleteSingleItemErrorMessage": "Item was not deleted",
        "dxFileManager-editingDeleteMultipleItemsErrorMessage": "{0} items were not deleted",
        "dxFileManager-editingDeleteCommonErrorMessage": "Some items were not deleted",
        "dxFileManager-editingMoveSingleItemProcessingMessage": "Moving an item to {0}",
        "dxFileManager-editingMoveMultipleItemsProcessingMessage": "Moving {0} items to {1}",
        "dxFileManager-editingMoveSingleItemSuccessMessage": "Moved an item to {0}",
        "dxFileManager-editingMoveMultipleItemsSuccessMessage": "Moved {0} items to {1}",
        "dxFileManager-editingMoveSingleItemErrorMessage": "Item was not moved",
        "dxFileManager-editingMoveMultipleItemsErrorMessage": "{0} items were not moved",
        "dxFileManager-editingMoveCommonErrorMessage": "Some items were not moved",
        "dxFileManager-editingCopySingleItemProcessingMessage": "Copying an item to {0}",
        "dxFileManager-editingCopyMultipleItemsProcessingMessage": "Copying {0} items to {1}",
        "dxFileManager-editingCopySingleItemSuccessMessage": "Copied an item to {0}",
        "dxFileManager-editingCopyMultipleItemsSuccessMessage": "Copied {0} items to {1}",
        "dxFileManager-editingCopySingleItemErrorMessage": "Item was not copied",
        "dxFileManager-editingCopyMultipleItemsErrorMessage": "{0} items were not copied",
        "dxFileManager-editingCopyCommonErrorMessage": "Some items were not copied",
        "dxFileManager-editingUploadSingleItemProcessingMessage": "Uploading an item to {0}",
        "dxFileManager-editingUploadMultipleItemsProcessingMessage": "Uploading {0} items to {1}",
        "dxFileManager-editingUploadSingleItemSuccessMessage": "Uploaded an item to {0}",
        "dxFileManager-editingUploadMultipleItemsSuccessMessage": "Uploaded {0} items to {1}",
        "dxFileManager-editingUploadSingleItemErrorMessage": "Item was not uploaded",
        "dxFileManager-editingUploadMultipleItemsErrorMessage": "{0} items were not uploaded",
        "dxFileManager-editingUploadCanceledMessage": "Canceled",
        "dxFileManager-editingDownloadSingleItemErrorMessage": "Item was not downloaded",
        "dxFileManager-editingDownloadMultipleItemsErrorMessage": "{0} items were not downloaded",
        "dxFileManager-listDetailsColumnCaptionName": "Name",
        "dxFileManager-listDetailsColumnCaptionDateModified": "Date Modified",
        "dxFileManager-listDetailsColumnCaptionFileSize": "File Size",
        "dxFileManager-listThumbnailsTooltipTextSize": "Size",
        "dxFileManager-listThumbnailsTooltipTextDateModified": "Date Modified",
        "dxFileManager-notificationProgressPanelTitle": "Progress",
        "dxFileManager-notificationProgressPanelEmptyListText": "No operations",
        "dxFileManager-notificationProgressPanelOperationCanceled": "Canceled",
        "dxDiagram-categoryGeneral": "General",
        "dxDiagram-categoryFlowchart": "Flowchart",
        "dxDiagram-categoryOrgChart": "Org Chart",
        "dxDiagram-categoryContainers": "Containers",
        "dxDiagram-categoryCustom": "Custom",
        "dxDiagram-commandExportToSvg": "Export to SVG",
        "dxDiagram-commandExportToPng": "Export to PNG",
        "dxDiagram-commandExportToJpg": "Export to JPEG",
        "dxDiagram-commandUndo": "Undo",
        "dxDiagram-commandRedo": "Redo",
        "dxDiagram-commandFontName": "Font Name",
        "dxDiagram-commandFontSize": "Font Size",
        "dxDiagram-commandBold": "Bold",
        "dxDiagram-commandItalic": "Italic",
        "dxDiagram-commandUnderline": "Underline",
        "dxDiagram-commandTextColor": "Font Color",
        "dxDiagram-commandLineColor": "Line Color",
        "dxDiagram-commandLineWidth": "Line Width",
        "dxDiagram-commandLineStyle": "Line Style",
        "dxDiagram-commandLineStyleSolid": "Solid",
        "dxDiagram-commandLineStyleDotted": "Dotted",
        "dxDiagram-commandLineStyleDashed": "Dashed",
        "dxDiagram-commandFillColor": "Fill Color",
        "dxDiagram-commandAlignLeft": "Align Left",
        "dxDiagram-commandAlignCenter": "Align Center",
        "dxDiagram-commandAlignRight": "Align Right",
        "dxDiagram-commandConnectorLineType": "Connector Line Type",
        "dxDiagram-commandConnectorLineStraight": "Straight",
        "dxDiagram-commandConnectorLineOrthogonal": "Orthogonal",
        "dxDiagram-commandConnectorLineStart": "Connector Line Start",
        "dxDiagram-commandConnectorLineEnd": "Connector Line End",
        "dxDiagram-commandConnectorLineNone": "None",
        "dxDiagram-commandConnectorLineArrow": "Arrow",
        "dxDiagram-commandFullscreen": "Full Screen",
        "dxDiagram-commandUnits": "Units",
        "dxDiagram-commandPageSize": "Page Size",
        "dxDiagram-commandPageOrientation": "Page Orientation",
        "dxDiagram-commandPageOrientationLandscape": "Landscape",
        "dxDiagram-commandPageOrientationPortrait": "Portrait",
        "dxDiagram-commandPageColor": "Page Color",
        "dxDiagram-commandShowGrid": "Show Grid",
        "dxDiagram-commandSnapToGrid": "Snap to Grid",
        "dxDiagram-commandGridSize": "Grid Size",
        "dxDiagram-commandZoomLevel": "Zoom Level",
        "dxDiagram-commandAutoZoom": "Auto Zoom",
        "dxDiagram-commandFitToContent": "Fit to Content",
        "dxDiagram-commandFitToWidth": "Fit to Width",
        "dxDiagram-commandAutoZoomByContent": "Auto Zoom by Content",
        "dxDiagram-commandAutoZoomByWidth": "Auto Zoom by Width",
        "dxDiagram-commandSimpleView": "Simple View",
        "dxDiagram-commandCut": "Cut",
        "dxDiagram-commandCopy": "Copy",
        "dxDiagram-commandPaste": "Paste",
        "dxDiagram-commandSelectAll": "Select All",
        "dxDiagram-commandDelete": "Delete",
        "dxDiagram-commandBringToFront": "Bring to Front",
        "dxDiagram-commandSendToBack": "Send to Back",
        "dxDiagram-commandLock": "Lock",
        "dxDiagram-commandUnlock": "Unlock",
        "dxDiagram-commandInsertShapeImage": "Insert Image...",
        "dxDiagram-commandEditShapeImage": "Change Image...",
        "dxDiagram-commandDeleteShapeImage": "Delete Image",
        "dxDiagram-commandLayoutLeftToRight": "Left-to-right",
        "dxDiagram-commandLayoutRightToLeft": "Right-to-left",
        "dxDiagram-commandLayoutTopToBottom": "Top-to-bottom",
        "dxDiagram-commandLayoutBottomToTop": "Bottom-to-top",
        "dxDiagram-unitIn": "in",
        "dxDiagram-unitCm": "cm",
        "dxDiagram-unitPx": "px",
        "dxDiagram-dialogButtonOK": "OK",
        "dxDiagram-dialogButtonCancel": "Cancel",
        "dxDiagram-dialogInsertShapeImageTitle": "Insert Image",
        "dxDiagram-dialogEditShapeImageTitle": "Change Image",
        "dxDiagram-dialogEditShapeImageSelectButton": "Select image",
        "dxDiagram-dialogEditShapeImageLabelText": "or drop a file here",
        "dxDiagram-uiExport": "Export",
        "dxDiagram-uiProperties": "Properties",
        "dxDiagram-uiSettings": "Settings",
        "dxDiagram-uiShowToolbox": "Show Toolbox",
        "dxDiagram-uiSearch": "Search",
        "dxDiagram-uiStyle": "Style",
        "dxDiagram-uiLayout": "Layout",
        "dxDiagram-uiLayoutTree": "Tree",
        "dxDiagram-uiLayoutLayered": "Layered",
        "dxDiagram-uiDiagram": "Diagram",
        "dxDiagram-uiText": "Text",
        "dxDiagram-uiObject": "Object",
        "dxDiagram-uiConnector": "Connector",
        "dxDiagram-uiPage": "Page",
        "dxDiagram-shapeText": "Text",
        "dxDiagram-shapeRectangle": "Rectangle",
        "dxDiagram-shapeEllipse": "Ellipse",
        "dxDiagram-shapeCross": "Cross",
        "dxDiagram-shapeTriangle": "Triangle",
        "dxDiagram-shapeDiamond": "Diamond",
        "dxDiagram-shapeHeart": "Heart",
        "dxDiagram-shapePentagon": "Pentagon",
        "dxDiagram-shapeHexagon": "Hexagon",
        "dxDiagram-shapeOctagon": "Octagon",
        "dxDiagram-shapeStar": "Star",
        "dxDiagram-shapeArrowLeft": "Left Arrow",
        "dxDiagram-shapeArrowUp": "Up Arrow",
        "dxDiagram-shapeArrowRight": "Right Arrow",
        "dxDiagram-shapeArrowDown": "Down Arrow",
        "dxDiagram-shapeArrowUpDown": "Up Down Arrow",
        "dxDiagram-shapeArrowLeftRight": "Left Right Arrow",
        "dxDiagram-shapeProcess": "Process",
        "dxDiagram-shapeDecision": "Decision",
        "dxDiagram-shapeTerminator": "Terminator",
        "dxDiagram-shapePredefinedProcess": "Predefined Process",
        "dxDiagram-shapeDocument": "Document",
        "dxDiagram-shapeMultipleDocuments": "Multiple Documents",
        "dxDiagram-shapeManualInput": "Manual Input",
        "dxDiagram-shapePreparation": "Preparation",
        "dxDiagram-shapeData": "Data",
        "dxDiagram-shapeDatabase": "Database",
        "dxDiagram-shapeHardDisk": "Hard Disk",
        "dxDiagram-shapeInternalStorage": "Internal Storage",
        "dxDiagram-shapePaperTape": "Paper Tape",
        "dxDiagram-shapeManualOperation": "Manual Operation",
        "dxDiagram-shapeDelay": "Delay",
        "dxDiagram-shapeStoredData": "Stored Data",
        "dxDiagram-shapeDisplay": "Display",
        "dxDiagram-shapeMerge": "Merge",
        "dxDiagram-shapeConnector": "Connector",
        "dxDiagram-shapeOr": "Or",
        "dxDiagram-shapeSummingJunction": "Summing Junction",
        "dxDiagram-shapeContainerDefaultText": "Container",
        "dxDiagram-shapeVerticalContainer": "Vertical Container",
        "dxDiagram-shapeHorizontalContainer": "Horizontal Container",
        "dxDiagram-shapeCardDefaultText": "Person's Name",
        "dxDiagram-shapeCardWithImageOnLeft": "Card with Image on the Left",
        "dxDiagram-shapeCardWithImageOnTop": "Card with Image on the Top",
        "dxDiagram-shapeCardWithImageOnRight": "Card with Image on the Right",
        "dxGantt-dialogTitle": "Title",
        "dxGantt-dialogStartTitle": "Start",
        "dxGantt-dialogEndTitle": "End",
        "dxGantt-dialogProgressTitle": "Progress",
        "dxGantt-dialogResourcesTitle": "Resources",
        "dxGantt-dialogResourceManagerTitle": "Resource Manager",
        "dxGantt-dialogTaskDetailsTitle": "Task Details",
        "dxGantt-dialogEditResourceListHint": "Edit Resource List",
        "dxGantt-dialogEditNoResources": "No resources",
        "dxGantt-dialogButtonAdd": "Add",
        "dxGantt-contextMenuNewTask": "New Task",
        "dxGantt-contextMenuNewSubtask": "New Subtask",
        "dxGantt-contextMenuDeleteTask": "Delete Task",
        "dxGantt-contextMenuDeleteDependency": "Delete Dependency",
        "dxGantt-dialogTaskDeleteConfirmation": "Deleting a task also deletes all its dependencies and subtasks. Are you sure you want to delete this task?",
        "dxGantt-dialogDependencyDeleteConfirmation": "Are you sure you want to delete the dependency from the task?",
        "dxGantt-dialogResourcesDeleteConfirmation": "Deleting a resource also deletes it from tasks to which this resource is assigned. Are you sure you want to delete these resources? Resources: {0}",
        "dxGantt-dialogConstraintCriticalViolationMessage": "The task you are attempting to move is linked to a second task by a dependency relation. This change would conflict with dependency rules. How would you like to proceed?",
        "dxGantt-dialogConstraintViolationMessage": "The task you are attempting to move is linked to a second task by a dependency relation. How would you like to proceed?",
        "dxGantt-dialogCancelOperationMessage": "Cancel the operation",
        "dxGantt-dialogDeleteDependencyMessage": "Delete the dependency",
        "dxGantt-dialogMoveTaskAndKeepDependencyMessage": "Move the task and keep the dependency",
        "dxGantt-dialogConstraintCriticalViolationSeveralTasksMessage": "The task you are attempting to move is linked to another tasks by dependency relations. This change would conflict with dependency rules. How would you like to proceed?",
        "dxGantt-dialogConstraintViolationSeveralTasksMessage": "The task you are attempting to move is linked to another tasks by dependency relations. How would you like to proceed?",
        "dxGantt-dialogDeleteDependenciesMessage": "Delete the dependency relations",
        "dxGantt-dialogMoveTaskAndKeepDependenciesMessage": "Move the task and keep the dependencies",
        "dxGantt-undo": "Undo",
        "dxGantt-redo": "Redo",
        "dxGantt-expandAll": "Expand All",
        "dxGantt-collapseAll": "Collapse All",
        "dxGantt-addNewTask": "Add New Task",
        "dxGantt-deleteSelectedTask": "Delete Selected Task",
        "dxGantt-zoomIn": "Zoom In",
        "dxGantt-zoomOut": "Zoom Out",
        "dxGantt-fullScreen": "Full Screen",
        "dxGantt-quarter": "Q{0}",
        "dxGantt-sortingAscendingText": "Sort Ascending",
        "dxGantt-sortingDescendingText": "Sort Descending",
        "dxGantt-sortingClearText": "Clear Sorting",
        "dxGantt-showResources": "Show Resources",
        "dxGantt-showDependencies": "Show Dependencies",
        "dxGantt-dialogStartDateValidation": "Start date must be after {0}",
        "dxGantt-dialogEndDateValidation": "End date must be after {0}"
      }
    };
    exports.defaultMessages = defaultMessages;
  }
});

// node_modules/devextreme/cjs/localization/message.js
var require_message = __commonJS({
  "node_modules/devextreme/cjs/localization/message.js"(exports, module) {
    "use strict";
    exports.default = void 0;
    var _dependency_injector = _interopRequireDefault(require_dependency_injector());
    var _extend = require_extend();
    var _string = require_string();
    var _inflector = require_inflector();
    var _core = _interopRequireDefault(require_core());
    var _default_messages = require_default_messages();
    function _interopRequireDefault(obj) {
      return obj && obj.j ? obj : {
        default: obj
      };
    }
    var baseDictionary = (0, _extend.extend)(true, {}, _default_messages.defaultMessages);
    var getDataByLocale = function(localeData, locale) {
      return localeData[locale] || {};
    };
    var newMessages = {};
    var messageLocalization = (0, _dependency_injector.default)({
      engine: function() {
        return "base";
      },
      Oh: baseDictionary,
      load: function(messages) {
        (0, _extend.extend)(true, this.Oh, messages);
      },
      Qc: "@",
      setup: function(localizablePrefix) {
        this.Qc = localizablePrefix;
      },
      localizeString: function(text) {
        var that = this;
        var regex = new RegExp("(^|[^a-zA-Z_0-9" + that.Qc + "-]+)(" + that.Qc + "{1,2})([a-zA-Z_0-9-]+)", "g");
        var escapeString = that.Qc + that.Qc;
        return text.replace(regex, function(str, prefix, escape, localizationKey) {
          var defaultResult = that.Qc + localizationKey;
          var result;
          if (escape !== escapeString) {
            result = that.format(localizationKey);
          }
          if (!result) {
            newMessages[localizationKey] = (0, _inflector.humanize)(localizationKey);
          }
          return prefix + (result || defaultResult);
        });
      },
      getMessagesByLocales: function() {
        return this.Oh;
      },
      getDictionary: function(onlyNew) {
        if (onlyNew) {
          return newMessages;
        }
        return (0, _extend.extend)({}, newMessages, this.getMessagesByLocales()[_core.default.locale()]);
      },
      getFormatter: function(key) {
        return this.Ol(key) || this.Ol(key, "en");
      },
      Ol: function(key, locale) {
        var _this = this;
        var message = _core.default.getValueByClosestLocale(function(locale2) {
          return getDataByLocale(_this.Oh, locale2)[key];
        });
        if (message) {
          return function() {
            var args = 1 === arguments.length && Array.isArray(arguments[0]) ? arguments[0].slice(0) : Array.prototype.slice.call(arguments, 0);
            args.unshift(message);
            return _string.format.apply(this, args);
          };
        }
      },
      format: function(key) {
        var formatter = this.getFormatter(key);
        var values = Array.prototype.slice.call(arguments, 1);
        return formatter && formatter.apply(this, values) || "";
      }
    });
    var _default = messageLocalization;
    exports.default = _default;
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/devextreme/cjs/localization.js
var require_localization = __commonJS({
  "node_modules/devextreme/cjs/localization.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "date", {
      enumerable: true,
      get: function() {
        return _date.default;
      }
    });
    exports.disableIntl = disableIntl;
    exports.locale = exports.loadMessages = exports.formatNumber = exports.formatMessage = exports.formatDate = void 0;
    Object.defineProperty(exports, "message", {
      enumerable: true,
      get: function() {
        return _message.default;
      }
    });
    Object.defineProperty(exports, "number", {
      enumerable: true,
      get: function() {
        return _number.default;
      }
    });
    exports.parseNumber = exports.parseDate = void 0;
    var _core = _interopRequireDefault(require_core());
    var _message = _interopRequireDefault(require_message());
    var _number = _interopRequireDefault(require_number3());
    var _date = _interopRequireDefault(require_date4());
    require_currency();
    function _interopRequireDefault(obj) {
      return obj && obj.j ? obj : {
        default: obj
      };
    }
    var locale = _core.default.locale.bind(_core.default);
    exports.locale = locale;
    var loadMessages = _message.default.load.bind(_message.default);
    exports.loadMessages = loadMessages;
    var formatMessage = _message.default.format.bind(_message.default);
    exports.formatMessage = formatMessage;
    var formatNumber = _number.default.format.bind(_number.default);
    exports.formatNumber = formatNumber;
    var parseNumber = _number.default.parse.bind(_number.default);
    exports.parseNumber = parseNumber;
    var formatDate = _date.default.format.bind(_date.default);
    exports.formatDate = formatDate;
    var parseDate = _date.default.parse.bind(_date.default);
    exports.parseDate = parseDate;
    function disableIntl() {
      if ("intl" === _number.default.engine()) {
        _number.default.resetInjection();
      }
      if ("intl" === _date.default.engine()) {
        _date.default.resetInjection();
      }
    }
  }
});

// node_modules/devextreme/cjs/viz/series/helpers/display_format_parser.js
var require_display_format_parser = __commonJS({
  "node_modules/devextreme/cjs/viz/series/helpers/display_format_parser.js"(exports) {
    "use strict";
    exports.processDisplayFormat = processDisplayFormat;
    var _localization = require_localization();
    var startPlaceHolderChar = "{";
    var endPlaceHolderChar = "}";
    var placeholderFormatDelimiter = ":";
    function formatValue(value, format) {
      if (format) {
        if (value instanceof Date) {
          return (0, _localization.formatDate)(value, format);
        }
        if ("number" === typeof value) {
          return (0, _localization.formatNumber)(value, format);
        }
      }
      return value;
    }
    function getValueByPlaceHolder(placeHolder, pointInfo) {
      var customFormat = "";
      var customFormatIndex = placeHolder.indexOf(placeholderFormatDelimiter);
      if (customFormatIndex > 0) {
        customFormat = placeHolder.substr(customFormatIndex + 1);
        placeHolder = placeHolder.substr(0, customFormatIndex);
      }
      return formatValue(pointInfo[placeHolder], customFormat);
    }
    function processDisplayFormat(displayFormat, pointInfo) {
      var actualText = displayFormat;
      var continueProcess = true;
      while (continueProcess) {
        var startBracketIndex = actualText.indexOf(startPlaceHolderChar);
        var endBracketIndex = actualText.indexOf(endPlaceHolderChar);
        if (startBracketIndex >= 0 && endBracketIndex > 0) {
          var placeHolder = actualText.substring(startBracketIndex + 1, endBracketIndex);
          var value = getValueByPlaceHolder(placeHolder, pointInfo);
          actualText = actualText.substr(0, startBracketIndex) + value + actualText.substr(endBracketIndex + 1);
        } else {
          continueProcess = false;
        }
      }
      return actualText;
    }
  }
});

// node_modules/devextreme/cjs/viz/series/points/label.js
var require_label = __commonJS({
  "node_modules/devextreme/cjs/viz/series/points/label.js"(exports) {
    "use strict";
    exports.Label = Label;
    var _format_helper = _interopRequireDefault(require_format_helper());
    var _utils = require_utils();
    var _iterator = require_iterator();
    var _extend = require_extend();
    var _display_format_parser = require_display_format_parser();
    function _interopRequireDefault(obj) {
      return obj && obj.j ? obj : {
        default: obj
      };
    }
    var _format = _format_helper.default.format;
    var _math = Math;
    var _round = _math.round;
    var _floor = _math.floor;
    var _abs = _math.abs;
    var CONNECTOR_LENGTH = 12;
    var LABEL_BACKGROUND_PADDING_X = 8;
    var LABEL_BACKGROUND_PADDING_Y = 4;
    function getClosestCoord(point, coords) {
      var closestDistance = 1 / 0;
      var closestCoord;
      (0, _iterator.each)(coords, function(_, coord) {
        var x = point[0] - coord[0];
        var y = point[1] - coord[1];
        var distance = x * x + y * y;
        if (distance < closestDistance) {
          closestDistance = distance;
          closestCoord = coord;
        }
      });
      return [_floor(closestCoord[0]), _floor(closestCoord[1])];
    }
    function getCrossCoord(rect, coord, indexOffset) {
      return (coord - rect[0 + indexOffset]) / (rect[2 + indexOffset] - rect[0 + indexOffset]) * (rect[3 - indexOffset] - rect[1 - indexOffset]) + rect[1 - indexOffset];
    }
    var barPointStrategy = {
      isLabelInside: function(labelPoint, figure) {
        var xc = labelPoint.x + labelPoint.width / 2;
        var yc = labelPoint.y + labelPoint.height / 2;
        return figure.x <= xc && xc <= figure.x + figure.width && figure.y <= yc && yc <= figure.y + figure.height;
      },
      prepareLabelPoints: function(bBox, rotatedBBox, isHorizontal, angle, figureCenter) {
        var x1 = rotatedBBox.x;
        var xc = x1 + rotatedBBox.width / 2;
        var x2 = x1 + rotatedBBox.width - 1;
        var y1 = rotatedBBox.y;
        var yc = y1 + rotatedBBox.height / 2;
        var y2 = y1 + rotatedBBox.height - 1;
        var labelPoints;
        var isRectangular = _abs(angle) % 90 === 0;
        if (figureCenter[0] > x1 && figureCenter[0] < x2) {
          if (isRectangular) {
            labelPoints = [
              [figureCenter[0], _abs(figureCenter[1] - y1) < _abs(figureCenter[1] - y2) ? y1 : y2]
            ];
          } else {
            labelPoints = [
              [figureCenter[0], getCrossCoord([x1, y1, x2, y2], figureCenter[0], 0)]
            ];
          }
        } else if (figureCenter[1] > y1 && figureCenter[1] < y2) {
          if (isRectangular) {
            labelPoints = [
              [_abs(figureCenter[0] - x1) < _abs(figureCenter[0] - x2) ? x1 : x2, figureCenter[1]]
            ];
          } else {
            labelPoints = [
              [getCrossCoord([x1, y1, x2, y2], figureCenter[1], 1), figureCenter[1]]
            ];
          }
        } else if (isRectangular) {
          labelPoints = [
            [x1, y1],
            [isHorizontal ? x1 : xc, isHorizontal ? yc : y1],
            [x2, y1],
            [x1, y2],
            [isHorizontal ? x2 : xc, isHorizontal ? yc : y2],
            [x2, y2]
          ];
        } else {
          labelPoints = [
            [xc, yc]
          ];
        }
        return labelPoints;
      },
      isHorizontal: function(bBox, figure) {
        return bBox.x > figure.x + figure.width || bBox.x + bBox.width < figure.x;
      },
      getFigureCenter: function(figure) {
        return [_floor(figure.x + figure.width / 2), _floor(figure.y + figure.height / 2)];
      },
      findFigurePoint: function(figure, labelPoint) {
        var figureCenter = barPointStrategy.getFigureCenter(figure);
        var point = getClosestCoord(labelPoint, [
          [figure.x, figureCenter[1]],
          [figureCenter[0], figure.y + figure.height],
          [figure.x + figure.width, figureCenter[1]],
          [figureCenter[0], figure.y]
        ]);
        return point;
      },
      adjustPoints: function(points) {
        var lineIsVertical = _abs(points[1] - points[3]) <= 1;
        var lineIsHorizontal = _abs(points[0] - points[2]) <= 1;
        if (lineIsHorizontal) {
          points[0] = points[2];
        }
        if (lineIsVertical) {
          points[1] = points[3];
        }
        return points;
      }
    };
    var symbolPointStrategy = {
      isLabelInside: function() {
        return false;
      },
      prepareLabelPoints: barPointStrategy.prepareLabelPoints,
      isHorizontal: function(bBox, figure) {
        return bBox.x > figure.x + figure.r || bBox.x + bBox.width < figure.x - figure.r;
      },
      getFigureCenter: function(figure) {
        return [figure.x, figure.y];
      },
      findFigurePoint: function(figure, labelPoint) {
        var angle = Math.atan2(figure.y - labelPoint[1], labelPoint[0] - figure.x);
        return [_round(figure.x + figure.r * Math.cos(angle)), _round(figure.y - figure.r * Math.sin(angle))];
      },
      adjustPoints: barPointStrategy.adjustPoints
    };
    var piePointStrategy = {
      isLabelInside: function(_0, _1, isOutside) {
        return !isOutside;
      },
      prepareLabelPoints: function(bBox, rotatedBBox, isHorizontal, angle) {
        var xl = bBox.x;
        var xr = xl + bBox.width;
        var xc = xl + _round(bBox.width / 2);
        var yt = bBox.y;
        var yb = yt + bBox.height;
        var yc = yt + _round(bBox.height / 2);
        var points = [
          [
            [xl, yt],
            [xr, yt]
          ],
          [
            [xr, yt],
            [xr, yb]
          ],
          [
            [xr, yb],
            [xl, yb]
          ],
          [
            [xl, yb],
            [xl, yt]
          ]
        ];
        var cosSin = (0, _utils.getCosAndSin)(angle);
        if (0 === angle) {
          points = isHorizontal ? [
            [xl, yc],
            [xr, yc]
          ] : [
            [xc, yt],
            [xc, yb]
          ];
        } else {
          points = points.map(function(pair) {
            return pair.map(function(point) {
              return [_round((point[0] - xc) * cosSin.cos + (point[1] - yc) * cosSin.sin + xc), _round(-(point[0] - xc) * cosSin.sin + (point[1] - yc) * cosSin.cos + yc)];
            });
          }).reduce(function(r, pair) {
            var point1x = pair[0][0];
            var point1y = pair[0][1];
            var point2x = pair[1][0];
            var point2y = pair[1][1];
            if (isHorizontal) {
              if (point1y >= yc && yc >= point2y || point1y <= yc && yc <= point2y) {
                r.push([(yc - point1y) * (point2x - point1x) / (point2y - point1y) + point1x, yc]);
              }
            } else if (point1x >= xc && xc >= point2x || point1x <= xc && xc <= point2x) {
              r.push([xc, (xc - point1x) * (point2y - point1y) / (point2x - point1x) + point1y]);
            }
            return r;
          }, []);
        }
        return points;
      },
      isHorizontal: function(bBox, figure) {
        return bBox.x > figure.x || figure.x > bBox.x + bBox.width;
      },
      getFigureCenter: symbolPointStrategy.getFigureCenter,
      findFigurePoint: function(figure, labelPoint, isHorizontal) {
        if (!isHorizontal) {
          return [figure.x, figure.y];
        }
        var labelX = labelPoint[0];
        var x = _round(figure.x + (figure.y - labelPoint[1]) / Math.tan((0, _utils.degreesToRadians)(figure.angle)));
        var points = [figure.x, figure.y, x, labelPoint[1]];
        if (!(figure.x <= x && x <= labelX) && !(labelX <= x && x <= figure.x)) {
          if (_abs(figure.x - labelX) < CONNECTOR_LENGTH) {
            points = [figure.x, figure.y];
          } else if (figure.x <= labelX) {
            points[2] = figure.x + CONNECTOR_LENGTH;
          } else {
            points[2] = figure.x - CONNECTOR_LENGTH;
          }
        }
        return points;
      },
      adjustPoints: function(points) {
        return points;
      }
    };
    function selectStrategy(figure) {
      return void 0 !== figure.angle && piePointStrategy || void 0 !== figure.r && symbolPointStrategy || barPointStrategy;
    }
    function disposeItem(obj, field) {
      obj[field] && obj[field].dispose();
      obj[field] = null;
    }
    function checkBackground(background) {
      return background && (background.fill && "none" !== background.fill || background["stroke-width"] > 0 && background.stroke && "none" !== background.stroke);
    }
    function checkConnector(connector) {
      return connector && connector["stroke-width"] > 0 && connector.stroke && "none" !== connector.stroke;
    }
    function formatText(data, options) {
      var format = options.format;
      data.valueText = _format(data.value, format);
      data.argumentText = _format(data.argument, options.argumentFormat);
      if (void 0 !== data.percent) {
        data.percentText = _format(data.percent, {
          type: "percent",
          precision: format && format.percentPrecision
        });
      }
      if (void 0 !== data.total) {
        data.totalText = _format(data.total, format);
      }
      if (void 0 !== data.openValue) {
        data.openValueText = _format(data.openValue, format);
      }
      if (void 0 !== data.closeValue) {
        data.closeValueText = _format(data.closeValue, format);
      }
      if (void 0 !== data.lowValue) {
        data.lowValueText = _format(data.lowValue, format);
      }
      if (void 0 !== data.highValue) {
        data.highValueText = _format(data.highValue, format);
      }
      if (void 0 !== data.reductionValue) {
        data.reductionValueText = _format(data.reductionValue, format);
      }
      return options.customizeText ? options.customizeText.call(data, data) : options.displayFormat ? (0, _display_format_parser.processDisplayFormat)(options.displayFormat, data) : data.valueText;
    }
    function Label(renderSettings) {
      this.n = renderSettings.renderer;
      this.Ns = renderSettings.labelsGroup;
      this.Rc = renderSettings.point;
      this.Pl = renderSettings.strategy;
      this.Ql = 1;
    }
    Label.prototype = {
      constructor: Label,
      setColor: function(color) {
        this.Ff = color;
      },
      setOptions: function(options) {
        this.e = options;
      },
      setData: function(data) {
        this.na = data;
      },
      setDataField: function(fieldName, fieldValue) {
        this.na = this.na || {};
        this.na[fieldName] = fieldValue;
      },
      getData: function() {
        return this.na;
      },
      setFigureToDrawConnector: function(figure) {
        this.Ph = figure;
      },
      dispose: function() {
        disposeItem(this, "_group");
        this.na = this.e = this.Qh = this.la = this.Sd = this.aa = this.$ = this.Sc = this.Ph = null;
      },
      Rl: function(value, state) {
        this.p && this.p.attr({
          visibility: value
        });
        this.la = state;
      },
      isVisible: function() {
        return this.la;
      },
      hide: function(holdInvisible) {
        this.Sl = !!holdInvisible;
        this.Rh();
      },
      Rh: function() {
        this.Rl("hidden", false);
      },
      show: function(holdVisible) {
        var correctPosition = !this.Oc;
        if (this.Rc.hasValue()) {
          this.Sl = !!holdVisible;
          this.Tl();
          correctPosition && this.Rc.correctLabelPosition(this);
        }
      },
      Tl: function() {
        var renderer = this.n;
        var container = this.Ns;
        var options = this.e || {};
        var text = this.Qh = formatText(this.na, options) || null;
        if (text) {
          if (!this.p) {
            this.p = renderer.g().append(container);
            this.Sd = renderer.g().append(this.p);
            this.aa = renderer.text("", 0, 0).append(this.Sd);
          }
          this.aa.css(options.attributes ? (0, _utils.patchFontOptions)(options.attributes.font) : {});
          if (checkBackground(options.background)) {
            this.$ = this.$ || renderer.rect().append(this.Sd).toBackground();
            this.$.attr(options.background);
            this.Ff && this.$.attr({
              fill: this.Ff
            });
          } else {
            disposeItem(this, "_background");
          }
          if (checkConnector(options.connector)) {
            this.Sc = this.Sc || renderer.path([], "line").sharp().append(this.p).toBackground();
            this.Sc.attr(options.connector);
            this.Ff && this.Sc.attr({
              stroke: this.Ff
            });
          } else {
            disposeItem(this, "_connector");
          }
          this.aa.attr({
            text,
            align: options.textAlignment,
            class: options.cssClass
          });
          this.Sh(this.aa.getBBox());
          this.Rl("visible", true);
          this.Oc = true;
        } else {
          this.Rh();
        }
      },
      Os: function(isVisible) {
        return this.Sl ? this.isVisible() : isVisible;
      },
      draw: function(isVisible) {
        if (this.Os(isVisible)) {
          this.Tl();
          this.Rc && this.Rc.correctLabelPosition(this);
        } else {
          this.Oc = false;
          this.Rh();
        }
        return this;
      },
      Sh: function(bBox) {
        if (this.$) {
          bBox.x -= LABEL_BACKGROUND_PADDING_X;
          bBox.y -= LABEL_BACKGROUND_PADDING_Y;
          bBox.width += 2 * LABEL_BACKGROUND_PADDING_X;
          bBox.height += 2 * LABEL_BACKGROUND_PADDING_Y;
          this.$.attr(bBox);
        }
        this.Ps = (0, _extend.extend)({}, bBox);
        var rotationAngle = this.e.rotationAngle || 0;
        this.Sd.rotate(rotationAngle, bBox.x + bBox.width / 2, bBox.y + bBox.height / 2);
        bBox = (0, _utils.rotateBBox)(bBox, [bBox.x + bBox.width / 2, bBox.y + bBox.height / 2], -rotationAngle);
        this.Ma = bBox;
      },
      getFigureCenter: function() {
        var figure = this.Ph;
        var strategy = this.Pl || selectStrategy(figure);
        return strategy.getFigureCenter(figure);
      },
      Qs: function() {
        var figure = this.Ph;
        var options = this.e;
        var strategy = this.Pl || selectStrategy(figure);
        var bBox = this.Ul(this.Ps);
        var rotatedBBox = this.getBoundingRect();
        var labelPoint;
        var points = [];
        var isHorizontal;
        if (!strategy.isLabelInside(bBox, figure, "inside" !== options.position)) {
          isHorizontal = strategy.isHorizontal(bBox, figure);
          var figureCenter = this.getFigureCenter();
          points = strategy.prepareLabelPoints(bBox, rotatedBBox, isHorizontal, -options.rotationAngle || 0, figureCenter);
          labelPoint = getClosestCoord(figureCenter, points);
          points = strategy.findFigurePoint(figure, labelPoint, isHorizontal);
          points = points.concat(labelPoint);
        }
        return strategy.adjustPoints(points);
      },
      fit: function(maxWidth) {
        var padding = this.$ ? 2 * LABEL_BACKGROUND_PADDING_X : 0;
        var rowCountChanged = false;
        if (this.aa) {
          var result = this.aa.setMaxSize(maxWidth - padding, void 0, this.e);
          var rowCount = result.rowCount;
          if (0 === rowCount) {
            rowCount = 1;
          }
          if (rowCount !== this.Ql) {
            rowCountChanged = true;
            this.Ql = rowCount;
          }
          result.textIsEmpty && disposeItem(this, "_background");
        }
        this.Sh(this.aa.getBBox());
        return rowCountChanged;
      },
      resetEllipsis: function() {
        this.aa && this.aa.restoreText();
        this.Sh(this.aa.getBBox());
      },
      setTrackerData: function(point) {
        this.aa.data({
          "chart-data-point": point
        });
        this.$ && this.$.data({
          "chart-data-point": point
        });
      },
      hideInsideLabel: function(coords) {
        return this.Rc.hideInsideLabel(this, coords);
      },
      getPoint: function() {
        return this.Rc;
      },
      shift: function(x, y) {
        if (this.Qh) {
          this.Sd.attr({
            translateX: this.Rs = _round(x - this.Ma.x),
            translateY: this.Ss = _round(y - this.Ma.y)
          });
          if (this.Sc) {
            this.Sc.attr({
              points: this.Qs()
            });
          }
        }
        return this;
      },
      getBoundingRect: function() {
        return this.Ul(this.Ma);
      },
      Ul: function(bBox) {
        return this.Qh ? {
          x: bBox.x + this.Rs,
          y: bBox.y + this.Ss,
          width: bBox.width,
          height: bBox.height
        } : {};
      },
      getLayoutOptions: function() {
        var options = this.e;
        return {
          alignment: options.alignment,
          background: checkBackground(options.background),
          horizontalOffset: options.horizontalOffset,
          verticalOffset: options.verticalOffset,
          radialOffset: options.radialOffset,
          position: options.position,
          connectorOffset: (checkConnector(options.connector) ? CONNECTOR_LENGTH : 0) + (checkBackground(options.background) ? LABEL_BACKGROUND_PADDING_X : 0)
        };
      }
    };
  }
});

// node_modules/devextreme/cjs/viz/series/points/symbol_point.js
var require_symbol_point = __commonJS({
  "node_modules/devextreme/cjs/viz/series/points/symbol_point.js"(exports, module) {
    "use strict";
    exports.default = void 0;
    var _extend2 = require_extend();
    var _iterator = require_iterator();
    var _common = require_common();
    var _window = require_window();
    var _label = require_label();
    var _type = require_type();
    var _utils = require_utils();
    var window2 = (0, _window.getWindow)();
    var _extend = _extend2.extend;
    var _math = Math;
    var _round = _math.round;
    var _floor = _math.floor;
    var _ceil = _math.ceil;
    var DEFAULT_IMAGE_WIDTH = 20;
    var DEFAULT_IMAGE_HEIGHT = 20;
    var LABEL_OFFSET = 10;
    var CANVAS_POSITION_DEFAULT = "canvas_position_default";
    function getSquareMarkerCoords(radius) {
      return [-radius, -radius, radius, -radius, radius, radius, -radius, radius, -radius, -radius];
    }
    function getPolygonMarkerCoords(radius) {
      var r = _ceil(radius);
      return [-r, 0, 0, -r, r, 0, 0, r, -r, 0];
    }
    function getCrossMarkerCoords(radius) {
      var r = _ceil(radius);
      var floorHalfRadius = _floor(r / 2);
      var ceilHalfRadius = _ceil(r / 2);
      return [-r, -floorHalfRadius, -floorHalfRadius, -r, 0, -ceilHalfRadius, floorHalfRadius, -r, r, -floorHalfRadius, ceilHalfRadius, 0, r, floorHalfRadius, floorHalfRadius, r, 0, ceilHalfRadius, -floorHalfRadius, r, -r, floorHalfRadius, -ceilHalfRadius, 0];
    }
    function getTriangleDownMarkerCoords(radius) {
      return [-radius, -radius, radius, -radius, 0, radius, -radius, -radius];
    }
    function getTriangleUpMarkerCoords(radius) {
      return [-radius, radius, radius, radius, 0, -radius, -radius, radius];
    }
    var _default = {
      deleteLabel: function() {
        this.C.dispose();
        this.C = null;
      },
      Vl: function() {
        return this.graphic;
      },
      clearVisibility: function() {
        var graphic = this.graphic;
        if (graphic && graphic.attr("visibility")) {
          graphic.attr({
            visibility: null
          });
        }
      },
      isVisible: function() {
        return this.inVisibleArea && this.series.isVisible();
      },
      setInvisibility: function() {
        var graphic = this.graphic;
        if (graphic && "hidden" !== graphic.attr("visibility")) {
          graphic.attr({
            visibility: "hidden"
          });
        }
        this.xb && this.xb.attr({
          visibility: "hidden"
        });
        this.C.draw(false);
      },
      clearMarker: function() {
        var graphic = this.graphic;
        graphic && graphic.attr(this.Wl);
      },
      fc: function() {
        this.C = new _label.Label({
          renderer: this.series.n,
          labelsGroup: this.series.wa,
          point: this
        });
      },
      Tc: function(x, y) {
        var _this$_getVisibleArea = this.Na(), minX = _this$_getVisibleArea.minX, maxX = _this$_getVisibleArea.maxX, minY = _this$_getVisibleArea.minY, maxY = _this$_getVisibleArea.maxY;
        this.inVisibleArea = minX <= x && maxX >= x && minY <= y && maxY >= y;
      },
      Td: function() {
        this.C.setData(this.Uc());
      },
      Gf: function() {
        !this.C && this.fc();
        this.C.setOptions(this.e.label);
      },
      Fa: function(image) {
        return (0, _type.isDefined)(image) && ("string" === typeof image || (0, _type.isDefined)(image.url));
      },
      Th: function() {
        this.t = this.e.styles;
      },
      Uh: function(oldOptions, newOptions) {
        var oldSymbol = oldOptions.symbol;
        var newSymbol = newOptions.symbol;
        var symbolChanged = "circle" === oldSymbol && "circle" !== newSymbol || "circle" !== oldSymbol && "circle" === newSymbol;
        var imageChanged = this.Fa(oldOptions.image) !== this.Fa(newOptions.image);
        return !!(symbolChanged || imageChanged);
      },
      Hf: function(symbol, radius) {
        switch (symbol) {
          case "square":
            return getSquareMarkerCoords(radius);
          case "polygon":
            return getPolygonMarkerCoords(radius);
          case "triangle":
          case "triangleDown":
            return getTriangleDownMarkerCoords(radius);
          case "triangleUp":
            return getTriangleUpMarkerCoords(radius);
          case "cross":
            return getCrossMarkerCoords(radius);
        }
      },
      hasCoords: function() {
        return null !== this.x && null !== this.y;
      },
      correctValue: function(correction) {
        var axis = this.series.getValueAxis();
        if (this.hasValue()) {
          this.value = this.properValue = axis.validateUnit(this.initialValue.valueOf() + correction.valueOf());
          this.minValue = axis.validateUnit(correction);
        }
      },
      resetCorrection: function() {
        this.value = this.properValue = this.initialValue;
        this.minValue = CANVAS_POSITION_DEFAULT;
      },
      resetValue: function() {
        if (this.hasValue()) {
          this.value = this.properValue = this.initialValue = 0;
          this.minValue = 0;
          this.C.setDataField("value", this.value);
        }
      },
      Xl: function(animationEnabled) {
        var translateX = this.x;
        var translateY = this.y;
        if (animationEnabled) {
          if (this.e.rotated) {
            translateX = this.defaultX;
          } else {
            translateY = this.defaultY;
          }
        }
        return {
          x: translateX,
          y: translateY
        };
      },
      Ts: function(renderer, settings, options) {
        var width = options.width || DEFAULT_IMAGE_WIDTH;
        var height = options.height || DEFAULT_IMAGE_HEIGHT;
        return renderer.image(-_round(0.5 * width), -_round(0.5 * height), width, height, options.url ? options.url.toString() : options.toString(), "center").attr({
          translateX: settings.translateX,
          translateY: settings.translateY,
          visibility: settings.visibility
        });
      },
      Us: function(renderer, pointSettings) {
        var marker;
        var symbol = this.e.symbol;
        if ("circle" === symbol) {
          delete pointSettings.points;
          marker = renderer.circle().attr(pointSettings);
        } else if ("square" === symbol || "polygon" === symbol || "triangle" === symbol || "triangleDown" === symbol || "triangleUp" === symbol || "cross" === symbol) {
          marker = renderer.path([], "area").attr(pointSettings).sharp();
        }
        return marker;
      },
      Yl: function(renderer, group, image, settings) {
        var marker = this.Fa(image) ? this.Ts(renderer, settings, image) : this.Us(renderer, settings);
        if (marker) {
          marker.data({
            "chart-data-point": this
          }).append(group);
        }
        return marker;
      },
      Vh: function(x, y, r) {
        return {
          x: x - r,
          y: y - r,
          width: 2 * r,
          height: 2 * r
        };
      },
      Zl: function(x, y) {
        var image = this.e.image;
        var width = image.width || DEFAULT_IMAGE_WIDTH;
        var height = image.height || DEFAULT_IMAGE_HEIGHT;
        return {
          x: x - _round(width / 2),
          y: y - _round(height / 2),
          width,
          height
        };
      },
      Oa: function() {
        var options = this.e;
        var x = this.x;
        var y = this.y;
        var bBox;
        if (options.visible) {
          bBox = this.Fa(options.image) ? this.Zl(x, y) : this.Vh(x, y, options.styles.normal.r);
        } else {
          bBox = {
            x,
            y,
            width: 0,
            height: 0
          };
        }
        return bBox;
      },
      hideInsideLabel: _common.noop,
      _l: function(label) {
        var coord = this.Wh(label, this.Ga(label));
        return this.Ud(label, coord);
      },
      gc: function() {
        var customVisibility = this.$l();
        var label = this.C;
        var isVisible = this.cm() && this.hasValue() && false !== customVisibility && (this.series.getLabelVisibility() || customVisibility);
        label.draw(!!isVisible);
      },
      correctLabelPosition: function(label) {
        var coord = this._l(label);
        if (!this.hideInsideLabel(label, coord)) {
          label.setFigureToDrawConnector(this.Vd(label.pointPosition));
          label.shift(_round(coord.x), _round(coord.y));
        }
      },
      cm: function() {
        return true;
      },
      Vd: function(pointPosition) {
        var bBox = this.Oa(pointPosition);
        var w2 = bBox.width / 2;
        var h2 = bBox.height / 2;
        return {
          x: bBox.x + w2,
          y: bBox.y + h2,
          r: this.e.visible ? Math.max(w2, h2) : 0
        };
      },
      dm: function() {
        return {
          x: this.x,
          y: this.y
        };
      },
      em: function(visibleArea, graphicBBox) {
        return visibleArea.minX <= graphicBBox.x + graphicBBox.width && visibleArea.maxX >= graphicBBox.x && visibleArea.minY <= graphicBBox.y + graphicBBox.height && visibleArea.maxY >= graphicBBox.y;
      },
      Ud: function(label, coord) {
        var visibleArea = this.Na();
        var labelBBox = label.getBoundingRect();
        var graphicBBox = this.Oa(label.pointPosition);
        var fullGraphicBBox = this.Oa();
        var isInside = "inside" === label.getLayoutOptions().position;
        var offset = LABEL_OFFSET;
        if (this.em(visibleArea, fullGraphicBBox)) {
          if (!this.e.rotated) {
            if (visibleArea.minX > coord.x) {
              coord.x = visibleArea.minX;
            }
            if (visibleArea.maxX < coord.x + labelBBox.width) {
              coord.x = visibleArea.maxX - labelBBox.width;
            }
            if (visibleArea.minY > coord.y) {
              coord.y = isInside ? visibleArea.minY : graphicBBox.y + graphicBBox.height + offset;
            }
            if (visibleArea.maxY < coord.y + labelBBox.height) {
              coord.y = isInside ? visibleArea.maxY - labelBBox.height : graphicBBox.y - labelBBox.height - offset;
            }
          } else {
            if (visibleArea.minX > coord.x) {
              coord.x = isInside ? visibleArea.minX : graphicBBox.x + graphicBBox.width + offset;
            }
            if (visibleArea.maxX < coord.x + labelBBox.width) {
              coord.x = isInside ? visibleArea.maxX - labelBBox.width : graphicBBox.x - offset - labelBBox.width;
            }
            if (visibleArea.minY > coord.y) {
              coord.y = visibleArea.minY;
            }
            if (visibleArea.maxY < coord.y + labelBBox.height) {
              coord.y = visibleArea.maxY - labelBBox.height;
            }
          }
        }
        return coord;
      },
      Wh: function(label, coord) {
        var labelBBox = label.getBoundingRect();
        var labelOptions = label.getLayoutOptions();
        if (!this.e.rotated) {
          if ("left" === labelOptions.alignment) {
            coord.x += labelBBox.width / 2;
          } else if ("right" === labelOptions.alignment) {
            coord.x -= labelBBox.width / 2;
          }
        }
        coord.x += labelOptions.horizontalOffset;
        coord.y += labelOptions.verticalOffset;
        return coord;
      },
      Ga: function(label) {
        return this.Wd(label, this.eb(label.pointPosition));
      },
      Wd: function(label, position) {
        var labelBBox = label.getBoundingRect();
        var graphicBBox = this.Oa(label.pointPosition);
        var offset = LABEL_OFFSET;
        var centerY = graphicBBox.height / 2 - labelBBox.height / 2;
        var centerX = graphicBBox.width / 2 - labelBBox.width / 2;
        var x = graphicBBox.x;
        var y = graphicBBox.y;
        switch (position) {
          case "left":
            x -= labelBBox.width + offset;
            y += centerY;
            break;
          case "right":
            x += graphicBBox.width + offset;
            y += centerY;
            break;
          case "top":
            x += centerX;
            y -= labelBBox.height + offset;
            break;
          case "bottom":
            x += centerX;
            y += graphicBBox.height + offset;
            break;
          case "inside":
            x += centerX;
            y += centerY;
        }
        return {
          x,
          y
        };
      },
      yb: function(renderer, group, animationEnabled) {
        var options = this.e;
        var translates = this.Xl(animationEnabled);
        var style = this.zb();
        this.graphic = this.Yl(renderer, group, options.image, _extend({
          translateX: translates.x,
          translateY: translates.y,
          points: this.Hf(options.symbol, style.r)
        }, style));
      },
      Xd: function() {
        return {
          visibility: "visible"
        };
      },
      Xh: function() {
        return 2 * this.getPointRadius();
      },
      fm: function(renderer, group) {
        if (!this.e.errorBars) {
          return;
        }
        var options = this.e;
        var errorBarOptions = options.errorBars;
        var points = [];
        var settings;
        var pos = this.Yd;
        var high = this.If;
        var low = this.Vc;
        var displayMode = (0, _utils.normalizeEnum)(errorBarOptions.displayMode);
        var isHighDisplayMode = "high" === displayMode;
        var isLowDisplayMode = "low" === displayMode;
        var highErrorOnly = (isHighDisplayMode || !(0, _type.isDefined)(low)) && (0, _type.isDefined)(high) && !isLowDisplayMode;
        var lowErrorOnly = (isLowDisplayMode || !(0, _type.isDefined)(high)) && (0, _type.isDefined)(low) && !isHighDisplayMode;
        var edgeLength = errorBarOptions.edgeLength;
        if (edgeLength <= 1 && edgeLength > 0) {
          edgeLength = this.Xh() * errorBarOptions.edgeLength;
        }
        edgeLength = _floor(parseInt(edgeLength) / 2);
        highErrorOnly && (low = this.Yh);
        lowErrorOnly && (high = this.Yh);
        if ("none" !== displayMode && (0, _type.isDefined)(high) && (0, _type.isDefined)(low) && (0, _type.isDefined)(pos)) {
          !lowErrorOnly && points.push([pos - edgeLength, high, pos + edgeLength, high]);
          points.push([pos, high, pos, low]);
          !highErrorOnly && points.push([pos + edgeLength, low, pos - edgeLength, low]);
          options.rotated && (0, _iterator.each)(points, function(_, p) {
            p.reverse();
          });
          settings = this.Xd(errorBarOptions);
          if (!this.xb) {
            this.xb = renderer.path(points, "line").attr(settings).append(group);
          } else {
            settings.points = points;
            this.xb.attr(settings);
          }
        } else {
          this.xb && this.xb.attr({
            visibility: "hidden"
          });
        }
      },
      getTooltipParams: function() {
        var graphic = this.graphic;
        return {
          x: this.x,
          y: this.y,
          offset: graphic ? graphic.getBBox().height / 2 : 0
        };
      },
      setPercentValue: function(absTotal, total, leftHoleTotal, rightHoleTotal) {
        var valuePercent = this.value / absTotal || 0;
        var minValuePercent = this.minValue / absTotal || 0;
        var percent = valuePercent - minValuePercent;
        this.C.setDataField("percent", percent);
        this.C.setDataField("total", total);
        if (this.series.isFullStackedSeries() && this.hasValue()) {
          if (this.leftHole) {
            this.leftHole /= absTotal - leftHoleTotal;
            this.minLeftHole /= absTotal - leftHoleTotal;
          }
          if (this.rightHole) {
            this.rightHole /= absTotal - rightHoleTotal;
            this.minRightHole /= absTotal - rightHoleTotal;
          }
          this.value = this.properValue = valuePercent;
          this.minValue = !minValuePercent ? this.minValue : minValuePercent;
        }
      },
      Zh: function() {
        var navigator2 = window2.navigator;
        var r = this.e.styles.normal.r;
        var minTrackerSize = (0, _window.hasProperty)("ontouchstart") || navigator2.msPointerEnabled && navigator2.msMaxTouchPoints || navigator2.pointerEnabled && navigator2.maxTouchPoints ? 20 : 6;
        this.e.trackerR = r < minTrackerSize ? minTrackerSize : r;
        return this.e.trackerR;
      },
      Nb: function() {
        var options = this.e;
        var rotated = options.rotated;
        var errorBars = options.errorBars;
        var translator = this.Ha();
        if (!errorBars) {
          return;
        }
        (0, _type.isDefined)(this.lowError) && (this.Vc = translator.translate(this.lowError));
        (0, _type.isDefined)(this.highError) && (this.If = translator.translate(this.highError));
        this.Yd = _floor(rotated ? this.vy : this.vx);
        this.Yh = "stdDeviation" === errorBars.type ? this.Vc + (this.If - this.Vc) / 2 : rotated ? this.vx : this.vy;
      },
      Ra: function() {
        var valTranslator = this.Ha();
        var argTranslator = this.Jf();
        if (this.e.rotated) {
          this.vx = this.x = valTranslator.translate(this.value);
          this.vy = this.y = argTranslator.translate(this.argument);
          this.minX = valTranslator.translate(this.minValue);
          this.defaultX = valTranslator.translate(CANVAS_POSITION_DEFAULT);
        } else {
          this.vy = this.y = valTranslator.translate(this.value);
          this.vx = this.x = argTranslator.translate(this.argument);
          this.minY = valTranslator.translate(this.minValue);
          this.defaultY = valTranslator.translate(CANVAS_POSITION_DEFAULT);
        }
        this.Nb();
        this.Tc(this.x, this.y);
      },
      fb: function(data) {
        this.value = this.properValue = this.initialValue = this.originalValue = data.value;
        this.minValue = this.initialMinValue = this.originalMinValue = (0, _type.isDefined)(data.minValue) ? data.minValue : CANVAS_POSITION_DEFAULT;
      },
      Kf: function(image) {
        return {
          href: image.url || image.toString(),
          width: image.width || DEFAULT_IMAGE_WIDTH,
          height: image.height || DEFAULT_IMAGE_HEIGHT
        };
      },
      getCrosshairData: function() {
        var r = this.e.rotated;
        var value = this.properValue;
        var argument = this.argument;
        return {
          x: this.vx,
          y: this.vy,
          xValue: r ? value : argument,
          yValue: r ? argument : value,
          axis: this.series.axis
        };
      },
      getPointRadius: function() {
        var style = this.zb();
        var options = this.e;
        var r = style.r;
        var extraSpace;
        var symbol = options.symbol;
        var isSquare = "square" === symbol;
        var isTriangle = "triangle" === symbol || "triangleDown" === symbol || "triangleUp" === symbol;
        if (options.visible && !options.image && r) {
          extraSpace = style["stroke-width"] / 2;
          return (isSquare || isTriangle ? 1.4 * r : r) + extraSpace;
        }
        return 0;
      },
      hc: function(animationEnabled, style) {
        var options = this.e;
        var settings;
        var image = options.image;
        var visibility = !this.isVisible() ? {
          visibility: "hidden"
        } : {};
        if (this.Fa(image)) {
          settings = _extend({}, {
            visibility: style.visibility
          }, visibility, this.Kf(image));
        } else {
          settings = _extend({}, style, visibility, {
            points: this.Hf(options.symbol, style.r)
          });
        }
        if (!animationEnabled) {
          settings.translateX = this.x;
          settings.translateY = this.y;
        }
        this.graphic.attr(settings).sharp();
      },
      Uc: function() {
        return {
          argument: this.initialArgument,
          value: this.initialValue,
          originalArgument: this.originalArgument,
          originalValue: this.originalValue,
          seriesName: this.series.name,
          lowErrorValue: this.lowError,
          highErrorValue: this.highError,
          point: this
        };
      },
      eb: function() {
        var rotated = this.e.rotated;
        if (this.initialValue > 0) {
          return rotated ? "right" : "top";
        } else {
          return rotated ? "left" : "bottom";
        }
      },
      Sa: function(tooltip) {
        var labelFormatObject = this.C.getData();
        return _extend({}, labelFormatObject, {
          argumentText: tooltip.formatValue(this.initialArgument, "argument"),
          valueText: tooltip.formatValue(this.initialValue)
        }, (0, _type.isDefined)(labelFormatObject.percent) ? {
          percentText: tooltip.formatValue(labelFormatObject.percent, "percent")
        } : {}, (0, _type.isDefined)(labelFormatObject.total) ? {
          totalText: tooltip.formatValue(labelFormatObject.total)
        } : {});
      },
      getMarkerVisibility: function() {
        return this.e.visible;
      },
      coordsIn: function(x, y) {
        var trackerRadius = this.Zh();
        return x >= this.x - trackerRadius && x <= this.x + trackerRadius && y >= this.y - trackerRadius && y <= this.y + trackerRadius;
      },
      getMinValue: function(noErrorBar) {
        var errorBarOptions = this.e.errorBars;
        if (errorBarOptions && !noErrorBar) {
          var displayMode = errorBarOptions.displayMode;
          var lowValue = "high" !== displayMode && (0, _type.isDefined)(this.lowError) ? this.lowError : this.value;
          var highValue = "low" !== displayMode && (0, _type.isDefined)(this.highError) ? this.highError : this.value;
          return lowValue < highValue ? lowValue : highValue;
        } else {
          return this.value;
        }
      },
      getMaxValue: function(noErrorBar) {
        var errorBarOptions = this.e.errorBars;
        if (errorBarOptions && !noErrorBar) {
          var displayMode = errorBarOptions.displayMode;
          var lowValue = "high" !== displayMode && (0, _type.isDefined)(this.lowError) ? this.lowError : this.value;
          var highValue = "low" !== displayMode && (0, _type.isDefined)(this.highError) ? this.highError : this.value;
          return lowValue > highValue ? lowValue : highValue;
        } else {
          return this.value;
        }
      }
    };
    exports.default = _default;
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/devextreme/cjs/viz/series/points/bar_point.js
var require_bar_point = __commonJS({
  "node_modules/devextreme/cjs/viz/series/points/bar_point.js"(exports, module) {
    "use strict";
    exports.default = void 0;
    var _extend2 = require_extend();
    var _symbol_point = _interopRequireDefault(require_symbol_point());
    function _interopRequireDefault(obj) {
      return obj && obj.j ? obj : {
        default: obj
      };
    }
    var _extend = _extend2.extend;
    var _math = Math;
    var _floor = _math.floor;
    var _abs = _math.abs;
    var CANVAS_POSITION_DEFAULT = "canvas_position_default";
    var DEFAULT_BAR_TRACKER_SIZE = 9;
    var CORRECTING_BAR_TRACKER_VALUE = 4;
    var RIGHT = "right";
    var LEFT = "left";
    var TOP = "top";
    var BOTTOM = "bottom";
    function getLabelOrientation(point) {
      var initialValue = point.initialValue;
      var invert = point.Ha().getBusinessRange().invert;
      var isDiscreteValue = "discrete" === point.series.valueAxisType;
      var isFullStacked = point.series.isFullStackedSeries();
      var notAxisInverted = !isDiscreteValue && (initialValue >= 0 && !invert || initialValue < 0 && invert) || isDiscreteValue && !invert || isFullStacked;
      return notAxisInverted ? TOP : BOTTOM;
    }
    var _default = _extend({}, _symbol_point.default, {
      correctCoordinates: function(correctOptions) {
        var correction = _floor(correctOptions.offset - correctOptions.width / 2);
        if (this.e.rotated) {
          this.height = correctOptions.width;
          this.yCorrection = correction;
          this.xCorrection = null;
        } else {
          this.width = correctOptions.width;
          this.xCorrection = correction;
          this.yCorrection = null;
        }
      },
      Tc: function(x, y, width, height) {
        var _this$_getVisibleArea = this.Na(), minX = _this$_getVisibleArea.minX, maxX = _this$_getVisibleArea.maxX, minY = _this$_getVisibleArea.minY, maxY = _this$_getVisibleArea.maxY;
        this.inVisibleArea = minX < x + width && maxX > x && minY < y + height && maxY > y;
      },
      Oa: function(location) {
        var bBox = {
          x: this.x,
          y: this.y,
          width: this.width,
          height: this.height
        };
        if (location) {
          var isTop = "top" === location;
          if (!this.e.rotated) {
            bBox.y = isTop ? bBox.y : bBox.y + bBox.height;
            bBox.height = 0;
          } else {
            bBox.x = isTop ? bBox.x + bBox.width : bBox.x;
            bBox.width = 0;
          }
        }
        return bBox;
      },
      Vd: function(location) {
        return this.Oa(location);
      },
      eb: function() {
        var position = getLabelOrientation(this);
        if (this.e.rotated) {
          position = position === TOP ? RIGHT : LEFT;
        }
        return position;
      },
      Ga: function(label) {
        var coords;
        if (0 === this.initialValue && this.series.isFullStackedSeries()) {
          if (!this.e.rotated) {
            coords = this.Wd(label, TOP);
          } else {
            coords = this.Wd(label, RIGHT);
          }
        } else if ("inside" === label.getLayoutOptions().position) {
          coords = this.Wd(label, "inside");
        } else {
          coords = _symbol_point.default.Ga.call(this, label);
        }
        return coords;
      },
      gc: function() {
        this.C.pointPosition = "inside" !== this.C.getLayoutOptions().position && getLabelOrientation(this);
        _symbol_point.default.gc.call(this);
      },
      hideInsideLabel: function(label, coord) {
        var graphicBBox = this.Oa();
        var labelBBox = label.getBoundingRect();
        if (this.e.resolveLabelsOverlapping) {
          if ((coord.y <= graphicBBox.y && coord.y + labelBBox.height >= graphicBBox.y + graphicBBox.height || coord.x <= graphicBBox.x && coord.x + labelBBox.width >= graphicBBox.x + graphicBBox.width) && !(coord.y > graphicBBox.y + graphicBBox.height || coord.y + labelBBox.height < graphicBBox.y || coord.x > graphicBBox.x + graphicBBox.width || coord.x + labelBBox.width < graphicBBox.x)) {
            label.draw(false);
            return true;
          }
        }
        return false;
      },
      cm: function() {
        return this.e.label.showForZeroValues || this.initialValue;
      },
      yb: function(renderer, group, animationEnabled) {
        var style = this.zb();
        var r = this.e.cornerRadius;
        var rotated = this.e.rotated;
        var _that$getMarkerCoords = this.getMarkerCoords(), x = _that$getMarkerCoords.x, y = _that$getMarkerCoords.y, width = _that$getMarkerCoords.width, height = _that$getMarkerCoords.height;
        if (animationEnabled) {
          if (rotated) {
            width = 0;
            x = this.defaultX;
          } else {
            height = 0;
            y = this.defaultY;
          }
        }
        this.graphic = renderer.rect(x, y, width, height).attr({
          rx: r,
          ry: r
        }).smartAttr(style).data({
          "chart-data-point": this
        }).append(group);
      },
      gm: function() {
        var y = this.y;
        var height = this.height;
        var x = this.x;
        var width = this.width;
        if (this.e.rotated) {
          if (1 === width) {
            width = DEFAULT_BAR_TRACKER_SIZE;
            x -= CORRECTING_BAR_TRACKER_VALUE;
          }
        } else if (1 === height) {
          height = DEFAULT_BAR_TRACKER_SIZE;
          y -= CORRECTING_BAR_TRACKER_VALUE;
        }
        return {
          x,
          y,
          width,
          height
        };
      },
      getGraphicSettings: function() {
        var graphic = this.graphic;
        return {
          x: graphic.attr("x"),
          y: graphic.attr("y"),
          height: graphic.attr("height"),
          width: graphic.attr("width")
        };
      },
      Vs: function() {
        var isPositive = this.value >= 0;
        var xCoord;
        var yCoord;
        var invertedBusinessRange = this.Ha().getBusinessRange().invert;
        var x = this.x, y = this.y, width = this.width, height = this.height;
        if (this.e.rotated) {
          yCoord = y + height / 2;
          if (invertedBusinessRange) {
            xCoord = isPositive ? x : x + width;
          } else {
            xCoord = isPositive ? x + width : x;
          }
        } else {
          xCoord = x + width / 2;
          if (invertedBusinessRange) {
            yCoord = isPositive ? y + height : y;
          } else {
            yCoord = isPositive ? y : y + height;
          }
        }
        return {
          x: xCoord,
          y: yCoord,
          offset: 0
        };
      },
      getTooltipParams: function(location) {
        if ("edge" === location) {
          return this.Vs();
        }
        var center = this.getCenterCoord();
        center.offset = 0;
        return center;
      },
      getCenterCoord: function() {
        var width = this.width, height = this.height, x = this.x, y = this.y;
        return {
          x: x + width / 2,
          y: y + height / 2
        };
      },
      Lf: function(coord, bounds) {
        if (null === coord) {
          return coord;
        }
        if (coord < bounds[0]) {
          return bounds[0];
        }
        if (coord > bounds[1]) {
          return bounds[1];
        }
        return coord;
      },
      Xh: function() {
        return this.e.rotated ? this.height : this.width;
      },
      Nb: function(argVisibleArea) {
        _symbol_point.default.Nb.call(this);
        if (this.Yd < argVisibleArea[0] || this.Yd > argVisibleArea[1]) {
          this.Yd = void 0;
        }
      },
      Ra: function() {
        var rotated = this.e.rotated;
        var valAxis = rotated ? "x" : "y";
        var argAxis = rotated ? "y" : "x";
        var valIntervalName = rotated ? "width" : "height";
        var argIntervalName = rotated ? "height" : "width";
        var argTranslator = this.Jf();
        var valTranslator = this.Ha();
        var argVisibleArea = this.series.getArgumentAxis().getVisibleArea();
        var valVisibleArea = this.series.getValueAxis().getVisibleArea();
        var arg = argTranslator.translate(this.argument);
        var val = valTranslator.translate(this.value, 1);
        var minVal = valTranslator.translate(this.minValue, -1);
        this[argAxis] = arg = null === arg ? arg : arg + (this[argAxis + "Correction"] || 0);
        this["v" + valAxis] = val;
        this["v" + argAxis] = arg + this[argIntervalName] / 2;
        val = this.Lf(val, valVisibleArea);
        minVal = this.Lf(minVal, valVisibleArea);
        this[valIntervalName] = _abs(val - minVal);
        val = val < minVal ? val : minVal;
        this.Tc(rotated ? val : arg, rotated ? arg : val, this.width, this.height);
        this[valAxis] = null === val ? val : val + (this[valAxis + "Correction"] || 0);
        this["min" + valAxis.toUpperCase()] = null === minVal ? minVal : minVal + (this[valAxis + "Correction"] || 0);
        this["default" + valAxis.toUpperCase()] = valTranslator.translate(CANVAS_POSITION_DEFAULT);
        this.Nb(argVisibleArea);
        if (this.inVisibleArea && null !== this[argAxis]) {
          if (this[argAxis] < argVisibleArea[0]) {
            this[argIntervalName] = this[argIntervalName] - (argVisibleArea[0] - this[argAxis]);
            this[argAxis] = argVisibleArea[0];
          }
          if (this[argAxis] + this[argIntervalName] > argVisibleArea[1]) {
            this[argIntervalName] = argVisibleArea[1] - this[argAxis];
          }
        }
      },
      hc: function(animationEnabled, style) {
        this.graphic.smartAttr(_extend({}, style, !animationEnabled ? this.getMarkerCoords() : {}));
      },
      getMarkerCoords: function() {
        var x = this.x;
        var y = this.y;
        var width = this.width;
        var height = this.height;
        var argAxis = this.series.getArgumentAxis();
        var rotated = this.e.rotated;
        if (argAxis.getAxisPosition) {
          var axisOptions = argAxis.getOptions();
          var edgeOffset = Math.round(axisOptions.width / 2);
          var argAxisPosition = argAxis.getAxisPosition();
          if (axisOptions.visible) {
            if (!rotated) {
              height -= this.minY === this.defaultY && this.minY === argAxisPosition - argAxis.getAxisShift() ? edgeOffset : 0;
              height < 0 && (height = 0);
            } else {
              var isStartFromAxis = this.minX === this.defaultX && this.minX === argAxisPosition - argAxis.getAxisShift();
              x += isStartFromAxis ? edgeOffset : 0;
              width -= isStartFromAxis ? edgeOffset : 0;
              width < 0 && (width = 0);
            }
          }
        }
        return {
          x,
          y,
          width,
          height
        };
      },
      coordsIn: function(x, y) {
        return x >= this.x && x <= this.x + this.width && y >= this.y && y <= this.y + this.height;
      }
    });
    exports.default = _default;
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/devextreme/cjs/viz/series/points/bubble_point.js
var require_bubble_point = __commonJS({
  "node_modules/devextreme/cjs/viz/series/points/bubble_point.js"(exports, module) {
    "use strict";
    exports.default = void 0;
    var _extend2 = require_extend();
    var _symbol_point = _interopRequireDefault(require_symbol_point());
    function _interopRequireDefault(obj) {
      return obj && obj.j ? obj : {
        default: obj
      };
    }
    var _extend = _extend2.extend;
    var MIN_BUBBLE_HEIGHT = 20;
    var _default = _extend({}, _symbol_point.default, {
      correctCoordinates: function(diameter) {
        this.bubbleSize = diameter / 2;
      },
      yb: function(renderer, group, animationEnabled) {
        var attr = _extend({
          translateX: this.x,
          translateY: this.y
        }, this.zb());
        this.graphic = renderer.circle(0, 0, animationEnabled ? 0 : this.bubbleSize).smartAttr(attr).data({
          "chart-data-point": this
        }).append(group);
      },
      getTooltipParams: function(location) {
        var graphic = this.graphic;
        if (!graphic) {
          return;
        }
        var height = graphic.getBBox().height;
        return {
          x: this.x,
          y: this.y,
          offset: height < MIN_BUBBLE_HEIGHT || "edge" === location ? height / 2 : 0
        };
      },
      Uc: function() {
        var formatObject = _symbol_point.default.Uc.call(this);
        formatObject.size = this.initialSize;
        return formatObject;
      },
      fb: function(data) {
        _symbol_point.default.fb.call(this, data);
        this.size = this.initialSize = data.size;
      },
      Oa: function() {
        return this.Vh(this.x, this.y, this.bubbleSize);
      },
      hc: function(animationEnabled, style) {
        if (!animationEnabled) {
          style = _extend({
            r: this.bubbleSize,
            translateX: this.x,
            translateY: this.y
          }, style);
        }
        this.graphic.smartAttr(style);
      },
      Sa: function(tooltip) {
        var formatObject = _symbol_point.default.Sa.call(this, tooltip);
        formatObject.sizeText = tooltip.formatValue(this.initialSize);
        return formatObject;
      },
      Zh: function() {
        return this.bubbleSize;
      },
      Ga: function(label) {
        var coords;
        if ("inside" === label.getLayoutOptions().position) {
          coords = this.Wd(label, "inside");
        } else {
          coords = _symbol_point.default.Ga.call(this, label);
        }
        return coords;
      }
    });
    exports.default = _default;
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/devextreme/cjs/viz/series/points/pie_point.js
var require_pie_point = __commonJS({
  "node_modules/devextreme/cjs/viz/series/points/pie_point.js"(exports, module) {
    "use strict";
    exports.default = void 0;
    var _extend2 = require_extend();
    var _symbol_point = _interopRequireDefault(require_symbol_point());
    var _utils = require_utils();
    var _type = require_type();
    var _consts = _interopRequireDefault(require_consts());
    function _interopRequireDefault(obj) {
      return obj && obj.j ? obj : {
        default: obj
      };
    }
    var _extend = _extend2.extend;
    var _round = Math.round;
    var _sqrt = Math.sqrt;
    var _acos = Math.acos;
    var DEG = 180 / Math.PI;
    var _abs = Math.abs;
    var RADIAL_LABEL_INDENT = _consts.default.radialLabelIndent;
    var _default = _extend({}, _symbol_point.default, {
      fb: function(data, argumentChanged) {
        _symbol_point.default.fb.call(this, data);
        if (argumentChanged || !(0, _type.isDefined)(this.la)) {
          this.la = true;
        }
        this.minValue = this.initialMinValue = this.originalMinValue = (0, _type.isDefined)(data.minValue) ? data.minValue : 0;
      },
      animate: function(complete, duration, delay) {
        this.graphic.animate({
          x: this.centerX,
          y: this.centerY,
          outerRadius: this.radiusOuter,
          innerRadius: this.radiusInner,
          startAngle: this.toAngle,
          endAngle: this.fromAngle
        }, {
          delay,
          partitionDuration: duration
        }, complete);
      },
      correctPosition: function(correction) {
        this.correctRadius(correction);
        this.correctLabelRadius(correction.radiusOuter + RADIAL_LABEL_INDENT);
        this.centerX = correction.centerX;
        this.centerY = correction.centerY;
      },
      correctRadius: function(correction) {
        this.radiusInner = correction.radiusInner;
        this.radiusOuter = correction.radiusOuter;
      },
      correctLabelRadius: function(radiusLabels) {
        this.radiusLabels = radiusLabels;
      },
      correctValue: function(correction, percent, base) {
        this.value = (base || this.normalInitialValue) + correction;
        this.minValue = correction;
        this.percent = percent;
        this.C.setDataField("percent", percent);
      },
      Td: function() {
        this.C.setData(this.Uc());
      },
      _l: function() {
        var bBox = this.C.getBoundingRect();
        var coord = this.Ga(this.C);
        var visibleArea = this.Na();
        if (this.hm) {
          return this.Ud(coord, bBox, visibleArea);
        } else {
          return this.Ws(coord, this.im(coord, bBox, visibleArea), bBox);
        }
      },
      eb: function(options) {
        return options.position;
      },
      getAnnotationCoords: function(location) {
        return this.Wc("edge" !== location ? "inside" : "outside", this.radiusOuter, 0);
      },
      Wc: function(position, elementRadius, radialOffset) {
        var bBox = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : {
          x: 0,
          y: 0,
          width: 0,
          height: 0
        };
        var that = this;
        var angleFunctions = (0, _utils.getCosAndSin)(that.middleAngle);
        var radiusInner = that.radiusInner;
        var radiusOuter = that.radiusOuter;
        var columnsPosition = "columns" === position;
        var rad;
        var x;
        if ("inside" === position) {
          rad = radiusInner + (radiusOuter - radiusInner) / 2 + radialOffset;
          x = that.centerX + rad * angleFunctions.cos - bBox.width / 2;
        } else {
          rad = elementRadius + radialOffset;
          if (angleFunctions.cos > 0.1 || columnsPosition && angleFunctions.cos >= 0) {
            x = that.centerX + rad * angleFunctions.cos;
          } else if (angleFunctions.cos < -0.1 || columnsPosition && angleFunctions.cos < 0) {
            x = that.centerX + rad * angleFunctions.cos - bBox.width;
          } else {
            x = that.centerX + rad * angleFunctions.cos - bBox.width / 2;
          }
        }
        return {
          x,
          y: _round(that.centerY - rad * angleFunctions.sin - bBox.height / 2)
        };
      },
      Ga: function(label) {
        var bBox = label.getBoundingRect();
        var options = label.getLayoutOptions();
        var position = this.eb(options);
        return this.Wc(position, this.radiusLabels, options.radialOffset, bBox);
      },
      Xs: function(coord, moveLabelsFromCenter) {
        var label = this.C;
        var bBox = label.getBoundingRect();
        var labelWidth = bBox.width;
        var options = label.getLayoutOptions();
        var visibleArea = this.Na();
        var rightBorderX = visibleArea.maxX - labelWidth;
        var leftBorderX = visibleArea.minX;
        var angleOfPoint = (0, _utils.normalizeAngle)(this.middleAngle);
        var centerX = this.centerX;
        var connectorOffset = options.connectorOffset;
        var x = coord.x;
        if ("columns" === options.position) {
          if (angleOfPoint <= 90 || angleOfPoint >= 270) {
            x = rightBorderX;
          } else {
            x = leftBorderX;
          }
          coord.x = x;
        } else if ("inside" !== options.position && moveLabelsFromCenter) {
          if (angleOfPoint <= 90 || angleOfPoint >= 270) {
            if (x - connectorOffset < centerX) {
              x = centerX + connectorOffset;
            }
          } else if (x + labelWidth + connectorOffset > centerX) {
            x = centerX - labelWidth - connectorOffset;
          }
          coord.x = x;
        }
        return coord;
      },
      drawLabel: function() {
        this.translate();
        this.hm = true;
        this.gc();
        this.hm = false;
      },
      updateLabelCoord: function(moveLabelsFromCenter) {
        var bBox = this.C.getBoundingRect();
        var coord = this.Xs(bBox, moveLabelsFromCenter);
        coord = this.jm(coord, bBox, this.Na());
        this.C.shift(_round(coord.x), _round(bBox.y));
      },
      im: function(coord, box, visibleArea) {
        var x = coord.x;
        var y = coord.y;
        if (coord.y + box.height > visibleArea.maxY) {
          y = visibleArea.maxY - box.height;
        } else if (coord.y < visibleArea.minY) {
          y = visibleArea.minY;
        }
        return {
          x,
          y
        };
      },
      Ws: function(coord, shiftCoord, box) {
        return coord.y !== shiftCoord.y ? (0, _utils.getVerticallyShiftedAngularCoords)({
          x: coord.x,
          y: coord.y,
          width: box.width,
          height: box.height
        }, shiftCoord.y - coord.y, {
          x: this.centerX,
          y: this.centerY
        }) : coord;
      },
      jm: function(coord, box, visibleArea) {
        var x = coord.x;
        var y = coord.y;
        if (coord.x + box.width > visibleArea.maxX) {
          x = visibleArea.maxX - box.width;
        } else if (coord.x < visibleArea.minX) {
          x = visibleArea.minX;
        }
        return {
          x,
          y
        };
      },
      applyWordWrap: function(moveLabelsFromCenter) {
        var label = this.C;
        var box = label.getBoundingRect();
        var visibleArea = this.Na();
        var position = label.getLayoutOptions().position;
        var width = box.width;
        var rowCountChanged = false;
        if ("columns" === position && this.series.index > 0) {
          width = visibleArea.maxX - this.centerX - this.radiusLabels;
        } else if ("inside" === position) {
          if (width > visibleArea.maxX - visibleArea.minX) {
            width = visibleArea.maxX - visibleArea.minX;
          }
        } else if (moveLabelsFromCenter && box.x < this.centerX && box.width + box.x > this.centerX) {
          width = Math.floor((visibleArea.maxX - visibleArea.minX) / 2);
        } else if (box.x + width > visibleArea.maxX) {
          width = visibleArea.maxX - box.x;
        } else if (box.x < visibleArea.minX) {
          width = box.x + width - visibleArea.minX;
        }
        if (width < box.width) {
          rowCountChanged = label.fit(width);
        }
        return rowCountChanged;
      },
      setLabelTrackerData: function() {
        this.C.setTrackerData(this);
      },
      Ud: function(coord, bBox, visibleArea) {
        coord = this.jm(coord, bBox, visibleArea);
        return this.im(coord, bBox, visibleArea);
      },
      Vd: function() {
        var rad = this.radiusOuter;
        var seriesStyle = this.e.styles.normal;
        var strokeWidthBy2 = seriesStyle["stroke-width"] / 2;
        var borderWidth = this.series.getOptions().containerBackgroundColor === seriesStyle.stroke ? _round(strokeWidthBy2) : _round(-strokeWidthBy2);
        var angleFunctions = (0, _utils.getCosAndSin)(_round(this.middleAngle));
        return {
          x: _round(this.centerX + (rad - borderWidth) * angleFunctions.cos),
          y: _round(this.centerY - (rad - borderWidth) * angleFunctions.sin),
          angle: this.middleAngle
        };
      },
      yb: function(renderer, group, animationEnabled, firstDrawing) {
        var radiusOuter = this.radiusOuter;
        var radiusInner = this.radiusInner;
        var fromAngle = this.fromAngle;
        var toAngle = this.toAngle;
        if (animationEnabled) {
          radiusInner = radiusOuter = 0;
          if (!firstDrawing) {
            fromAngle = toAngle = this.shiftedAngle;
          }
        }
        this.graphic = renderer.arc(this.centerX, this.centerY, radiusInner, radiusOuter, toAngle, fromAngle).attr({
          "stroke-linejoin": "round"
        }).smartAttr(this.zb()).data({
          "chart-data-point": this
        }).sharp().append(group);
      },
      getTooltipParams: function() {
        var angleFunctions = (0, _utils.getCosAndSin)(this.middleAngle);
        var radiusInner = this.radiusInner;
        var radiusOuter = this.radiusOuter;
        return {
          x: this.centerX + (radiusInner + (radiusOuter - radiusInner) / 2) * angleFunctions.cos,
          y: this.centerY - (radiusInner + (radiusOuter - radiusInner) / 2) * angleFunctions.sin,
          offset: 0
        };
      },
      Ra: function() {
        var angle = this.shiftedAngle || 0;
        var value = this.value;
        var minValue = this.minValue;
        var translator = this.Ha();
        this.fromAngle = translator.translate(minValue) + angle;
        this.toAngle = translator.translate(value) + angle;
        this.middleAngle = translator.translate((value - minValue) / 2 + minValue) + angle;
        if (!this.isVisible()) {
          this.middleAngle = this.toAngle = this.fromAngle = this.fromAngle || angle;
        }
      },
      getMarkerVisibility: function() {
        return true;
      },
      hc: function(animationEnabled, style, _, callback) {
        if (!animationEnabled) {
          style = _extend({
            x: this.centerX,
            y: this.centerY,
            outerRadius: this.radiusOuter,
            innerRadius: this.radiusInner,
            startAngle: this.toAngle,
            endAngle: this.fromAngle
          }, style);
        }
        this.graphic.smartAttr(style).sharp();
        callback && callback();
      },
      getLegendStyles: function() {
        return this.t.legendStyles;
      },
      isInVisibleArea: function() {
        return true;
      },
      hide: function() {
        if (this.la) {
          this.la = false;
          this.hideTooltip();
          this.e.visibilityChanged();
        }
      },
      show: function() {
        if (!this.la) {
          this.la = true;
          this.e.visibilityChanged();
        }
      },
      setInvisibility: function() {
        this.C.draw(false);
      },
      isVisible: function() {
        return this.la;
      },
      Sa: function(tooltip) {
        var formatObject = _symbol_point.default.Sa.call(this, tooltip);
        var percent = this.percent;
        formatObject.percent = percent;
        formatObject.percentText = tooltip.formatValue(percent, "percent");
        return formatObject;
      },
      getColor: function() {
        return this.t.normal.fill;
      },
      coordsIn: function(x, y) {
        var lx = x - this.centerX;
        var ly = y - this.centerY;
        var r = _sqrt(lx * lx + ly * ly);
        var fromAngle = this.fromAngle % 360;
        var toAngle = this.toAngle % 360;
        var angle;
        if (r < this.radiusInner || r > this.radiusOuter || 0 === r) {
          return false;
        }
        angle = _acos(lx / r) * DEG * (ly > 0 ? -1 : 1);
        if (angle < 0) {
          angle += 360;
        }
        if (fromAngle === toAngle && _abs(this.toAngle - this.fromAngle) > 1e-4) {
          return true;
        } else {
          return fromAngle >= toAngle ? angle <= fromAngle && angle >= toAngle : !(angle >= fromAngle && angle <= toAngle);
        }
      }
    });
    exports.default = _default;
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/devextreme/cjs/viz/series/points/range_symbol_point.js
var require_range_symbol_point = __commonJS({
  "node_modules/devextreme/cjs/viz/series/points/range_symbol_point.js"(exports, module) {
    "use strict";
    exports.default = void 0;
    var _iterator = require_iterator();
    var _extend2 = require_extend();
    var _common = require_common();
    var _label = require_label();
    var _symbol_point = _interopRequireDefault(require_symbol_point());
    var _type = require_type();
    function _interopRequireDefault(obj) {
      return obj && obj.j ? obj : {
        default: obj
      };
    }
    var _extend = _extend2.extend;
    var _math = Math;
    var _abs = _math.abs;
    var _min = _math.min;
    var _max = _math.max;
    var _round = _math.round;
    var DEFAULT_IMAGE_WIDTH = 20;
    var DEFAULT_IMAGE_HEIGHT = 20;
    var _default = _extend({}, _symbol_point.default, {
      deleteLabel: function() {
        this.oa.dispose();
        this.oa = null;
        this.xa.dispose();
        this.xa = null;
      },
      hideMarker: function(type) {
        var graphic = this.graphic;
        var marker = graphic && graphic[type + "Marker"];
        var label = this["_" + type + "Label"];
        if (marker && "hidden" !== marker.attr("visibility")) {
          marker.attr({
            visibility: "hidden"
          });
        }
        label.draw(false);
      },
      setInvisibility: function() {
        this.hideMarker("top");
        this.hideMarker("bottom");
      },
      clearVisibility: function() {
        var graphic = this.graphic;
        var topMarker = graphic && graphic.topMarker;
        var bottomMarker = graphic && graphic.bottomMarker;
        if (topMarker && topMarker.attr("visibility")) {
          topMarker.attr({
            visibility: null
          });
        }
        if (bottomMarker && bottomMarker.attr("visibility")) {
          bottomMarker.attr({
            visibility: null
          });
        }
      },
      clearMarker: function() {
        var graphic = this.graphic;
        var topMarker = graphic && graphic.topMarker;
        var bottomMarker = graphic && graphic.bottomMarker;
        var emptySettings = this.Wl;
        topMarker && topMarker.attr(emptySettings);
        bottomMarker && bottomMarker.attr(emptySettings);
      },
      eb: function(markerType) {
        var position;
        var labelsInside = "inside" === this.e.label.position;
        if (!this.e.rotated) {
          position = "top" === markerType ^ labelsInside ? "top" : "bottom";
        } else {
          position = "top" === markerType ^ labelsInside ? "right" : "left";
        }
        return position;
      },
      _h: function() {
        return {
          index: 0,
          argument: this.initialArgument,
          value: this.initialMinValue,
          seriesName: this.series.name,
          originalValue: this.originalMinValue,
          originalArgument: this.originalArgument,
          point: this
        };
      },
      Td: function() {
        var maxFormatObject = this.Uc();
        maxFormatObject.index = 1;
        this.oa.setData(maxFormatObject);
        this.xa.setData(this._h());
      },
      Gf: function() {
        var options = this.e.label;
        (!this.oa || !this.xa) && this.fc();
        this.oa.setOptions(options);
        this.xa.setOptions(options);
      },
      fc: function() {
        var options = {
          renderer: this.series.n,
          labelsGroup: this.series.wa,
          point: this
        };
        this.oa = new _label.Label(options);
        this.xa = new _label.Label(options);
      },
      Oa: function(location) {
        var options = this.e;
        var images = this.Mf(options.image);
        var image = "top" === location ? this.Fa(images.top) : this.Fa(images.bottom);
        var bBox;
        var coord = this.dm(location);
        if (options.visible) {
          bBox = image ? this.Zl(coord.x, coord.y) : this.Vh(coord.x, coord.y, options.styles.normal.r);
        } else {
          bBox = {
            x: coord.x,
            y: coord.y,
            width: 0,
            height: 0
          };
        }
        return bBox;
      },
      dm: function(location) {
        var x;
        var y;
        var isTop = "top" === location;
        if (!this.e.rotated) {
          x = this.x;
          y = isTop ? _min(this.y, this.minY) : _max(this.y, this.minY);
        } else {
          x = isTop ? _max(this.x, this.minX) : _min(this.x, this.minX);
          y = this.y;
        }
        return {
          x,
          y
        };
      },
      Xc: function(bottomCoord, topCoord, topValue) {
        return bottomCoord < topCoord + topValue;
      },
      Yc: function(topCoords, bottomCoords) {
        var rotated = this.e.rotated;
        var coordSelector = !rotated ? "y" : "x";
        var valueSelector = !rotated ? "height" : "width";
        var visibleArea = this.series.getValueAxis().getVisibleArea();
        var minBound = visibleArea[0];
        var maxBound = visibleArea[1];
        var delta = _round((topCoords[coordSelector] + topCoords[valueSelector] - bottomCoords[coordSelector]) / 2);
        var coord1 = topCoords[coordSelector] - delta;
        var coord2 = bottomCoords[coordSelector] + delta;
        if (coord1 < minBound) {
          delta = minBound - coord1;
          coord1 += delta;
          coord2 += delta;
        } else if (coord2 + bottomCoords[valueSelector] > maxBound) {
          delta = maxBound - coord2 - bottomCoords[valueSelector];
          coord1 += delta;
          coord2 += delta;
        }
        return {
          coord1,
          coord2
        };
      },
      $h: function(topLocation) {
        var topCoords = this.oa.getBoundingRect();
        var bottomCoords = this.xa.getBoundingRect();
        var corrections = {};
        if (!this.e.rotated) {
          if ("top" === topLocation) {
            if (this.Xc(bottomCoords.y, topCoords.y, topCoords.height)) {
              corrections = this.Yc(topCoords, bottomCoords);
              this.oa.shift(topCoords.x, corrections.coord1);
              this.xa.shift(bottomCoords.x, corrections.coord2);
            }
          } else if (this.Xc(topCoords.y, bottomCoords.y, bottomCoords.height)) {
            corrections = this.Yc(bottomCoords, topCoords);
            this.oa.shift(topCoords.x, corrections.coord2);
            this.xa.shift(bottomCoords.x, corrections.coord1);
          }
        } else if ("top" === topLocation) {
          if (this.Xc(topCoords.x, bottomCoords.x, bottomCoords.width)) {
            corrections = this.Yc(bottomCoords, topCoords);
            this.oa.shift(corrections.coord2, topCoords.y);
            this.xa.shift(corrections.coord1, bottomCoords.y);
          }
        } else if (this.Xc(bottomCoords.x, topCoords.x, topCoords.width)) {
          corrections = this.Yc(topCoords, bottomCoords);
          this.oa.shift(corrections.coord1, topCoords.y);
          this.xa.shift(corrections.coord2, bottomCoords.y);
        }
      },
      gc: function() {
        var labels = [];
        var notInverted = this.e.rotated ? this.x >= this.minX : this.y < this.minY;
        var customVisibility = this.$l();
        var topLabel = this.oa;
        var bottomLabel = this.xa;
        topLabel.pointPosition = notInverted ? "top" : "bottom";
        bottomLabel.pointPosition = notInverted ? "bottom" : "top";
        if ((this.series.getLabelVisibility() || customVisibility) && this.hasValue() && false !== customVisibility) {
          false !== this.visibleTopMarker && labels.push(topLabel);
          false !== this.visibleBottomMarker && labels.push(bottomLabel);
          (0, _iterator.each)(labels, function(_, label) {
            label.draw(true);
          });
          this.$h(this.oa.pointPosition);
        } else {
          topLabel.draw(false);
          bottomLabel.draw(false);
        }
      },
      Mf: function(imageOption) {
        var image = {};
        if ((0, _type.isDefined)(imageOption)) {
          if ("string" === typeof imageOption) {
            image.top = image.bottom = imageOption;
          } else {
            image.top = {
              url: "string" === typeof imageOption.url ? imageOption.url : imageOption.url && imageOption.url.rangeMaxPoint,
              width: "number" === typeof imageOption.width ? imageOption.width : imageOption.width && imageOption.width.rangeMaxPoint,
              height: "number" === typeof imageOption.height ? imageOption.height : imageOption.height && imageOption.height.rangeMaxPoint
            };
            image.bottom = {
              url: "string" === typeof imageOption.url ? imageOption.url : imageOption.url && imageOption.url.rangeMinPoint,
              width: "number" === typeof imageOption.width ? imageOption.width : imageOption.width && imageOption.width.rangeMinPoint,
              height: "number" === typeof imageOption.height ? imageOption.height : imageOption.height && imageOption.height.rangeMinPoint
            };
          }
        }
        return image;
      },
      Uh: function(oldOptions, newOptions) {
        var oldSymbol = oldOptions.symbol;
        var newSymbol = newOptions.symbol;
        var symbolChanged = "circle" === oldSymbol && "circle" !== newSymbol || "circle" !== oldSymbol && "circle" === newSymbol;
        var oldImages = this.Mf(oldOptions.image);
        var newImages = this.Mf(newOptions.image);
        var topImageChanged = this.Fa(oldImages.top) !== this.Fa(newImages.top);
        var bottomImageChanged = this.Fa(oldImages.bottom) !== this.Fa(newImages.bottom);
        return symbolChanged || topImageChanged || bottomImageChanged;
      },
      Ys: function(style) {
        var options = this.e;
        var settings = {};
        var x = options.rotated ? _min(this.x, this.minX) : this.x;
        var y = options.rotated ? this.y : _min(this.y, this.minY);
        var radius = style.r;
        var points = this.Hf(options.symbol, radius);
        settings.top = _extend({
          translateX: x + this.width,
          translateY: y,
          r: radius
        }, style);
        settings.bottom = _extend({
          translateX: x,
          translateY: y + this.height,
          r: radius
        }, style);
        if (points) {
          settings.top.points = settings.bottom.points = points;
        }
        return settings;
      },
      Vl: function() {
        return this.graphic && this.graphic.topMarker && this.graphic.bottomMarker;
      },
      mm: function(renderer, markerType, imageSettings, settings) {
        var graphic = this.graphic;
        if (graphic[markerType]) {
          this.Zs(markerType, settings);
        } else {
          graphic[markerType] = this.Yl(renderer, graphic, imageSettings, settings);
        }
      },
      yb: function(renderer, group, animationEnabled, firstDrawing, style) {
        var settings = this.Ys(style || this.zb());
        var image = this.Mf(this.e.image);
        if (this.Fa(image.top)) {
          settings.top = this.Kf(settings.top, image.top);
        }
        if (this.Fa(image.bottom)) {
          settings.bottom = this.Kf(settings.bottom, image.bottom);
        }
        this.graphic = this.graphic || renderer.g().append(group);
        this.visibleTopMarker && this.mm(renderer, "topMarker", image.top, settings.top);
        this.visibleBottomMarker && this.mm(renderer, "bottomMarker", image.bottom, settings.bottom);
      },
      gm: function(radius) {
        var rotated = this.e.rotated;
        return {
          translateX: rotated ? _min(this.x, this.minX) - radius : this.x - radius,
          translateY: rotated ? this.y - radius : _min(this.y, this.minY) - radius,
          width: this.width + 2 * radius,
          height: this.height + 2 * radius
        };
      },
      isInVisibleArea: function() {
        var rotated = this.e.rotated;
        var argument = !rotated ? this.x : this.y;
        var maxValue = !rotated ? _max(this.minY, this.y) : _max(this.minX, this.x);
        var minValue = !rotated ? _min(this.minY, this.y) : _min(this.minX, this.x);
        var tmp;
        var visibleTopMarker;
        var visibleBottomMarker;
        var visibleRangeArea = true;
        var visibleArgArea = this.series.getArgumentAxis().getVisibleArea();
        var visibleValArea = this.series.getValueAxis().getVisibleArea();
        var notVisibleByArg = visibleArgArea[1] < argument || visibleArgArea[0] > argument;
        var notVisibleByVal = visibleValArea[0] > minValue && visibleValArea[0] > maxValue || visibleValArea[1] < minValue && visibleValArea[1] < maxValue;
        if (notVisibleByArg || notVisibleByVal) {
          visibleTopMarker = visibleBottomMarker = visibleRangeArea = false;
        } else {
          visibleTopMarker = visibleValArea[0] <= minValue && visibleValArea[1] > minValue;
          visibleBottomMarker = visibleValArea[0] < maxValue && visibleValArea[1] >= maxValue;
          if (rotated) {
            tmp = visibleTopMarker;
            visibleTopMarker = visibleBottomMarker;
            visibleBottomMarker = tmp;
          }
        }
        this.visibleTopMarker = visibleTopMarker;
        this.visibleBottomMarker = visibleBottomMarker;
        return visibleRangeArea;
      },
      getTooltipParams: function() {
        var x;
        var y;
        var rotated = this.e.rotated;
        var minValue = !rotated ? _min(this.y, this.minY) : _min(this.x, this.minX);
        var side = !rotated ? "height" : "width";
        var visibleArea = this.Na();
        var minVisible = rotated ? visibleArea.minX : visibleArea.minY;
        var maxVisible = rotated ? visibleArea.maxX : visibleArea.maxY;
        var min = _max(minVisible, minValue);
        var max = _min(maxVisible, minValue + this[side]);
        if (!rotated) {
          x = this.x;
          y = min + (max - min) / 2;
        } else {
          y = this.y;
          x = min + (max - min) / 2;
        }
        return {
          x,
          y,
          offset: 0
        };
      },
      Ra: function() {
        var rotated = this.e.rotated;
        _symbol_point.default.Ra.call(this);
        this.height = rotated ? 0 : _abs(this.minY - this.y);
        this.width = rotated ? _abs(this.x - this.minX) : 0;
      },
      hasCoords: function() {
        return _symbol_point.default.hasCoords.call(this) && !(null === this.minX || null === this.minY);
      },
      fb: function(data) {
        _symbol_point.default.fb.call(this, data);
        this.minValue = this.initialMinValue = this.originalMinValue = data.minValue;
      },
      Kf: function(settings, image) {
        return {
          href: image.url || image.toString(),
          width: image.width || DEFAULT_IMAGE_WIDTH,
          height: image.height || DEFAULT_IMAGE_HEIGHT,
          translateX: settings.translateX,
          translateY: settings.translateY
        };
      },
      getCrosshairData: function(x, y) {
        var rotated = this.e.rotated;
        var minX = this.minX;
        var minY = this.minY;
        var vx = this.vx;
        var vy = this.vy;
        var value = this.value;
        var minValue = this.minValue;
        var argument = this.argument;
        var coords = {
          axis: this.series.axis,
          x: vx,
          y: vy,
          yValue: value,
          xValue: argument
        };
        if (rotated) {
          coords.yValue = argument;
          if (_abs(vx - x) < _abs(minX - x)) {
            coords.xValue = value;
          } else {
            coords.x = minX;
            coords.xValue = minValue;
          }
        } else if (_abs(vy - y) >= _abs(minY - y)) {
          coords.y = minY;
          coords.yValue = minValue;
        }
        return coords;
      },
      Zs: function(markerType, settings) {
        this.graphic && this.graphic[markerType] && this.graphic[markerType].attr(settings);
      },
      hc: function(animationEnabled, style) {
        this.yb(void 0, void 0, false, false, style);
      },
      Sa: function(tooltip) {
        var initialMinValue = this.initialMinValue;
        var initialValue = this.initialValue;
        var initialArgument = this.initialArgument;
        var minValue = tooltip.formatValue(initialMinValue);
        var value = tooltip.formatValue(initialValue);
        return {
          argument: initialArgument,
          argumentText: tooltip.formatValue(initialArgument, "argument"),
          valueText: minValue + " - " + value,
          rangeValue1Text: minValue,
          rangeValue2Text: value,
          rangeValue1: initialMinValue,
          rangeValue2: initialValue,
          seriesName: this.series.name,
          point: this,
          originalMinValue: this.originalMinValue,
          originalValue: this.originalValue,
          originalArgument: this.originalArgument
        };
      },
      getLabel: function() {
        return [this.oa, this.xa];
      },
      getLabels: function() {
        return [this.oa, this.xa];
      },
      getBoundingRect: _common.noop,
      coordsIn: function(x, y) {
        var trackerRadius = this.Zh();
        var xCond = x >= this.x - trackerRadius && x <= this.x + trackerRadius;
        var yCond = y >= this.y - trackerRadius && y <= this.y + trackerRadius;
        if (this.e.rotated) {
          return yCond && (xCond || x >= this.minX - trackerRadius && x <= this.minX + trackerRadius);
        } else {
          return xCond && (yCond || y >= this.minY - trackerRadius && y <= this.minY + trackerRadius);
        }
      },
      getMaxValue: function() {
        if ("discrete" !== this.series.valueAxisType) {
          return this.minValue > this.value ? this.minValue : this.value;
        }
        return this.value;
      },
      getMinValue: function() {
        if ("discrete" !== this.series.valueAxisType) {
          return this.minValue < this.value ? this.minValue : this.value;
        }
        return this.minValue;
      }
    });
    exports.default = _default;
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/devextreme/cjs/viz/series/points/range_bar_point.js
var require_range_bar_point = __commonJS({
  "node_modules/devextreme/cjs/viz/series/points/range_bar_point.js"(exports, module) {
    "use strict";
    exports.default = void 0;
    var _common = require_common();
    var _extend2 = require_extend();
    var _bar_point = _interopRequireDefault(require_bar_point());
    var _range_symbol_point = _interopRequireDefault(require_range_symbol_point());
    function _interopRequireDefault(obj) {
      return obj && obj.j ? obj : {
        default: obj
      };
    }
    var _extend = _extend2.extend;
    var _default = _extend({}, _bar_point.default, {
      deleteLabel: _range_symbol_point.default.deleteLabel,
      Sa: _range_symbol_point.default.Sa,
      clearVisibility: function() {
        var graphic = this.graphic;
        if (graphic && graphic.attr("visibility")) {
          graphic.attr({
            visibility: null
          });
        }
      },
      setInvisibility: function() {
        var graphic = this.graphic;
        if (graphic && "hidden" !== graphic.attr("visibility")) {
          graphic.attr({
            visibility: "hidden"
          });
        }
        this.oa.draw(false);
        this.xa.draw(false);
      },
      getTooltipParams: function(location) {
        var edgeLocation = "edge" === location;
        var x;
        var y;
        if (this.e.rotated) {
          x = edgeLocation ? this.x + this.width : this.x + this.width / 2;
          y = this.y + this.height / 2;
        } else {
          x = this.x + this.width / 2;
          y = edgeLocation ? this.y : this.y + this.height / 2;
        }
        return {
          x,
          y,
          offset: 0
        };
      },
      Ra: function() {
        var barMethods = _bar_point.default;
        barMethods.Ra.call(this);
        if (this.e.rotated) {
          this.width = this.width || 1;
        } else {
          this.height = this.height || 1;
        }
      },
      hasCoords: _range_symbol_point.default.hasCoords,
      fb: _range_symbol_point.default.fb,
      eb: _range_symbol_point.default.eb,
      _h: _range_symbol_point.default._h,
      Td: _range_symbol_point.default.Td,
      Gf: _range_symbol_point.default.Gf,
      getCrosshairData: _range_symbol_point.default.getCrosshairData,
      fc: _range_symbol_point.default.fc,
      Xc: _range_symbol_point.default.Xc,
      $h: _range_symbol_point.default.$h,
      Yc: _range_symbol_point.default.Yc,
      gc: _range_symbol_point.default.gc,
      Ga: _range_symbol_point.default.Ga,
      getLabel: _range_symbol_point.default.getLabel,
      getLabels: _range_symbol_point.default.getLabels,
      getBoundingRect: _common.noop,
      getMinValue: _range_symbol_point.default.getMinValue,
      getMaxValue: _range_symbol_point.default.getMaxValue
    });
    exports.default = _default;
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/devextreme/cjs/viz/series/points/candlestick_point.js
var require_candlestick_point = __commonJS({
  "node_modules/devextreme/cjs/viz/series/points/candlestick_point.js"(exports, module) {
    "use strict";
    exports.default = void 0;
    var _extend2 = require_extend();
    var _symbol_point = _interopRequireDefault(require_symbol_point());
    var _bar_point = _interopRequireDefault(require_bar_point());
    function _interopRequireDefault(obj) {
      return obj && obj.j ? obj : {
        default: obj
      };
    }
    var _math = Math;
    var _abs = _math.abs;
    var _min = _math.min;
    var _max = _math.max;
    var _round = _math.round;
    var DEFAULT_FINANCIAL_TRACKER_MARGIN = 2;
    var _default = (0, _extend2.extend)({}, _bar_point.default, {
      Tc: _symbol_point.default.Tc,
      _s: function(openCoord, closeCoord) {
        var x = this.x;
        var createPoint = this.e.rotated ? function(x2, y) {
          return [y, x2];
        } : function(x2, y) {
          return [x2, y];
        };
        var width = this.width;
        var highCoord = this.highY;
        var max = _abs(highCoord - openCoord) < _abs(highCoord - closeCoord) ? openCoord : closeCoord;
        var min = max === closeCoord ? openCoord : closeCoord;
        var points;
        if (min === max) {
          points = [].concat(createPoint(x, this.highY)).concat(createPoint(x, this.lowY)).concat(createPoint(x, this.closeY)).concat(createPoint(x - width / 2, this.closeY)).concat(createPoint(x + width / 2, this.closeY)).concat(createPoint(x, this.closeY));
        } else {
          points = [].concat(createPoint(x, this.highY)).concat(createPoint(x, max)).concat(createPoint(x + width / 2, max)).concat(createPoint(x + width / 2, min)).concat(createPoint(x, min)).concat(createPoint(x, this.lowY)).concat(createPoint(x, min)).concat(createPoint(x - width / 2, min)).concat(createPoint(x - width / 2, max)).concat(createPoint(x, max));
        }
        return points;
      },
      $s: function(y) {
        var x = this.x;
        var createPoint = this.e.rotated ? function(x2, y2) {
          return [y2, x2];
        } : function(x2, y2) {
          return [x2, y2];
        };
        return [].concat(createPoint(x, this.highY)).concat(createPoint(x, this.lowY)).concat(createPoint(x, y)).concat(createPoint(x - this.width / 2, y)).concat(createPoint(x + this.width / 2, y)).concat(createPoint(x, y));
      },
      Nf: function() {
        var points;
        var closeCoord = this.closeY;
        var openCoord = this.openY;
        if (null !== closeCoord && null !== openCoord) {
          points = this._s(openCoord, closeCoord);
        } else if (openCoord === closeCoord) {
          points = [this.x, this.highY, this.x, this.lowY];
        } else {
          points = this.$s(null !== openCoord ? openCoord : closeCoord);
        }
        return points;
      },
      getColor: function() {
        return this.Zc ? this.e.reduction.color : this.t.normal.stroke || this.series.getColor();
      },
      nm: function(group, attributes, renderer) {
        this.graphic = renderer.path(this.Nf(), "area").attr({
          "stroke-linecap": "square"
        }).attr(attributes).data({
          "chart-data-point": this
        }).sharp().append(group);
      },
      Th: function() {
        var styles = this.e.styles;
        if (this.Zc && this.Of) {
          this.t = styles.reductionPositive;
        } else if (this.Zc) {
          this.t = styles.reduction;
        } else if (this.Of) {
          this.t = styles.positive;
        } else {
          this.t = styles;
        }
      },
      pm: function() {
        return 2 + 2 * this.t.normal["stroke-width"];
      },
      correctCoordinates: function(correctOptions) {
        var minWidth = this.pm();
        var width = correctOptions.width;
        width = width < minWidth ? minWidth : width > 10 ? 10 : width;
        this.width = width + width % 2;
        this.xCorrection = correctOptions.offset;
      },
      qm: function(group) {
        var markerGroup;
        if (this.Zc && this.Of) {
          markerGroup = group.reductionPositiveMarkersGroup;
        } else if (this.Zc) {
          markerGroup = group.reductionMarkersGroup;
        } else if (this.Of) {
          markerGroup = group.defaultPositiveMarkersGroup;
        } else {
          markerGroup = group.defaultMarkersGroup;
        }
        return markerGroup;
      },
      yb: function(renderer, group) {
        this.nm(this.qm(group), this.zb(), renderer);
      },
      gm: function() {
        var highY = this.highY;
        var lowY = this.lowY;
        var rotated = this.e.rotated;
        var x;
        var y;
        var width;
        var height;
        if (highY === lowY) {
          highY = rotated ? highY + DEFAULT_FINANCIAL_TRACKER_MARGIN : highY - DEFAULT_FINANCIAL_TRACKER_MARGIN;
          lowY = rotated ? lowY - DEFAULT_FINANCIAL_TRACKER_MARGIN : lowY + DEFAULT_FINANCIAL_TRACKER_MARGIN;
        }
        if (rotated) {
          x = _min(lowY, highY);
          y = this.x - this.width / 2;
          width = _abs(lowY - highY);
          height = this.width;
        } else {
          x = this.x - this.width / 2;
          y = _min(lowY, highY);
          width = this.width;
          height = _abs(lowY - highY);
        }
        return {
          x,
          y,
          width,
          height
        };
      },
      Oa: function(location) {
        var rotated = this.e.rotated;
        var x = this.x;
        var width = this.width;
        var lowY = this.lowY;
        var highY = this.highY;
        if (location) {
          var valVisibleArea = this.series.getValueAxis().getVisibleArea();
          highY = this.Lf(highY, valVisibleArea);
          lowY = this.Lf(lowY, valVisibleArea);
        }
        var bBox = {
          x: !rotated ? x - _round(width / 2) : lowY,
          y: !rotated ? highY : x - _round(width / 2),
          width: !rotated ? width : highY - lowY,
          height: !rotated ? lowY - highY : width
        };
        if (location) {
          var isTop = "top" === location;
          if (!this.e.rotated) {
            bBox.y = isTop ? bBox.y : bBox.y + bBox.height;
            bBox.height = 0;
          } else {
            bBox.x = isTop ? bBox.x + bBox.width : bBox.x;
            bBox.width = 0;
          }
        }
        return bBox;
      },
      getTooltipParams: function(location) {
        if (this.graphic) {
          var minValue = _min(this.lowY, this.highY);
          var maxValue = _max(this.lowY, this.highY);
          var visibleArea = this.Na();
          var rotated = this.e.rotated;
          var minVisible = rotated ? visibleArea.minX : visibleArea.minY;
          var maxVisible = rotated ? visibleArea.maxX : visibleArea.maxY;
          var min = _max(minVisible, minValue);
          var max = _min(maxVisible, maxValue);
          var centerCoord = this.getCenterCoord();
          if ("edge" === location) {
            centerCoord[rotated ? "x" : "y"] = rotated ? max : min;
          }
          centerCoord.offset = 0;
          return centerCoord;
        }
      },
      getCenterCoord: function() {
        if (this.graphic) {
          var x;
          var y;
          var minValue = _min(this.lowY, this.highY);
          var maxValue = _max(this.lowY, this.highY);
          var visibleArea = this.Na();
          var rotated = this.e.rotated;
          var minVisible = rotated ? visibleArea.minX : visibleArea.minY;
          var maxVisible = rotated ? visibleArea.maxX : visibleArea.maxY;
          var min = _max(minVisible, minValue);
          var max = _min(maxVisible, maxValue);
          var center = min + (max - min) / 2;
          if (rotated) {
            y = this.x;
            x = center;
          } else {
            x = this.x;
            y = center;
          }
          return {
            x,
            y
          };
        }
      },
      hasValue: function() {
        return null !== this.highValue && null !== this.lowValue;
      },
      hasCoords: function() {
        return null !== this.x && null !== this.lowY && null !== this.highY;
      },
      Ra: function() {
        var rotated = this.e.rotated;
        var valTranslator = this.Ha();
        var x = this.Jf().translate(this.argument);
        this.vx = this.vy = this.x = null === x ? x : x + (this.xCorrection || 0);
        this.openY = null !== this.openValue ? valTranslator.translate(this.openValue) : null;
        this.highY = valTranslator.translate(this.highValue);
        this.lowY = valTranslator.translate(this.lowValue);
        this.closeY = null !== this.closeValue ? valTranslator.translate(this.closeValue) : null;
        var centerValue = _min(this.lowY, this.highY) + _abs(this.lowY - this.highY) / 2;
        this.Tc(!rotated ? this.x : centerValue, !rotated ? centerValue : this.x);
      },
      getCrosshairData: function(x, y) {
        var rotated = this.e.rotated;
        var origY = rotated ? x : y;
        var yValue;
        var argument = this.argument;
        var coords;
        var coord = "low";
        if (_abs(this.lowY - origY) < _abs(this.closeY - origY)) {
          yValue = this.lowY;
        } else {
          yValue = this.closeY;
          coord = "close";
        }
        if (_abs(yValue - origY) >= _abs(this.openY - origY)) {
          yValue = this.openY;
          coord = "open";
        }
        if (_abs(yValue - origY) >= _abs(this.highY - origY)) {
          yValue = this.highY;
          coord = "high";
        }
        if (rotated) {
          coords = {
            y: this.vy,
            x: yValue,
            xValue: this[coord + "Value"],
            yValue: argument
          };
        } else {
          coords = {
            x: this.vx,
            y: yValue,
            xValue: argument,
            yValue: this[coord + "Value"]
          };
        }
        coords.axis = this.series.axis;
        return coords;
      },
      fb: function(data) {
        var label = this.C;
        var reductionColor = this.e.reduction.color;
        this.value = this.initialValue = data.reductionValue;
        this.originalValue = data.value;
        this.lowValue = this.originalLowValue = data.lowValue;
        this.highValue = this.originalHighValue = data.highValue;
        this.openValue = this.originalOpenValue = data.openValue;
        this.closeValue = this.originalCloseValue = data.closeValue;
        this.Of = data.openValue < data.closeValue;
        this.Zc = data.isReduction;
        if (this.Zc) {
          label.setColor(reductionColor);
        }
      },
      hc: function(animationEnabled, style, group) {
        var graphic = this.graphic;
        graphic.attr({
          points: this.Nf()
        }).smartAttr(style).sharp();
        group && graphic.append(this.qm(group));
      },
      Uc: function() {
        return {
          openValue: this.openValue,
          highValue: this.highValue,
          lowValue: this.lowValue,
          closeValue: this.closeValue,
          reductionValue: this.initialValue,
          argument: this.initialArgument,
          value: this.initialValue,
          seriesName: this.series.name,
          originalOpenValue: this.originalOpenValue,
          originalCloseValue: this.originalCloseValue,
          originalLowValue: this.originalLowValue,
          originalHighValue: this.originalHighValue,
          originalArgument: this.originalArgument,
          point: this
        };
      },
      Sa: function(tooltip) {
        var highValue = tooltip.formatValue(this.highValue);
        var openValue = tooltip.formatValue(this.openValue);
        var closeValue = tooltip.formatValue(this.closeValue);
        var lowValue = tooltip.formatValue(this.lowValue);
        var symbolMethods = _symbol_point.default;
        var formatObject = symbolMethods.Sa.call(this, tooltip);
        return (0, _extend2.extend)({}, formatObject, {
          valueText: "h: " + highValue + ("" !== openValue ? " o: " + openValue : "") + ("" !== closeValue ? " c: " + closeValue : "") + " l: " + lowValue,
          highValueText: highValue,
          openValueText: openValue,
          closeValueText: closeValue,
          lowValueText: lowValue
        });
      },
      getMaxValue: function() {
        return this.highValue;
      },
      getMinValue: function() {
        return this.lowValue;
      }
    });
    exports.default = _default;
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/devextreme/cjs/viz/series/points/stock_point.js
var require_stock_point = __commonJS({
  "node_modules/devextreme/cjs/viz/series/points/stock_point.js"(exports, module) {
    "use strict";
    exports.default = void 0;
    var _extend2 = require_extend();
    var _type = require_type();
    var _candlestick_point = _interopRequireDefault(require_candlestick_point());
    function _interopRequireDefault(obj) {
      return obj && obj.j ? obj : {
        default: obj
      };
    }
    var _extend = _extend2.extend;
    var _isNumeric = _type.isNumeric;
    var _default = _extend({}, _candlestick_point.default, {
      Nf: function() {
        var createPoint = this.e.rotated ? function(x2, y) {
          return [y, x2];
        } : function(x2, y) {
          return [x2, y];
        };
        var openYExist = _isNumeric(this.openY);
        var closeYExist = _isNumeric(this.closeY);
        var x = this.x;
        var width = this.width;
        var points = [].concat(createPoint(x, this.highY));
        openYExist && (points = points.concat(createPoint(x, this.openY)));
        openYExist && (points = points.concat(createPoint(x - width / 2, this.openY)));
        openYExist && (points = points.concat(createPoint(x, this.openY)));
        closeYExist && (points = points.concat(createPoint(x, this.closeY)));
        closeYExist && (points = points.concat(createPoint(x + width / 2, this.closeY)));
        closeYExist && (points = points.concat(createPoint(x, this.closeY)));
        points = points.concat(createPoint(x, this.lowY));
        return points;
      },
      nm: function(group, attributes, renderer) {
        this.graphic = renderer.path(this.Nf(), "line").attr({
          "stroke-linecap": "square"
        }).attr(attributes).data({
          "chart-data-point": this
        }).sharp().append(group);
      },
      pm: function() {
        var width = 2 + this.t.normal["stroke-width"];
        return width + width % 2;
      }
    });
    exports.default = _default;
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/devextreme/cjs/viz/series/points/polar_point.js
var require_polar_point = __commonJS({
  "node_modules/devextreme/cjs/viz/series/points/polar_point.js"(exports) {
    "use strict";
    exports.polarSymbolPoint = exports.polarBarPoint = void 0;
    var _extend2 = require_extend();
    var _symbol_point = _interopRequireDefault(require_symbol_point());
    var _bar_point = _interopRequireDefault(require_bar_point());
    var _pie_point = _interopRequireDefault(require_pie_point());
    var _type = require_type();
    var _utils = require_utils();
    var _consts = _interopRequireDefault(require_consts());
    function _interopRequireDefault(obj) {
      return obj && obj.j ? obj : {
        default: obj
      };
    }
    var _extend = _extend2.extend;
    var _math = Math;
    var _max = _math.max;
    var RADIAL_LABEL_INDENT = _consts.default.radialLabelIndent;
    var ERROR_BARS_ANGLE_OFFSET = 90;
    var CANVAS_POSITION_START = "canvas_position_start";
    var CANVAS_POSITION_END = "canvas_position_end";
    var CANVAS_POSITION_DEFAULT = "canvas_position_default";
    var polarSymbolPoint = _extend({}, _symbol_point.default, {
      Ga: _pie_point.default.Ga,
      Wc: _pie_point.default.Wc,
      Pf: function(coord, visibleArea, labelBBox) {
        var x = coord.x;
        var y = coord.y;
        if (visibleArea.minX > x) {
          x = visibleArea.minX;
        }
        if (visibleArea.maxX < x + labelBBox.width) {
          x = visibleArea.maxX - labelBBox.width;
        }
        if (visibleArea.minY > y) {
          y = visibleArea.minY;
        }
        if (visibleArea.maxY < y + labelBBox.height) {
          y = visibleArea.maxY - labelBBox.height;
        }
        return {
          x,
          y
        };
      },
      eb: function() {
        return "outside";
      },
      Qf: function(argument, value) {
        var axis = this.series.getValueAxis();
        var startAngle = axis.getAngles()[0];
        var angle = this.Jf().translate(argument);
        var radius = this.Ha().translate(value);
        var coords = (0, _utils.convertPolarToXY)(axis.getCenter(), axis.getAngles()[0], angle, radius);
        coords.angle = angle + startAngle - 90, coords.radius = radius;
        return coords;
      },
      Ra: function() {
        var center = this.series.getValueAxis().getCenter();
        var coord = this.Qf(this.argument, this.value);
        var translator = this.Ha();
        var maxRadius = translator.isInverted() ? translator.translate(CANVAS_POSITION_START) : translator.translate(CANVAS_POSITION_END);
        var normalizedRadius = (0, _type.isDefined)(coord.radius) && coord.radius >= 0 ? coord.radius : null;
        this.vx = (0, _utils.normalizeAngle)(coord.angle);
        this.vy = this.radiusOuter = this.radiusLabels = normalizedRadius;
        this.radiusLabels += RADIAL_LABEL_INDENT;
        this.radius = normalizedRadius;
        this.middleAngle = -coord.angle;
        this.angle = -coord.angle;
        this.x = coord.x;
        this.y = coord.y;
        this.defaultX = this.centerX = center.x;
        this.defaultY = this.centerY = center.y;
        this.Nb();
        this.inVisibleArea = this.sm(normalizedRadius, maxRadius);
      },
      sm: function(radius, maxRadius) {
        return (0, _type.isDefined)(radius) && radius <= maxRadius;
      },
      Nb: function() {
        var errorBars = this.e.errorBars;
        var translator = this.Ha();
        if (!errorBars) {
          return;
        }
        (0, _type.isDefined)(this.lowError) && (this.Vc = this.centerY - translator.translate(this.lowError));
        (0, _type.isDefined)(this.highError) && (this.If = this.centerY - translator.translate(this.highError));
        this.Yd = this.centerX;
        this.Yh = "stdDeviation" === errorBars.type ? this.Vc + (this.If - this.Vc) / 2 : this.centerY - this.radius;
      },
      Xl: function(animationEnabled) {
        return animationEnabled ? this.getDefaultCoords() : {
          x: this.x,
          y: this.y
        };
      },
      getDefaultCoords: function() {
        var cosSin = (0, _utils.getCosAndSin)(-this.angle);
        var radius = this.Ha().translate(CANVAS_POSITION_DEFAULT);
        var x = this.defaultX + radius * cosSin.cos;
        var y = this.defaultY + radius * cosSin.sin;
        return {
          x,
          y
        };
      },
      Wh: function(label, coord) {
        return coord;
      },
      Ud: function(label, coord) {
        var visibleArea = this.Na();
        var graphicBBox = this.Oa();
        if (this.em(visibleArea, graphicBBox)) {
          coord = this.Pf(coord, visibleArea, label.getBoundingRect());
        }
        return coord;
      },
      Xd: function(errorBarOptions, animationEnabled) {
        var settings = _symbol_point.default.Xd.call(this, errorBarOptions, animationEnabled);
        settings.rotate = ERROR_BARS_ANGLE_OFFSET - this.angle;
        settings.rotateX = this.centerX;
        settings.rotateY = this.centerY;
        return settings;
      },
      getCoords: function(min) {
        return min ? this.getDefaultCoords() : {
          x: this.x,
          y: this.y
        };
      }
    });
    exports.polarSymbolPoint = polarSymbolPoint;
    var polarBarPoint = _extend({}, _bar_point.default, {
      Nb: polarSymbolPoint.Nb,
      Xd: polarSymbolPoint.Xd,
      Pf: polarSymbolPoint.Pf,
      Ga: _pie_point.default.Ga,
      Wc: _pie_point.default.Wc,
      Vd: _pie_point.default.Vd,
      getTooltipParams: _pie_point.default.getTooltipParams,
      eb: _pie_point.default.eb,
      Qf: polarSymbolPoint.Qf,
      Ra: function() {
        var translator = this.Ha();
        var businessRange = translator.getBusinessRange();
        var maxRadius = translator.isInverted() ? translator.translate(CANVAS_POSITION_START) : translator.translate(CANVAS_POSITION_END);
        this.radiusInner = translator.translate(this.minValue);
        polarSymbolPoint.Ra.call(this);
        if (null === this.radiusInner) {
          this.radiusInner = this.radius = maxRadius;
        } else if (null === this.radius) {
          this.radius = this.value >= businessRange.minVisible ? maxRadius : 0;
        } else if (this.radius > maxRadius) {
          this.radius = maxRadius;
        }
        this.radiusOuter = this.radiusLabels = _max(this.radiusInner, this.radius);
        this.radiusLabels += RADIAL_LABEL_INDENT;
        this.radiusInner = this.defaultRadius = _math.min(this.radiusInner, this.radius);
        this.middleAngle = this.angle = -(0, _utils.normalizeAngle)(this.middleAngleCorrection - this.angle);
      },
      sm: function(radius) {
        return (0, _type.isDefined)(radius) || this.Ha().translate(this.minValue) > 0;
      },
      Xh: function() {
        var coord = this.getMarkerCoords();
        return _math.PI * coord.outerRadius * _math.abs(coord.startAngle - coord.endAngle) / 180;
      },
      getMarkerCoords: function() {
        return {
          x: this.centerX,
          y: this.centerY,
          outerRadius: this.radiusOuter,
          innerRadius: this.defaultRadius,
          startAngle: this.middleAngle - this.interval / 2,
          endAngle: this.middleAngle + this.interval / 2
        };
      },
      yb: function(renderer, group, animationEnabled) {
        var styles = this.zb();
        var coords = this.getMarkerCoords();
        var innerRadius = coords.innerRadius;
        var outerRadius = coords.outerRadius;
        var start = this.Qf(this.argument, CANVAS_POSITION_DEFAULT);
        var x = coords.x;
        var y = coords.y;
        if (animationEnabled) {
          innerRadius = 0;
          outerRadius = 0;
          x = start.x;
          y = start.y;
        }
        this.graphic = renderer.arc(x, y, innerRadius, outerRadius, coords.startAngle, coords.endAngle).attr(styles).data({
          "chart-data-point": this
        }).append(group);
      },
      Ud: function(label, coord) {
        var visibleArea = this.Na();
        var angleFunctions = (0, _utils.getCosAndSin)(this.middleAngle);
        var x = this.centerX + this.defaultRadius * angleFunctions.cos;
        var y = this.centerY - this.defaultRadius * angleFunctions.sin;
        if (x > visibleArea.minX && x < visibleArea.maxX && y > visibleArea.minY && y < visibleArea.maxY) {
          coord = this.Pf(coord, visibleArea, label.getBoundingRect());
        }
        return coord;
      },
      Wh: function(label, coord) {
        return coord;
      },
      correctCoordinates: function(correctOptions) {
        this.middleAngleCorrection = correctOptions.offset;
        this.interval = correctOptions.width;
      },
      coordsIn: function(x, y) {
        var val = (0, _utils.convertXYToPolar)(this.series.getValueAxis().getCenter(), x, y);
        var coords = this.getMarkerCoords();
        var isBetweenAngles = coords.startAngle < coords.endAngle ? -val.phi >= coords.startAngle && -val.phi <= coords.endAngle : -val.phi <= coords.startAngle && -val.phi >= coords.endAngle;
        return val.r >= coords.innerRadius && val.r <= coords.outerRadius && isBetweenAngles;
      }
    });
    exports.polarBarPoint = polarBarPoint;
  }
});

// node_modules/devextreme/cjs/viz/series/points/base_point.js
var require_base_point = __commonJS({
  "node_modules/devextreme/cjs/viz/series/points/base_point.js"(exports) {
    "use strict";
    exports.Point = Point;
    var _consts = _interopRequireDefault(require_consts());
    var _symbol_point = _interopRequireDefault(require_symbol_point());
    var _bar_point = _interopRequireDefault(require_bar_point());
    var _bubble_point = _interopRequireDefault(require_bubble_point());
    var _pie_point = _interopRequireDefault(require_pie_point());
    var _range_symbol_point = _interopRequireDefault(require_range_symbol_point());
    var _range_bar_point = _interopRequireDefault(require_range_bar_point());
    var _candlestick_point = _interopRequireDefault(require_candlestick_point());
    var _stock_point = _interopRequireDefault(require_stock_point());
    var _polar_point = require_polar_point();
    var _utils = require_utils();
    var _extend2 = require_extend();
    var _type = require_type();
    var _common = require_common();
    function _interopRequireDefault(obj) {
      return obj && obj.j ? obj : {
        default: obj
      };
    }
    var mixins = {};
    var _extend = _extend2.extend;
    var statesConsts = _consts.default.states;
    var SYMBOL_POINT = "symbolPoint";
    var POLAR_SYMBOL_POINT = "polarSymbolPoint";
    var BAR_POINT = "barPoint";
    var POLAR_BAR_POINT = "polarBarPoint";
    var PIE_POINT = "piePoint";
    var SELECTED_STATE = statesConsts.selectedMark;
    var HOVER_STATE = statesConsts.hoverMark;
    var NORMAL_STATE = statesConsts.normalMark;
    var HOVER = statesConsts.hover;
    var NORMAL = statesConsts.normal;
    var SELECTION = statesConsts.selection;
    var pointTypes = {
      chart: {
        scatter: SYMBOL_POINT,
        line: SYMBOL_POINT,
        spline: SYMBOL_POINT,
        stepline: SYMBOL_POINT,
        stackedline: SYMBOL_POINT,
        fullstackedline: SYMBOL_POINT,
        stackedspline: SYMBOL_POINT,
        fullstackedspline: SYMBOL_POINT,
        stackedsplinearea: SYMBOL_POINT,
        fullstackedsplinearea: SYMBOL_POINT,
        area: SYMBOL_POINT,
        splinearea: SYMBOL_POINT,
        steparea: SYMBOL_POINT,
        stackedarea: SYMBOL_POINT,
        fullstackedarea: SYMBOL_POINT,
        rangearea: "rangeSymbolPoint",
        bar: BAR_POINT,
        stackedbar: BAR_POINT,
        fullstackedbar: BAR_POINT,
        rangebar: "rangeBarPoint",
        bubble: "bubblePoint",
        stock: "stockPoint",
        candlestick: "candlestickPoint"
      },
      pie: {
        pie: PIE_POINT,
        doughnut: PIE_POINT,
        donut: PIE_POINT
      },
      polar: {
        scatter: POLAR_SYMBOL_POINT,
        line: POLAR_SYMBOL_POINT,
        area: POLAR_SYMBOL_POINT,
        bar: POLAR_BAR_POINT,
        stackedbar: POLAR_BAR_POINT
      }
    };
    function isNoneMode(mode) {
      return "none" === (0, _utils.normalizeEnum)(mode);
    }
    function Point(series, dataItem, options) {
      this.fullState = NORMAL_STATE;
      this.series = series;
      this.update(dataItem, options);
      this.Rf = {
        hover: 0,
        selection: 0
      };
      this.Wl = {
        fill: null,
        stroke: null,
        dashStyle: null,
        filter: null
      };
    }
    mixins.symbolPoint = _symbol_point.default;
    mixins.barPoint = _bar_point.default;
    mixins.bubblePoint = _bubble_point.default;
    mixins.piePoint = _pie_point.default;
    mixins.rangeSymbolPoint = _range_symbol_point.default;
    mixins.rangeBarPoint = _range_bar_point.default;
    mixins.candlestickPoint = _candlestick_point.default;
    mixins.stockPoint = _stock_point.default;
    mixins.polarSymbolPoint = _polar_point.polarSymbolPoint;
    mixins.polarBarPoint = _polar_point.polarBarPoint;
    Point.prototype = {
      constructor: Point,
      getColor: function() {
        if (!this.hasValue() && !this.t.usePointCustomOptions) {
          this.series.customizePoint(this, this.bt);
        }
        return this.t.normal.fill || this.series.getColor();
      },
      zb: function() {
        return this.t[this.ct || "normal"];
      },
      update: function(dataItem, options) {
        this.updateOptions(options);
        this.updateData(dataItem);
      },
      updateData: function(dataItem) {
        var argumentWasChanged = this.argument !== dataItem.argument;
        this.argument = this.initialArgument = this.originalArgument = dataItem.argument;
        this.tag = dataItem.tag;
        this.index = dataItem.index;
        this.bt = dataItem;
        this.data = dataItem.data;
        this.lowError = dataItem.lowError;
        this.highError = dataItem.highError;
        this.aggregationInfo = dataItem.aggregationInfo;
        this.fb(dataItem, argumentWasChanged);
        !this.hasValue() && this.setInvisibility();
        this.Th();
        this.Td();
      },
      deleteMarker: function() {
        if (this.graphic) {
          this.graphic.dispose();
        }
        this.graphic = null;
      },
      draw: function(renderer, groups, animationEnabled, firstDrawing) {
        if (this.ai || this.series.autoHidePointMarkers && !this.isSelected()) {
          this.deleteMarker();
          this.ai = false;
        }
        if (this.bi) {
          this.clearMarker();
          this.bi = false;
        }
        if (!this.Vl()) {
          this.getMarkerVisibility() && !this.series.autoHidePointMarkers && this.yb(renderer, groups.markers, animationEnabled, firstDrawing);
        } else {
          this.hc(animationEnabled, this.zb(), groups.markers);
        }
        this.gc();
        this.fm(renderer, groups.errorBars, animationEnabled);
        return this;
      },
      dt: function() {
        var state = NORMAL_STATE;
        var fullState = this.fullState;
        var styles = [NORMAL, HOVER, SELECTION, SELECTION];
        if (this.Rf.hover) {
          state |= HOVER_STATE;
        }
        if (this.Rf.selection) {
          state |= SELECTED_STATE;
        }
        if (isNoneMode(this.getOptions().selectionMode)) {
          fullState &= ~SELECTED_STATE;
        }
        if (isNoneMode(this.getOptions().hoverMode)) {
          fullState &= ~HOVER_STATE;
        }
        state |= fullState;
        return styles[state];
      },
      applyView: function(legendCallback) {
        var style = this.dt();
        this.ct = style;
        if (!this.graphic && this.getMarkerVisibility() && this.series.autoHidePointMarkers && (style === SELECTION || style === HOVER)) {
          this.yb(this.series.getRenderer(), this.series.getMarkersGroup());
        }
        if (this.graphic) {
          if (this.series.autoHidePointMarkers && style !== SELECTION && style !== HOVER) {
            this.deleteMarker();
          } else {
            if ("normal" === style) {
              this.clearMarker();
            } else {
              this.graphic.toForeground();
            }
            this.hc(true, this.t[style], void 0, legendCallback);
          }
        }
      },
      setView: function(style) {
        this.Rf[style]++;
        this.applyView();
      },
      resetView: function(style) {
        var viewCounters = this.Rf;
        --viewCounters[style];
        if (viewCounters[style] < 0) {
          viewCounters[style] = 0;
        }
        this.applyView();
      },
      releaseHoverState: function() {
        if (this.graphic && !this.isSelected()) {
          this.graphic.toBackground();
        }
      },
      select: function() {
        this.series.selectPoint(this);
      },
      clearSelection: function() {
        this.series.deselectPoint(this);
      },
      hover: function() {
        this.series.hoverPoint(this);
      },
      clearHover: function() {
        this.series.clearPointHover();
      },
      showTooltip: function() {
        this.series.showPointTooltip(this);
      },
      hideTooltip: function() {
        this.series.hidePointTooltip(this);
      },
      ft: function(oldType, newType) {
        var isNewRange = ~newType.indexOf("range");
        var isOldRange = ~oldType.indexOf("range");
        return isOldRange && !isNewRange || !isOldRange && isNewRange;
      },
      updateOptions: function(newOptions) {
        if (!newOptions) {
          return;
        }
        var oldOptions = this.e;
        var widgetType = newOptions.widgetType;
        var oldType = oldOptions && oldOptions.type;
        var newType = newOptions.type;
        var newPointTypeMixin = pointTypes[widgetType][newType];
        if (oldType !== newType) {
          this.ai = true;
          this.bi = false;
          if (oldType) {
            this.ft(oldType, newType) && this.deleteLabel();
            this.ci(mixins[pointTypes[oldType]]);
          }
          this.di(mixins[newPointTypeMixin]);
        } else {
          this.ai = this.Uh(oldOptions, newOptions);
          this.bi = this.gt(oldOptions, newOptions);
        }
        this.e = newOptions;
        this.Th();
        this.Gf(newPointTypeMixin);
      },
      translate: function() {
        if (this.hasValue()) {
          this.Ra();
          this.translated = true;
        }
      },
      gt: function(oldOptions, newOptions) {
        return oldOptions.styles.usePointCustomOptions && !newOptions.styles.usePointCustomOptions;
      },
      $l: function() {
        return this.t.useLabelCustomOptions ? !!this.e.label.visible : null;
      },
      getBoundingRect: function() {
        return this.Oa();
      },
      ci: function(methods) {
        for (var methodName in methods) {
          delete this[methodName];
        }
      },
      di: function(methods) {
        for (var methodName in methods) {
          this[methodName] = methods[methodName];
        }
      },
      isInVisibleArea: function() {
        return this.inVisibleArea;
      },
      isSelected: function() {
        return !!(this.fullState & SELECTED_STATE);
      },
      isHovered: function() {
        return !!(this.fullState & HOVER_STATE);
      },
      getOptions: function() {
        return this.e;
      },
      animate: function(complete, settings, partitionDuration) {
        if (!this.graphic) {
          complete && complete();
          return;
        }
        this.graphic.animate(settings, {
          partitionDuration
        }, complete);
      },
      getCoords: function(min) {
        if (!min) {
          return {
            x: this.x,
            y: this.y
          };
        }
        if (!this.e.rotated) {
          return {
            x: this.x,
            y: this.minY + (this.y - this.minY ? 0 : 1)
          };
        }
        return {
          x: this.minX - (this.x - this.minX ? 0 : 1),
          y: this.y
        };
      },
      getDefaultCoords: function() {
        return !this.e.rotated ? {
          x: this.x,
          y: this.defaultY
        } : {
          x: this.defaultX,
          y: this.y
        };
      },
      setDefaultCoords: function() {
        var coords = this.getDefaultCoords();
        this.x = coords.x;
        this.y = coords.y;
      },
      Na: function() {
        return this.series.getVisibleArea();
      },
      Jf: function() {
        return this.series.getArgumentAxis().getTranslator();
      },
      Ha: function() {
        return this.series.getValueAxis().getTranslator();
      },
      isArgumentCorrect: function() {
        return this.series.um(this.argument);
      },
      isValueCorrect: function() {
        var valueChecker = this.series.vm;
        return valueChecker(this.getMinValue()) && valueChecker(this.getMaxValue());
      },
      hasValue: function() {
        return null !== this.value && null !== this.minValue && this.isArgumentCorrect() && this.isValueCorrect();
      },
      hasCoords: _common.noop,
      correctPosition: _common.noop,
      correctRadius: _common.noop,
      correctLabelRadius: _common.noop,
      getCrosshairData: _common.noop,
      getPointRadius: _common.noop,
      Hf: _common.noop,
      Uh: _common.noop,
      getMarkerCoords: _common.noop,
      hide: _common.noop,
      show: _common.noop,
      hideMarker: _common.noop,
      setInvisibility: _common.noop,
      clearVisibility: _common.noop,
      isVisible: _common.noop,
      resetCorrection: _common.noop,
      correctValue: _common.noop,
      resetValue: _common.noop,
      setPercentValue: _common.noop,
      correctCoordinates: _common.noop,
      coordsIn: _common.noop,
      getTooltipParams: _common.noop,
      applyWordWrap: _common.noop,
      setLabelTrackerData: _common.noop,
      updateLabelCoord: _common.noop,
      drawLabel: _common.noop,
      correctLabelPosition: _common.noop,
      getMinValue: _common.noop,
      getMaxValue: _common.noop,
      fm: _common.noop,
      getMarkerVisibility: _common.noop,
      dispose: function() {
        this.deleteMarker();
        this.deleteLabel();
        this.xb && this.xb.dispose();
        this.e = this.t = this.series = this.xb = null;
      },
      getTooltipFormatObject: function(tooltip, stackPoints) {
        var tooltipFormatObject = this.Sa(tooltip);
        var sharedTooltipValuesArray = [];
        var tooltipStackPointsFormatObject = [];
        if (stackPoints) {
          stackPoints.forEach(function(point) {
            if (!point.isVisible()) {
              return;
            }
            var formatObject = point.Sa(tooltip);
            tooltipStackPointsFormatObject.push(formatObject);
            sharedTooltipValuesArray.push(formatObject.seriesName + ": " + formatObject.valueText);
          });
          _extend(tooltipFormatObject, {
            points: tooltipStackPointsFormatObject,
            valueText: sharedTooltipValuesArray.join("\n"),
            stackName: this.series.getStackName() || null
          });
        }
        var aggregationInfo = this.aggregationInfo;
        if (aggregationInfo) {
          var axis = this.series.getArgumentAxis();
          var rangeText = axis.formatRange(aggregationInfo.intervalStart, aggregationInfo.intervalEnd, aggregationInfo.aggregationInterval, tooltip.getOptions().argumentFormat);
          if (rangeText) {
            tooltipFormatObject.valueText += "\n".concat(rangeText);
          }
        }
        return tooltipFormatObject;
      },
      setHole: function(holeValue, position) {
        var minValue = isFinite(this.minValue) ? this.minValue : 0;
        if ((0, _type.isDefined)(holeValue)) {
          if ("left" === position) {
            this.leftHole = this.value - holeValue;
            this.minLeftHole = minValue - holeValue;
          } else {
            this.rightHole = this.value - holeValue;
            this.minRightHole = minValue - holeValue;
          }
        }
      },
      resetHoles: function() {
        this.leftHole = null;
        this.minLeftHole = null;
        this.rightHole = null;
        this.minRightHole = null;
      },
      getLabel: function() {
        return this.C;
      },
      getLabels: function() {
        return [this.C];
      },
      getCenterCoord: function() {
        return {
          x: this.x,
          y: this.y
        };
      }
    };
  }
});

// node_modules/devextreme/cjs/viz/series/helpers/range_data_calculator.js
var require_range_data_calculator = __commonJS({
  "node_modules/devextreme/cjs/viz/series/helpers/range_data_calculator.js"(exports, module) {
    "use strict";
    exports.default = void 0;
    var _utils = require_utils();
    var _type = require_type();
    var _common = require_common();
    var DISCRETE = "discrete";
    var abs = Math.abs, floor = Math.floor, ceil = Math.ceil, min = Math.min;
    function continuousRangeCalculator(range, minValue, maxValue) {
      range.min = range.min < minValue ? range.min : minValue;
      range.max = range.max > maxValue ? range.max : maxValue;
    }
    function createGetLogFunction(axisType, axis) {
      if ("logarithmic" !== axisType) {
        return null;
      }
      var base = axis.getOptions().logarithmBase;
      return function(value) {
        var log = (0, _utils.getLog)(abs(value), base);
        var round = log < 0 ? floor : ceil;
        return round(log);
      };
    }
    function getRangeCalculator(axisType, axis, getLog) {
      var rangeCalculator = continuousRangeCalculator;
      if (axisType === DISCRETE) {
        rangeCalculator = function(range, minValue, maxValue) {
          if (minValue !== maxValue) {
            range.categories.push(maxValue);
          }
          range.categories.push(minValue);
        };
      } else if (axis) {
        rangeCalculator = function(range, value) {
          var interval = axis.calculateInterval(value, range.prevValue);
          var minInterval = range.interval;
          range.interval = (minInterval < interval ? minInterval : interval) || minInterval;
          range.prevValue = value;
          continuousRangeCalculator(range, value, value);
        };
      }
      if (getLog) {
        return function(range, minValue, maxValue) {
          var minArgs = [];
          rangeCalculator(range, minValue, maxValue);
          0 !== minValue && minArgs.push(getLog(minValue));
          0 !== maxValue && minArgs.push(getLog(maxValue));
          var linearThreshold = min.apply(null, minArgs);
          range.linearThreshold = range.linearThreshold < linearThreshold ? range.linearThreshold : linearThreshold;
        };
      }
      return rangeCalculator;
    }
    function getInitialRange(axisType, dataType, firstValue) {
      var range = {
        axisType,
        dataType
      };
      if (axisType === DISCRETE) {
        range.categories = [];
      } else {
        range.min = (0, _type.isObject)(firstValue) ? firstValue.min : firstValue;
        range.max = (0, _type.isObject)(firstValue) ? firstValue.max : firstValue;
      }
      return range;
    }
    function processCategories(range) {
      if (range.categories) {
        range.categories = (0, _utils.unique)(range.categories);
      }
      return range;
    }
    function getValueForArgument(point, extraPoint, x, range) {
      if (extraPoint && (0, _type.isDefined)(extraPoint.value)) {
        var y1 = point.value;
        var y2 = extraPoint.value;
        var x1 = point.argument;
        var x2 = extraPoint.argument;
        var r = (x - x1) * (y2 - y1) / (x2 - x1) + y1.valueOf();
        return "datetime" === range.dataType ? new Date(r) : r;
      } else {
        return point.value;
      }
    }
    function calculateRangeBetweenPoints(rangeCalculator, range, point, prevPoint, bound) {
      var value = getValueForArgument(point, prevPoint, bound, range);
      rangeCalculator(range, value, value);
    }
    function isLineSeries(series) {
      return series.type.toLowerCase().indexOf("line") >= 0 || series.type.toLowerCase().indexOf("area") >= 0;
    }
    function getViewportReducer(series) {
      var rangeCalculator = getRangeCalculator(series.valueAxisType);
      var argumentAxis = series.getArgumentAxis();
      var viewport = argumentAxis && series.getArgumentAxis().visualRange() || {};
      var calculatePointBetweenPoints = isLineSeries(series) ? calculateRangeBetweenPoints : _common.noop;
      if (argumentAxis && argumentAxis.getMarginOptions().checkInterval) {
        var range = series.getArgumentAxis().getTranslator().getBusinessRange();
        var add = (0, _utils.getAddFunction)(range, false);
        var interval = range.interval;
        if (isFinite(interval) && (0, _type.isDefined)(viewport.startValue) && (0, _type.isDefined)(viewport.endValue)) {
          viewport.startValue = add(viewport.startValue, interval, -1);
          viewport.endValue = add(viewport.endValue, interval);
        }
      }
      var viewportFilter = getViewPortFilter(viewport);
      return function(range2, point, index, points) {
        var argument = point.argument;
        if (!point.hasValue()) {
          return range2;
        }
        if (viewportFilter(argument)) {
          if (!range2.startCalc) {
            range2.startCalc = true;
            calculatePointBetweenPoints(rangeCalculator, range2, point, points[index - 1], viewport.startValue);
          }
          rangeCalculator(range2, point.getMinValue(), point.getMaxValue());
        } else if (!viewport.categories && (0, _type.isDefined)(viewport.startValue) && argument > viewport.startValue) {
          if (!range2.startCalc) {
            calculatePointBetweenPoints(rangeCalculator, range2, point, points[index - 1], viewport.startValue);
          }
          range2.endCalc = true;
          calculatePointBetweenPoints(rangeCalculator, range2, point, points[index - 1], viewport.endValue);
        }
        return range2;
      };
    }
    function getViewPortFilter(viewport) {
      if (viewport.categories) {
        var dictionary = viewport.categories.reduce(function(result, category) {
          result[category.valueOf()] = true;
          return result;
        }, {});
        return function(argument) {
          return (0, _type.isDefined)(argument) && dictionary[argument.valueOf()];
        };
      }
      if (!(0, _type.isDefined)(viewport.startValue) && !(0, _type.isDefined)(viewport.endValue)) {
        return function() {
          return true;
        };
      }
      if (!(0, _type.isDefined)(viewport.endValue)) {
        return function(argument) {
          return argument >= viewport.startValue;
        };
      }
      if (!(0, _type.isDefined)(viewport.startValue)) {
        return function(argument) {
          return argument <= viewport.endValue;
        };
      }
      return function(argument) {
        return argument >= viewport.startValue && argument <= viewport.endValue;
      };
    }
    var _default = {
      getViewPortFilter,
      getArgumentRange: function(series) {
        var data = series.na || [];
        var range = {};
        if (data.length) {
          if (series.argumentAxisType === DISCRETE) {
            range = {
              categories: data.map(function(item) {
                return item.argument;
              })
            };
          } else {
            var interval;
            if (data.length > 1) {
              var i1 = series.getArgumentAxis().calculateInterval(data[0].argument, data[1].argument);
              var i2 = series.getArgumentAxis().calculateInterval(data[data.length - 1].argument, data[data.length - 2].argument);
              interval = min(i1, i2);
            }
            range = {
              min: data[0].argument,
              max: data[data.length - 1].argument,
              interval
            };
          }
        }
        return processCategories(range);
      },
      getRangeData: function(series) {
        var points = series.getPoints();
        var useAggregation = series.useAggregation();
        var argumentAxis = series.getArgumentAxis();
        var argumentCalculator = getRangeCalculator(series.argumentAxisType, points.length > 1 && argumentAxis, createGetLogFunction(series.argumentAxisType, argumentAxis));
        var valueRangeCalculator = getRangeCalculator(series.valueAxisType, null, createGetLogFunction(series.valueAxisType, series.getValueAxis()));
        var viewportReducer = getViewportReducer(series);
        var range = points.reduce(function(range2, point, index, points2) {
          var argument = point.argument;
          if (!point.isArgumentCorrect()) {
            return range2;
          }
          argumentCalculator(range2.arg, argument, argument);
          if (point.hasValue()) {
            valueRangeCalculator(range2.val, point.getMinValue(), point.getMaxValue());
            viewportReducer(range2.viewport, point, index, points2);
          }
          return range2;
        }, {
          arg: getInitialRange(series.argumentAxisType, series.argumentType, null !== argumentAxis && void 0 !== argumentAxis && argumentAxis.aggregatedPointBetweenTicks() ? void 0 : series.getArgumentRangeInitialValue()),
          val: getInitialRange(series.valueAxisType, series.valueType, points.length ? series.getValueRangeInitialValue() : void 0),
          viewport: getInitialRange(series.valueAxisType, series.valueType, points.length ? series.getValueRangeInitialValue() : void 0)
        });
        if (useAggregation) {
          var argumentRange = this.getArgumentRange(series);
          if (series.argumentAxisType === DISCRETE) {
            range.arg = argumentRange;
          } else {
            var viewport = argumentAxis.getViewport();
            if ((0, _type.isDefined)(viewport.startValue) || (0, _type.isDefined)(viewport.length)) {
              argumentCalculator(range.arg, argumentRange.min, argumentRange.min);
            }
            if ((0, _type.isDefined)(viewport.endValue) || (0, _type.isDefined)(viewport.length) && (0, _type.isDefined)(viewport.startValue)) {
              argumentCalculator(range.arg, argumentRange.max, argumentRange.max);
            }
          }
        }
        processCategories(range.arg);
        processCategories(range.val);
        return range;
      },
      getViewport: function(series) {
        var points = series.getPoints();
        var range;
        var reducer = getViewportReducer(series);
        range = getInitialRange(series.valueAxisType, series.valueType, points.length ? series.getValueRangeInitialValue() : void 0);
        points.some(function(point, index) {
          reducer(range, point, index, points);
          return range.endCalc;
        });
        return range;
      },
      getPointsInViewPort: function(series) {
        var argumentViewPortFilter = getViewPortFilter(series.getArgumentAxis().visualRange() || {});
        var valueViewPort = series.getValueAxis().visualRange() || {};
        var valueViewPortFilter = getViewPortFilter(valueViewPort);
        var points = series.getPoints();
        var addValue = function(values, point, isEdge) {
          var minValue = point.getMinValue();
          var maxValue = point.getMaxValue();
          var isMinValueInViewPort = valueViewPortFilter(minValue);
          var isMaxValueInViewPort = valueViewPortFilter(maxValue);
          if (isMinValueInViewPort) {
            values.push(minValue);
          }
          if (maxValue !== minValue && isMaxValueInViewPort) {
            values.push(maxValue);
          }
          if (isEdge && !isMinValueInViewPort && !isMaxValueInViewPort) {
            if (!values.length) {
              values.push(valueViewPort.startValue);
            } else {
              values.push(valueViewPort.endValue);
            }
          }
        };
        var addEdgePoints = isLineSeries(series) ? function(result, points2, index) {
          var point = points2[index];
          var prevPoint = points2[index - 1];
          var nextPoint = points2[index + 1];
          if (nextPoint && argumentViewPortFilter(nextPoint.argument)) {
            addValue(result[1], point, true);
          }
          if (prevPoint && argumentViewPortFilter(prevPoint.argument)) {
            addValue(result[1], point, true);
          }
        } : _common.noop;
        return points.reduce(function(result, point, index) {
          if (argumentViewPortFilter(point.argument)) {
            addValue(result[0], point);
          } else {
            addEdgePoints(result, points, index);
          }
          return result;
        }, [
          [],
          []
        ]);
      }
    };
    exports.default = _default;
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/devextreme/cjs/viz/series/scatter_series.js
var require_scatter_series = __commonJS({
  "node_modules/devextreme/cjs/viz/series/scatter_series.js"(exports) {
    "use strict";
    exports.polar = exports.chart = void 0;
    var _extend3 = require_extend();
    var _iterator = require_iterator();
    var _range_data_calculator = _interopRequireDefault(require_range_data_calculator());
    var _type = require_type();
    var _utils = require_utils();
    var _common = require_common();
    function _interopRequireDefault(obj) {
      return obj && obj.j ? obj : {
        default: obj
      };
    }
    function _typeof(obj) {
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _defineProperty(obj, key, value) {
      key = _toPropertyKey(key);
      if (key in obj) {
        Object.defineProperty(obj, key, {
          value,
          enumerable: true,
          configurable: true,
          writable: true
        });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return "symbol" === _typeof(key) ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if ("object" !== _typeof(input) || null === input) {
        return input;
      }
      var prim = input[Symbol.toPrimitive];
      if (void 0 !== prim) {
        var res = prim.call(input, hint || "default");
        if ("object" !== _typeof(res)) {
          return res;
        }
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return ("string" === hint ? String : Number)(input);
    }
    var math = Math;
    var _abs = math.abs;
    var _sqrt = math.sqrt;
    var _max = math.max;
    var DEFAULT_TRACKER_WIDTH = 12;
    var DEFAULT_DURATION = 400;
    var HIGH_ERROR = "highError";
    var LOW_ERROR = "lowError";
    var VARIANCE = "variance";
    var STANDARD_DEVIATION = "stddeviation";
    var STANDARD_ERROR = "stderror";
    var PERCENT = "percent";
    var FIXED = "fixed";
    var UNDEFINED = "undefined";
    var DISCRETE = "discrete";
    var LOGARITHMIC = "logarithmic";
    var DATETIME = "datetime";
    var chart = {};
    exports.chart = chart;
    var polar = {};
    exports.polar = polar;
    function sum(array) {
      var result = 0;
      (0, _iterator.each)(array, function(_, value) {
        result += value;
      });
      return result;
    }
    function isErrorBarTypeCorrect(type) {
      return [FIXED, PERCENT, VARIANCE, STANDARD_DEVIATION, STANDARD_ERROR].includes(type);
    }
    function variance(array, expectedValue) {
      return sum((0, _utils.map)(array, function(value) {
        return (value - expectedValue) * (value - expectedValue);
      })) / array.length;
    }
    function calculateAvgErrorBars(result, data, series) {
      var errorBarsOptions = series.getOptions().valueErrorBar;
      var valueField = series.getValueFields()[0];
      var lowValueField = errorBarsOptions.lowValueField || LOW_ERROR;
      var highValueField = errorBarsOptions.highValueField || HIGH_ERROR;
      if (series.areErrorBarsVisible() && void 0 === errorBarsOptions.type) {
        var fusionData = data.reduce(function(result2, item) {
          if ((0, _type.isDefined)(item[lowValueField])) {
            result2[0] += item[valueField] - item[lowValueField];
            result2[1]++;
          }
          if ((0, _type.isDefined)(item[highValueField])) {
            result2[2] += item[highValueField] - item[valueField];
            result2[3]++;
          }
          return result2;
        }, [0, 0, 0, 0]);
        if (fusionData[1]) {
          result[lowValueField] = result[valueField] - fusionData[0] / fusionData[1];
        }
        if (fusionData[2]) {
          result[highValueField] = result[valueField] + fusionData[2] / fusionData[3];
        }
      }
      return result;
    }
    function calculateSumErrorBars(result, data, series) {
      var errorBarsOptions = series.getOptions().valueErrorBar;
      var lowValueField = errorBarsOptions.lowValueField || LOW_ERROR;
      var highValueField = errorBarsOptions.highValueField || HIGH_ERROR;
      if (series.areErrorBarsVisible() && void 0 === errorBarsOptions.type) {
        result[lowValueField] = 0;
        result[highValueField] = 0;
        result = data.reduce(function(result2, item) {
          result2[lowValueField] += item[lowValueField];
          result2[highValueField] += item[highValueField];
          return result2;
        }, result);
      }
      return result;
    }
    function getMinMaxAggregator(compare) {
      return function(_ref, series) {
        var intervalStart = _ref.intervalStart, intervalEnd = _ref.intervalEnd, data = _ref.data;
        var valueField = series.getValueFields()[0];
        var targetData = data[0];
        targetData = data.reduce(function(result, item) {
          var value = item[valueField];
          if (null === result[valueField]) {
            result = item;
          }
          if (null !== value && compare(value, result[valueField])) {
            return item;
          }
          return result;
        }, targetData);
        return (0, _extend3.extend)({}, targetData, _defineProperty({}, series.getArgumentField(), series.ic(intervalStart, intervalEnd)));
      };
    }
    function checkFields(data, fieldsToCheck, skippedFields) {
      var allFieldsIsValid = true;
      for (var field in fieldsToCheck) {
        var isArgument = "argument" === field;
        if (isArgument || "size" === field ? !(0, _type.isDefined)(data[field]) : void 0 === data[field]) {
          var selector = fieldsToCheck[field];
          if (!isArgument) {
            skippedFields[selector] = (skippedFields[selector] || 0) + 1;
          }
          allFieldsIsValid = false;
        }
      }
      return allFieldsIsValid;
    }
    var baseScatterMethods = {
      ei: DEFAULT_DURATION,
      wm: DEFAULT_TRACKER_WIDTH,
      jc: _common.noop,
      vb: _common.noop,
      Zd: _common.noop,
      F: _common.noop,
      xm: _common.noop,
      Ob: function() {
        this.p.append(this.kc.seriesGroup);
      },
      Ia: function(styleOptions, defaultColor) {
        return {
          fill: (0, _utils.extractColor)(styleOptions.color, true) || defaultColor,
          hatching: styleOptions.hatching ? (0, _extend3.extend)({}, styleOptions.hatching, {
            direction: "right"
          }) : void 0
        };
      },
      lc: _common.noop,
      Sf: function(settings) {
        settings["clip-path"] = this._c;
      },
      $c: function(settings) {
        settings["clip-path"] = this.gi ? this._c : null;
      },
      Ab: function(groupName, parent, target, settings) {
        var group = parent[groupName] = parent[groupName] || this.n.g();
        target && group.append(target);
        settings && group.attr(settings);
      },
      ht: function(settings) {
        settings.opacity = null;
        settings.scale = null;
        if (this.e.rotated) {
          settings.translateX = null;
        } else {
          settings.translateY = null;
        }
      },
      Bb: function() {
        this.Ab("_markersGroup", this, this.p);
        this.Ab("_labelsGroup", this);
      },
      ad: function() {
        var settings = this.Cb(this.ji()).normal;
        settings.class = "dxc-markers";
        settings.opacity = 1;
        this.$c(settings);
        this.J.attr(settings);
      },
      getVisibleArea: function() {
        return this.li;
      },
      areErrorBarsVisible: function() {
        var errorBarOptions = this.e.valueErrorBar;
        return errorBarOptions && this.jt() && "none" !== errorBarOptions.displayMode && (isErrorBarTypeCorrect((0, _utils.normalizeEnum)(errorBarOptions.type)) || (0, _type.isDefined)(errorBarOptions.lowValueField) || (0, _type.isDefined)(errorBarOptions.highValueField));
      },
      groupPointsByCoords: function(rotated) {
        var cat = [];
        (0, _iterator.each)(this.getVisiblePoints(), function(_, p) {
          var pointCoord = parseInt(rotated ? p.vy : p.vx);
          if (!cat[pointCoord]) {
            cat[pointCoord] = p;
          } else {
            Array.isArray(cat[pointCoord]) ? cat[pointCoord].push(p) : cat[pointCoord] = [cat[pointCoord], p];
          }
        });
        return cat;
      },
      _d: function(animationEnabled) {
        var errorBarOptions = this.e.valueErrorBar;
        var settings;
        if (this.areErrorBarsVisible()) {
          settings = {
            class: "dxc-error-bars",
            stroke: errorBarOptions.color,
            "stroke-width": errorBarOptions.lineWidth,
            opacity: animationEnabled ? 1e-3 : errorBarOptions.opacity || 1,
            "stroke-linecap": "square",
            sharp: true,
            "clip-path": this.gi ? this._c : this.ym
          };
          this.Ab("_errorBarGroup", this, this.p, settings);
        }
      },
      Ta: function(animationEnabled) {
        this.ad();
        this.kt(animationEnabled);
        this._d(animationEnabled);
      },
      $d: function() {
        var defaultPointOptions;
        var creatingPointOptions = this.ae;
        var normalStyle;
        if (!creatingPointOptions) {
          defaultPointOptions = this.Tf();
          this.ae = creatingPointOptions = (0, _extend3.extend)(true, {
            styles: {}
          }, defaultPointOptions);
          normalStyle = defaultPointOptions.styles && defaultPointOptions.styles.normal || {};
          creatingPointOptions.styles = creatingPointOptions.styles || {};
          creatingPointOptions.styles.normal = {
            "stroke-width": normalStyle["stroke-width"],
            r: normalStyle.r,
            opacity: normalStyle.opacity
          };
        }
        return creatingPointOptions;
      },
      Tf: function() {
        return this.ni(this.oi(), this.e.label);
      },
      mc: function() {
        return this.e.point;
      },
      K: function(style, defaultColor, defaultBorderColor, defaultSize) {
        var border = style.border || {};
        var sizeValue = void 0 !== style.size ? style.size : defaultSize;
        return {
          fill: (0, _utils.extractColor)(style.color, true) || defaultColor,
          stroke: border.color || defaultBorderColor,
          "stroke-width": border.visible ? border.width : 0,
          r: sizeValue / 2 + (border.visible && 0 !== sizeValue ? ~~(border.width / 2) || 0 : 0)
        };
      },
      Cb: function(pointOptions) {
        var mainPointColor = (0, _utils.extractColor)(pointOptions.color, true) || this.e.mainSeriesColor;
        var containerColor = this.e.containerBackgroundColor;
        var normalStyle = this.K(pointOptions, mainPointColor, mainPointColor);
        normalStyle.visibility = pointOptions.visible ? "visible" : "hidden";
        return {
          labelColor: mainPointColor,
          normal: normalStyle,
          hover: this.K(pointOptions.hoverStyle, containerColor, mainPointColor, pointOptions.size),
          selection: this.K(pointOptions.selectionStyle, containerColor, mainPointColor, pointOptions.size)
        };
      },
      Ua: function(data, skippedFields, fieldsToCheck) {
        fieldsToCheck = fieldsToCheck || {
          value: this.getValueFields()[0]
        };
        fieldsToCheck.argument = this.getArgumentField();
        return checkFields(data, fieldsToCheck, skippedFields || {}) && data.value === data.value;
      },
      getArgumentRangeInitialValue: function() {
        var points = this.getPoints();
        if (this.useAggregation() && points.length) {
          var _points$0$aggregation, _points$aggregationIn;
          return {
            min: null === (_points$0$aggregation = points[0].aggregationInfo) || void 0 === _points$0$aggregation ? void 0 : _points$0$aggregation.intervalStart,
            max: null === (_points$aggregationIn = points[points.length - 1].aggregationInfo) || void 0 === _points$aggregationIn ? void 0 : _points$aggregationIn.intervalEnd
          };
        }
        return;
      },
      getValueRangeInitialValue: function() {
        return;
      },
      zm: function() {
        return _range_data_calculator.default.getRangeData(this);
      },
      bd: function() {
        var _this = this;
        var valueField = this.getValueFields()[0];
        var argumentField = this.getArgumentField();
        var tagField = this.getTagField();
        var areErrorBarsVisible = this.areErrorBarsVisible();
        var lowValueField;
        var highValueField;
        if (areErrorBarsVisible) {
          var errorBarOptions = this.e.valueErrorBar;
          lowValueField = errorBarOptions.lowValueField || LOW_ERROR;
          highValueField = errorBarOptions.highValueField || HIGH_ERROR;
        }
        return function(data) {
          var pointData = {
            value: _this.nc(data[valueField]),
            argument: data[argumentField],
            tag: data[tagField],
            data
          };
          if (areErrorBarsVisible) {
            pointData.lowError = data[lowValueField];
            pointData.highError = data[highValueField];
          }
          return pointData;
        };
      },
      jt: function() {
        return this.valueAxisType !== DISCRETE && this.valueAxisType !== LOGARITHMIC && this.valueType !== DATETIME;
      },
      gb: function(options) {
        var point = options.point;
        if (point.isInVisibleArea()) {
          point.clearVisibility();
          point.draw(this.n, options.groups, options.hasAnimation, options.firstDrawing);
          this.Va.push(point);
        } else {
          point.setInvisibility();
        }
      },
      cd: function() {
        var animationSettings = {
          duration: this.ei
        };
        this.wa && this.wa.animate({
          opacity: 1
        }, animationSettings);
        this.fe && this.fe.animate({
          opacity: this.e.valueErrorBar.opacity || 1
        }, animationSettings);
      },
      dd: function() {
        var that = this;
        var lastPointIndex = that.Va.length - 1;
        (0, _iterator.each)(that.Va || [], function(i, p) {
          p.animate(i === lastPointIndex ? function() {
            that.cd();
          } : void 0, {
            translateX: p.x,
            translateY: p.y
          });
        });
      },
      ic: function(intervalStart, intervalEnd) {
        var argAxis = this.getArgumentAxis();
        var axisOptions = argAxis.getOptions();
        if (argAxis.aggregatedPointBetweenTicks()) {
          return intervalStart;
        }
        return "discrete" !== axisOptions.type ? argAxis.getVisualRangeCenter({
          minVisible: intervalStart,
          maxVisible: intervalEnd
        }, true) : intervalStart;
      },
      Uf: "avg",
      ge: {
        avg: function(_ref2, series) {
          var _calculateAvgErrorBar;
          var data = _ref2.data, intervalStart = _ref2.intervalStart, intervalEnd = _ref2.intervalEnd;
          if (!data.length) {
            return;
          }
          var valueField = series.getValueFields()[0];
          var aggregationResult = data.reduce(function(result, item) {
            var value = item[valueField];
            if ((0, _type.isDefined)(value)) {
              result[0] += value;
              result[1]++;
            } else if (null === value) {
              result[2]++;
            }
            return result;
          }, [0, 0, 0]);
          return calculateAvgErrorBars((_calculateAvgErrorBar = {}, _defineProperty(_calculateAvgErrorBar, valueField, aggregationResult[2] === data.length ? null : aggregationResult[0] / aggregationResult[1]), _defineProperty(_calculateAvgErrorBar, series.getArgumentField(), series.ic(intervalStart, intervalEnd)), _calculateAvgErrorBar), data, series);
        },
        sum: function(_ref3, series) {
          var _calculateSumErrorBar;
          var intervalStart = _ref3.intervalStart, intervalEnd = _ref3.intervalEnd, data = _ref3.data;
          if (!data.length) {
            return;
          }
          var valueField = series.getValueFields()[0];
          var aggregationResult = data.reduce(function(result, item) {
            var value2 = item[valueField];
            if (void 0 !== value2) {
              result[0] += value2;
            }
            if (null === value2) {
              result[1]++;
            } else if (void 0 === value2) {
              result[2]++;
            }
            return result;
          }, [0, 0, 0]);
          var value = aggregationResult[0];
          if (aggregationResult[1] === data.length) {
            value = null;
          }
          if (aggregationResult[2] === data.length) {
            return;
          }
          return calculateSumErrorBars((_calculateSumErrorBar = {}, _defineProperty(_calculateSumErrorBar, valueField, value), _defineProperty(_calculateSumErrorBar, series.getArgumentField(), series.ic(intervalStart, intervalEnd)), _calculateSumErrorBar), data, series);
        },
        count: function(_ref4, series) {
          var _ref5;
          var data = _ref4.data, intervalStart = _ref4.intervalStart, intervalEnd = _ref4.intervalEnd;
          var valueField = series.getValueFields()[0];
          return _ref5 = {}, _defineProperty(_ref5, series.getArgumentField(), series.ic(intervalStart, intervalEnd)), _defineProperty(_ref5, valueField, data.filter(function(i) {
            return void 0 !== i[valueField];
          }).length), _ref5;
        },
        min: getMinMaxAggregator(function(a, b) {
          return a < b;
        }),
        max: getMinMaxAggregator(function(a, b) {
          return a > b;
        })
      },
      pi: function() {
        delete this.ae;
      },
      getArgumentField: function() {
        return this.e.argumentField || "arg";
      },
      getValueFields: function() {
        var options = this.e;
        var errorBarsOptions = options.valueErrorBar;
        var valueFields = [options.valueField || "val"];
        var lowValueField;
        var highValueField;
        if (errorBarsOptions) {
          lowValueField = errorBarsOptions.lowValueField;
          highValueField = errorBarsOptions.highValueField;
          (0, _type.isString)(lowValueField) && valueFields.push(lowValueField);
          (0, _type.isString)(highValueField) && valueFields.push(highValueField);
        }
        return valueFields;
      },
      qi: function(data) {
        if (!this.areErrorBarsVisible()) {
          return;
        }
        var options = this.e;
        var errorBarsOptions = options.valueErrorBar;
        var errorBarType = (0, _utils.normalizeEnum)(errorBarsOptions.type);
        var floatErrorValue = parseFloat(errorBarsOptions.value);
        var valueField = this.getValueFields()[0];
        var value;
        var lowValueField = errorBarsOptions.lowValueField || LOW_ERROR;
        var highValueField = errorBarsOptions.highValueField || HIGH_ERROR;
        var valueArray;
        var valueArrayLength;
        var meanValue;
        var processDataItem;
        var addSubError = function(_i, item) {
          value = item.value;
          item.lowError = value - floatErrorValue;
          item.highError = value + floatErrorValue;
        };
        switch (errorBarType) {
          case FIXED:
            processDataItem = addSubError;
            break;
          case PERCENT:
            processDataItem = function(_, item) {
              value = item.value;
              var error = value * floatErrorValue / 100;
              item.lowError = value - error;
              item.highError = value + error;
            };
            break;
          case UNDEFINED:
            processDataItem = function(_, item) {
              item.lowError = item.data[lowValueField];
              item.highError = item.data[highValueField];
            };
            break;
          default:
            valueArray = (0, _utils.map)(data, function(item) {
              return (0, _type.isDefined)(item.data[valueField]) ? item.data[valueField] : null;
            });
            valueArrayLength = valueArray.length;
            floatErrorValue = floatErrorValue || 1;
            switch (errorBarType) {
              case VARIANCE:
                floatErrorValue = variance(valueArray, sum(valueArray) / valueArrayLength) * floatErrorValue;
                processDataItem = addSubError;
                break;
              case STANDARD_DEVIATION:
                meanValue = sum(valueArray) / valueArrayLength;
                floatErrorValue = _sqrt(variance(valueArray, meanValue)) * floatErrorValue;
                processDataItem = function(_, item) {
                  item.lowError = meanValue - floatErrorValue;
                  item.highError = meanValue + floatErrorValue;
                };
                break;
              case STANDARD_ERROR:
                floatErrorValue = _sqrt(variance(valueArray, sum(valueArray) / valueArrayLength) / valueArrayLength) * floatErrorValue;
                processDataItem = addSubError;
            }
        }
        processDataItem && (0, _iterator.each)(data, processDataItem);
      },
      Vf: function(options) {
        var pointOptions = this.$d();
        var styles = pointOptions.styles;
        var maxSize = [styles.normal, styles.hover, styles.selection].reduce(function(max, style) {
          return _max(max, 2 * style.r + style["stroke-width"]);
        }, 0);
        options.size = pointOptions.visible ? maxSize : 0;
        options.sizePointNormalState = pointOptions.visible ? 2 * styles.normal.r + styles.normal["stroke-width"] : 2;
        return options;
      },
      usePointsToDefineAutoHiding: function() {
        return true;
      }
    };
    exports.chart = chart = (0, _extend3.extend)({}, baseScatterMethods, {
      drawTrackers: function() {
        var that = this;
        var trackers;
        var trackersGroup;
        var segments = that.Wa || [];
        var rotated = that.e.rotated;
        if (!that.isVisible()) {
          return;
        }
        if (segments.length) {
          trackers = that.ed = that.ed || [];
          trackersGroup = that.Wf = (that.Wf || that.n.g().attr({
            fill: "gray",
            opacity: 1e-3,
            stroke: "gray",
            class: "dxc-trackers"
          })).attr({
            "clip-path": this._c || null
          }).append(that.p);
          (0, _iterator.each)(segments, function(i, segment) {
            if (!trackers[i]) {
              trackers[i] = that.nt(segment).data({
                "chart-data-series": that
              }).append(trackersGroup);
            } else {
              that.ot(segment, trackers[i]);
            }
          });
        }
        that.Am = that.groupPointsByCoords(rotated);
      },
      fd: function(isArgument, coord) {
        var axis = isArgument ? this.getArgumentAxis() : this.getValueAxis();
        var visibleArea = axis.getVisibleArea();
        return (0, _type.isDefined)(coord) && visibleArea[0] <= coord && visibleArea[1] >= coord;
      },
      checkSeriesViewportCoord: function(axis, coord) {
        return this.getPoints().length && this.isVisible();
      },
      getSeriesPairCoord: function(coord, isArgument) {
        var oppositeCoord = null;
        var isOpposite = !isArgument && !this.e.rotated || isArgument && this.e.rotated;
        var coordName = !isOpposite ? "vx" : "vy";
        var oppositeCoordName = !isOpposite ? "vy" : "vx";
        var points = this.getVisiblePoints();
        for (var i = 0; i < points.length; i++) {
          var p = points[i];
          var tmpCoord = p[coordName] === coord ? p[oppositeCoordName] : void 0;
          if (this.fd(!isArgument, tmpCoord)) {
            oppositeCoord = tmpCoord;
            break;
          }
        }
        return oppositeCoord;
      },
      Xf: function(point, nextPoint) {
        return [point, nextPoint];
      },
      Yf: function() {
        return [];
      },
      ri: function(coord, isArgument) {
        var that = this;
        var rotated = that.getOptions().rotated;
        var isOpposite = !isArgument && !rotated || isArgument && rotated;
        var coordName = isOpposite ? "vy" : "vx";
        var allPoints = that.getPoints();
        var bezierPoints = that.Yf();
        var nearestPoints = [];
        if (allPoints.length > 1) {
          allPoints.forEach(function(point, i) {
            var nextPoint = allPoints[i + 1];
            if (nextPoint && (point[coordName] <= coord && nextPoint[coordName] >= coord || point[coordName] >= coord && nextPoint[coordName] <= coord)) {
              nearestPoints.push(that.Xf(point, nextPoint, bezierPoints));
            }
          });
        } else {
          nearestPoints.push([allPoints[0], allPoints[0]]);
        }
        return nearestPoints;
      },
      getNeighborPoint: function(x, y) {
        var pCoord = this.e.rotated ? y : x;
        var nCoord = pCoord;
        var cat = this.Am;
        var point = null;
        var minDistance;
        var oppositeCoord = this.e.rotated ? x : y;
        var oppositeCoordName = this.e.rotated ? "vx" : "vy";
        if (this.isVisible() && cat) {
          point = cat[pCoord];
          do {
            point = cat[nCoord] || cat[pCoord];
            pCoord--;
            nCoord++;
          } while ((pCoord >= 0 || nCoord < cat.length) && !point);
          if (Array.isArray(point)) {
            minDistance = _abs(point[0][oppositeCoordName] - oppositeCoord);
            (0, _iterator.each)(point, function(i, p) {
              var distance = _abs(p[oppositeCoordName] - oppositeCoord);
              if (minDistance >= distance) {
                minDistance = distance;
                point = p;
              }
            });
          }
        }
        return point;
      },
      ui: function() {
        var rotated = this.e.rotated;
        var visibleX = (rotated ? this.getValueAxis() : this.getArgumentAxis()).getVisibleArea();
        var visibleY = (rotated ? this.getArgumentAxis() : this.getValueAxis()).getVisibleArea();
        this.li = {
          minX: visibleX[0],
          maxX: visibleX[1],
          minY: visibleY[0],
          maxY: visibleY[1]
        };
      },
      getPointCenterByArg: function(arg) {
        var point = this.getPointsByArg(arg)[0];
        return point ? point.getCenterCoord() : void 0;
      }
    });
    exports.polar = polar = (0, _extend3.extend)({}, baseScatterMethods, {
      drawTrackers: function() {
        chart.drawTrackers.call(this);
        var cat = this.Am;
        var index;
        if (!this.isVisible()) {
          return;
        }
        (0, _iterator.each)(cat, function(i, category) {
          if (category) {
            index = i;
            return false;
          }
        });
        cat[index + 360] = cat[index];
      },
      getNeighborPoint: function(x, y) {
        var pos = (0, _utils.convertXYToPolar)(this.getValueAxis().getCenter(), x, y);
        return chart.getNeighborPoint.call(this, pos.phi, pos.r);
      },
      ui: function() {
        var canvas = this.getValueAxis().getCanvas();
        this.li = {
          minX: canvas.left,
          maxX: canvas.width - canvas.right,
          minY: canvas.top,
          maxY: canvas.height - canvas.bottom
        };
      },
      getSeriesPairCoord: function(params, isArgument) {
        var coords = null;
        var paramName = isArgument ? "argument" : "radius";
        var points = this.getVisiblePoints();
        for (var i = 0; i < points.length; i++) {
          var p = points[i];
          var tmpPoint = (0, _type.isDefined)(p[paramName]) && (0, _type.isDefined)(params[paramName]) && p[paramName].valueOf() === params[paramName].valueOf() ? {
            x: p.x,
            y: p.y
          } : void 0;
          if ((0, _type.isDefined)(tmpPoint)) {
            coords = tmpPoint;
            break;
          }
        }
        return coords;
      }
    });
  }
});

// node_modules/devextreme/cjs/viz/series/line_series.js
var require_line_series = __commonJS({
  "node_modules/devextreme/cjs/viz/series/line_series.js"(exports) {
    "use strict";
    exports.polar = exports.chart = void 0;
    var _scatter_series = require_scatter_series();
    var _object = require_object();
    var _extend = require_extend();
    var _iterator = require_iterator();
    var _utils = require_utils();
    var _math = require_math();
    var DISCRETE = "discrete";
    var round = Math.round, sqrt = Math.sqrt, pow = Math.pow, min = Math.min, max = Math.max, abs = Math.abs;
    var chart = {};
    exports.chart = chart;
    var polar = {};
    exports.polar = polar;
    function clonePoint(point, newX, newY, newAngle) {
      var p = (0, _object.clone)(point);
      p.x = newX;
      p.y = newY;
      p.angle = newAngle;
      return p;
    }
    function getTangentPoint(point, prevPoint, centerPoint, tan, nextStepAngle) {
      var correctAngle = point.angle + nextStepAngle;
      var cosSin = (0, _utils.getCosAndSin)(correctAngle);
      var x = centerPoint.x + (point.radius + tan * nextStepAngle) * cosSin.cos;
      var y = centerPoint.y - (point.radius + tan * nextStepAngle) * cosSin.sin;
      return clonePoint(prevPoint, x, y, correctAngle);
    }
    function obtainCubicBezierTCoef(p, p0, p1, p2, p3) {
      var d = p0 - p;
      var c = 3 * p1 - 3 * p0;
      var b = 3 * p2 - 6 * p1 + 3 * p0;
      var a = p3 - 3 * p2 + 3 * p1 - p0;
      return (0, _math.solveCubicEquation)(a, b, c, d);
    }
    var lineMethods = {
      autoHidePointMarkersEnabled: function() {
        return true;
      },
      Bm: function(style, settings, group) {
        settings = (0, _extend.extend)(settings, style);
        this.Sf(settings);
        group.attr(settings);
      },
      Ta: function(animationEnabled) {
        var style = this.t.normal;
        this.Bm(style.elements, {
          class: "dxc-elements"
        }, this.Xa);
        this.Pa && this.Bm(style.border, {
          class: "dxc-borders"
        }, this.Pa);
        _scatter_series.chart.Ta.call(this, animationEnabled);
        animationEnabled && this.J && this.J.attr({
          opacity: 1e-3
        });
      },
      Bb: function() {
        this.Ab("_elementsGroup", this, this.p);
        this.Cm() && this.Ab("_bordersGroup", this, this.p);
        _scatter_series.chart.Bb.call(this);
      },
      Cm: function() {
        return false;
      },
      oc: function(segment) {
        return {
          line: (0, _utils.map)(segment.line || [], function(pt) {
            return pt.getDefaultCoords();
          })
        };
      },
      F: function(points) {
        return {
          line: points
        };
      },
      Dm: function(options, defaultColor) {
        return {
          stroke: (0, _utils.extractColor)(options.color, true) || defaultColor,
          "stroke-width": options.width,
          dashStyle: options.dashStyle || "solid"
        };
      },
      Zd: function(options, defaultColor) {
        return {
          elements: this.Dm(options, defaultColor)
        };
      },
      jc: function(style) {
        this.Xa && this.Xa.attr(style.elements);
        (0, _iterator.each)(this.ya || [], function(_, graphic) {
          graphic.line && graphic.line.attr({
            "stroke-width": style.elements["stroke-width"]
          }).sharp();
        });
      },
      Zf: function(segment, group) {
        return {
          line: this.Pb(segment.line, {
            "stroke-width": this.t.normal.elements["stroke-width"]
          }).append(group)
        };
      },
      ie: function(element) {
        element.line.remove();
      },
      je: function(element, segment, animate, animationComplete) {
        var params = {
          points: segment.line
        };
        var lineElement = element.line;
        animate ? lineElement.animate(params, {}, animationComplete) : lineElement.attr(params);
      },
      cd: function() {
        _scatter_series.chart.cd.call(this);
        this.J && this.J.animate({
          opacity: 1
        }, {
          duration: this.ei
        });
      },
      dd: function() {
        var that = this;
        var lastIndex = that.ya.length - 1;
        (0, _iterator.each)(that.ya || [], function(i, elem) {
          var complete;
          if (i === lastIndex) {
            complete = function() {
              that.cd();
            };
          }
          that.je(elem, that.Wa[i], true, complete);
        });
      },
      gb: function(options) {
        _scatter_series.chart.gb.call(this, {
          point: options.point,
          groups: options.groups
        });
      },
      Pb: function(points, settings) {
        return this.n.path(points, "line").attr(settings);
      },
      qt: function(points, rotated) {
        return rotated ? points.sort(function(p1, p2) {
          return p2.y - p1.y;
        }) : points.sort(function(p1, p2) {
          return p1.x - p2.x;
        });
      },
      xm: function(points, animationEnabled, segmentCount, lastSegment) {
        var rotated = this.e.rotated;
        var segment = this.F(points, rotated, lastSegment);
        this.Wa.push(segment);
        if (!this.ya[segmentCount]) {
          this.ya[segmentCount] = this.Zf(animationEnabled ? this.oc(segment) : segment, this.Xa);
        } else if (!animationEnabled) {
          this.je(this.ya[segmentCount], segment);
        }
      },
      ke: function() {
        var defaultTrackerWidth = this.wm;
        var strokeWidthFromElements = this.t.normal.elements["stroke-width"];
        return {
          "stroke-width": strokeWidthFromElements > defaultTrackerWidth ? strokeWidthFromElements : defaultTrackerWidth,
          fill: "none"
        };
      },
      wi: function(segment) {
        return segment.line;
      },
      nt: function(segment) {
        return this.Pb(this.wi(segment), this.ke(segment));
      },
      ot: function(segment, element) {
        var settings = this.ke(segment);
        settings.points = this.wi(segment);
        element.attr(settings);
      },
      checkSeriesViewportCoord: function(axis, coord) {
        if (!_scatter_series.chart.checkSeriesViewportCoord.call(this)) {
          return false;
        }
        var range = axis.isArgumentAxis ? this.getArgumentRange() : this.getViewport();
        var min2 = axis.getTranslator().translate(range.categories ? range.categories[0] : range.min);
        var max2 = axis.getTranslator().translate(range.categories ? range.categories[range.categories.length - 1] : range.max);
        var rotated = this.getOptions().rotated;
        var inverted = axis.getOptions().inverted;
        return axis.isArgumentAxis && (!rotated && !inverted || rotated && inverted) || !axis.isArgumentAxis && (rotated && !inverted || !rotated && inverted) ? coord >= min2 && coord <= max2 : coord >= max2 && coord <= min2;
      }
    };
    var lineSeries = chart.line = (0, _extend.extend)({}, _scatter_series.chart, lineMethods, {
      getPointCenterByArg: function(arg) {
        var value = this.getArgumentAxis().getTranslator().translate(arg);
        return {
          x: value,
          y: value
        };
      },
      getSeriesPairCoord: function(coord, isArgument) {
        var oppositeCoord = null;
        var nearestPoints = this.ri(coord, isArgument);
        var needValueCoord = isArgument && !this.e.rotated || !isArgument && this.e.rotated;
        for (var i = 0; i < nearestPoints.length; i++) {
          var p = nearestPoints[i];
          var k = (p[1].vy - p[0].vy) / (p[1].vx - p[0].vx);
          var b = p[0].vy - p[0].vx * k;
          var tmpCoord = void 0;
          if (p[1].vx - p[0].vx === 0) {
            tmpCoord = needValueCoord ? p[0].vy : p[0].vx;
          } else {
            tmpCoord = needValueCoord ? k * coord + b : (coord - b) / k;
          }
          if (this.fd(!isArgument, tmpCoord)) {
            oppositeCoord = tmpCoord;
            break;
          }
        }
        return oppositeCoord;
      }
    });
    chart.stepline = (0, _extend.extend)({}, lineSeries, {
      Em: function(points) {
        var segment = [];
        var coordName = this.e.rotated ? "x" : "y";
        (0, _iterator.each)(points, function(i, pt) {
          var point;
          if (!i) {
            segment.push(pt);
            return;
          }
          var step = segment[segment.length - 1][coordName];
          if (step !== pt[coordName]) {
            point = (0, _object.clone)(pt);
            point[coordName] = step;
            segment.push(point);
          }
          segment.push(pt);
        });
        return segment;
      },
      F: function(points) {
        return lineSeries.F(this.Em(points));
      },
      getSeriesPairCoord: function(coord, isArgument) {
        var oppositeCoord;
        var rotated = this.e.rotated;
        var isOpposite = !isArgument && !rotated || isArgument && rotated;
        var coordName = !isOpposite ? "vx" : "vy";
        var oppositeCoordName = !isOpposite ? "vy" : "vx";
        var nearestPoints = this.ri(coord, isArgument);
        for (var i = 0; i < nearestPoints.length; i++) {
          var p = nearestPoints[i];
          var tmpCoord = void 0;
          if (isArgument) {
            tmpCoord = coord !== p[1][coordName] ? p[0][oppositeCoordName] : p[1][oppositeCoordName];
          } else {
            tmpCoord = coord === p[0][coordName] ? p[0][oppositeCoordName] : p[1][oppositeCoordName];
          }
          if (this.fd(!isArgument, tmpCoord)) {
            oppositeCoord = tmpCoord;
            break;
          }
        }
        return oppositeCoord;
      }
    });
    chart.spline = (0, _extend.extend)({}, lineSeries, {
      _f: function(src, rotated) {
        var bezierPoints = [];
        var pointsCopy = src;
        var checkExtremum = function(otherPointCoord, pointCoord, controlCoord) {
          return otherPointCoord > pointCoord && controlCoord > otherPointCoord || otherPointCoord < pointCoord && controlCoord < otherPointCoord ? otherPointCoord : controlCoord;
        };
        if (1 !== pointsCopy.length) {
          pointsCopy.forEach(function(curPoint, i) {
            var leftControlX;
            var leftControlY;
            var rightControlX;
            var rightControlY;
            var prevPoint = pointsCopy[i - 1];
            var nextPoint = pointsCopy[i + 1];
            var x1;
            var x2;
            var y1;
            var y2;
            var a;
            var b;
            var c;
            var xc;
            var yc;
            var shift;
            if (!i || i === pointsCopy.length - 1) {
              bezierPoints.push(curPoint, curPoint);
              return;
            }
            var xCur = curPoint.x;
            var yCur = curPoint.y;
            x1 = prevPoint.x;
            x2 = nextPoint.x;
            y1 = prevPoint.y;
            y2 = nextPoint.y;
            var curIsExtremum = !!(!rotated && (yCur <= prevPoint.y && yCur <= nextPoint.y || yCur >= prevPoint.y && yCur >= nextPoint.y) || rotated && (xCur <= prevPoint.x && xCur <= nextPoint.x || xCur >= prevPoint.x && xCur >= nextPoint.x));
            if (curIsExtremum) {
              if (!rotated) {
                rightControlY = leftControlY = yCur;
                rightControlX = (xCur + nextPoint.x) / 2;
                leftControlX = (xCur + prevPoint.x) / 2;
              } else {
                rightControlX = leftControlX = xCur;
                rightControlY = (yCur + nextPoint.y) / 2;
                leftControlY = (yCur + prevPoint.y) / 2;
              }
            } else {
              a = y2 - y1;
              b = x1 - x2;
              c = y1 * x2 - x1 * y2;
              if (!rotated) {
                if (!b) {
                  bezierPoints.push(curPoint, curPoint, curPoint);
                  return;
                }
                xc = xCur;
                yc = -1 * (a * xc + c) / b;
                shift = yc - yCur;
                y1 -= shift;
                y2 -= shift;
              } else {
                if (!a) {
                  bezierPoints.push(curPoint, curPoint, curPoint);
                  return;
                }
                yc = yCur;
                xc = -1 * (b * yc + c) / a;
                shift = xc - xCur;
                x1 -= shift;
                x2 -= shift;
              }
              rightControlX = (xCur + 0.5 * x2) / 1.5;
              rightControlY = (yCur + 0.5 * y2) / 1.5;
              leftControlX = (xCur + 0.5 * x1) / 1.5;
              leftControlY = (yCur + 0.5 * y1) / 1.5;
            }
            if (!rotated) {
              leftControlY = checkExtremum(prevPoint.y, yCur, leftControlY);
              rightControlY = checkExtremum(nextPoint.y, yCur, rightControlY);
            } else {
              leftControlX = checkExtremum(prevPoint.x, xCur, leftControlX);
              rightControlX = checkExtremum(nextPoint.x, xCur, rightControlX);
            }
            var leftPoint = clonePoint(curPoint, leftControlX, leftControlY);
            var rightPoint = clonePoint(curPoint, rightControlX, rightControlY);
            bezierPoints.push(leftPoint, curPoint, rightPoint);
          });
        } else {
          bezierPoints.push(pointsCopy[0]);
        }
        return bezierPoints;
      },
      F: function(points, rotated) {
        return lineSeries.F(this._f(points, rotated));
      },
      Pb: function(points, settings) {
        return this.n.path(points, "bezier").attr(settings);
      },
      getSeriesPairCoord: function(coord, isArgument) {
        var oppositeCoord = null;
        var isOpposite = !isArgument && !this.e.rotated || isArgument && this.e.rotated;
        var coordName = !isOpposite ? "vx" : "vy";
        var bezierCoordName = !isOpposite ? "x" : "y";
        var oppositeCoordName = !isOpposite ? "vy" : "vx";
        var bezierOppositeCoordName = !isOpposite ? "y" : "x";
        var axis = !isArgument ? this.getArgumentAxis() : this.getValueAxis();
        var visibleArea = axis.getVisibleArea();
        var nearestPoints = this.ri(coord, isArgument);
        var _loop = function() {
          var p = nearestPoints[i];
          if (1 === p.length) {
            visibleArea[0] <= p[0][oppositeCoordName] && visibleArea[1] >= p[0][oppositeCoordName] && (oppositeCoord = p[0][oppositeCoordName]);
          } else {
            var ts = obtainCubicBezierTCoef(coord, p[0][coordName], p[1][bezierCoordName], p[2][bezierCoordName], p[3][coordName]);
            ts.forEach(function(t) {
              if (t >= 0 && t <= 1) {
                var tmpCoord = Math.pow(1 - t, 3) * p[0][oppositeCoordName] + 3 * Math.pow(1 - t, 2) * t * p[1][bezierOppositeCoordName] + 3 * (1 - t) * t * t * p[2][bezierOppositeCoordName] + t * t * t * p[3][oppositeCoordName];
                if (visibleArea[0] <= tmpCoord && visibleArea[1] >= tmpCoord) {
                  oppositeCoord = tmpCoord;
                }
              }
            });
          }
          if (null !== oppositeCoord) {
            return "break";
          }
        };
        for (var i = 0; i < nearestPoints.length; i++) {
          var _ret = _loop();
          if ("break" === _ret) {
            break;
          }
        }
        return oppositeCoord;
      },
      Xf: function(point, nextPoint, bezierPoints) {
        var index = bezierPoints.indexOf(point);
        return [point, bezierPoints[index + 1], bezierPoints[index + 2], nextPoint];
      },
      Yf: function() {
        return this.Wa.length > 0 ? this.Wa.reduce(function(a, seg) {
          return a.concat(seg.line);
        }, []) : [];
      }
    });
    polar.line = (0, _extend.extend)({}, _scatter_series.polar, lineMethods, {
      qt: function(points) {
        return points;
      },
      F: function(points, rotated, lastSegment) {
        var preparedPoints = [];
        var centerPoint = this.getValueAxis().getCenter();
        var i;
        lastSegment && this.Fm(points);
        if (this.argumentAxisType !== DISCRETE && this.valueAxisType !== DISCRETE) {
          for (i = 1; i < points.length; i++) {
            preparedPoints = preparedPoints.concat(this.rt(points[i], points[i - 1], centerPoint, i === points.length - 1));
          }
          if (!preparedPoints.length) {
            preparedPoints = points;
          }
        } else {
          return lineSeries.F.call(this, points);
        }
        return {
          line: preparedPoints
        };
      },
      st: function(angle) {
        var normAngle = (0, _utils.normalizeAngle)(angle);
        return angle >= 0 ? 360 - normAngle : -normAngle;
      },
      Fm: function(points) {
        var point;
        if (this.Wa.length) {
          point = this.Wa[0].line[0];
        } else {
          point = clonePoint(points[0], points[0].x, points[0].y, points[0].angle);
        }
        point = this.xi(point, points[points.length - 1]);
        if (point) {
          points.push(point);
        }
      },
      xi: function(point, lastPoint) {
        if (lastPoint.angle === point.angle) {
          return;
        }
        if ((0, _utils.normalizeAngle)(round(lastPoint.angle)) === (0, _utils.normalizeAngle)(round(point.angle))) {
          point.angle = lastPoint.angle;
        } else {
          var differenceAngle = lastPoint.angle - point.angle;
          point.angle = lastPoint.angle + this.st(differenceAngle);
        }
        return point;
      },
      rt: function(point, prevPoint, centerPoint, isLastSegment) {
        var tangentPoints = [];
        var betweenAngle = Math.round(prevPoint.angle - point.angle);
        var tan = (prevPoint.radius - point.radius) / betweenAngle;
        var i;
        if (0 === betweenAngle) {
          tangentPoints = [prevPoint, point];
        } else if (betweenAngle > 0) {
          var angle = isLastSegment ? betweenAngle : betweenAngle - 1;
          for (i = angle; i >= 0; i--) {
            tangentPoints.push(getTangentPoint(point, prevPoint, centerPoint, tan, i));
          }
        } else {
          var _angle = isLastSegment ? betweenAngle : betweenAngle + 1;
          for (i = 0; i >= _angle; i--) {
            tangentPoints.push(getTangentPoint(point, prevPoint, centerPoint, tan, betweenAngle - i));
          }
        }
        return tangentPoints;
      },
      getSeriesPairCoord: function(params, isArgument) {
        var argAxis = this.getArgumentAxis();
        var paramName = isArgument ? "angle" : "radius";
        var coordParam = params[paramName];
        var centerPoint = argAxis.getCenter();
        var isInsideInterval = function(prevPoint2, point2, _ref) {
          var x3 = _ref.x, y3 = _ref.y;
          return (p1 = {
            x: x3,
            y: y3
          }, p2 = centerPoint, sqrt(pow(p1.x - p2.x, 2) + pow(p1.y - p2.y, 2))) <= argAxis.getRadius() && min(prevPoint2.x, point2.x) <= x3 && max(prevPoint2.x, point2.x) >= x3 && min(prevPoint2.y, point2.y) <= y3 && max(prevPoint2.y, point2.y) >= y3;
          var p1, p2;
        };
        var coords;
        var neighborPoints = this.getNeighborPoints(coordParam, paramName);
        if (1 === neighborPoints.length) {
          coords = neighborPoints[0];
        } else if (neighborPoints.length > 1) {
          var prevPoint = neighborPoints[0];
          var point = neighborPoints[1];
          if (this.argumentAxisType !== DISCRETE && this.valueAxisType !== DISCRETE) {
            var tan;
            var stepAngle;
            if (isArgument) {
              tan = (prevPoint.radius - point.radius) / (prevPoint.angle - point.angle);
              stepAngle = coordParam - point.angle;
            } else {
              tan = (prevPoint.radius - point.radius) / (prevPoint.angle - point.angle);
              stepAngle = (coordParam - point.radius) / tan;
            }
            coords = getTangentPoint(point, prevPoint, centerPoint, tan, stepAngle);
          } else if (isArgument) {
            var cosSin = (0, _utils.getCosAndSin)(-coordParam);
            var k1 = (point.y - prevPoint.y) / (point.x - prevPoint.x);
            var b1 = prevPoint.y - prevPoint.x * k1;
            var k2 = cosSin.sin / cosSin.cos;
            var b2 = centerPoint.y - k2 * centerPoint.x;
            var x = (b2 - b1) / (k1 - k2);
            var y = k1 * x + b1;
            if (isInsideInterval(prevPoint, point, {
              x,
              y
            })) {
              var quarter = abs((0, _math.trunc)((360 + coordParam) / 90) % 4);
              if (0 === quarter && x >= centerPoint.x && y <= centerPoint.y || 1 === quarter && x <= centerPoint.x && y <= centerPoint.y || 2 === quarter && x <= centerPoint.x && y >= centerPoint.y || 3 === quarter && x >= centerPoint.x && y >= centerPoint.y) {
                coords = {
                  x,
                  y
                };
              }
            }
          } else {
            var k = (point.y - prevPoint.y) / (point.x - prevPoint.x);
            var y0 = prevPoint.y - prevPoint.x * k;
            var a = 1 + k * k;
            var b = -2 * centerPoint.x + 2 * k * y0 - 2 * k * centerPoint.y;
            var c = -pow(coordParam, 2) + pow(y0 - centerPoint.y, 2) + pow(centerPoint.x, 2);
            var d = b * b - 4 * a * c;
            if (d >= 0) {
              var x1 = (-b - sqrt(d)) / (2 * a);
              var x2 = (-b + sqrt(d)) / (2 * a);
              var y1 = k * x1 + y0;
              var y2 = k * x2 + y0;
              coords = isInsideInterval(prevPoint, point, {
                x: x1,
                y: y1
              }) ? {
                x: x1,
                y: y1
              } : isInsideInterval(prevPoint, point, {
                x: x2,
                y: y2
              }) ? {
                x: x2,
                y: y2
              } : void 0;
            }
          }
        }
        return coords;
      },
      getNeighborPoints: function(param, paramName) {
        var points = this.getPoints();
        var neighborPoints = [];
        if (this.getOptions().closed) {
          points = (0, _extend.extend)(true, [], points);
          var lastPoint = points[points.length - 1];
          var firstPointCopy = clonePoint(points[0], points[0].x, points[0].y, points[0].angle);
          var lastPointCopy = clonePoint(lastPoint, lastPoint.x, lastPoint.y, lastPoint.angle);
          var rearwardRefPoint = this.xi(firstPointCopy, lastPoint);
          var forwardRefPoint = this.xi(lastPointCopy, points[0]);
          if (forwardRefPoint) {
            points.unshift(forwardRefPoint);
          }
          if (rearwardRefPoint) {
            points.push(rearwardRefPoint);
          }
        }
        for (var i = 1; i < points.length; i++) {
          if (points[i - 1][paramName] === param) {
            neighborPoints.push(points[i - 1]);
          } else if (points[i][paramName] === param) {
            neighborPoints.push(points[i]);
          } else if (points[i][paramName] > param && points[i - 1][paramName] < param || points[i - 1][paramName] > param && points[i][paramName] < param) {
            neighborPoints.push(points[i - 1]);
            neighborPoints.push(points[i]);
          }
          if (neighborPoints.length > 0) {
            break;
          }
        }
        return neighborPoints;
      }
    });
  }
});

// node_modules/devextreme/cjs/viz/series/area_series.js
var require_area_series = __commonJS({
  "node_modules/devextreme/cjs/viz/series/area_series.js"(exports) {
    "use strict";
    exports.polar = exports.chart = void 0;
    var _object = require_object();
    var _extend2 = require_extend();
    var _scatter_series = require_scatter_series();
    var _line_series = require_line_series();
    var _utils = require_utils();
    var chartLineSeries = _line_series.chart.line;
    var polarLineSeries = _line_series.polar.line;
    var _extend = _extend2.extend;
    var calculateBezierPoints = _line_series.chart.spline._f;
    var chart = {};
    exports.chart = chart;
    var polar = {};
    exports.polar = polar;
    var baseAreaMethods = {
      zi: chartLineSeries.Pb,
      Ia: function(styleOptions, defaultColor) {
        return {
          fill: (0, _utils.extractColor)(styleOptions.color) || defaultColor,
          opacity: styleOptions.opacity,
          hatching: styleOptions.hatching,
          filter: styleOptions.highlight
        };
      },
      lc: function(options) {
        var _options$color;
        return null === (_options$color = options.color) || void 0 === _options$color ? void 0 : _options$color.fillId;
      },
      getValueRangeInitialValue: function() {
        if ("logarithmic" !== this.valueAxisType && "datetime" !== this.valueType && false !== this.showZero) {
          return 0;
        } else {
          return _scatter_series.chart.getValueRangeInitialValue.call(this);
        }
      },
      oc: function(segment) {
        var defaultSegment = chartLineSeries.oc(segment);
        defaultSegment.area = defaultSegment.line.concat(defaultSegment.line.slice().reverse());
        return defaultSegment;
      },
      je: function(element, segment, animate, complete) {
        var lineParams = {
          points: segment.line
        };
        var areaParams = {
          points: segment.area
        };
        var borderElement = element.line;
        if (animate) {
          borderElement && borderElement.animate(lineParams);
          element.area.animate(areaParams, {}, complete);
        } else {
          borderElement && borderElement.attr(lineParams);
          element.area.attr(areaParams);
        }
      },
      ie: function(element) {
        element.line && element.line.remove();
        element.area.remove();
      },
      Zf: function(segment) {
        return {
          line: this.Pa && this.zi(segment.line, {
            "stroke-width": this.t.normal.border["stroke-width"]
          }).append(this.Pa),
          area: this.Pb(segment.area).append(this.Xa)
        };
      },
      jc: function(style) {
        this.Xa && this.Xa.smartAttr(style.elements);
        this.Pa && this.Pa.attr(style.border);
        (this.ya || []).forEach(function(graphic) {
          graphic.line && graphic.line.attr({
            "stroke-width": style.border["stroke-width"]
          }).sharp();
        });
      },
      Zd: function(options, defaultColor, defaultBorderColor) {
        var _options$highlight;
        var borderOptions = options.border || {};
        var borderStyle = chartLineSeries.Dm(borderOptions, defaultBorderColor);
        borderStyle.stroke = borderOptions.visible && borderStyle["stroke-width"] ? borderStyle.stroke : "none";
        borderStyle["stroke-width"] = borderStyle["stroke-width"] || 1;
        return {
          border: borderStyle,
          elements: {
            stroke: "none",
            fill: (0, _utils.extractColor)(options.color) || defaultColor,
            hatching: options.hatching,
            opacity: options.opacity,
            filter: null !== (_options$highlight = options.highlight) && void 0 !== _options$highlight ? _options$highlight : null
          }
        };
      },
      Cm: function() {
        var options = this.e;
        return options.border.visible || options.hoverStyle.border.visible || options.selectionStyle.border.visible;
      },
      Pb: function(points, settings) {
        return this.n.path(points, "area").attr(settings);
      },
      ke: function(segment) {
        return {
          "stroke-width": segment.singlePointSegment ? this.wm : 0
        };
      },
      wi: function(segment) {
        return segment.area;
      }
    };
    function createAreaPoints(points) {
      return (0, _utils.map)(points, function(pt) {
        return pt.getCoords();
      }).concat((0, _utils.map)(points.slice().reverse(), function(pt) {
        return pt.getCoords(true);
      }));
    }
    var areaSeries = chart.area = _extend({}, chartLineSeries, baseAreaMethods, {
      F: function(points, rotated) {
        var processedPoints = this.le(points, rotated);
        var areaPoints = createAreaPoints(processedPoints);
        var argAxis = this.getArgumentAxis();
        if (argAxis.getAxisPosition) {
          var argAxisPosition = argAxis.getAxisPosition();
          var axisOptions = argAxis.getOptions();
          var edgeOffset = (!rotated ? -1 : 1) * Math.round(axisOptions.width / 2);
          if (axisOptions.visible) {
            areaPoints.forEach(function(p, i) {
              if (p) {
                var index = 1 === points.length ? 0 : i < points.length ? i : areaPoints.length - 1 - i;
                rotated && p.x === points[index].defaultX && p.x === argAxisPosition - argAxis.getAxisShift() && (p.x += edgeOffset);
                !rotated && p.y === points[index].defaultY && p.y === argAxisPosition - argAxis.getAxisShift() && (p.y += edgeOffset);
              }
            });
          }
        }
        return {
          line: processedPoints,
          area: areaPoints,
          singlePointSegment: processedPoints !== points
        };
      },
      le: function(points, rotated) {
        if (points && 1 === points.length) {
          var p = points[0];
          var p1 = (0, _object.clone)(p);
          p1[rotated ? "y" : "x"] += 1;
          p1.argument = null;
          return [p, p1];
        }
        return points;
      }
    });
    polar.area = _extend({}, polarLineSeries, baseAreaMethods, {
      F: function(points, rotated, lastSegment) {
        lastSegment && polarLineSeries.Fm.call(this, points);
        return areaSeries.F.call(this, points);
      },
      le: function(points) {
        return _line_series.polar.line.F.call(this, points).line;
      }
    });
    chart.steparea = _extend({}, areaSeries, {
      F: function(points, rotated) {
        var stepLineSeries = _line_series.chart.stepline;
        points = areaSeries.le(points, rotated);
        return areaSeries.F.call(this, stepLineSeries.Em.call(this, points), rotated);
      },
      getSeriesPairCoord: _line_series.chart.stepline.getSeriesPairCoord
    });
    chart.splinearea = _extend({}, areaSeries, {
      Ai: function(areaPoints) {
        var previousMiddlePoint = areaPoints[areaPoints.length / 2 - 1];
        var middlePoint = areaPoints[areaPoints.length / 2];
        areaPoints.splice(areaPoints.length / 2, 0, {
          x: previousMiddlePoint.x,
          y: previousMiddlePoint.y
        }, {
          x: middlePoint.x,
          y: middlePoint.y
        });
      },
      F: function(points, rotated) {
        var processedPoints = areaSeries.le(points, rotated);
        var areaSegment = areaSeries.F.call(this, calculateBezierPoints(processedPoints, rotated));
        this.Ai(areaSegment.area);
        areaSegment.singlePointSegment = processedPoints !== points;
        return areaSegment;
      },
      oc: function(segment) {
        var areaDefaultSegment = areaSeries.oc(segment);
        this.Ai(areaDefaultSegment.area);
        return areaDefaultSegment;
      },
      Pb: function(points, settings) {
        return this.n.path(points, "bezierarea").attr(settings);
      },
      zi: _line_series.chart.spline.Pb,
      getSeriesPairCoord: _line_series.chart.spline.getSeriesPairCoord,
      Xf: _line_series.chart.spline.Xf,
      Yf: _line_series.chart.spline.Yf,
      obtainCubicBezierTCoef: _line_series.chart.spline.obtainCubicBezierTCoef
    });
  }
});

// node_modules/devextreme/cjs/viz/series/bar_series.js
var require_bar_series = __commonJS({
  "node_modules/devextreme/cjs/viz/series/bar_series.js"(exports) {
    "use strict";
    function _typeof(obj) {
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    exports.polar = exports.chart = void 0;
    var _extend2 = require_extend();
    var _iterator = require_iterator();
    var scatterSeries = _interopRequireWildcard(require_scatter_series());
    var _area_series = require_area_series();
    var _utils = require_utils();
    var _type = require_type();
    function _getRequireWildcardCache(nodeInterop) {
      if ("function" !== typeof WeakMap) {
        return null;
      }
      var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
      var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
      return (_getRequireWildcardCache = function(nodeInterop2) {
        return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }
    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.j) {
        return obj;
      }
      if (null === obj || "object" !== _typeof(obj) && "function" !== typeof obj) {
        return {
          default: obj
        };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if ("default" !== key && Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    var areaSeries = _area_series.chart.area;
    var chartSeries = scatterSeries.chart;
    var polarSeries = scatterSeries.polar;
    var _extend = _extend2.extend;
    var _each = _iterator.each;
    var chart = {};
    exports.chart = chart;
    var polar = {};
    exports.polar = polar;
    var baseBarSeriesMethods = {
      Ia: function(styleOptions, defaultColor) {
        return {
          fill: (0, _utils.extractColor)(styleOptions.color) || defaultColor,
          hatching: styleOptions.hatching,
          filter: styleOptions.highlight
        };
      },
      lc: areaSeries.lc,
      K: function(style, defaultColor, defaultBorderColor) {
        var color = (0, _utils.extractColor)(style.color) || defaultColor;
        var base = chartSeries.K.call(this, style, color, defaultBorderColor);
        base.fill = color;
        base.hatching = style.hatching;
        base.filter = style.highlight;
        base.dashStyle = style.border && style.border.dashStyle || "solid";
        delete base.r;
        return base;
      },
      $c: function(settings) {
        settings["clip-path"] = null;
      },
      Ta: function(animationEnabled, firstDrawing) {
        var that = this;
        var settings = {};
        chartSeries.Ta.apply(that, arguments);
        if (animationEnabled && firstDrawing) {
          settings = this.ut();
        } else if (!animationEnabled) {
          settings = {
            scaleX: 1,
            scaleY: 1,
            translateX: 0,
            translateY: 0
          };
        }
        that.J.attr(settings);
      },
      gb: function(options) {
        options.hasAnimation = options.hasAnimation && !options.firstDrawing;
        options.firstDrawing = false;
        chartSeries.gb.call(this, options);
      },
      me: function() {
        return this.e.mainSeriesColor;
      },
      Cb: function(pointOptions) {
        var _pointOptions$color;
        var mainColor = (0, _utils.extractColor)(pointOptions.color, true) || this.me();
        var colorId = null === (_pointOptions$color = pointOptions.color) || void 0 === _pointOptions$color ? void 0 : _pointOptions$color.fillId;
        var hoverStyle = pointOptions.hoverStyle || {};
        var selectionStyle = pointOptions.selectionStyle || {};
        if (colorId) {
          this.Bi(hoverStyle, selectionStyle);
        }
        return {
          labelColor: mainColor,
          normal: this.K(pointOptions, mainColor, mainColor),
          hover: this.K(hoverStyle, colorId || mainColor, mainColor),
          selection: this.K(selectionStyle, colorId || mainColor, mainColor)
        };
      },
      hd: function() {
        var visibility = this.e.visible;
        (0, _iterator.each)(this.R, function(_, point) {
          point.e.visible = visibility;
        });
      },
      mc: function() {
        return this.e;
      },
      dd: function(firstDrawing) {
        var that = this;
        that.Gm(firstDrawing, function() {
          that.cd();
        }, function(drawnPoints, complete) {
          var lastPointIndex = drawnPoints.length - 1;
          _each(drawnPoints || [], function(i, point) {
            point.animate(i === lastPointIndex ? complete : void 0, point.getMarkerCoords());
          });
        });
      },
      getValueRangeInitialValue: areaSeries.getValueRangeInitialValue,
      Vf: function(options) {
        var _this$getArgumentAxis;
        options.checkInterval = !this.useAggregation() || (null === (_this$getArgumentAxis = this.getArgumentAxis()) || void 0 === _this$getArgumentAxis ? void 0 : _this$getArgumentAxis.aggregatedPointBetweenTicks());
        return options;
      },
      Uf: "sum",
      Hm: function() {
      },
      usePointsToDefineAutoHiding: function() {
        return false;
      }
    };
    chart.bar = _extend({}, chartSeries, baseBarSeriesMethods, {
      ut: function() {
        var rotated = this.e.rotated;
        var direction = rotated ? "X" : "Y";
        var settings = {
          scaleX: rotated ? 1e-3 : 1,
          scaleY: rotated ? 1 : 1e-3
        };
        settings["translate" + direction] = this.getValueAxis().getTranslator().translate("canvas_position_default");
        return settings;
      },
      Gm: function(firstDrawing, complete, animateFunc) {
        this.J.animate({
          scaleX: 1,
          scaleY: 1,
          translateY: 0,
          translateX: 0
        }, void 0, complete);
        if (!firstDrawing) {
          animateFunc(this.Va, complete);
        }
      },
      checkSeriesViewportCoord: function(axis, coord) {
        if (!chartSeries.checkSeriesViewportCoord.call(this)) {
          return false;
        }
        if (axis.isArgumentAxis) {
          return true;
        }
        var translator = axis.getTranslator();
        var range = this.getViewport();
        var min = translator.translate(range.categories ? range.categories[0] : range.min);
        var max = translator.translate(range.categories ? range.categories[range.categories.length - 1] : range.max);
        var rotated = this.getOptions().rotated;
        var inverted = axis.getOptions().inverted;
        return rotated && !inverted || !rotated && inverted ? coord >= min && coord <= max : coord >= max && coord <= min;
      },
      getSeriesPairCoord: function(coord, isArgument) {
        var oppositeCoord = null;
        var rotated = this.e.rotated;
        var isOpposite = !isArgument && !rotated || isArgument && rotated;
        var coordName = isOpposite ? "vy" : "vx";
        var oppositeCoordName = isOpposite ? "vx" : "vy";
        var points = this.getPoints();
        for (var i = 0; i < points.length; i++) {
          var p = points[i];
          var tmpCoord = void 0;
          if (isArgument) {
            tmpCoord = p.getCenterCoord()[coordName[1]] === coord ? p[oppositeCoordName] : void 0;
          } else {
            tmpCoord = p[coordName] === coord ? p[oppositeCoordName] : void 0;
          }
          if (this.fd(!isArgument, tmpCoord)) {
            oppositeCoord = tmpCoord;
            break;
          }
        }
        return oppositeCoord;
      }
    });
    polar.bar = _extend({}, polarSeries, baseBarSeriesMethods, {
      Gm: function(firstDrawing, complete, animateFunc) {
        animateFunc(this.Va, complete);
      },
      Ta: chartSeries.Ta,
      gb: function(point, groups, animationEnabled) {
        chartSeries.gb.call(this, point, groups, animationEnabled);
      },
      K: function(style) {
        var base = baseBarSeriesMethods.K.apply(this, arguments);
        base.opacity = style.opacity;
        return base;
      },
      Bb: chartSeries.Bb,
      ad: function() {
        var markersSettings = this.Cb(this.ji()).normal;
        markersSettings.class = "dxc-markers";
        this.$c(markersSettings);
        var groupSettings = _extend({}, markersSettings);
        delete groupSettings.opacity;
        this.J.attr(groupSettings);
      },
      getSeriesPairCoord: function(params, isArgument) {
        var coords = null;
        var paramName = isArgument ? "argument" : "radius";
        var points = this.getVisiblePoints();
        var argAxis = this.getArgumentAxis();
        var startAngle = argAxis.getAngles()[0];
        for (var i = 0; i < points.length; i++) {
          var p = points[i];
          var tmpPoint = (0, _type.isDefined)(p[paramName]) && (0, _type.isDefined)(params[paramName]) && p[paramName].valueOf() === params[paramName].valueOf() ? (0, _utils.convertPolarToXY)(argAxis.getCenter(), startAngle, -argAxis.getTranslatedAngle(p.angle), p.radius) : void 0;
          if ((0, _type.isDefined)(tmpPoint)) {
            coords = tmpPoint;
            break;
          }
        }
        return coords;
      },
      Ia: areaSeries.Ia
    });
  }
});

// node_modules/devextreme/cjs/viz/series/range_series.js
var require_range_series = __commonJS({
  "node_modules/devextreme/cjs/viz/series/range_series.js"(exports) {
    "use strict";
    exports.chart = void 0;
    var _extend2 = require_extend();
    var _type = require_type();
    var _utils = require_utils();
    var _common = require_common();
    var _scatter_series = require_scatter_series();
    var _bar_series = require_bar_series();
    var _area_series = require_area_series();
    function _typeof(obj) {
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _defineProperty(obj, key, value) {
      key = _toPropertyKey(key);
      if (key in obj) {
        Object.defineProperty(obj, key, {
          value,
          enumerable: true,
          configurable: true,
          writable: true
        });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return "symbol" === _typeof(key) ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if ("object" !== _typeof(input) || null === input) {
        return input;
      }
      var prim = input[Symbol.toPrimitive];
      if (void 0 !== prim) {
        var res = prim.call(input, hint || "default");
        if ("object" !== _typeof(res)) {
          return res;
        }
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return ("string" === hint ? String : Number)(input);
    }
    var _extend = _extend2.extend;
    var barSeries = _bar_series.chart.bar;
    var areaSeries = _area_series.chart.area;
    var chart = {};
    exports.chart = chart;
    var baseRangeSeries = {
      areErrorBarsVisible: _common.noop,
      _d: _common.noop,
      Ua: function(data, skippedFields) {
        var valueFields = this.getValueFields();
        return _scatter_series.chart.Ua.call(this, data, skippedFields, {
          minValue: valueFields[0],
          value: valueFields[1]
        }) && data.minValue === data.minValue;
      },
      getValueRangeInitialValue: _scatter_series.chart.getValueRangeInitialValue,
      bd: function(data) {
        var _this = this;
        var valueFields = this.getValueFields();
        var val1Field = valueFields[0];
        var val2Field = valueFields[1];
        var tagField = this.getTagField();
        var argumentField = this.getArgumentField();
        return function(data2) {
          return {
            tag: data2[tagField],
            minValue: _this.nc(data2[val1Field]),
            value: _this.nc(data2[val2Field]),
            argument: data2[argumentField],
            data: data2
          };
        };
      },
      Uf: "range",
      ge: {
        range: function(_ref, series) {
          var _data$reduce;
          var intervalStart = _ref.intervalStart, intervalEnd = _ref.intervalEnd, data = _ref.data;
          if (!data.length) {
            return;
          }
          var valueFields = series.getValueFields();
          var val1Field = valueFields[0];
          var val2Field = valueFields[1];
          var result = data.reduce(function(result2, item) {
            var val1 = item[val1Field];
            var val2 = item[val2Field];
            if (!(0, _type.isDefined)(val1) || !(0, _type.isDefined)(val2)) {
              return result2;
            }
            result2[val1Field] = Math.min(result2[val1Field], Math.min(val1, val2));
            result2[val2Field] = Math.max(result2[val2Field], Math.max(val1, val2));
            return result2;
          }, (_data$reduce = {}, _defineProperty(_data$reduce, val1Field, 1 / 0), _defineProperty(_data$reduce, val2Field, -1 / 0), _defineProperty(_data$reduce, series.getArgumentField(), series.ic(intervalStart, intervalEnd)), _data$reduce));
          if (!isFinite(result[val1Field]) || !isFinite(result[val2Field])) {
            if (data.filter(function(i) {
              return null === i[val1Field] && null === i[val2Field];
            }).length === data.length) {
              result[val1Field] = result[val2Field] = null;
            } else {
              return;
            }
          }
          return result;
        }
      },
      getValueFields: function() {
        return [this.e.rangeValue1Field || "val1", this.e.rangeValue2Field || "val2"];
      },
      getSeriesPairCoord: function(coord, isArgument) {
        var oppositeCoord = null;
        var rotated = this.e.rotated;
        var isOpposite = !isArgument && !rotated || isArgument && rotated;
        var coordName = isOpposite ? "vy" : "vx";
        var minCoordName = rotated ? "minX" : "minY";
        var oppositeCoordName = isOpposite ? "vx" : "vy";
        var points = this.getPoints();
        for (var i = 0; i < points.length; i++) {
          var p = points[i];
          var tmpCoord = void 0;
          if (isArgument) {
            tmpCoord = p.getCenterCoord()[coordName[1]] === coord ? p[oppositeCoordName] : void 0;
          } else {
            var coords = [Math.min(p[coordName], p[minCoordName]), Math.max(p[coordName], p[minCoordName])];
            tmpCoord = coord >= coords[0] && coord <= coords[1] ? p[oppositeCoordName] : void 0;
          }
          if (this.fd(!isArgument, tmpCoord)) {
            oppositeCoord = tmpCoord;
            break;
          }
        }
        return oppositeCoord;
      }
    };
    chart.rangebar = _extend({}, barSeries, baseRangeSeries);
    chart.rangearea = _extend({}, areaSeries, {
      gb: function(options) {
        var point = options.point;
        if (point.isInVisibleArea()) {
          point.clearVisibility();
          point.draw(this.n, options.groups);
          this.Va.push(point);
          if (!point.visibleTopMarker) {
            point.hideMarker("top");
          }
          if (!point.visibleBottomMarker) {
            point.hideMarker("bottom");
          }
        } else {
          point.setInvisibility();
        }
      },
      F: function(points, rotated) {
        var processedPoints = this.le(points, rotated);
        var processedMinPointsCoords = (0, _utils.map)(processedPoints, function(pt) {
          return pt.getCoords(true);
        });
        return {
          line: processedPoints,
          bottomLine: processedMinPointsCoords,
          area: (0, _utils.map)(processedPoints, function(pt) {
            return pt.getCoords();
          }).concat(processedMinPointsCoords.slice().reverse()),
          singlePointSegment: processedPoints !== points
        };
      },
      oc: function(segment) {
        var defaultSegment = areaSeries.oc.call(this, segment);
        defaultSegment.bottomLine = defaultSegment.line;
        return defaultSegment;
      },
      ie: function(element) {
        areaSeries.ie.call(this, element);
        element.bottomLine && element.bottomLine.remove();
      },
      Zf: function(segment, group) {
        var drawnElement = areaSeries.Zf.call(this, segment, group);
        drawnElement.bottomLine = this.Pa && this.zi(segment.bottomLine, {
          "stroke-width": this.t.normal.border["stroke-width"]
        }).append(this.Pa);
        return drawnElement;
      },
      jc: function(style) {
        var elementsGroup = this.Xa;
        var bordersGroup = this.Pa;
        elementsGroup && elementsGroup.smartAttr(style.elements);
        bordersGroup && bordersGroup.attr(style.border);
        (this.ya || []).forEach(function(graphic) {
          graphic.line && graphic.line.attr({
            "stroke-width": style.border["stroke-width"]
          });
          graphic.bottomLine && graphic.bottomLine.attr({
            "stroke-width": style.border["stroke-width"]
          });
        });
      },
      je: function(element, segment, animate, complete) {
        var bottomLineParams = {
          points: segment.bottomLine
        };
        var bottomBorderElement = element.bottomLine;
        areaSeries.je.apply(this, arguments);
        if (bottomBorderElement) {
          animate ? bottomBorderElement.animate(bottomLineParams) : bottomBorderElement.attr(bottomLineParams);
        }
      }
    }, baseRangeSeries);
  }
});

// node_modules/devextreme/cjs/viz/series/bubble_series.js
var require_bubble_series = __commonJS({
  "node_modules/devextreme/cjs/viz/series/bubble_series.js"(exports) {
    "use strict";
    exports.chart = void 0;
    var _line_series = require_line_series();
    var _scatter_series = require_scatter_series();
    var _area_series = require_area_series();
    var _bar_series = require_bar_series();
    var _extend2 = require_extend();
    var _iterator = require_iterator();
    var _common = require_common();
    function _typeof(obj) {
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _defineProperty(obj, key, value) {
      key = _toPropertyKey(key);
      if (key in obj) {
        Object.defineProperty(obj, key, {
          value,
          enumerable: true,
          configurable: true,
          writable: true
        });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return "symbol" === _typeof(key) ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if ("object" !== _typeof(input) || null === input) {
        return input;
      }
      var prim = input[Symbol.toPrimitive];
      if (void 0 !== prim) {
        var res = prim.call(input, hint || "default");
        if ("object" !== _typeof(res)) {
          return res;
        }
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return ("string" === hint ? String : Number)(input);
    }
    var lineSeries = _line_series.chart.line;
    var areaSeries = _area_series.chart.area;
    var chartBarSeries = _bar_series.chart.bar;
    var polarBarSeries = _bar_series.polar.bar;
    var _extend = _extend2.extend;
    var _each = _iterator.each;
    var _noop = _common.noop;
    var chart = {};
    exports.chart = chart;
    chart.bubble = _extend({}, _scatter_series.chart, {
      qi: _noop,
      me: chartBarSeries.me,
      Cb: chartBarSeries.Cb,
      hd: chartBarSeries.hd,
      mc: chartBarSeries.mc,
      $c: lineSeries.Sf,
      K: polarBarSeries.K,
      Ia: areaSeries.Ia,
      lc: areaSeries.lc,
      ad: polarBarSeries.ad,
      areErrorBarsVisible: _noop,
      _d: _noop,
      Ua: function(data, skippedFields) {
        return _scatter_series.chart.Ua.call(this, data, skippedFields, {
          value: this.getValueFields()[0],
          size: this.getSizeField()
        });
      },
      bd: function(data, options) {
        var sizeField = this.getSizeField();
        var baseGetter = _scatter_series.chart.bd.call(this);
        return function(data2) {
          var pointData = baseGetter(data2);
          pointData.size = data2[sizeField];
          return pointData;
        };
      },
      ge: {
        avg: function(_ref, series) {
          var _ref2;
          var data = _ref.data, intervalStart = _ref.intervalStart, intervalEnd = _ref.intervalEnd;
          if (!data.length) {
            return;
          }
          var valueField = series.getValueFields()[0];
          var sizeField = series.getSizeField();
          var aggregate = data.reduce(function(result, item) {
            result[0] += item[valueField];
            result[1] += item[sizeField];
            result[2]++;
            return result;
          }, [0, 0, 0]);
          return _ref2 = {}, _defineProperty(_ref2, valueField, aggregate[0] / aggregate[2]), _defineProperty(_ref2, sizeField, aggregate[1] / aggregate[2]), _defineProperty(_ref2, series.getArgumentField(), series.ic(intervalStart, intervalEnd)), _ref2;
        }
      },
      getValueFields: function() {
        return [this.e.valueField || "val"];
      },
      getSizeField: function() {
        return this.e.sizeField || "size";
      },
      dd: function() {
        var that = this;
        var lastPointIndex = that.Va.length - 1;
        var labelsGroup = that.wa;
        var labelAnimFunc = function() {
          labelsGroup && labelsGroup.animate({
            opacity: 1
          }, {
            duration: that.ei
          });
        };
        _each(that.Va || [], function(i, p) {
          p.animate(i === lastPointIndex ? labelAnimFunc : void 0, {
            r: p.bubbleSize,
            translateX: p.x,
            translateY: p.y
          });
        });
      },
      Vf: function(options) {
        options.processBubbleSize = true;
        return options;
      }
    });
  }
});

// node_modules/devextreme/cjs/viz/series/pie_series.js
var require_pie_series = __commonJS({
  "node_modules/devextreme/cjs/viz/series/pie_series.js"(exports) {
    "use strict";
    exports.pie = exports.doughnut = exports.donut = void 0;
    var _common = require_common();
    var _iterator = require_iterator();
    var _scatter_series = require_scatter_series();
    var _utils = require_utils();
    var _extend2 = require_extend();
    var _bar_series = require_bar_series();
    var chartScatterSeries = _scatter_series.chart;
    var barSeries = _bar_series.chart.bar;
    var _extend = _extend2.extend;
    var _each = _iterator.each;
    var _noop = _common.noop;
    var _map = _utils.map;
    var _isFinite = isFinite;
    var _max = Math.max;
    var ANIMATION_DURATION = 0.7;
    var INSIDE = "inside";
    var pie = _extend({}, barSeries, {
      Ta: function() {
        chartScatterSeries.Ta.apply(this, arguments);
        this.wa.attr({
          "pointer-events": null
        });
      },
      _d: _noop,
      gb: function(options) {
        var point = options.point;
        var legendCallback = this.hb;
        chartScatterSeries.gb.call(this, options);
        !point.isVisible() && point.setInvisibility();
        point.isSelected() && legendCallback();
      },
      Im: function(data, oldPointsByArgument, index) {
        var point = (this.R || [])[index];
        if (point) {
          oldPointsByArgument[point.argument.valueOf()] = oldPointsByArgument[point.argument.valueOf()].filter(function(p) {
            return p !== point;
          });
        }
        return point;
      },
      adjustLabels: function(moveLabelsFromCenter) {
        return (this.R || []).reduce(function(r, p) {
          if (p.C.isVisible()) {
            p.setLabelTrackerData();
            r = p.applyWordWrap(moveLabelsFromCenter) || r;
            p.updateLabelCoord(moveLabelsFromCenter);
            return r;
          }
        }, false);
      },
      Sf: _noop,
      getColor: _noop,
      areErrorBarsVisible: _noop,
      drawLabelsWOPoints: function() {
        if (this.e.label.position === INSIDE) {
          return false;
        }
        this.wa.append(this.kc.labelsGroup);
        (this.R || []).forEach(function(point) {
          point.drawLabel();
        });
        return true;
      },
      getPointsCount: function() {
        var _this = this;
        return this.na.filter(function(d) {
          return _this.Ua(d);
        }).length;
      },
      setMaxPointsCount: function(count) {
        this.vt = count;
      },
      $d: function(data, dataIndex) {
        return this.Tf(data, dataIndex);
      },
      vb: function(options) {
        this.labelSpace = 0;
        this.innerRadius = "pie" === this.type ? 0 : options.innerRadius;
      },
      Ua: function(data, skippedFields) {
        var base = barSeries.Ua.call(this, data, skippedFields, {
          value: this.getValueFields()[0]
        });
        return this.e.paintNullPoints ? base : base && null !== data.value;
      },
      Bb: chartScatterSeries.Bb,
      ad: function() {
        this.J.attr({
          class: "dxc-markers"
        });
      },
      me: function(data, point) {
        var pointsByArg = this.getPointsByArg(data.argument);
        var argumentIndex = point ? pointsByArg.indexOf(point) : pointsByArg.length;
        return this.e.mainSeriesColor(data.argument, argumentIndex, this.vt);
      },
      Tf: function(data) {
        return this.ni(this.oi(), this.e.label, data);
      },
      zm: function() {
        return this.Jm;
      },
      Cb: function(pointOptions, data, point) {
        var _pointOptions$color;
        var mainColor = (0, _utils.extractColor)(pointOptions.color, true) || this.me(data, point);
        var colorId = null === (_pointOptions$color = pointOptions.color) || void 0 === _pointOptions$color ? void 0 : _pointOptions$color.fillId;
        var hoverStyle = pointOptions.hoverStyle || {};
        var selectionStyle = pointOptions.selectionStyle || {};
        if (colorId) {
          this.Bi(hoverStyle, selectionStyle);
        }
        return {
          labelColor: mainColor,
          normal: this.K(pointOptions, mainColor, mainColor),
          hover: this.K(hoverStyle, colorId || mainColor, mainColor),
          selection: this.K(selectionStyle, colorId || mainColor, mainColor),
          legendStyles: {
            normal: this.Ia(pointOptions, mainColor),
            hover: this.Ia(hoverStyle, colorId || mainColor),
            selection: this.Ia(selectionStyle, colorId || mainColor)
          }
        };
      },
      wt: function(points, total) {
        var minSegmentSize = this.e.minSegmentSize;
        var totalMinSegmentSize = 0;
        var totalNotMinValues = 0;
        total = total || points.length;
        _each(points, function(_, point) {
          if (point.isVisible()) {
            if (point.normalInitialValue < minSegmentSize * total / 360) {
              totalMinSegmentSize += minSegmentSize;
            } else {
              totalNotMinValues += point.normalInitialValue;
            }
          }
        });
        return totalMinSegmentSize < 360 ? minSegmentSize * totalNotMinValues / (360 - totalMinSegmentSize) : 0;
      },
      xt: function(points, minShownValue, total) {
        var options = this.e;
        var isClockWise = "anticlockwise" !== options.segmentsDirection;
        var shiftedAngle = _isFinite(options.startAngle) ? (0, _utils.normalizeAngle)(options.startAngle) : 0;
        var minSegmentSize = options.minSegmentSize;
        var percent;
        var correction = 0;
        var zeroTotalCorrection = 0;
        if (0 === total) {
          total = points.filter(function(el) {
            return el.isVisible();
          }).length;
          zeroTotalCorrection = 1;
        }
        _each(isClockWise ? points : points.concat([]).reverse(), function(_, point) {
          var val = point.isVisible() ? zeroTotalCorrection || point.normalInitialValue : 0;
          var updatedZeroValue;
          if (minSegmentSize && point.isVisible() && val < minShownValue) {
            updatedZeroValue = minShownValue;
          }
          percent = val / total;
          point.correctValue(correction, percent, zeroTotalCorrection + (updatedZeroValue || 0));
          point.shiftedAngle = shiftedAngle;
          correction += updatedZeroValue || val;
        });
        this.Jm = {
          val: {
            min: 0,
            max: correction
          }
        };
      },
      yt: function(point) {
        var points = this.getPointsByArg(point.argument);
        points.splice(points.indexOf(point), 1);
        point.dispose();
      },
      arrangePoints: function() {
        var that = this;
        var originalPoints = that.R || [];
        var minSegmentSize = that.e.minSegmentSize;
        var minShownValue;
        var isAllPointsNegative = true;
        var i = 0;
        var len = originalPoints.length;
        while (i < len && isAllPointsNegative) {
          isAllPointsNegative = originalPoints[i].value <= 0;
          i++;
        }
        var points = that.R = _map(originalPoints, function(point) {
          if (null === point.value || !isAllPointsNegative && point.value < 0) {
            that.yt(point);
            return null;
          } else {
            return point;
          }
        });
        var maxValue = points.reduce(function(max, p) {
          return _max(max, Math.abs(p.initialValue));
        }, 0);
        points.forEach(function(p) {
          p.normalInitialValue = p.initialValue / (0 !== maxValue ? maxValue : 1);
        });
        var total = points.reduce(function(total2, point) {
          return total2 + (point.isVisible() ? point.normalInitialValue : 0);
        }, 0);
        if (minSegmentSize) {
          minShownValue = this.wt(points, total);
        }
        that.xt(points, minShownValue, total);
      },
      correctPosition: function(correction, canvas) {
        _each(this.R, function(_, point) {
          point.correctPosition(correction);
        });
        this.setVisibleArea(canvas);
      },
      correctRadius: function(correction) {
        this.R.forEach(function(point) {
          point.correctRadius(correction);
        });
      },
      correctLabelRadius: function(labelRadius) {
        this.R.forEach(function(point) {
          point.correctLabelRadius(labelRadius);
        });
      },
      setVisibleArea: function(canvas) {
        this.li = {
          minX: canvas.left,
          maxX: canvas.width - canvas.right,
          minY: canvas.top,
          maxY: canvas.height - canvas.bottom
        };
      },
      ui: _noop,
      dd: function(firstDrawing) {
        var that = this;
        var points = that.R;
        var pointsCount = points && points.length;
        var completeFunc = function() {
          that.cd();
        };
        var animatePoint;
        if (firstDrawing) {
          animatePoint = function(p, i) {
            p.animate(i === pointsCount - 1 ? completeFunc : void 0, ANIMATION_DURATION, (1 - ANIMATION_DURATION) * i / (pointsCount - 1));
          };
        } else {
          animatePoint = function(p, i) {
            p.animate(i === pointsCount - 1 ? completeFunc : void 0);
          };
        }
        points.forEach(animatePoint);
      },
      getVisiblePoints: function() {
        return _map(this.R, function(p) {
          return p.isVisible() ? p : null;
        });
      },
      getPointsByKeys: function(arg, argumentIndex) {
        var pointsByArg = this.getPointsByArg(arg);
        return pointsByArg[argumentIndex] && [pointsByArg[argumentIndex]] || [];
      }
    });
    exports.pie = pie;
    var doughnut = pie;
    exports.doughnut = doughnut;
    var donut = pie;
    exports.donut = donut;
  }
});

// node_modules/devextreme/cjs/viz/series/financial_series.js
var require_financial_series = __commonJS({
  "node_modules/devextreme/cjs/viz/series/financial_series.js"(exports) {
    "use strict";
    exports.stock = exports.candlestick = void 0;
    var _scatter_series = require_scatter_series();
    var _bar_series = require_bar_series();
    var _extend2 = require_extend();
    var _type = require_type();
    var _utils = require_utils();
    var _common = require_common();
    var barSeries = _bar_series.chart.bar;
    var DEFAULT_FINANCIAL_POINT_SIZE = 10;
    var stock = (0, _extend2.extend)({}, _scatter_series.chart, {
      dd: _common.noop,
      $c: function(settings) {
        settings["clip-path"] = this.gi ? this._c : this.ym;
      },
      hd: barSeries.hd,
      mc: barSeries.mc,
      _d: _common.noop,
      areErrorBarsVisible: _common.noop,
      Bb: _scatter_series.chart.Bb,
      ad: function() {
        var markersGroup = this.J;
        var styles = this.Cb(this.ji());
        var defaultStyle = (0, _extend2.extend)(styles.normal, {
          class: "default-markers"
        });
        var defaultPositiveStyle = (0, _extend2.extend)(styles.positive.normal, {
          class: "default-positive-markers"
        });
        var reductionStyle = (0, _extend2.extend)(styles.reduction.normal, {
          class: "reduction-markers"
        });
        var reductionPositiveStyle = (0, _extend2.extend)(styles.reductionPositive.normal, {
          class: "reduction-positive-markers"
        });
        var markerSettings = {
          class: "dxc-markers"
        };
        this.$c(markerSettings);
        markersGroup.attr(markerSettings);
        this.Ab("defaultMarkersGroup", markersGroup, markersGroup, defaultStyle);
        this.Ab("reductionMarkersGroup", markersGroup, markersGroup, reductionStyle);
        this.Ab("defaultPositiveMarkersGroup", markersGroup, markersGroup, defaultPositiveStyle);
        this.Ab("reductionPositiveMarkersGroup", markersGroup, markersGroup, reductionPositiveStyle);
      },
      Ta: function() {
        _scatter_series.chart.Ta.call(this, false);
      },
      $d: function() {
        var defaultPointOptions;
        var creatingPointOptions = this.ae;
        if (!creatingPointOptions) {
          defaultPointOptions = this.Tf();
          this.ae = creatingPointOptions = (0, _extend2.extend)(true, {
            styles: {}
          }, defaultPointOptions);
          creatingPointOptions.styles.normal = creatingPointOptions.styles.positive.normal = creatingPointOptions.styles.reduction.normal = creatingPointOptions.styles.reductionPositive.normal = {
            "stroke-width": defaultPointOptions.styles && defaultPointOptions.styles.normal && defaultPointOptions.styles.normal["stroke-width"]
          };
        }
        return creatingPointOptions;
      },
      Ua: function(data, skippedFields) {
        var valueFields = this.getValueFields();
        return _scatter_series.chart.Ua.call(this, data, skippedFields, {
          openValue: valueFields[0],
          highValue: valueFields[1],
          lowValue: valueFields[2],
          closeValue: valueFields[3]
        }) && data.highValue === data.highValue && data.lowValue === data.lowValue;
      },
      bd: function(data, options) {
        var _this = this;
        var that = this;
        var level;
        var valueFields = that.getValueFields();
        var argumentField = that.getArgumentField();
        var openValueField = valueFields[0];
        var highValueField = valueFields[1];
        var lowValueField = valueFields[2];
        var closeValueField = valueFields[3];
        that.level = that.e.reduction.level;
        switch ((0, _utils.normalizeEnum)(that.level)) {
          case "open":
            level = openValueField;
            break;
          case "high":
            level = highValueField;
            break;
          case "low":
            level = lowValueField;
            break;
          default:
            level = closeValueField;
            that.level = "close";
        }
        var prevLevelValue;
        return function(data2) {
          var reductionValue = data2[level];
          var isReduction = false;
          if ((0, _type.isDefined)(reductionValue)) {
            if ((0, _type.isDefined)(prevLevelValue)) {
              isReduction = reductionValue < prevLevelValue;
            }
            prevLevelValue = reductionValue;
          }
          return {
            argument: data2[argumentField],
            highValue: _this.nc(data2[highValueField]),
            lowValue: _this.nc(data2[lowValueField]),
            closeValue: _this.nc(data2[closeValueField]),
            openValue: _this.nc(data2[openValueField]),
            reductionValue,
            tag: data2[that.getTagField()],
            isReduction,
            data: data2
          };
        };
      },
      K: function(style, defaultColor, innerColor) {
        var color = (0, _utils.extractColor)(style.color, true);
        return {
          stroke: color || defaultColor,
          "stroke-width": style.width,
          fill: color || innerColor
        };
      },
      zt: function(options) {
        var mainPointColor = (0, _utils.extractColor)(options.color, true) || this.e.mainSeriesColor;
        return {
          normal: this.K(options, mainPointColor, mainPointColor),
          hover: this.K(options.hoverStyle, mainPointColor, mainPointColor),
          selection: this.K(options.selectionStyle, mainPointColor, mainPointColor)
        };
      },
      At: function(options) {
        var reductionColor = options.reduction.color;
        return {
          normal: this.K({
            color: reductionColor,
            width: options.width,
            hatching: options.hatching
          }, reductionColor, reductionColor),
          hover: this.K(options.hoverStyle, reductionColor, reductionColor),
          selection: this.K(options.selectionStyle, reductionColor, reductionColor)
        };
      },
      Cb: function(pointOptions) {
        var innerColor = this.e.innerColor;
        var styles = this.zt(pointOptions);
        var positiveStyle = (0, _extend2.extend)(true, {}, styles);
        var reductionStyle = this.At(pointOptions);
        var reductionPositiveStyle = (0, _extend2.extend)(true, {}, reductionStyle);
        positiveStyle.normal.fill = positiveStyle.hover.fill = positiveStyle.selection.fill = innerColor;
        reductionPositiveStyle.normal.fill = reductionPositiveStyle.hover.fill = reductionPositiveStyle.selection.fill = innerColor;
        styles.positive = positiveStyle;
        styles.reduction = reductionStyle;
        styles.reductionPositive = reductionPositiveStyle;
        styles.labelColor = innerColor;
        return styles;
      },
      pi: function() {
        delete this.ae;
      },
      Uf: "ohlc",
      ge: {
        ohlc: function(_ref, series) {
          var intervalStart = _ref.intervalStart, intervalEnd = _ref.intervalEnd, data = _ref.data;
          if (!data.length) {
            return;
          }
          var result = {};
          var valueFields = series.getValueFields();
          var highValueField = valueFields[1];
          var lowValueField = valueFields[2];
          result[highValueField] = -1 / 0;
          result[lowValueField] = 1 / 0;
          result = data.reduce(function(result2, item) {
            if (null !== item[highValueField]) {
              result2[highValueField] = Math.max(result2[highValueField], item[highValueField]);
            }
            if (null !== item[lowValueField]) {
              result2[lowValueField] = Math.min(result2[lowValueField], item[lowValueField]);
            }
            return result2;
          }, result);
          result[valueFields[0]] = data[0][valueFields[0]];
          result[valueFields[3]] = data[data.length - 1][valueFields[3]];
          if (!isFinite(result[highValueField])) {
            result[highValueField] = null;
          }
          if (!isFinite(result[lowValueField])) {
            result[lowValueField] = null;
          }
          result[series.getArgumentField()] = series.ic(intervalStart, intervalEnd);
          return result;
        }
      },
      getValueFields: function() {
        var options = this.e;
        return [options.openValueField || "open", options.highValueField || "high", options.lowValueField || "low", options.closeValueField || "close"];
      },
      getArgumentField: function() {
        return this.e.argumentField || "date";
      },
      Vf: function(options) {
        var pointOptions = this.$d();
        var styles = pointOptions.styles;
        var border = [styles.normal, styles.hover, styles.selection].reduce(function(max, style) {
          return Math.max(max, style["stroke-width"]);
        }, 0);
        options.size = DEFAULT_FINANCIAL_POINT_SIZE + border;
        options.sizePointNormalState = DEFAULT_FINANCIAL_POINT_SIZE;
        return options;
      },
      getSeriesPairCoord: function(coord, isArgument) {
        var oppositeCoord = null;
        var points = this.getVisiblePoints();
        for (var i = 0; i < points.length; i++) {
          var p = points[i];
          var tmpCoord = void 0;
          if (isArgument) {
            tmpCoord = p.vx === coord ? (p.openY + p.closeY) / 2 : void 0;
          } else {
            var coords = [Math.min(p.lowY, p.highY), Math.max(p.lowY, p.highY)];
            tmpCoord = coord >= coords[0] && coord <= coords[1] ? p.vx : void 0;
          }
          if (this.fd(!isArgument, tmpCoord)) {
            oppositeCoord = tmpCoord;
            break;
          }
        }
        return oppositeCoord;
      },
      usePointsToDefineAutoHiding: function() {
        return false;
      }
    });
    exports.stock = stock;
    var candlestick = (0, _extend2.extend)({}, stock, {
      K: function(style, defaultColor, innerColor) {
        var color = (0, _utils.extractColor)(style.color, true) || innerColor;
        var base = stock.K.call(this, style, defaultColor, color);
        base.fill = color;
        base.hatching = style.hatching;
        return base;
      }
    });
    exports.candlestick = candlestick;
  }
});

// node_modules/devextreme/cjs/viz/series/stacked_series.js
var require_stacked_series = __commonJS({
  "node_modules/devextreme/cjs/viz/series/stacked_series.js"(exports) {
    "use strict";
    exports.polar = exports.chart = void 0;
    var _common = require_common();
    var _extend2 = require_extend();
    var _iterator = require_iterator();
    var _area_series = require_area_series();
    var _bar_series = require_bar_series();
    var _line_series = require_line_series();
    var _utils = require_utils();
    var _object = require_object();
    var chartAreaSeries = _area_series.chart.area;
    var chartBarSeries = _bar_series.chart.bar;
    var baseStackedSeries = {
      qi: _common.noop,
      vb: function(options) {
        this.$f = "axis_" + (options.axis || "default");
      }
    };
    var chart = {};
    exports.chart = chart;
    var polar = {};
    exports.polar = polar;
    chart.stackedline = (0, _extend2.extend)({}, _line_series.chart.line, baseStackedSeries, {});
    chart.stackedspline = (0, _extend2.extend)({}, _line_series.chart.spline, baseStackedSeries, {});
    chart.fullstackedline = (0, _extend2.extend)({}, _line_series.chart.line, baseStackedSeries, {
      getValueRangeInitialValue: _area_series.chart.area.getValueRangeInitialValue
    });
    chart.fullstackedspline = (0, _extend2.extend)({}, _line_series.chart.spline, baseStackedSeries, {
      getValueRangeInitialValue: _area_series.chart.area.getValueRangeInitialValue
    });
    var stackedBar = chart.stackedbar = (0, _extend2.extend)({}, chartBarSeries, baseStackedSeries, {
      vb: function(options) {
        baseStackedSeries.vb.call(this, options);
        this.$f = this.$f + "_stack_" + (options.stack || "default");
      }
    });
    chart.fullstackedbar = (0, _extend2.extend)({}, chartBarSeries, baseStackedSeries, {
      vb: stackedBar.vb
    });
    function clonePoint(point, value, minValue, position) {
      point = (0, _object.clone)(point);
      point.value = value;
      point.minValue = minValue;
      point.translate();
      point.argument = point.argument + position;
      return point;
    }
    function preparePointsForStackedAreaSegment(points) {
      var i = 0;
      var p;
      var result = [];
      var array;
      var len = points.length;
      while (i < len) {
        p = points[i];
        array = [p];
        if (p.leftHole) {
          array = [clonePoint(p, p.leftHole, p.minLeftHole, "left"), p];
        }
        if (p.rightHole) {
          array.push(clonePoint(p, p.rightHole, p.minRightHole, "right"));
        }
        result.push(array);
        i++;
      }
      return [].concat.apply([], result);
    }
    chart.stackedarea = (0, _extend2.extend)({}, chartAreaSeries, baseStackedSeries, {
      F: function(points, rotated) {
        return chartAreaSeries.F.call(this, preparePointsForStackedAreaSegment(points), rotated);
      },
      Ob: function() {
        this.p.append(this.kc.seriesGroup).toBackground();
      }
    });
    function getPointsByArgFromPrevSeries(prevSeries, argument) {
      var result;
      while (!result && prevSeries) {
        result = prevSeries.Km && prevSeries.Km[argument];
        prevSeries = prevSeries.jd;
      }
      return result;
    }
    chart.stackedsplinearea = (0, _extend2.extend)({}, _area_series.chart.splinearea, baseStackedSeries, {
      F: function(points, rotated) {
        var that = this;
        var areaSegment;
        points = preparePointsForStackedAreaSegment(points);
        if (!this.jd || 1 === points.length) {
          areaSegment = _area_series.chart.splinearea.F.call(this, points, rotated);
        } else {
          var forwardPoints = _line_series.chart.spline._f(points, rotated);
          var backwardPoints = (0, _utils.map)(points, function(p) {
            var point = p.getCoords(true);
            point.argument = p.argument;
            return point;
          });
          var prevSeriesForwardPoints = [];
          var pointByArg = {};
          var i = 0;
          var len = that.jd.Wa.length;
          while (i < len) {
            prevSeriesForwardPoints = prevSeriesForwardPoints.concat(that.jd.Wa[i].line);
            i++;
          }
          (0, _iterator.each)(prevSeriesForwardPoints, function(_, p) {
            if (null !== p.argument) {
              var argument = p.argument.valueOf();
              if (!pointByArg[argument]) {
                pointByArg[argument] = [p];
              } else {
                pointByArg[argument].push(p);
              }
            }
          });
          that.jd.Km = pointByArg;
          backwardPoints = _line_series.chart.spline._f(backwardPoints, rotated);
          (0, _iterator.each)(backwardPoints, function(i2, p) {
            var argument = p.argument.valueOf();
            var prevSeriesPoints;
            if (i2 % 3 === 0) {
              prevSeriesPoints = pointByArg[argument] || getPointsByArgFromPrevSeries(that.jd, argument);
              if (prevSeriesPoints) {
                backwardPoints[i2 - 1] && prevSeriesPoints[0] && (backwardPoints[i2 - 1] = prevSeriesPoints[0]);
                backwardPoints[i2 + 1] && (backwardPoints[i2 + 1] = prevSeriesPoints[2] || p);
              }
            }
          });
          areaSegment = {
            line: forwardPoints,
            area: forwardPoints.concat(backwardPoints.reverse())
          };
          that.Ai(areaSegment.area);
        }
        return areaSegment;
      },
      Ob: chart.stackedarea.Ob
    });
    chart.fullstackedarea = (0, _extend2.extend)({}, chartAreaSeries, baseStackedSeries, {
      F: chart.stackedarea.F,
      Ob: chart.stackedarea.Ob
    });
    chart.fullstackedsplinearea = (0, _extend2.extend)({}, _area_series.chart.splinearea, baseStackedSeries, {
      F: chart.stackedsplinearea.F,
      Ob: chart.stackedarea.Ob
    });
    polar.stackedbar = (0, _extend2.extend)({}, _bar_series.polar.bar, baseStackedSeries, {});
  }
});

// node_modules/devextreme/cjs/viz/series/base_series.js
var require_base_series = __commonJS({
  "node_modules/devextreme/cjs/viz/series/base_series.js"(exports) {
    "use strict";
    function _typeof(obj) {
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    exports.Series = Series2;
    exports.mixins = void 0;
    var _type = require_type();
    var _extend2 = require_extend();
    var _iterator = require_iterator();
    var _base_point = require_base_point();
    var _utils = require_utils();
    var _common = require_common();
    var _consts = _interopRequireDefault(require_consts());
    var _range_data_calculator = _interopRequireDefault(require_range_data_calculator());
    var scatterSeries = _interopRequireWildcard(require_scatter_series());
    var lineSeries = _interopRequireWildcard(require_line_series());
    var areaSeries = _interopRequireWildcard(require_area_series());
    var barSeries = _interopRequireWildcard(require_bar_series());
    var _range_series = require_range_series();
    var _bubble_series = require_bubble_series();
    var pieSeries = _interopRequireWildcard(require_pie_series());
    var financialSeries = _interopRequireWildcard(require_financial_series());
    var stackedSeries = _interopRequireWildcard(require_stacked_series());
    function _getRequireWildcardCache(nodeInterop) {
      if ("function" !== typeof WeakMap) {
        return null;
      }
      var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
      var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
      return (_getRequireWildcardCache = function(nodeInterop2) {
        return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }
    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.j) {
        return obj;
      }
      if (null === obj || "object" !== _typeof(obj) && "function" !== typeof obj) {
        return {
          default: obj
        };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if ("default" !== key && Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    function _interopRequireDefault(obj) {
      return obj && obj.j ? obj : {
        default: obj
      };
    }
    var seriesNS = {};
    var states = _consts.default.states;
    var DISCRETE = "discrete";
    var SELECTED_STATE = states.selectedMark;
    var HOVER_STATE = states.hoverMark;
    var HOVER = states.hover;
    var NORMAL = states.normal;
    var SELECTION = states.selection;
    var APPLY_SELECTED = states.applySelected;
    var APPLY_HOVER = states.applyHover;
    var RESET_ITEM = states.resetItem;
    var NONE_MODE = "none";
    var INCLUDE_POINTS = "includepoints";
    var NEAREST_POINT = "nearestpoint";
    var SERIES_SELECTION_CHANGED = "seriesSelectionChanged";
    var POINT_SELECTION_CHANGED = "pointSelectionChanged";
    var SERIES_HOVER_CHANGED = "seriesHoverChanged";
    var POINT_HOVER_CHANGED = "pointHoverChanged";
    var ALL_SERIES_POINTS = "allseriespoints";
    var ALL_ARGUMENT_POINTS = "allargumentpoints";
    var POINT_HOVER = "pointHover";
    var CLEAR_POINT_HOVER = "clearPointHover";
    var SERIES_SELECT = "seriesSelect";
    var POINT_SELECT = "pointSelect";
    var POINT_DESELECT = "pointDeselect";
    var getEmptyBusinessRange = function() {
      return {
        arg: {},
        val: {}
      };
    };
    function triggerEvent(element, event, point) {
      element && element.trigger(event, point);
    }
    seriesNS.mixins = {
      chart: {},
      pie: {},
      polar: {}
    };
    seriesNS.mixins.chart.scatter = scatterSeries.chart;
    seriesNS.mixins.polar.scatter = scatterSeries.polar;
    (0, _extend2.extend)(seriesNS.mixins.pie, pieSeries);
    (0, _extend2.extend)(seriesNS.mixins.chart, lineSeries.chart, areaSeries.chart, barSeries.chart, _range_series.chart, _bubble_series.chart, financialSeries, stackedSeries.chart);
    (0, _extend2.extend)(seriesNS.mixins.polar, lineSeries.polar, areaSeries.polar, barSeries.polar, stackedSeries.polar);
    function includePointsMode(mode) {
      mode = (0, _utils.normalizeEnum)(mode);
      return mode === INCLUDE_POINTS || mode === ALL_SERIES_POINTS;
    }
    function getLabelOptions(labelOptions, defaultColor) {
      var opt = labelOptions || {};
      var labelFont = (0, _extend2.extend)({}, opt.font) || {};
      var labelBorder = opt.border || {};
      var labelConnector = opt.connector || {};
      var backgroundAttr = {
        fill: opt.backgroundColor || defaultColor,
        "stroke-width": labelBorder.visible ? labelBorder.width || 0 : 0,
        stroke: labelBorder.visible && labelBorder.width ? labelBorder.color : "none",
        dashStyle: labelBorder.dashStyle
      };
      var connectorAttr = {
        stroke: labelConnector.visible && labelConnector.width ? labelConnector.color || defaultColor : "none",
        "stroke-width": labelConnector.visible ? labelConnector.width || 0 : 0
      };
      labelFont.color = "none" === opt.backgroundColor && "#ffffff" === (0, _utils.normalizeEnum)(labelFont.color) && "inside" !== opt.position ? defaultColor : labelFont.color;
      return {
        alignment: opt.alignment,
        format: opt.format,
        argumentFormat: opt.argumentFormat,
        customizeText: (0, _type.isFunction)(opt.customizeText) ? opt.customizeText : void 0,
        attributes: {
          font: labelFont
        },
        visible: 0 !== labelFont.size ? opt.visible : false,
        showForZeroValues: opt.showForZeroValues,
        horizontalOffset: opt.horizontalOffset,
        verticalOffset: opt.verticalOffset,
        radialOffset: opt.radialOffset,
        background: backgroundAttr,
        position: opt.position,
        connector: connectorAttr,
        rotationAngle: opt.rotationAngle,
        wordWrap: opt.wordWrap,
        textOverflow: opt.textOverflow,
        cssClass: opt.cssClass,
        displayFormat: opt.displayFormat
      };
    }
    function setPointHoverState(point, legendCallback) {
      point.fullState |= HOVER_STATE;
      point.applyView(legendCallback);
    }
    function releasePointHoverState(point, legendCallback) {
      point.fullState &= ~HOVER_STATE;
      point.applyView(legendCallback);
      point.releaseHoverState();
    }
    function setPointSelectedState(point, legendCallback) {
      point.fullState |= SELECTED_STATE;
      point.applyView(legendCallback);
    }
    function releasePointSelectedState(point, legendCallback) {
      point.fullState &= ~SELECTED_STATE;
      point.applyView(legendCallback);
    }
    function mergePointOptionsCore(base, extra) {
      var options = (0, _extend2.extend)({}, base, extra);
      options.border = (0, _extend2.extend)({}, base && base.border, extra && extra.border);
      return options;
    }
    function mergePointOptions(base, extra) {
      var options = mergePointOptionsCore(base, extra);
      options.image = (0, _extend2.extend)(true, {}, base.image, extra.image);
      options.selectionStyle = mergePointOptionsCore(base.selectionStyle, extra.selectionStyle);
      options.hoverStyle = mergePointOptionsCore(base.hoverStyle, extra.hoverStyle);
      return options;
    }
    function Series2(settings, options) {
      this.fullState = 0;
      this.kc = settings;
      this.n = settings.renderer;
      this.p = settings.renderer.g().attr({
        class: "dxc-series"
      });
      this.u = settings.eventTrigger;
      this.oe = settings.eventPipe;
      this.ea = settings.incidentOccurred;
      this.hb = _common.noop;
      this.updateOptions(options, settings);
    }
    function getData(pointData) {
      return pointData.data;
    }
    function getValueChecker(axisType, axis) {
      if (!axis || "logarithmic" !== axisType || false !== axis.getOptions().allowNegatives) {
        return function() {
          return true;
        };
      } else {
        return function(value) {
          return value > 0;
        };
      }
    }
    Series2.prototype = {
      constructor: Series2,
      Ia: _common.noop,
      getLegendStyles: function() {
        return this.t.legendStyles;
      },
      Bt: function(options) {
        var mainSeriesColor = options.mainSeriesColor;
        var colorId = this.lc(options);
        var hoverStyle = options.hoverStyle || {};
        var selectionStyle = options.selectionStyle || {};
        if (colorId) {
          this.Bi(hoverStyle, selectionStyle);
        }
        this.t = {
          labelColor: mainSeriesColor,
          normal: this.Zd(options, mainSeriesColor, mainSeriesColor),
          hover: this.Zd(hoverStyle, colorId || mainSeriesColor, mainSeriesColor),
          selection: this.Zd(selectionStyle, colorId || mainSeriesColor, mainSeriesColor),
          legendStyles: {
            normal: this.Ia(options, colorId || mainSeriesColor),
            hover: this.Ia(hoverStyle, colorId || mainSeriesColor),
            selection: this.Ia(selectionStyle, colorId || mainSeriesColor)
          }
        };
      },
      setClippingParams: function(baseId, wideId, forceClipping) {
        var clipLabels = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : true;
        this._c = baseId;
        this.ym = wideId;
        this.gi = forceClipping;
        this.Ct = clipLabels;
      },
      applyClip: function() {
        this.p.attr({
          "clip-path": this._c
        });
      },
      resetClip: function() {
        this.p.attr({
          "clip-path": null
        });
      },
      getTagField: function() {
        return this.e.tagField || "tag";
      },
      getValueFields: _common.noop,
      getSizeField: _common.noop,
      getArgumentField: _common.noop,
      getPoints: function() {
        return this.R;
      },
      getPointsInViewPort: function() {
        return _range_data_calculator.default.getPointsInViewPort(this);
      },
      Dt: function(data, index, oldPoint) {
        data.index = index;
        var pointsByArgument = this.pointsByArgument;
        var options = this.$d(data);
        var arg = data.argument.valueOf();
        var point = oldPoint;
        if (point) {
          point.update(data, options);
        } else {
          point = new _base_point.Point(this, data, options);
          if (this.isSelected() && includePointsMode(this.lastSelectionMode)) {
            point.setView(SELECTION);
          }
        }
        var pointByArgument = pointsByArgument[arg];
        if (pointByArgument) {
          pointByArgument.push(point);
        } else {
          pointsByArgument[arg] = [point];
        }
        if (point.hasValue()) {
          this.customizePoint(point, data);
        }
        return point;
      },
      getRangeData: function() {
        return this.la ? this.zm() : getEmptyBusinessRange();
      },
      getArgumentRange: function() {
        return this.la ? _range_data_calculator.default.getArgumentRange(this) : getEmptyBusinessRange();
      },
      getViewport: function() {
        return _range_data_calculator.default.getViewport(this);
      },
      My: function(groupName) {
        var group = this[groupName];
        if (group) {
          group.dispose();
          this[groupName] = null;
        }
      },
      updateOptions: function(newOptions, settings) {
        var widgetType = newOptions.widgetType;
        var oldType = this.type;
        var newType = newOptions.type;
        this.type = newType && (0, _utils.normalizeEnum)(newType.toString());
        if (!this.Et(widgetType) || this.Ft(widgetType, newOptions)) {
          this.dispose();
          this.isUpdated = false;
          return;
        }
        if (oldType !== this.type) {
          this.ag = true;
          this.ci(oldType, widgetType);
          this.di(this.type, widgetType);
        } else {
          this.Hm();
        }
        this.e = newOptions;
        this.Gt = null;
        this.name = newOptions.name;
        this.pane = newOptions.pane;
        this.tag = newOptions.tag;
        if (settings) {
          this.Lm = settings.commonSeriesModes || this.Lm;
          this.cg = settings.valueAxis || this.cg;
          this.axis = this.cg && this.cg.name;
          this.Qb = settings.argumentAxis || this.Qb;
        }
        this.Bt(newOptions);
        this.$f = null;
        this.vb(newOptions);
        this.la = newOptions.visible;
        this.isUpdated = true;
        this.stack = newOptions.stack;
        this.barOverlapGroup = newOptions.barOverlapGroup;
        this.Bb();
        this.nc = newOptions.ignoreEmptyPoints ? function(x) {
          return null === x ? void 0 : x;
        } : function(x) {
          return x;
        };
      },
      Hm: function() {
        this.ag = true;
      },
      Mm: function(points) {
        (0, _iterator.each)(points || [], function(_, p) {
          p.dispose();
        });
      },
      updateDataType: function(settings) {
        this.argumentType = settings.argumentType;
        this.valueType = settings.valueType;
        this.argumentAxisType = settings.argumentAxisType;
        this.valueAxisType = settings.valueAxisType;
        this.showZero = settings.showZero;
        this.um = getValueChecker(settings.argumentAxisType, this.getArgumentAxis());
        this.vm = getValueChecker(settings.valueAxisType, this.getValueAxis());
        return this;
      },
      um: function() {
        return true;
      },
      vm: function() {
        return true;
      },
      getOptions: function() {
        return this.e;
      },
      Im: function(data, oldPointsByArgument, index) {
        var arg = data.argument && data.argument.valueOf();
        var point = (oldPointsByArgument[arg] || [])[0];
        if (point) {
          oldPointsByArgument[arg].splice(0, 1);
        }
        return point;
      },
      updateData: function(data) {
        var options = this.e;
        var nameField = options.nameField;
        data = data || [];
        if (data.length) {
          this.Nm = true;
        }
        var dataSelector = this.bd();
        var itemsWithoutArgument = 0;
        this.na = data.reduce(function(data2, dataItem, index) {
          var pointDataItem = dataSelector(dataItem);
          if ((0, _type.isDefined)(pointDataItem.argument)) {
            if (!nameField || dataItem[nameField] === options.nameFieldValue) {
              pointDataItem.index = index;
              data2.push(pointDataItem);
            }
          } else {
            itemsWithoutArgument++;
          }
          return data2;
        }, []);
        if (itemsWithoutArgument && itemsWithoutArgument === data.length) {
          this.ea("W2002", [this.name, this.getArgumentField()]);
        }
        this.pi();
      },
      Ht: function() {
        var data = this.na || [];
        if (this.useAggregation()) {
          var argumentRange = this.argumentAxisType !== DISCRETE ? this.getArgumentRange() : {};
          var aggregationInfo = this.getArgumentAxis().getAggregationInfo(this.Om, argumentRange);
          data = this.It(aggregationInfo, data);
        }
        return data;
      },
      useAggregation: function() {
        var aggregation = this.getOptions().aggregation;
        return aggregation && aggregation.enabled;
      },
      autoHidePointMarkersEnabled: _common.noop,
      usePointsToDefineAutoHiding: _common.noop,
      createPoints: function(useAllAggregatedPoints) {
        this.Jt(useAllAggregatedPoints);
        this.Kt();
      },
      Jt: function(useAllAggregatedPoints) {
        this.Om = this.useAggregation() && (this.argumentAxisType === DISCRETE || (this.na || []).length > 1 && !!useAllAggregatedPoints);
      },
      Kt: function() {
        var that = this;
        var oldPointsByArgument = that.pointsByArgument || {};
        var data = that.Ht();
        that.pointsByArgument = {};
        that.qi(data);
        var skippedFields = {};
        var points = data.reduce(function(points2, pointDataItem) {
          if (that.Ua(pointDataItem, skippedFields)) {
            var pointIndex = points2.length;
            var oldPoint = that.Im(pointDataItem, oldPointsByArgument, pointIndex);
            var point = that.Dt(pointDataItem, pointIndex, oldPoint);
            points2.push(point);
          }
          return points2;
        }, []);
        for (var field in skippedFields) {
          if (skippedFields[field] === data.length) {
            that.ea("W2002", [that.name, field]);
          }
        }
        Object.keys(oldPointsByArgument).forEach(function(key) {
          return that.Mm(oldPointsByArgument[key]);
        });
        that.R = points;
      },
      Lt: function() {
        var that = this;
        var startIndex = that.Wa.length;
        (0, _iterator.each)(that.ya.splice(startIndex, that.ya.length) || [], function(_, elem) {
          that.ie(elem);
        });
        if (that.ed) {
          (0, _iterator.each)(that.ed.splice(startIndex, that.ed.length) || [], function(_, elem) {
            elem.remove();
          });
        }
      },
      Mt: function() {
        var points = this.R || [];
        var isCloseSegment = points[0] && points[0].hasValue() && this.e.closed;
        var segments = points.reduce(function(segments2, p) {
          var segment = segments2.at(-1);
          if (!p.translated) {
            p.setDefaultCoords();
          }
          if (p.hasValue() && p.hasCoords()) {
            segment.push(p);
          } else if (!p.hasValue() && segment.length) {
            segments2.push([]);
          }
          return segments2;
        }, [
          []
        ]);
        this.Pm(segments, isCloseSegment, false);
      },
      Nt: function(animationEnabled, firstDrawing) {
        var that = this;
        var points = that.R || [];
        var isCloseSegment = points[0] && points[0].hasValue() && that.e.closed;
        var groupForPoint = {
          markers: that.J,
          errorBars: that.fe
        };
        that.Va = [];
        that.ya = that.ya || [];
        that.Wa = [];
        var segments = points.reduce(function(segments2, p) {
          var segment = segments2.at(-1);
          if (p.hasValue() && p.hasCoords()) {
            that.gb({
              point: p,
              groups: groupForPoint,
              hasAnimation: animationEnabled,
              firstDrawing
            });
            segment.push(p);
          } else if (!p.hasValue()) {
            segment.length && segments2.push([]);
          } else {
            p.setInvisibility();
          }
          return segments2;
        }, [
          []
        ]);
        that.Pm(segments, isCloseSegment, animationEnabled);
        that.ag = !points.length;
        that.Lt();
        animationEnabled && that.dd(firstDrawing);
      },
      Pm: function(segments, closeSegment, animationEnabled) {
        var _this = this;
        segments.forEach(function(segment, index) {
          if (segment.length) {
            var lastSegment = closeSegment && index === segments.length - 1;
            _this.xm(segment, animationEnabled, index, lastSegment);
          }
        });
      },
      draw: function(animationEnabled, hideLayoutLabels, legendCallback) {
        var firstDrawing = this.ag;
        this.hb = legendCallback || this.hb;
        if (!this.la) {
          this.p.remove();
          return;
        }
        this.Ob();
        if (!this.Qm) {
          this.prepareCoordinatesForPoints();
        }
        this.Ta(animationEnabled, firstDrawing);
        !firstDrawing && !this.Rm && this.Mt();
        this.Nt(animationEnabled, firstDrawing);
        hideLayoutLabels && this.hideLabels();
        if (this.isSelected()) {
          this.kd(this.lastSelectionMode, void 0, true);
        } else if (this.isHovered()) {
          this.kd(this.lastHoverMode, void 0, true);
        } else {
          this.jc(this.t.normal);
        }
        this.Qm = false;
        this.Rm = false;
      },
      Ot: function() {
        var _this$_points;
        var points = null !== (_this$_points = this.R) && void 0 !== _this$_points ? _this$_points : [];
        points.forEach(function(p) {
          p.translate();
        });
      },
      prepareCoordinatesForPoints: function() {
        this.ui();
        this.Ot();
        this.Qm = true;
      },
      kt: function(animationEnabled) {
        var settings = {
          class: "dxc-labels",
          "pointer-events": "none"
        };
        this.Ct && this.Sf(settings);
        this.ht(settings);
        animationEnabled && (settings.opacity = 1e-3);
        this.wa.attr(settings).append(this.kc.labelsGroup);
      },
      Et: function(widgetType) {
        return !!seriesNS.mixins[widgetType][this.type];
      },
      Ft: function(widgetType, options) {
        return "polar" === widgetType && options.spiderWidget && -1 !== this.type.indexOf("bar");
      },
      ci: function(seriesType, widgetType) {
        var methodName;
        var methods;
        if (seriesType) {
          methods = seriesNS.mixins[widgetType][seriesType];
          for (methodName in methods) {
            delete this[methodName];
          }
        }
      },
      di: function(seriesType, widgetType) {
        var methodName;
        var methods = seriesNS.mixins[widgetType][seriesType];
        for (methodName in methods) {
          this[methodName] = methods[methodName];
        }
      },
      dg: function(view, target) {
        this.getPoints().forEach(function(point) {
          if (target !== point) {
            point.setView(view);
          }
        });
      },
      eg: function(view, target) {
        this.getPoints().forEach(function(point) {
          if (target !== point) {
            point.resetView(view);
          }
        });
      },
      Ci: function() {
        this.pe && null !== this.pe.series && this.pe.resetView(HOVER);
        this.pe = null;
      },
      Pt: function(mode) {
        this.lastSelectionMode = (0, _utils.normalizeEnum)(mode || this.e.selectionMode);
        this.fullState = this.fullState | SELECTED_STATE;
        this.Ci();
        this.kd(this.lastSelectionMode);
        if (this.lastSelectionMode !== NONE_MODE && this.isHovered() && includePointsMode(this.lastHoverMode)) {
          this.eg(HOVER);
        }
      },
      Qt: function() {
        this.fullState = this.fullState & ~SELECTED_STATE;
        this.kd(this.lastSelectionMode, SELECTION);
        if (this.lastSelectionMode !== NONE_MODE && this.isHovered() && includePointsMode(this.lastHoverMode)) {
          this.dg(HOVER);
        }
      },
      isFullStackedSeries: function() {
        return 0 === this.type.indexOf("fullstacked");
      },
      isStackedSeries: function() {
        return 0 === this.type.indexOf("stacked");
      },
      resetApplyingAnimation: function(isFirstDrawing) {
        this.Rm = true;
        if (isFirstDrawing) {
          this.ag = true;
        }
      },
      isFinancialSeries: function() {
        return "stock" === this.type || "candlestick" === this.type;
      },
      Sm: function() {
        return !this.isSelected() && (0, _utils.normalizeEnum)(this.e.hoverMode) !== NONE_MODE;
      },
      kd: function(mode, resetView, skipPoints) {
        var state = this.fullState;
        var styles = [NORMAL, HOVER, SELECTION, SELECTION];
        if ("none" === this.lastHoverMode) {
          state &= ~HOVER_STATE;
        }
        if ("none" === this.lastSelectionMode) {
          state &= ~SELECTED_STATE;
        }
        if (includePointsMode(mode) && !skipPoints) {
          if (!resetView) {
            this.dg(styles[state]);
          } else {
            this.eg(resetView);
          }
        }
        this.hb([RESET_ITEM, APPLY_HOVER, APPLY_SELECTED, APPLY_SELECTED][state]);
        this.jc(this.t[styles[state]]);
      },
      updateHover: function(x, y) {
        var currentNearestPoint = this.pe;
        var point = this.isHovered() && this.lastHoverMode === NEAREST_POINT && this.getNeighborPoint(x, y);
        if (point !== currentNearestPoint && !(this.isSelected() && this.lastSelectionMode !== NONE_MODE)) {
          this.Ci();
          if (point) {
            point.setView(HOVER);
            this.pe = point;
          }
        }
      },
      Ny: function() {
        return this.e.rotated ? "X" : "Y";
      },
      areLabelsVisible: function() {
        return !(0, _type.isDefined)(this.e.maxLabelCount) || this.R.length <= this.e.maxLabelCount;
      },
      getLabelVisibility: function() {
        return this.areLabelsVisible() && this.e.label && this.e.label.visible;
      },
      customizePoint: function(point, pointData) {
        var options = this.e;
        var customizePoint = options.customizePoint;
        var customizeObject;
        var pointOptions;
        var customLabelOptions;
        var customOptions;
        var customizeLabel = options.customizeLabel;
        var useLabelCustomOptions;
        var usePointCustomOptions;
        if (customizeLabel && customizeLabel.call) {
          customizeObject = (0, _extend2.extend)({
            seriesName: this.name
          }, pointData);
          customizeObject.series = this;
          customLabelOptions = customizeLabel.call(customizeObject, customizeObject);
          useLabelCustomOptions = customLabelOptions && !(0, _type.isEmptyObject)(customLabelOptions);
          customLabelOptions = useLabelCustomOptions ? (0, _extend2.extend)(true, {}, options.label, customLabelOptions) : null;
        }
        if (customizePoint && customizePoint.call) {
          customizeObject = customizeObject || (0, _extend2.extend)({
            seriesName: this.name
          }, pointData);
          customizeObject.series = this;
          customOptions = customizePoint.call(customizeObject, customizeObject);
          usePointCustomOptions = customOptions && !(0, _type.isEmptyObject)(customOptions);
        }
        if (useLabelCustomOptions || usePointCustomOptions) {
          pointOptions = this.ni(this.oi(customOptions), customLabelOptions || options.label, pointData, point);
          pointOptions.styles.useLabelCustomOptions = useLabelCustomOptions;
          pointOptions.styles.usePointCustomOptions = usePointCustomOptions;
          point.updateOptions(pointOptions);
        }
      },
      show: function() {
        if (!this.la) {
          this.Tm(true);
        }
      },
      hide: function() {
        if (this.la) {
          this.Tm(false);
        }
      },
      Tm: function(visibility) {
        this.la = this.e.visible = visibility;
        this.hd();
        this.hidePointTooltip();
        this.e.visibilityChanged(this);
      },
      hd: _common.noop,
      hideLabels: function() {
        (0, _iterator.each)(this.R, function(_, point) {
          point.C.draw(false);
        });
      },
      Bi: function(hoverStyle, selectionStyle) {
        if (hoverStyle.hatching) {
          hoverStyle.hatching.direction = "none";
        }
        if (selectionStyle.hatching) {
          selectionStyle.hatching.direction = "none";
        }
      },
      ni: function(pointOptions, labelOptions, data, point) {
        var options = this.e;
        var styles = this.Cb(pointOptions, data, point);
        var parsedOptions = (0, _extend2.extend)({}, pointOptions, {
          type: options.type,
          rotated: options.rotated,
          styles,
          widgetType: options.widgetType,
          visibilityChanged: options.visibilityChanged
        });
        parsedOptions.label = getLabelOptions(labelOptions, styles.labelColor);
        if (this.areErrorBarsVisible()) {
          parsedOptions.errorBars = options.valueErrorBar;
        }
        return parsedOptions;
      },
      oi: function(customOptions) {
        var pointOptions = this.mc();
        return customOptions ? mergePointOptions(pointOptions, customOptions) : pointOptions;
      },
      ji: function() {
        return (0, _extend2.extend)(false, {}, this.mc(), {
          hoverStyle: {},
          selectionStyle: {}
        });
      },
      Rt: function(isDiscrete, aggregateByCategory) {
        var options = this.getOptions().aggregation;
        var method = (0, _utils.normalizeEnum)(options.method);
        var customAggregator = "custom" === method && options.calculate;
        var aggregator;
        if (isDiscrete && !aggregateByCategory) {
          aggregator = function(_ref) {
            var data = _ref.data;
            return data[0];
          };
        } else {
          aggregator = this.ge[method] || this.ge[this.Uf];
        }
        return customAggregator || aggregator;
      },
      It: function(_ref2, data) {
        var interval = _ref2.interval, ticks = _ref2.ticks, aggregateByCategory = _ref2.aggregateByCategory;
        var that = this;
        var isDiscrete = that.argumentAxisType === DISCRETE || that.valueAxisType === DISCRETE;
        var dataIndex = 0;
        var dataSelector = this.bd();
        var options = that.getOptions();
        var addAggregatedData = function(target, data2, aggregationInfo2) {
          if (!data2) {
            return;
          }
          var processData = function(d) {
            var pointData = d && dataSelector(d, options);
            if (pointData && that.Ua(pointData)) {
              pointData.aggregationInfo = aggregationInfo2;
              target.push(pointData);
            }
          };
          if (Array.isArray(data2)) {
            data2.forEach(processData);
          } else {
            processData(data2);
          }
        };
        var aggregationMethod = this.Rt(isDiscrete, aggregateByCategory);
        if (isDiscrete) {
          if (aggregateByCategory) {
            var categories = this.getArgumentAxis().getTranslator().getBusinessRange().categories;
            var groups = categories.reduce(function(g, category) {
              g[category.valueOf()] = [];
              return g;
            }, {});
            data.forEach(function(dataItem) {
              groups[dataItem.argument.valueOf()].push(dataItem);
            });
            return categories.reduce(function(result, c) {
              addAggregatedData(result, aggregationMethod({
                aggregationInterval: null,
                intervalStart: c,
                intervalEnd: c,
                data: groups[c.valueOf()].map(getData)
              }, that));
              return result;
            }, []);
          } else {
            return data.reduce(function(result, dataItem, index, data2) {
              result[1].push(dataItem);
              if (index === data2.length - 1 || (index + 1) % interval === 0) {
                var dataInInterval2 = result[1];
                var aggregationInfo2 = {
                  aggregationInterval: interval,
                  data: dataInInterval2.map(getData)
                };
                addAggregatedData(result[0], aggregationMethod(aggregationInfo2, that));
                result[1] = [];
              }
              return result;
            }, [
              [],
              []
            ])[0];
          }
        }
        var aggregatedData = [];
        if (1 === ticks.length) {
          var aggregationInfo = {
            intervalStart: ticks[0],
            intervalEnd: ticks[0],
            aggregationInterval: null,
            data: data.map(getData)
          };
          addAggregatedData(aggregatedData, aggregationMethod(aggregationInfo, that), aggregationInfo);
        } else {
          for (var i = 1; i < ticks.length; i++) {
            var intervalEnd = ticks[i];
            var intervalStart = ticks[i - 1];
            var dataInInterval = [];
            while (data[dataIndex] && data[dataIndex].argument < intervalEnd) {
              if (data[dataIndex].argument >= intervalStart) {
                dataInInterval.push(data[dataIndex]);
              }
              dataIndex++;
            }
            var _aggregationInfo = {
              intervalStart,
              intervalEnd,
              aggregationInterval: interval,
              data: dataInInterval.map(getData)
            };
            addAggregatedData(aggregatedData, aggregationMethod(_aggregationInfo, that), _aggregationInfo);
          }
        }
        that.pi();
        return aggregatedData;
      },
      canRenderCompleteHandle: function() {
        var result = this.Nm;
        delete this.Nm;
        return !!result;
      },
      isHovered: function() {
        return !!(1 & this.fullState);
      },
      isSelected: function() {
        return !!(2 & this.fullState);
      },
      isVisible: function() {
        return this.la;
      },
      getAllPoints: function() {
        this.Di();
        return (this.R || []).slice();
      },
      getPointByPos: function(pos) {
        this.Di();
        return (this.R || [])[pos];
      },
      getVisiblePoints: function() {
        return (this.Va || []).slice();
      },
      selectPoint: function(point) {
        if (!point.isSelected()) {
          setPointSelectedState(point, this.hb);
          this.oe({
            action: POINT_SELECT,
            target: point
          });
          this.u(POINT_SELECTION_CHANGED, {
            target: point
          });
        }
      },
      deselectPoint: function(point) {
        if (point.isSelected()) {
          releasePointSelectedState(point, this.hb);
          this.oe({
            action: POINT_DESELECT,
            target: point
          });
          this.u(POINT_SELECTION_CHANGED, {
            target: point
          });
        }
      },
      hover: function(mode) {
        var eventTrigger = this.u;
        if (this.isHovered()) {
          return;
        }
        this.lastHoverMode = (0, _utils.normalizeEnum)(mode || this.e.hoverMode);
        this.fullState = this.fullState | HOVER_STATE;
        this.kd(this.lastHoverMode, void 0, this.isSelected() && this.lastSelectionMode !== NONE_MODE);
        eventTrigger(SERIES_HOVER_CHANGED, {
          target: this
        });
      },
      clearHover: function() {
        var eventTrigger = this.u;
        if (!this.isHovered()) {
          return;
        }
        this.Ci();
        this.fullState = this.fullState & ~HOVER_STATE;
        this.kd(this.lastHoverMode, HOVER, this.isSelected() && this.lastSelectionMode !== NONE_MODE);
        eventTrigger(SERIES_HOVER_CHANGED, {
          target: this
        });
      },
      hoverPoint: function(point) {
        if (!point.isHovered()) {
          point.clearHover();
          setPointHoverState(point, this.hb);
          this.Sm() && this.jc(this.t.hover);
          this.oe({
            action: POINT_HOVER,
            target: point
          });
          this.u(POINT_HOVER_CHANGED, {
            target: point
          });
        }
      },
      clearPointHover: function() {
        var that = this;
        that.getPoints().some(function(currentPoint) {
          if (currentPoint.isHovered()) {
            releasePointHoverState(currentPoint, that.hb);
            that.Sm() && that.jc(that.t.normal);
            that.oe({
              action: CLEAR_POINT_HOVER,
              target: currentPoint
            });
            that.u(POINT_HOVER_CHANGED, {
              target: currentPoint
            });
            return true;
          }
          return false;
        });
      },
      showPointTooltip: function(point) {
        triggerEvent(this.kc.seriesGroup, "showpointtooltip", point);
      },
      hidePointTooltip: function(point) {
        triggerEvent(this.kc.seriesGroup, "hidepointtooltip", point);
      },
      select: function() {
        if (!this.isSelected()) {
          this.Pt(this.e.selectionMode);
          this.oe({
            action: SERIES_SELECT,
            target: this
          });
          this.p.toForeground();
          this.u(SERIES_SELECTION_CHANGED, {
            target: this
          });
        }
      },
      clearSelection: function() {
        if (this.isSelected()) {
          this.Qt();
          this.u(SERIES_SELECTION_CHANGED, {
            target: this
          });
        }
      },
      getPointsByArg: function(arg, skipPointsCreation) {
        var argValue = arg.valueOf();
        var points = this.pointsByArgument[argValue];
        if (!points && !skipPointsCreation && this.Di()) {
          points = this.pointsByArgument[argValue];
        }
        return points || [];
      },
      Di: function() {
        if (this.useAggregation() && !this.Om) {
          this.createPoints(true);
          return true;
        }
        return false;
      },
      getPointsByKeys: function(arg) {
        return this.getPointsByArg(arg);
      },
      notify: function(data) {
        var that = this;
        var action = data.action;
        var seriesModes = that.Lm;
        var target = data.target;
        var targetOptions = target.getOptions();
        var pointHoverMode = (0, _utils.normalizeEnum)(targetOptions.hoverMode);
        var selectionModeOfPoint = (0, _utils.normalizeEnum)(targetOptions.selectionMode);
        if (action === POINT_HOVER) {
          that.St(target, pointHoverMode, data.notifyLegend);
        } else if (action === CLEAR_POINT_HOVER) {
          that.Tt(target, pointHoverMode, data.notifyLegend);
        } else if (action === SERIES_SELECT) {
          target !== that && "single" === seriesModes.seriesSelectionMode && that.clearSelection();
        } else if (action === POINT_SELECT) {
          if ("single" === seriesModes.pointSelectionMode) {
            that.getPoints().some(function(currentPoint) {
              if (currentPoint !== target && currentPoint.isSelected()) {
                that.deselectPoint(currentPoint);
                return true;
              }
              return false;
            });
          }
          that.Ut(target, selectionModeOfPoint);
        } else if (action === POINT_DESELECT) {
          that.Vt(target, selectionModeOfPoint);
        }
      },
      Ut: function(target, mode) {
        if (mode === ALL_SERIES_POINTS) {
          target.series === this && this.dg(SELECTION, target);
        } else if (mode === ALL_ARGUMENT_POINTS) {
          this.getPointsByKeys(target.argument, target.argumentIndex).forEach(function(currentPoint) {
            currentPoint !== target && currentPoint.setView(SELECTION);
          });
        }
      },
      Vt: function(target, mode) {
        if (mode === ALL_SERIES_POINTS) {
          target.series === this && this.eg(SELECTION, target);
        } else if (mode === ALL_ARGUMENT_POINTS) {
          this.getPointsByKeys(target.argument, target.argumentIndex).forEach(function(currentPoint) {
            currentPoint !== target && currentPoint.resetView(SELECTION);
          });
        }
      },
      St: function(target, mode, notifyLegend) {
        if (target.series !== this && mode === ALL_ARGUMENT_POINTS) {
          this.getPointsByKeys(target.argument, target.argumentIndex).forEach(function(currentPoint) {
            currentPoint.setView(HOVER);
          });
          notifyLegend && this.hb(target);
        } else if (mode === ALL_SERIES_POINTS && target.series === this) {
          this.dg(HOVER, target);
        }
      },
      Tt: function(target, mode, notifyLegend) {
        if (mode === ALL_ARGUMENT_POINTS) {
          target.series !== this && this.getPointsByKeys(target.argument, target.argumentIndex).forEach(function(currentPoint) {
            currentPoint.resetView(HOVER);
          });
          notifyLegend && this.hb(target);
        } else if (mode === ALL_SERIES_POINTS && target.series === this) {
          this.eg(HOVER, target);
        }
      },
      Wt: function() {
        this.Mm(this.R);
        this.R = this.Va = null;
      },
      Xt: function() {
        (0, _iterator.each)(this.ed || [], function(_, tracker) {
          tracker.remove();
        });
        this.Wf && this.Wf.dispose();
        this.ed = this.Wf = null;
      },
      dispose: function() {
        this.Wt();
        this.p.dispose();
        this.wa && this.wa.dispose();
        this.fe && this.fe.dispose();
        this.Xt();
        this.p = this.kc = this.J = this.Xa = this.Pa = this.wa = this.fe = this.ya = this.Jm = this.n = this.t = this.e = this.Gt = this.Va = this.pointsByArgument = this.Wa = this.jd = null;
      },
      correctPosition: _common.noop,
      drawTrackers: _common.noop,
      getNeighborPoint: _common.noop,
      areErrorBarsVisible: _common.noop,
      lc: _common.noop,
      getMarginOptions: function() {
        return this.Vf({
          percentStick: this.isFullStackedSeries()
        });
      },
      getColor: function() {
        return this.getLegendStyles().normal.fill;
      },
      getOpacity: function() {
        return this.e.opacity;
      },
      getStackName: function() {
        return this.$f;
      },
      getBarOverlapGroup: function() {
        return this.e.barOverlapGroup;
      },
      getPointByCoord: function(x, y) {
        var point = this.getNeighborPoint(x, y);
        return null !== point && void 0 !== point && point.coordsIn(x, y) ? point : null;
      },
      getValueAxis: function() {
        return this.cg;
      },
      getArgumentAxis: function() {
        return this.Qb;
      },
      getMarkersGroup: function() {
        return this.J;
      },
      getRenderer: function() {
        return this.n;
      },
      removePointElements: function() {
        if (this.J) {
          (0, _iterator.each)(this.R, function(_, p) {
            return p.deleteMarker();
          });
          this.J.dispose();
          this.J = null;
        }
      },
      removeGraphicElements: function() {
        var that = this;
        if (that.Xa) {
          that.Xa.dispose();
          that.Xa = null;
        }
        (0, _iterator.each)(that.ya || [], function(_, elem) {
          that.ie(elem);
        });
        that.ya = null;
      },
      removeBordersGroup: function() {
        if (this.Pa) {
          this.Pa.dispose();
          this.Pa = null;
        }
      }
    };
    var mixins = seriesNS.mixins;
    exports.mixins = mixins;
  }
});

// node_modules/devextreme/cjs/viz/components/chart_theme_manager.js
var require_chart_theme_manager = __commonJS({
  "node_modules/devextreme/cjs/viz/components/chart_theme_manager.js"(exports) {
    "use strict";
    exports.ThemeManager = void 0;
    var _common = require_common();
    var _type = require_type();
    var _extend = require_extend();
    var _base_theme_manager = require_base_theme_manager();
    var _utils = require_utils();
    var ThemeManager = _base_theme_manager.BaseThemeManager.inherit(function() {
      var processAxisOptions = function(axisOptions) {
        if (!axisOptions) {
          return {};
        }
        axisOptions = (0, _extend.extend)(true, {}, axisOptions);
        axisOptions.title = (options = axisOptions.title, (0, _type.isString)(options) ? {
          text: options
        } : options);
        var options;
        if ("logarithmic" === axisOptions.type && axisOptions.logarithmBase <= 0 || axisOptions.logarithmBase && !(0, _type.isNumeric)(axisOptions.logarithmBase)) {
          axisOptions.logarithmBase = void 0;
          axisOptions.logarithmBaseError = true;
        }
        if (axisOptions.label) {
          if (axisOptions.label.alignment) {
            axisOptions.label.userAlignment = true;
          }
        }
        return axisOptions;
      };
      var applyParticularAxisOptions = function(name, userOptions, rotated) {
        var theme = this.rb;
        var position = !(rotated ^ "valueAxis" === name) ? "horizontalAxis" : "verticalAxis";
        var processedUserOptions = processAxisOptions(userOptions);
        var commonAxisSettings = processAxisOptions(this.pc.commonAxisSettings);
        var mergeOptions2 = (0, _extend.extend)(true, {}, theme.commonAxisSettings, theme[position], theme[name], commonAxisSettings, processedUserOptions);
        mergeOptions2.workWeek = processedUserOptions.workWeek || theme[name].workWeek;
        mergeOptions2.forceUserTickInterval |= (0, _type.isDefined)(processedUserOptions.tickInterval) && !(0, _type.isDefined)(processedUserOptions.axisDivisionFactor);
        return mergeOptions2;
      };
      var mergeOptions = function(name, userOptions) {
        userOptions = userOptions || this.pc[name];
        var theme = this.rb[name];
        var result = this.fg[name];
        if (result) {
          return result;
        }
        if ((0, _type.isPlainObject)(theme) && (0, _type.isPlainObject)(userOptions)) {
          result = (0, _extend.extend)(true, {}, theme, userOptions);
        } else {
          result = (0, _type.isDefined)(userOptions) ? userOptions : theme;
        }
        this.fg[name] = result;
        return result;
      };
      var applyParticularTheme = {
        base: mergeOptions,
        argumentAxis: applyParticularAxisOptions,
        valueAxisRangeSelector: function() {
          return mergeOptions.call(this, "valueAxis");
        },
        valueAxis: applyParticularAxisOptions,
        series: function(name, userOptions, seriesCount) {
          var that = this;
          var theme = that.rb;
          var userCommonSettings = that.pc.commonSeriesSettings || {};
          var themeCommonSettings = theme.commonSeriesSettings;
          var widgetType = that.Dc.split(".").slice(-1)[0];
          var type = (0, _utils.normalizeEnum)(userOptions.type || userCommonSettings.type || themeCommonSettings.type || "pie" === widgetType && theme.type);
          var palette = that.palette;
          var isBar = ~type.indexOf("bar");
          var isLine = ~type.indexOf("line");
          var isArea = ~type.indexOf("area");
          var isBubble = "bubble" === type;
          var mainSeriesColor;
          var resolveLabelsOverlapping = that.getOptions("resolveLabelsOverlapping");
          var containerBackgroundColor = that.getOptions("containerBackgroundColor");
          var seriesTemplate = applyParticularTheme.seriesTemplate.call(this);
          var seriesVisibility;
          if (isBar || isBubble) {
            userOptions = (0, _extend.extend)(true, {}, userCommonSettings, userCommonSettings[type], userOptions);
            seriesVisibility = userOptions.visible;
            userCommonSettings = {
              type: {}
            };
            (0, _extend.extend)(true, userOptions, userOptions.point);
            userOptions.visible = seriesVisibility;
          }
          var settings = (0, _extend.extend)(true, {
            aggregation: {}
          }, themeCommonSettings, themeCommonSettings[type], userCommonSettings, userCommonSettings[type], userOptions);
          settings.aggregation.enabled = "chart" === widgetType && !!settings.aggregation.enabled;
          settings.type = type;
          settings.widgetType = widgetType;
          settings.containerBackgroundColor = containerBackgroundColor;
          if ("pie" !== widgetType) {
            mainSeriesColor = (0, _utils.extractColor)(settings.color, true) || palette.getNextColor(seriesCount);
          } else {
            mainSeriesColor = function(argument, index, count) {
              var cat = "".concat(argument, "-").concat(index);
              if (!that.qe[cat]) {
                that.qe[cat] = palette.getNextColor(count);
              }
              return that.qe[cat];
            };
          }
          settings.mainSeriesColor = mainSeriesColor;
          settings.resolveLabelsOverlapping = resolveLabelsOverlapping;
          if (settings.label && (isLine || isArea && "rangearea" !== type || "scatter" === type)) {
            settings.label.position = "outside";
          }
          if (seriesTemplate) {
            settings.nameField = seriesTemplate.nameField;
          }
          return settings;
        },
        animation: function(name) {
          var userOptions = this.pc[name];
          userOptions = (0, _type.isPlainObject)(userOptions) ? userOptions : (0, _type.isDefined)(userOptions) ? {
            enabled: !!userOptions
          } : {};
          return mergeOptions.call(this, name, userOptions);
        },
        seriesTemplate: function() {
          var value = mergeOptions.call(this, "seriesTemplate");
          if (value) {
            value.nameField = value.nameField || "series";
          }
          return value;
        },
        zoomAndPan: function() {
          function parseOption(option) {
            option = (0, _utils.normalizeEnum)(option);
            var pan = "pan" === option || "both" === option;
            var zoom = "zoom" === option || "both" === option;
            return {
              pan,
              zoom,
              none: !pan && !zoom
            };
          }
          var options = mergeOptions.call(this, "zoomAndPan");
          return {
            valueAxis: parseOption(options.valueAxis),
            argumentAxis: parseOption(options.argumentAxis),
            dragToZoom: !!options.dragToZoom,
            dragBoxStyle: {
              class: "dxc-shutter",
              fill: options.dragBoxStyle.color,
              opacity: options.dragBoxStyle.opacity
            },
            panKey: options.panKey,
            allowMouseWheel: !!options.allowMouseWheel,
            allowTouchGestures: !!options.allowTouchGestures
          };
        }
      };
      return {
        Dc: "chart",
        ctor: function(params) {
          var that = this;
          that.callBase.apply(that, arguments);
          var options = params.options || {};
          that.pc = options;
          that.Oy = [];
          that.qe = {};
          that.dh = _common.noop;
        },
        dispose: function() {
          var that = this;
          that.palette && that.palette.dispose();
          that.palette = that.pc = that.fg = that.qe = null;
          return that.callBase.apply(that, arguments);
        },
        resetPalette: function() {
          this.palette.reset();
          this.qe = {};
        },
        getOptions: function(name) {
          return (applyParticularTheme[name] || applyParticularTheme.base).apply(this, arguments);
        },
        refresh: function() {
          this.fg = {};
          return this.callBase.apply(this, arguments);
        },
        Xj: function() {
          var that = this;
          that.callBase.apply(that, arguments);
          that.updatePalette();
        },
        resetOptions: function(name) {
          this.fg[name] = null;
        },
        update: function(options) {
          this.pc = options;
        },
        updatePalette: function() {
          this.palette = this.createPalette(this.getOptions("palette"), {
            useHighlight: true,
            extensionMode: this.getOptions("paletteExtensionMode")
          });
        }
      };
    }());
    exports.ThemeManager = ThemeManager;
  }
});

// node_modules/devextreme/cjs/viz/chart_components/layout_manager.js
var require_layout_manager = __commonJS({
  "node_modules/devextreme/cjs/viz/chart_components/layout_manager.js"(exports) {
    "use strict";
    exports.LayoutManager = LayoutManager;
    var _type = require_type();
    var _consts = _interopRequireDefault(require_consts());
    var _layout_element = require_layout_element();
    function _interopRequireDefault(obj) {
      return obj && obj.j ? obj : {
        default: obj
      };
    }
    var floor = Math.floor, sqrt = Math.sqrt;
    var _min = Math.min;
    var _max = Math.max;
    var DEFAULT_INNER_RADIUS = 0.5;
    var RADIAL_LABEL_INDENT = _consts.default.radialLabelIndent;
    function getNearestCoord(firstCoord, secondCoord, pointCenterCoord) {
      var nearestCoord;
      if (pointCenterCoord < firstCoord) {
        nearestCoord = firstCoord;
      } else if (secondCoord < pointCenterCoord) {
        nearestCoord = secondCoord;
      } else {
        nearestCoord = pointCenterCoord;
      }
      return nearestCoord;
    }
    function getLabelLayout(point) {
      if (point.C.isVisible() && "inside" !== point.C.getLayoutOptions().position) {
        return point.C.getBoundingRect();
      }
    }
    function getPieRadius(series, paneCenterX, paneCenterY, accessibleRadius, minR) {
      series.some(function(singleSeries) {
        return singleSeries.getVisiblePoints().reduce(function(radiusIsFound, point) {
          var labelBBox = getLabelLayout(point);
          if (labelBBox) {
            var xCoords = getNearestCoord(labelBBox.x, labelBBox.x + labelBBox.width, paneCenterX);
            var yCoords = getNearestCoord(labelBBox.y, labelBBox.y + labelBBox.height, paneCenterY);
            accessibleRadius = _min(_max(getLengthFromCenter(xCoords, yCoords, paneCenterX, paneCenterY) - RADIAL_LABEL_INDENT, minR), accessibleRadius);
            radiusIsFound = true;
          }
          return radiusIsFound;
        }, false);
      });
      return accessibleRadius;
    }
    function getSizeLabels(series) {
      return series.reduce(function(res, singleSeries) {
        var maxWidth = singleSeries.getVisiblePoints().reduce(function(width, point) {
          var labelBBox = getLabelLayout(point);
          if (labelBBox && labelBBox.width > width) {
            width = labelBBox.width;
          }
          return width;
        }, 0);
        var rWidth = maxWidth;
        if (maxWidth) {
          res.outerLabelsCount++;
          if (res.outerLabelsCount > 1) {
            maxWidth += _consts.default.pieLabelSpacing;
          }
          rWidth += _consts.default.pieLabelSpacing;
        }
        res.sizes.push(maxWidth);
        res.rSizes.push(rWidth);
        res.common += maxWidth;
        return res;
      }, {
        sizes: [],
        rSizes: [],
        common: 0,
        outerLabelsCount: 0
      });
    }
    function correctLabelRadius(labelSizes, radius, series, canvas, averageWidthLabels, centerX) {
      var curRadius;
      var i;
      var runningWidth = 0;
      var sizes = labelSizes.sizes;
      var rSizes = labelSizes.rSizes;
      for (i = 0; i < series.length; i++) {
        if (0 === sizes[i]) {
          curRadius && (curRadius += rSizes[i - 1]);
          continue;
        }
        curRadius = floor(curRadius ? curRadius + rSizes[i - 1] : radius);
        series[i].correctLabelRadius(curRadius);
        runningWidth += averageWidthLabels || sizes[i];
        rSizes[i] = averageWidthLabels || rSizes[i];
        series[i].setVisibleArea({
          left: floor(centerX - radius - runningWidth),
          right: floor(canvas.width - (centerX + radius + runningWidth)),
          top: canvas.top,
          bottom: canvas.bottom,
          width: canvas.width,
          height: canvas.height
        });
      }
    }
    function getLengthFromCenter(x, y, paneCenterX, paneCenterY) {
      return sqrt((x - paneCenterX) * (x - paneCenterX) + (y - paneCenterY) * (y - paneCenterY));
    }
    function getInnerRadius(_ref) {
      var type = _ref.type, innerRadius = _ref.innerRadius;
      return "pie" === type ? 0 : (0, _type.isNumeric)(innerRadius) ? Number(innerRadius) : DEFAULT_INNER_RADIUS;
    }
    function LayoutManager() {
    }
    function getAverageLabelWidth(centerX, radius, canvas, sizeLabels) {
      return (centerX - radius - RADIAL_LABEL_INDENT - canvas.left) / sizeLabels.outerLabelsCount;
    }
    function getFullRadiusWithLabels(centerX, canvas, sizeLabels) {
      return centerX - canvas.left - (sizeLabels.outerLabelsCount > 0 ? sizeLabels.common + RADIAL_LABEL_INDENT : 0);
    }
    function correctAvailableRadius(availableRadius, canvas, series, minR, paneCenterX, paneCenterY) {
      var sizeLabels = getSizeLabels(series);
      var averageWidthLabels;
      var fullRadiusWithLabels = getFullRadiusWithLabels(paneCenterX, canvas, sizeLabels);
      if (fullRadiusWithLabels < minR) {
        availableRadius = minR;
        averageWidthLabels = getAverageLabelWidth(paneCenterX, availableRadius, canvas, sizeLabels);
      } else {
        availableRadius = _min(getPieRadius(series, paneCenterX, paneCenterY, availableRadius, minR), fullRadiusWithLabels);
      }
      correctLabelRadius(sizeLabels, availableRadius + RADIAL_LABEL_INDENT, series, canvas, averageWidthLabels, paneCenterX);
      return availableRadius;
    }
    function toLayoutElementCoords(canvas) {
      return new _layout_element.WrapperLayoutElement(null, {
        x: canvas.left,
        y: canvas.top,
        width: canvas.width - canvas.left - canvas.right,
        height: canvas.height - canvas.top - canvas.bottom
      });
    }
    LayoutManager.prototype = {
      constructor: LayoutManager,
      setOptions: function(options) {
        this.e = options;
      },
      applyPieChartSeriesLayout: function(canvas, series, hideLayoutLabels) {
        var paneSpaceHeight = canvas.height - canvas.top - canvas.bottom;
        var paneSpaceWidth = canvas.width - canvas.left - canvas.right;
        var paneCenterX = paneSpaceWidth / 2 + canvas.left;
        var paneCenterY = paneSpaceHeight / 2 + canvas.top;
        var piePercentage = this.e.piePercentage;
        var availableRadius;
        var minR;
        if ((0, _type.isNumeric)(piePercentage)) {
          availableRadius = minR = piePercentage * _min(canvas.height, canvas.width) / 2;
        } else {
          availableRadius = _min(paneSpaceWidth, paneSpaceHeight) / 2;
          minR = this.e.minPiePercentage * availableRadius;
        }
        if (!hideLayoutLabels) {
          availableRadius = correctAvailableRadius(availableRadius, canvas, series, minR, paneCenterX, paneCenterY);
        }
        return {
          centerX: floor(paneCenterX),
          centerY: floor(paneCenterY),
          radiusInner: floor(availableRadius * getInnerRadius(series[0])),
          radiusOuter: floor(availableRadius)
        };
      },
      applyEqualPieChartLayout: function(series, layout) {
        var radius = layout.radius;
        return {
          centerX: floor(layout.x),
          centerY: floor(layout.y),
          radiusInner: floor(radius * getInnerRadius(series[0])),
          radiusOuter: floor(radius)
        };
      },
      correctPieLabelRadius: function(series, layout, canvas) {
        var sizeLabels = getSizeLabels(series);
        var averageWidthLabels;
        var radius = layout.radiusOuter + RADIAL_LABEL_INDENT;
        var availableLabelWidth = layout.centerX - canvas.left - radius;
        if (sizeLabels.common + RADIAL_LABEL_INDENT > availableLabelWidth) {
          averageWidthLabels = getAverageLabelWidth(layout.centerX, layout.radiusOuter, canvas, sizeLabels);
        }
        correctLabelRadius(sizeLabels, radius, series, canvas, averageWidthLabels, layout.centerX);
      },
      needMoreSpaceForPanesCanvas: function(panes, rotated, fixedSizeCallback) {
        var options = this.e;
        var width = options.width;
        var height = options.height;
        var piePercentage = options.piePercentage;
        var percentageIsValid = (0, _type.isNumeric)(piePercentage);
        var needHorizontalSpace = 0;
        var needVerticalSpace = 0;
        panes.forEach(function(pane) {
          var paneCanvas = pane.canvas;
          var minSize = percentageIsValid ? _min(paneCanvas.width, paneCanvas.height) * piePercentage : void 0;
          var paneSized = fixedSizeCallback ? fixedSizeCallback(pane) : {
            width: false,
            height: false
          };
          var needPaneHorizontalSpace = !paneSized.width ? (percentageIsValid ? minSize : width) - (paneCanvas.width - paneCanvas.left - paneCanvas.right) : 0;
          var needPaneVerticalSpace = !paneSized.height ? (percentageIsValid ? minSize : height) - (paneCanvas.height - paneCanvas.top - paneCanvas.bottom) : 0;
          if (rotated) {
            needHorizontalSpace += needPaneHorizontalSpace > 0 ? needPaneHorizontalSpace : 0;
            needVerticalSpace = _max(needPaneVerticalSpace > 0 ? needPaneVerticalSpace : 0, needVerticalSpace);
          } else {
            needHorizontalSpace = _max(needPaneHorizontalSpace > 0 ? needPaneHorizontalSpace : 0, needHorizontalSpace);
            needVerticalSpace += needPaneVerticalSpace > 0 ? needPaneVerticalSpace : 0;
          }
        });
        return needHorizontalSpace > 0 || needVerticalSpace > 0 ? {
          width: needHorizontalSpace,
          height: needVerticalSpace
        } : false;
      },
      layoutInsideLegend: function(legend, canvas) {
        var layoutOptions = legend.getLayoutOptions();
        if (!layoutOptions) {
          return;
        }
        var position = layoutOptions.position;
        var cutSide = layoutOptions.cutSide;
        var my = {
          horizontal: position.horizontal,
          vertical: position.vertical
        };
        canvas[layoutOptions.cutLayoutSide] += "horizontal" === layoutOptions.cutSide ? layoutOptions.width : layoutOptions.height;
        my[cutSide] = {
          left: "right",
          right: "left",
          top: "bottom",
          bottom: "top",
          center: "center"
        }[my[cutSide]];
        legend.position({
          of: toLayoutElementCoords(canvas),
          my,
          at: position
        });
      }
    };
  }
});

// node_modules/devextreme/cjs/events/utils/event_nodes_disposing.js
var require_event_nodes_disposing = __commonJS({
  "node_modules/devextreme/cjs/events/utils/event_nodes_disposing.js"(exports) {
    "use strict";
    exports.unsubscribeNodesDisposing = exports.subscribeNodesDisposing = void 0;
    var _events_engine = _interopRequireDefault(require_events_engine());
    var _remove = require_remove();
    function _interopRequireDefault(obj) {
      return obj && obj.j ? obj : {
        default: obj
      };
    }
    function nodesByEvent(event) {
      return event && [event.target, event.delegateTarget, event.relatedTarget, event.currentTarget].filter(function(node) {
        return !!node;
      });
    }
    var subscribeNodesDisposing = function(event, callback) {
      _events_engine.default.one(nodesByEvent(event), _remove.removeEvent, callback);
    };
    exports.subscribeNodesDisposing = subscribeNodesDisposing;
    var unsubscribeNodesDisposing = function(event, callback) {
      _events_engine.default.off(nodesByEvent(event), _remove.removeEvent, callback);
    };
    exports.unsubscribeNodesDisposing = unsubscribeNodesDisposing;
  }
});

// node_modules/devextreme/cjs/core/utils/support.js
var require_support = __commonJS({
  "node_modules/devextreme/cjs/core/utils/support.js"(exports) {
    "use strict";
    exports.pointerEvents = exports.nativeScrolling = exports.inputType = exports.animation = void 0;
    Object.defineProperty(exports, "styleProp", {
      enumerable: true,
      get: function() {
        return _style.styleProp;
      }
    });
    Object.defineProperty(exports, "stylePropPrefix", {
      enumerable: true,
      get: function() {
        return _style.stylePropPrefix;
      }
    });
    exports.transitionEndEventName = exports.transition = exports.touchEvents = exports.touch = exports.supportProp = void 0;
    var _dom_adapter = _interopRequireDefault(require_dom_adapter());
    var _call_once = _interopRequireDefault(require_call_once());
    var _window = require_window();
    var _devices = _interopRequireDefault(require_devices());
    var _style = require_style();
    function _interopRequireDefault(obj) {
      return obj && obj.j ? obj : {
        default: obj
      };
    }
    var _getNavigator = (0, _window.getNavigator)(), maxTouchPoints = _getNavigator.maxTouchPoints;
    var transitionEndEventNames = {
      webkitTransition: "webkitTransitionEnd",
      MozTransition: "transitionend",
      OTransition: "oTransitionEnd",
      transition: "transitionend"
    };
    var supportProp = function(prop) {
      return !!(0, _style.styleProp)(prop);
    };
    exports.supportProp = supportProp;
    var isNativeScrollingSupported = function() {
      var _devices$real = _devices.default.real(), platform = _devices$real.platform, isMac = _devices$real.mac;
      var isNativeScrollDevice = "ios" === platform || "android" === platform || isMac;
      return isNativeScrollDevice;
    };
    var inputType = function(type) {
      if ("text" === type) {
        return true;
      }
      var input = _dom_adapter.default.createElement("input");
      try {
        input.setAttribute("type", type);
        input.value = "wrongValue";
        return !input.value;
      } catch (e) {
        return false;
      }
    };
    exports.inputType = inputType;
    var detectTouchEvents = function(hasWindowProperty, maxTouchPoints2) {
      return (hasWindowProperty("ontouchstart") || !!maxTouchPoints2) && !hasWindowProperty("callPhantom");
    };
    var detectPointerEvent = function(hasWindowProperty) {
      return hasWindowProperty("PointerEvent");
    };
    var touchEvents = detectTouchEvents(_window.hasProperty, maxTouchPoints);
    exports.touchEvents = touchEvents;
    var pointerEvents = detectPointerEvent(_window.hasProperty);
    exports.pointerEvents = pointerEvents;
    var touchPointersPresent = !!maxTouchPoints;
    var touch = touchEvents || pointerEvents && touchPointersPresent;
    exports.touch = touch;
    var transition = (0, _call_once.default)(function() {
      return supportProp("transition");
    });
    exports.transition = transition;
    var transitionEndEventName = (0, _call_once.default)(function() {
      return transitionEndEventNames[(0, _style.styleProp)("transition")];
    });
    exports.transitionEndEventName = transitionEndEventName;
    var animation = (0, _call_once.default)(function() {
      return supportProp("animation");
    });
    exports.animation = animation;
    var nativeScrolling = isNativeScrollingSupported();
    exports.nativeScrolling = nativeScrolling;
  }
});

// node_modules/devextreme/cjs/core/utils/browser.js
var require_browser = __commonJS({
  "node_modules/devextreme/cjs/core/utils/browser.js"(exports, module) {
    "use strict";
    exports.default = void 0;
    var _extend = require_extend();
    var _window = require_window();
    var navigator2 = (0, _window.getNavigator)();
    var webkitRegExp = /(webkit)[ /]([\w.]+)/;
    var mozillaRegExp = /(mozilla)(?:.*? rv:([\w.]+))/;
    var browserFromUA = function(ua) {
      ua = ua.toLowerCase();
      var result = {};
      var matches = webkitRegExp.exec(ua) || ua.indexOf("compatible") < 0 && mozillaRegExp.exec(ua) || [];
      var browserName = matches[1];
      var browserVersion = matches[2];
      if ("webkit" === browserName) {
        result.webkit = true;
        if (ua.indexOf("chrome") >= 0 || ua.indexOf("crios") >= 0) {
          browserName = "chrome";
          browserVersion = /(?:chrome|crios)\/(\d+\.\d+)/.exec(ua);
          browserVersion = browserVersion && browserVersion[1];
        } else if (ua.indexOf("fxios") >= 0) {
          browserName = "mozilla";
          browserVersion = /fxios\/(\d+\.\d+)/.exec(ua);
          browserVersion = browserVersion && browserVersion[1];
        } else if (ua.indexOf("safari") >= 0 && /version|phantomjs/.test(ua)) {
          browserName = "safari";
          browserVersion = /(?:version|phantomjs)\/([0-9.]+)/.exec(ua);
          browserVersion = browserVersion && browserVersion[1];
        } else {
          browserName = "unknown";
          browserVersion = /applewebkit\/([0-9.]+)/.exec(ua);
          browserVersion = browserVersion && browserVersion[1];
        }
      }
      if (browserName) {
        result[browserName] = true;
        result.version = browserVersion;
      }
      return result;
    };
    var _default = (0, _extend.extend)({
      Vj: browserFromUA
    }, browserFromUA(navigator2.userAgent));
    exports.default = _default;
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/devextreme/cjs/events/pointer/base.js
var require_base = __commonJS({
  "node_modules/devextreme/cjs/events/pointer/base.js"(exports, module) {
    "use strict";
    exports.default = void 0;
    var _events_engine = _interopRequireDefault(require_events_engine());
    var _browser = _interopRequireDefault(require_browser());
    var _dom_adapter = _interopRequireDefault(require_dom_adapter());
    var _class = _interopRequireDefault(require_class());
    var _index = require_utils2();
    function _interopRequireDefault(obj) {
      return obj && obj.j ? obj : {
        default: obj
      };
    }
    var POINTER_EVENTS_NAMESPACE = "dxPointerEvents";
    var BaseStrategy = _class.default.inherit({
      ctor: function(eventName, originalEvents) {
        this.ld = eventName;
        this.gg = (0, _index.addNamespace)(originalEvents, POINTER_EVENTS_NAMESPACE);
        this.hg = 0;
        this.noBubble = this.Yt();
      },
      Yt: function() {
        var eventName = this.ld;
        return "dxpointerenter" === eventName || "dxpointerleave" === eventName;
      },
      tb: function(e) {
        var _originalEvent$target;
        var delegateTarget = this.Zt(e);
        var event = {
          type: this.ld,
          pointerType: e.pointerType || (0, _index.eventSource)(e),
          originalEvent: e,
          delegateTarget,
          timeStamp: _browser.default.mozilla ? (/* @__PURE__ */ new Date()).getTime() : e.timeStamp
        };
        var originalEvent = e.originalEvent;
        if (null !== originalEvent && void 0 !== originalEvent && null !== (_originalEvent$target = originalEvent.target) && void 0 !== _originalEvent$target && _originalEvent$target.shadowRoot) {
          var _originalEvent$path, _originalEvent$compos;
          var path = null !== (_originalEvent$path = originalEvent.path) && void 0 !== _originalEvent$path ? _originalEvent$path : null === (_originalEvent$compos = originalEvent.composedPath) || void 0 === _originalEvent$compos ? void 0 : _originalEvent$compos.call(originalEvent);
          event.target = path[0];
        }
        return this.Rb(event);
      },
      Zt: function(e) {
        var delegateTarget;
        if (this.noBubble) {
          delegateTarget = e.delegateTarget;
        }
        return delegateTarget;
      },
      Rb: function(args) {
        return (0, _index.fireEvent)(args);
      },
      Um: function(handleObj) {
        this._t = this.noBubble && handleObj ? handleObj.selector : null;
      },
      Vm: function() {
        return this._t;
      },
      setup: function() {
        return true;
      },
      add: function(element, handleObj) {
        if (this.hg <= 0 || this.noBubble) {
          element = this.noBubble ? element : _dom_adapter.default.getDocument();
          this.Um(handleObj);
          var that = this;
          _events_engine.default.on(element, this.gg, this.Vm(), function(e) {
            that.tb(e);
          });
        }
        if (!this.noBubble) {
          this.hg++;
        }
      },
      remove: function(handleObj) {
        this.Um(handleObj);
        if (!this.noBubble) {
          this.hg--;
        }
      },
      teardown: function(element) {
        if (this.hg && !this.noBubble) {
          return;
        }
        element = this.noBubble ? element : _dom_adapter.default.getDocument();
        if (this.gg !== "." + POINTER_EVENTS_NAMESPACE) {
          _events_engine.default.off(element, this.gg, this.Vm());
        }
      },
      dispose: function(element) {
        element = this.noBubble ? element : _dom_adapter.default.getDocument();
        _events_engine.default.off(element, this.gg);
      }
    });
    var _default = BaseStrategy;
    exports.default = _default;
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/devextreme/cjs/events/pointer/touch.js
var require_touch = __commonJS({
  "node_modules/devextreme/cjs/events/pointer/touch.js"(exports, module) {
    "use strict";
    exports.default = void 0;
    var _devices = _interopRequireDefault(require_devices());
    var _extend = require_extend();
    var _iterator = require_iterator();
    var _base = _interopRequireDefault(require_base());
    function _interopRequireDefault(obj) {
      return obj && obj.j ? obj : {
        default: obj
      };
    }
    var eventMap = {
      dxpointerdown: "touchstart",
      dxpointermove: "touchmove",
      dxpointerup: "touchend",
      dxpointercancel: "touchcancel",
      dxpointerover: "",
      dxpointerout: "",
      dxpointerenter: "",
      dxpointerleave: ""
    };
    var normalizeTouchEvent = function(e) {
      var pointers = [];
      (0, _iterator.each)(e.touches, function(_, touch) {
        pointers.push((0, _extend.extend)({
          pointerId: touch.identifier
        }, touch));
      });
      return {
        pointers,
        pointerId: e.changedTouches[0].identifier
      };
    };
    var skipTouchWithSameIdentifier = function(pointerEvent) {
      return "ios" === _devices.default.real().platform && ("dxpointerdown" === pointerEvent || "dxpointerup" === pointerEvent);
    };
    var TouchStrategy = _base.default.inherit({
      ctor: function() {
        this.callBase.apply(this, arguments);
        this.Ei = 0;
      },
      tb: function(e) {
        if (skipTouchWithSameIdentifier(this.ld)) {
          var touch = e.changedTouches[0];
          if (this.Ei === touch.identifier && 0 !== this.Ei) {
            return;
          }
          this.Ei = touch.identifier;
        }
        return this.callBase.apply(this, arguments);
      },
      Rb: function(args) {
        return this.callBase((0, _extend.extend)(normalizeTouchEvent(args.originalEvent), args));
      }
    });
    TouchStrategy.map = eventMap;
    TouchStrategy.normalize = normalizeTouchEvent;
    var _default = TouchStrategy;
    exports.default = _default;
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/devextreme/cjs/events/pointer/observer.js
var require_observer = __commonJS({
  "node_modules/devextreme/cjs/events/pointer/observer.js"(exports, module) {
    "use strict";
    exports.default = void 0;
    var _iterator = require_iterator();
    var _ready_callbacks = _interopRequireDefault(require_ready_callbacks());
    var _dom_adapter = _interopRequireDefault(require_dom_adapter());
    function _interopRequireDefault(obj) {
      return obj && obj.j ? obj : {
        default: obj
      };
    }
    var addEventsListener = function(events, handler) {
      _ready_callbacks.default.add(function() {
        events.split(" ").forEach(function(event) {
          _dom_adapter.default.listen(_dom_adapter.default.getDocument(), event, handler, true);
        });
      });
    };
    var Observer = function(eventMap, pointerEquals, onPointerAdding) {
      onPointerAdding = onPointerAdding || function() {
      };
      var pointers = [];
      var getPointerIndex = function(e) {
        var index = -1;
        (0, _iterator.each)(pointers, function(i, pointer) {
          if (!pointerEquals(e, pointer)) {
            return true;
          }
          index = i;
          return false;
        });
        return index;
      };
      var removePointer = function(e) {
        var index = getPointerIndex(e);
        if (index > -1) {
          pointers.splice(index, 1);
        }
      };
      addEventsListener(eventMap.dxpointerdown, function(e) {
        if (-1 === getPointerIndex(e)) {
          onPointerAdding(e);
          pointers.push(e);
        }
      });
      addEventsListener(eventMap.dxpointermove, function(e) {
        pointers[getPointerIndex(e)] = e;
      });
      addEventsListener(eventMap.dxpointerup, removePointer);
      addEventsListener(eventMap.dxpointercancel, removePointer);
      this.pointers = function() {
        return pointers;
      };
      this.reset = function() {
        pointers = [];
      };
    };
    var _default = Observer;
    exports.default = _default;
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/devextreme/cjs/events/pointer/mouse.js
var require_mouse = __commonJS({
  "node_modules/devextreme/cjs/events/pointer/mouse.js"(exports, module) {
    "use strict";
    exports.default = void 0;
    var _extend = require_extend();
    var _base = _interopRequireDefault(require_base());
    var _observer = _interopRequireDefault(require_observer());
    function _interopRequireDefault(obj) {
      return obj && obj.j ? obj : {
        default: obj
      };
    }
    var eventMap = {
      dxpointerdown: "mousedown",
      dxpointermove: "mousemove",
      dxpointerup: "mouseup",
      dxpointercancel: "",
      dxpointerover: "mouseover",
      dxpointerout: "mouseout",
      dxpointerenter: "mouseenter",
      dxpointerleave: "mouseleave"
    };
    var normalizeMouseEvent = function(e) {
      e.pointerId = 1;
      return {
        pointers: observer.pointers(),
        pointerId: 1
      };
    };
    var observer;
    var activated = false;
    var activateStrategy = function() {
      if (activated) {
        return;
      }
      observer = new _observer.default(eventMap, function() {
        return true;
      });
      activated = true;
    };
    var MouseStrategy = _base.default.inherit({
      ctor: function() {
        this.callBase.apply(this, arguments);
        activateStrategy();
      },
      Rb: function(args) {
        return this.callBase((0, _extend.extend)(normalizeMouseEvent(args.originalEvent), args));
      }
    });
    MouseStrategy.map = eventMap;
    MouseStrategy.normalize = normalizeMouseEvent;
    MouseStrategy.activate = activateStrategy;
    MouseStrategy.resetObserver = function() {
      observer.reset();
    };
    var _default = MouseStrategy;
    exports.default = _default;
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/devextreme/cjs/events/pointer/mouse_and_touch.js
var require_mouse_and_touch = __commonJS({
  "node_modules/devextreme/cjs/events/pointer/mouse_and_touch.js"(exports, module) {
    "use strict";
    exports.default = void 0;
    var _extend = require_extend();
    var _base = _interopRequireDefault(require_base());
    var _mouse = _interopRequireDefault(require_mouse());
    var _touch = _interopRequireDefault(require_touch());
    var _index = require_utils2();
    function _interopRequireDefault(obj) {
      return obj && obj.j ? obj : {
        default: obj
      };
    }
    var eventMap = {
      dxpointerdown: "touchstart mousedown",
      dxpointermove: "touchmove mousemove",
      dxpointerup: "touchend mouseup",
      dxpointercancel: "touchcancel",
      dxpointerover: "mouseover",
      dxpointerout: "mouseout",
      dxpointerenter: "mouseenter",
      dxpointerleave: "mouseleave"
    };
    var activated = false;
    var activateStrategy = function() {
      if (activated) {
        return;
      }
      _mouse.default.activate();
      activated = true;
    };
    var MouseAndTouchStrategy = _base.default.inherit({
      EVENT_LOCK_TIMEOUT: 100,
      ctor: function() {
        this.callBase.apply(this, arguments);
        activateStrategy();
      },
      tb: function(e) {
        var isMouse = (0, _index.isMouseEvent)(e);
        if (!isMouse) {
          this.Fi = true;
        }
        if (isMouse && this.Gi) {
          return;
        }
        if (isMouse && this.Fi) {
          this.Fi = false;
          this.Gi = true;
          clearTimeout(this.Wm);
          var that = this;
          this.Wm = setTimeout(function() {
            that.Gi = false;
          }, this.EVENT_LOCK_TIMEOUT);
          return;
        }
        return this.callBase(e);
      },
      Rb: function(args) {
        var normalizer = (0, _index.isMouseEvent)(args.originalEvent) ? _mouse.default.normalize : _touch.default.normalize;
        return this.callBase((0, _extend.extend)(normalizer(args.originalEvent), args));
      },
      dispose: function() {
        this.callBase();
        this.Fi = false;
        this.Gi = false;
        clearTimeout(this.Wm);
      }
    });
    MouseAndTouchStrategy.map = eventMap;
    MouseAndTouchStrategy.resetObserver = _mouse.default.resetObserver;
    var _default = MouseAndTouchStrategy;
    exports.default = _default;
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/devextreme/cjs/events/pointer.js
var require_pointer = __commonJS({
  "node_modules/devextreme/cjs/events/pointer.js"(exports, module) {
    "use strict";
    function _typeof(obj) {
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    exports.default = void 0;
    var support = _interopRequireWildcard(require_support());
    var _iterator = require_iterator();
    var _devices = _interopRequireDefault(require_devices());
    var _event_registrator = _interopRequireDefault(require_event_registrator());
    var _touch = _interopRequireDefault(require_touch());
    var _mouse = _interopRequireDefault(require_mouse());
    var _mouse_and_touch = _interopRequireDefault(require_mouse_and_touch());
    function _interopRequireDefault(obj) {
      return obj && obj.j ? obj : {
        default: obj
      };
    }
    function _getRequireWildcardCache(nodeInterop) {
      if ("function" !== typeof WeakMap) {
        return null;
      }
      var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
      var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
      return (_getRequireWildcardCache = function(nodeInterop2) {
        return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }
    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.j) {
        return obj;
      }
      if (null === obj || "object" !== _typeof(obj) && "function" !== typeof obj) {
        return {
          default: obj
        };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if ("default" !== key && Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    var getStrategy = function(support2, device) {
      var tablet = device.tablet, phone = device.phone;
      if (support2.touch && !(tablet || phone)) {
        return _mouse_and_touch.default;
      }
      if (support2.touch) {
        return _touch.default;
      }
      return _mouse.default;
    };
    var EventStrategy = getStrategy(support, _devices.default.real());
    (0, _iterator.each)(EventStrategy.map, function(pointerEvent, originalEvents) {
      (0, _event_registrator.default)(pointerEvent, new EventStrategy(pointerEvent, originalEvents));
    });
    var pointer = {
      down: "dxpointerdown",
      up: "dxpointerup",
      move: "dxpointermove",
      cancel: "dxpointercancel",
      enter: "dxpointerenter",
      leave: "dxpointerleave",
      over: "dxpointerover",
      out: "dxpointerout"
    };
    var _default = pointer;
    exports.default = _default;
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/devextreme/cjs/events/core/emitter.js
var require_emitter = __commonJS({
  "node_modules/devextreme/cjs/events/core/emitter.js"(exports, module) {
    "use strict";
    exports.default = void 0;
    var _renderer = _interopRequireDefault(require_renderer());
    var _common = require_common();
    var _class = _interopRequireDefault(require_class());
    var _callbacks = _interopRequireDefault(require_callbacks());
    var _extend = require_extend();
    var _index = require_utils2();
    function _interopRequireDefault(obj) {
      return obj && obj.j ? obj : {
        default: obj
      };
    }
    var Emitter = _class.default.inherit({
      ctor: function(element) {
        this.Ba = (0, _renderer.default)(element);
        this.Hi = (0, _callbacks.default)();
        this.Ii = (0, _callbacks.default)();
      },
      getElement: function() {
        return this.Ba;
      },
      validate: function(e) {
        return !(0, _index.isDxMouseWheelEvent)(e);
      },
      validatePointers: function(e) {
        return 1 === (0, _index.hasTouches)(e);
      },
      allowInterruptionByMouseWheel: function() {
        return true;
      },
      configure: function(data) {
        (0, _extend.extend)(this, data);
      },
      addCancelCallback: function(callback) {
        this.Hi.add(callback);
      },
      removeCancelCallback: function() {
        this.Hi.empty();
      },
      Ji: function(e) {
        this.Hi.fire(this, e);
      },
      addAcceptCallback: function(callback) {
        this.Ii.add(callback);
      },
      removeAcceptCallback: function() {
        this.Ii.empty();
      },
      Xm: function(e) {
        this.Ii.fire(this, e);
      },
      $t: function(e) {
        this.jg = e;
      },
      au: function() {
        this.Xm(this.jg);
        this.jg = null;
      },
      start: _common.noop,
      move: _common.noop,
      end: _common.noop,
      cancel: _common.noop,
      reset: function() {
        if (this.jg) {
          this.Xm(this.jg);
        }
      },
      Rb: function(eventName, e, params) {
        var eventData = (0, _extend.extend)({
          type: eventName,
          originalEvent: e,
          target: this.bu(e),
          delegateTarget: this.getElement().get(0)
        }, params);
        e = (0, _index.fireEvent)(eventData);
        if (e.cancel) {
          this.Ji(e);
        }
        return e;
      },
      bu: function(e) {
        return (this.delegateSelector ? (0, _renderer.default)(e.target).closest(this.delegateSelector) : this.getElement()).get(0);
      },
      dispose: _common.noop
    });
    var _default = Emitter;
    exports.default = _default;
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/devextreme/cjs/events/core/wheel.js
var require_wheel = __commonJS({
  "node_modules/devextreme/cjs/events/core/wheel.js"(exports) {
    "use strict";
    exports.name = void 0;
    var _renderer = _interopRequireDefault(require_renderer());
    var _events_engine = _interopRequireDefault(require_events_engine());
    var _event_registrator = _interopRequireDefault(require_event_registrator());
    var _index = require_utils2();
    function _interopRequireDefault(obj) {
      return obj && obj.j ? obj : {
        default: obj
      };
    }
    var EVENT_NAME = "dxmousewheel";
    exports.name = EVENT_NAME;
    var EVENT_NAMESPACE = "dxWheel";
    var NATIVE_EVENT_NAME = "wheel";
    var PIXEL_MODE = 0;
    var DELTA_MUTLIPLIER = 30;
    var wheel = {
      setup: function(element) {
        var $element = (0, _renderer.default)(element);
        _events_engine.default.on($element, (0, _index.addNamespace)(NATIVE_EVENT_NAME, EVENT_NAMESPACE), wheel.cu.bind(wheel));
      },
      teardown: function(element) {
        _events_engine.default.off(element, ".".concat(EVENT_NAMESPACE));
      },
      cu: function(e) {
        var _e$originalEvent = e.originalEvent, deltaMode = _e$originalEvent.deltaMode, deltaY = _e$originalEvent.deltaY, deltaX = _e$originalEvent.deltaX, deltaZ = _e$originalEvent.deltaZ;
        (0, _index.fireEvent)({
          type: EVENT_NAME,
          originalEvent: e,
          delta: this.du(deltaY, deltaMode),
          deltaX,
          deltaY,
          deltaZ,
          deltaMode,
          pointerType: "mouse"
        });
        e.stopPropagation();
      },
      du: function(delta) {
        var deltaMode = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : PIXEL_MODE;
        if (deltaMode === PIXEL_MODE) {
          return -delta;
        } else {
          return -DELTA_MUTLIPLIER * delta;
        }
      }
    };
    (0, _event_registrator.default)(EVENT_NAME, wheel);
  }
});

// node_modules/devextreme/cjs/events/core/emitter_registrator.js
var require_emitter_registrator = __commonJS({
  "node_modules/devextreme/cjs/events/core/emitter_registrator.js"(exports, module) {
    "use strict";
    exports.default = void 0;
    var _renderer = _interopRequireDefault(require_renderer());
    var _ready_callbacks = _interopRequireDefault(require_ready_callbacks());
    var _dom_adapter = _interopRequireDefault(require_dom_adapter());
    var _events_engine = _interopRequireDefault(require_events_engine());
    var _element_data = require_element_data();
    var _class = _interopRequireDefault(require_class());
    var _extend = require_extend();
    var _iterator = require_iterator();
    var _event_registrator = _interopRequireDefault(require_event_registrator());
    var _index = require_utils2();
    var _pointer = _interopRequireDefault(require_pointer());
    var _wheel = require_wheel();
    function _interopRequireDefault(obj) {
      return obj && obj.j ? obj : {
        default: obj
      };
    }
    var MANAGER_EVENT = "dxEventManager";
    var EMITTER_DATA = "dxEmitter";
    var EventManager = _class.default.inherit({
      ctor: function() {
        this.fu();
        this.reset();
        this.Ki = this.iu.bind(this);
        this.ju = this.mu.bind(this);
      },
      fu: function() {
        _ready_callbacks.default.add(function() {
          var document2 = _dom_adapter.default.getDocument();
          _events_engine.default.subscribeGlobal(document2, (0, _index.addNamespace)(_pointer.default.down, MANAGER_EVENT), this.Ym.bind(this));
          _events_engine.default.subscribeGlobal(document2, (0, _index.addNamespace)(_pointer.default.move, MANAGER_EVENT), this.Zm.bind(this));
          _events_engine.default.subscribeGlobal(document2, (0, _index.addNamespace)([_pointer.default.up, _pointer.default.cancel].join(" "), MANAGER_EVENT), this._m.bind(this));
          _events_engine.default.subscribeGlobal(document2, (0, _index.addNamespace)(_wheel.name, MANAGER_EVENT), this.nu.bind(this));
        }.bind(this));
      },
      md: function(callback) {
        var activeEmitters = this.Li || [];
        var i = 0;
        while (activeEmitters.length > i) {
          var emitter = activeEmitters[i];
          if (false === callback(emitter)) {
            break;
          }
          if (activeEmitters[i] === emitter) {
            i++;
          }
        }
      },
      Mi: function(method, arg) {
        this.md(function(emitter) {
          emitter[method].call(emitter, arg);
        });
      },
      reset: function() {
        this.md(this.Ki);
        this.Li = [];
      },
      resetEmitter: function(emitter) {
        this.Ki(emitter);
      },
      Ym: function(e) {
        if ((0, _index.isMouseEvent)(e) && e.which > 1) {
          return;
        }
        this.$m(e);
      },
      $m: function(e) {
        if (!this.ou(e)) {
          return;
        }
        this.pu(e);
        this.tu(e);
      },
      ou: function(e) {
        var currentSet = this.uu(e);
        var previousSet = this.an || [];
        var setChanged = currentSet.length !== previousSet.length;
        (0, _iterator.each)(currentSet, function(index, emitter) {
          setChanged = setChanged || previousSet[index] !== emitter;
          return !setChanged;
        });
        this.an = currentSet;
        return setChanged;
      },
      uu: function(e) {
        var that = this;
        var result = [];
        var $element = (0, _renderer.default)(e.target);
        function handleEmitter(_, emitter) {
          if (!!emitter && emitter.validatePointers(e) && emitter.validate(e)) {
            emitter.addCancelCallback(that.Ki);
            emitter.addAcceptCallback(that.ju);
            result.push(emitter);
          }
        }
        while ($element.length) {
          var emitters = (0, _element_data.data)($element.get(0), EMITTER_DATA) || [];
          (0, _iterator.each)(emitters, handleEmitter);
          $element = $element.parent();
        }
        return result;
      },
      mu: function(acceptedEmitter, e) {
        var that = this;
        this.md(function(emitter) {
          if (emitter !== acceptedEmitter) {
            that.cn(emitter, e);
          }
        });
      },
      iu: function(canceledEmitter, e) {
        this.cn(canceledEmitter, e);
      },
      cn: function(emitter, e) {
        var activeEmitters = this.Li;
        if (e) {
          emitter.cancel(e);
        } else {
          emitter.reset();
        }
        emitter.removeCancelCallback();
        emitter.removeAcceptCallback();
        var emitterIndex = activeEmitters.indexOf(emitter);
        if (emitterIndex > -1) {
          activeEmitters.splice(emitterIndex, 1);
        }
      },
      pu: function(e) {
        this.Mi("end", e);
        this.reset(e);
      },
      tu: function(e) {
        this.Li = this.an.slice();
        this.Mi("start", e);
      },
      Zm: function(e) {
        this.Mi("move", e);
      },
      _m: function(e) {
        this.$m(e);
      },
      nu: function(e) {
        if (!this.vu()) {
          return;
        }
        e.pointers = [null];
        this.Ym(e);
        this.wu(e);
        this.Zm(e);
        e.pointers = [];
        this._m(e);
      },
      vu: function() {
        var allowInterruption = true;
        this.md(function(emitter) {
          allowInterruption = emitter.allowInterruptionByMouseWheel() && allowInterruption;
          return allowInterruption;
        });
        return allowInterruption;
      },
      wu: function(e) {
        var closestGestureEmitter = null;
        this.md(function(emitter) {
          if (!emitter.gesture) {
            return;
          }
          var direction2 = emitter.getDirection(e);
          if ("horizontal" !== direction2 && !e.shiftKey || "vertical" !== direction2 && e.shiftKey) {
            closestGestureEmitter = emitter;
            return false;
          }
        });
        if (!closestGestureEmitter) {
          return;
        }
        var direction = closestGestureEmitter.getDirection(e);
        var verticalGestureDirection = "both" === direction && !e.shiftKey || "vertical" === direction;
        var prop = verticalGestureDirection ? "pageY" : "pageX";
        e[prop] += e.delta;
      },
      isActive: function(element) {
        var result = false;
        this.md(function(emitter) {
          result = result || emitter.getElement().is(element);
        });
        return result;
      }
    });
    var eventManager = new EventManager();
    var EMITTER_SUBSCRIPTION_DATA = "dxEmitterSubscription";
    var registerEmitter = function(emitterConfig) {
      var emitterClass = emitterConfig.emitter;
      var emitterName = emitterConfig.events[0];
      var emitterEvents = emitterConfig.events;
      (0, _iterator.each)(emitterEvents, function(_, eventName) {
        (0, _event_registrator.default)(eventName, {
          noBubble: !emitterConfig.bubble,
          setup: function(element) {
            var subscriptions = (0, _element_data.data)(element, EMITTER_SUBSCRIPTION_DATA) || {};
            var emitters = (0, _element_data.data)(element, EMITTER_DATA) || {};
            var emitter = emitters[emitterName] || new emitterClass(element);
            subscriptions[eventName] = true;
            emitters[emitterName] = emitter;
            (0, _element_data.data)(element, EMITTER_DATA, emitters);
            (0, _element_data.data)(element, EMITTER_SUBSCRIPTION_DATA, subscriptions);
          },
          add: function(element, handleObj) {
            var emitters = (0, _element_data.data)(element, EMITTER_DATA);
            var emitter = emitters[emitterName];
            emitter.configure((0, _extend.extend)({
              delegateSelector: handleObj.selector
            }, handleObj.data), handleObj.type);
          },
          teardown: function(element) {
            var subscriptions = (0, _element_data.data)(element, EMITTER_SUBSCRIPTION_DATA);
            var emitters = (0, _element_data.data)(element, EMITTER_DATA);
            var emitter = emitters[emitterName];
            delete subscriptions[eventName];
            var disposeEmitter = true;
            (0, _iterator.each)(emitterEvents, function(_2, eventName2) {
              disposeEmitter = disposeEmitter && !subscriptions[eventName2];
              return disposeEmitter;
            });
            if (disposeEmitter) {
              if (eventManager.isActive(element)) {
                eventManager.resetEmitter(emitter);
              }
              emitter && emitter.dispose();
              delete emitters[emitterName];
            }
          }
        });
      });
    };
    var _default = registerEmitter;
    exports.default = _default;
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/devextreme/cjs/events/click.js
var require_click = __commonJS({
  "node_modules/devextreme/cjs/events/click.js"(exports) {
    "use strict";
    exports.name = void 0;
    var _renderer = _interopRequireDefault(require_renderer());
    var _events_engine = _interopRequireDefault(require_events_engine());
    var _devices = _interopRequireDefault(require_devices());
    var _dom_adapter = _interopRequireDefault(require_dom_adapter());
    var _dom = require_dom();
    var _frame = require_frame();
    var _index = require_utils2();
    var _event_nodes_disposing = require_event_nodes_disposing();
    var _pointer = _interopRequireDefault(require_pointer());
    var _emitter = _interopRequireDefault(require_emitter());
    var _emitter_registrator = _interopRequireDefault(require_emitter_registrator());
    function _interopRequireDefault(obj) {
      return obj && obj.j ? obj : {
        default: obj
      };
    }
    var CLICK_EVENT_NAME = "dxclick";
    exports.name = CLICK_EVENT_NAME;
    var misc = {
      requestAnimationFrame: _frame.requestAnimationFrame,
      cancelAnimationFrame: _frame.cancelAnimationFrame
    };
    var prevented = null;
    var lastFiredEvent = null;
    var onNodeRemove = function() {
      lastFiredEvent = null;
    };
    var clickHandler = function(e) {
      var originalEvent = e.originalEvent;
      var eventAlreadyFired = lastFiredEvent === originalEvent || originalEvent && originalEvent.DXCLICK_FIRED;
      var leftButton = !e.which || 1 === e.which;
      if (leftButton && !prevented && !eventAlreadyFired) {
        if (originalEvent) {
          originalEvent.DXCLICK_FIRED = true;
        }
        (0, _event_nodes_disposing.unsubscribeNodesDisposing)(lastFiredEvent, onNodeRemove);
        lastFiredEvent = originalEvent;
        (0, _event_nodes_disposing.subscribeNodesDisposing)(lastFiredEvent, onNodeRemove);
        (0, _index.fireEvent)({
          type: CLICK_EVENT_NAME,
          originalEvent: e
        });
      }
    };
    var ClickEmitter = _emitter.default.inherit({
      ctor: function(element) {
        this.callBase(element);
        _events_engine.default.on(this.getElement(), "click", clickHandler);
      },
      start: function(e) {
        prevented = null;
      },
      cancel: function() {
        prevented = true;
      },
      dispose: function() {
        _events_engine.default.off(this.getElement(), "click", clickHandler);
      }
    });
    !function() {
      var desktopDevice = _devices.default.real().generic;
      if (!desktopDevice) {
        var startTarget = null;
        var blurPrevented = false;
        var document2 = _dom_adapter.default.getDocument();
        _events_engine.default.subscribeGlobal(document2, (0, _index.addNamespace)(_pointer.default.down, "NATIVE_CLICK_FIXER"), function(e) {
          startTarget = e.target;
          blurPrevented = e.isDefaultPrevented();
        });
        _events_engine.default.subscribeGlobal(document2, (0, _index.addNamespace)("click", "NATIVE_CLICK_FIXER"), function(e) {
          var $target = (0, _renderer.default)(e.target);
          if (!blurPrevented && startTarget && !$target.is(startTarget) && !(0, _renderer.default)(startTarget).is("label") && (element = $target, (0, _renderer.default)(element).is("input, textarea, select, button ,:focus, :focus *"))) {
            (0, _dom.resetActiveElement)();
          }
          var element;
          startTarget = null;
          blurPrevented = false;
        });
      }
    }();
    (0, _emitter_registrator.default)({
      emitter: ClickEmitter,
      bubble: true,
      events: [CLICK_EVENT_NAME]
    });
  }
});

// node_modules/devextreme/cjs/viz/chart_components/tracker.js
var require_tracker = __commonJS({
  "node_modules/devextreme/cjs/viz/chart_components/tracker.js"(exports) {
    "use strict";
    exports.PieTracker = exports.ChartTracker = void 0;
    var _dom_adapter = _interopRequireDefault(require_dom_adapter());
    var _events_engine = _interopRequireDefault(require_events_engine());
    var _click = require_click();
    var _extend = require_extend();
    var _iterator = require_iterator();
    var _consts = _interopRequireDefault(require_consts());
    var _utils = require_utils();
    var _pointer = _interopRequireDefault(require_pointer());
    var _index = require_utils2();
    var _type = require_type();
    var _common = require_common();
    var _errors = _interopRequireDefault(require_errors());
    function _interopRequireDefault(obj) {
      return obj && obj.j ? obj : {
        default: obj
      };
    }
    var _floor = Math.floor;
    var eventsConsts = _consts.default.events;
    var statesConsts = _consts.default.states;
    var HOVER_STATE = statesConsts.hoverMark;
    var NORMAL_STATE = statesConsts.normalMark;
    var EVENT_NS = "dxChartTracker";
    var DOT_EVENT_NS = "." + EVENT_NS;
    var POINTER_ACTION = (0, _index.addNamespace)([_pointer.default.down, _pointer.default.move], EVENT_NS);
    var LEGEND_CLICK = "legendClick";
    var SERIES_CLICK = "seriesClick";
    var POINT_CLICK = "pointClick";
    var POINT_DATA = "chart-data-point";
    var SERIES_DATA = "chart-data-series";
    var ARG_DATA = "chart-data-argument";
    var DELAY = 100;
    var HOLD_TIMEOUT = 300;
    var NONE_MODE = "none";
    var ALL_ARGUMENT_POINTS_MODE = "allargumentpoints";
    var INCLUDE_POINTS_MODE = "includepoints";
    var EXLUDE_POINTS_MODE = "excludepoints";
    var LEGEND_HOVER_MODES = [INCLUDE_POINTS_MODE, EXLUDE_POINTS_MODE, NONE_MODE];
    function getData(event, dataKey, tryCheckParent) {
      var target = event.target;
      if ("tspan" === target.tagName) {
        return target.parentNode[dataKey];
      }
      var data = target[dataKey];
      if (tryCheckParent && !(0, _type.isDefined)(data)) {
        return function getParentData(node) {
          if (node.parentNode) {
            if ((0, _type.isDefined)(node.parentNode[dataKey])) {
              return node.parentNode[dataKey];
            } else {
              return getParentData(node.parentNode);
            }
          }
          return;
        }(target);
      }
      return data;
    }
    function eventCanceled(_ref, target, clickTarget) {
      var event = _ref.event, cancel = _ref.cancel;
      var deprecatedCancel = event.cancel;
      var eventCanceled2 = cancel || deprecatedCancel;
      if (deprecatedCancel) {
        _errors.default.log("W0003", "".concat(clickTarget, "Click handler argument"), "event.cancel", "22.1", "Use the 'cancel' field instead");
      }
      return eventCanceled2 || !target.getOptions();
    }
    function correctLegendHoverMode(mode) {
      if (LEGEND_HOVER_MODES.indexOf(mode) > -1) {
        return mode;
      } else {
        return INCLUDE_POINTS_MODE;
      }
    }
    function correctHoverMode(target) {
      var mode = target.getOptions().hoverMode;
      return mode === NONE_MODE ? mode : ALL_ARGUMENT_POINTS_MODE;
    }
    var baseTrackerPrototype = {
      ctor: function(options) {
        var that = this;
        var data = {
          tracker: that
        };
        that.n = options.renderer;
        that.P = options.legend;
        that.W = options.tooltip;
        that.u = options.eventTrigger;
        that.ue = options.seriesGroup;
        options.seriesGroup.off(DOT_EVENT_NS).on((0, _index.addNamespace)(eventsConsts.showPointTooltip, EVENT_NS), data, that.xu).on((0, _index.addNamespace)(eventsConsts.hidePointTooltip, EVENT_NS), data, that.yu);
        that.n.root.off(DOT_EVENT_NS).on(POINTER_ACTION, data, that.Au).on((0, _index.addNamespace)(_pointer.default.up, EVENT_NS), function() {
          return clearTimeout(that.dn);
        }).on((0, _index.addNamespace)(_click.name, EVENT_NS), data, that.Bu);
      },
      update: function(options) {
        this.Cu = options.chart;
      },
      updateSeries: function(series, resetDecorations) {
        var that = this;
        var noHoveredSeries = !(null !== series && void 0 !== series && series.some(function(s) {
          return s === that.hoveredSeries;
        }) || that.Sb && that.Sb.series);
        if (that.qc !== series) {
          that.qc = series || [];
        }
        if (noHoveredSeries) {
          that.cc();
          that.n.initDefsElements();
        }
        if (resetDecorations) {
          that.clearSelection();
          if (!noHoveredSeries) {
            that.Db(that.pointAtShownTooltip);
            that.clearHover();
          }
        }
      },
      setCanvases: function(mainCanvas, paneCanvases) {
        this.Du = mainCanvas;
        this.Eu = paneCanvases;
      },
      repairTooltip: function() {
        var point = this.pointAtShownTooltip;
        if (!point || !point.series || !point.isVisible()) {
          this.Db(point, true);
        } else {
          this.Ni(point);
        }
      },
      gn: function(point) {
        if (point === this.Sb) {
          return;
        }
        this.kg();
        point.hover();
        this.Sb = point;
      },
      kg: function(isPointerOut) {
        if (this.Sb && this.Sb.getOptions()) {
          this.Sb.clearHover();
          this.Sb = null;
          if (this.W.isEnabled()) {
            this.Db(this.Sb, false, isPointerOut);
          }
        }
      },
      hn: function(series, mode) {
        this.ve();
        this.kg();
        series.hover(mode);
        this.hoveredSeries = series;
      },
      ve: function() {
        if (this.hoveredSeries) {
          this.hoveredSeries.clearHover();
          this.hoveredSeries = null;
        }
      },
      clearSelection: function() {
        this.qc.forEach(function(series) {
          if (series) {
            series.clearSelection();
            series.getPoints().forEach(function(point) {
              return point.clearSelection();
            });
          }
        });
      },
      cc: function() {
        this.hoveredPoint = this.hoveredSeries = this.Py = null;
        this.Db(this.pointAtShownTooltip);
      },
      clearHover: function(isPointerOut) {
        this.ng();
        this.ve();
        this.kg(isPointerOut);
      },
      Db: function(point, silent, isPointerOut) {
        if (!this.W || point && this.pointAtShownTooltip !== point) {
          return;
        }
        if (!silent && this.pointAtShownTooltip) {
          this.pointAtShownTooltip = null;
        }
        this.W.hide(!!isPointerOut);
      },
      Ni: function(point) {
        var that = this;
        var tooltipFormatObject;
        var eventData = {
          target: point
        };
        if (null !== point && void 0 !== point && point.getOptions()) {
          tooltipFormatObject = point.getTooltipFormatObject(that.W, that.W.isShared() && that.Cu.getStackedPoints(point));
          if (!(0, _type.isDefined)(tooltipFormatObject.valueText) && !tooltipFormatObject.points || !point.isVisible()) {
            return;
          }
          var coords = point.getTooltipParams(that.W.getLocation());
          var rootOffset = that.n.getRootOffset();
          coords.x += rootOffset.left;
          coords.y += rootOffset.top;
          var callback = function(result) {
            result && (that.pointAtShownTooltip = point);
          };
          callback(that.W.show(tooltipFormatObject, coords, eventData, void 0, callback));
        }
      },
      xu: function(event, point) {
        var that = event.data.tracker;
        var pointWithTooltip = that.pointAtShownTooltip;
        if (pointWithTooltip && pointWithTooltip !== point) {
          that.Db(pointWithTooltip);
        }
        that.Ni(point);
      },
      yu: function(event, point) {
        event.data.tracker.Db(point, false, true);
      },
      Fu: function() {
        if (this.og) {
          return;
        }
        var that = this;
        var handler = function(e) {
          var rootOffset = that.n.getRootOffset();
          var x = _floor(e.pageX - rootOffset.left);
          var y = _floor(e.pageY - rootOffset.top);
          if (!(0, _utils.pointInCanvas)(that.Du, x, y) && !that.Gu(e)) {
            that.od();
            that.jn();
          }
        };
        _events_engine.default.on(_dom_adapter.default.getDocument(), POINTER_ACTION, handler);
        this.og = handler;
      },
      Gu: function(e) {
        return this.W.isEnabled() && this.W.isCursorOnTooltip(e.pageX, e.pageY);
      },
      jn: function() {
        this.og && _events_engine.default.off(_dom_adapter.default.getDocument(), POINTER_ACTION, this.og);
        this.og = null;
      },
      stopCurrentHandling: function() {
        this.od(true);
      },
      od: function(force) {
        this.clearHover(true);
        (force || this.W.isEnabled()) && this.Db(this.pointAtShownTooltip, false, true);
      },
      Hu: function(eventArgs, elementClick) {
        var eventTrigger = this.u;
        eventTrigger(LEGEND_CLICK, eventArgs, function() {
          !eventCanceled(eventArgs, eventArgs.target, "legend") && eventTrigger(elementClick, eventArgs);
        });
      },
      pg: function(x, y) {
        var item = this.P.getItemByCoord(x, y);
        var series;
        var legendHoverMode = correctLegendHoverMode(this.P.getOptions().hoverMode);
        if (item) {
          series = this.qc[item.id];
          if (!series.isHovered() || series.lastHoverMode !== legendHoverMode) {
            this.hn(series, legendHoverMode);
          }
          this.W.isEnabled() && this.Db(this.pointAtShownTooltip);
        } else {
          this.clearHover();
        }
      },
      pn: function(argument, argumentIndex) {
        var hoverMode = this.Oi();
        if ((0, _type.isDefined)(argument)) {
          this.kg();
          this.qg = argument;
          this.Iu = argumentIndex;
          this.qn({
            action: "pointHover",
            notifyLegend: this.Pi,
            target: {
              argument,
              fullState: HOVER_STATE,
              argumentIndex,
              getOptions: function() {
                return {
                  hoverMode
                };
              }
            }
          });
        }
      },
      ng: function() {
        var hoverMode;
        if ((0, _type.isDefined)(this.qg)) {
          hoverMode = this.Oi();
          this.qn({
            action: "clearPointHover",
            notifyLegend: this.Pi,
            target: {
              fullState: NORMAL_STATE,
              argumentIndex: this.Iu,
              argument: this.qg,
              getOptions: function() {
                return {
                  hoverMode
                };
              }
            }
          });
          this.qg = null;
        }
      },
      qn: function(data) {
        this.qc.forEach(function(series) {
          series.notify(data);
        });
      },
      Au: function(e) {
        var _series;
        var that = e.data.tracker;
        var rootOffset = that.n.getRootOffset();
        var x = _floor(e.pageX - rootOffset.left);
        var y = _floor(e.pageY - rootOffset.top);
        var canvas = that.we(x, y);
        var series = getData(e, SERIES_DATA);
        var point = getData(e, POINT_DATA) || (null === (_series = series) || void 0 === _series ? void 0 : _series.getPointByCoord(x, y));
        that.tn = false;
        clearTimeout(that.dn);
        if (e.type === _pointer.default.down) {
          that.dn = setTimeout(function() {
            return that.tn = true;
          }, HOLD_TIMEOUT);
        }
        if (point && !point.getMarkerVisibility()) {
          point = void 0;
        }
        that.Fu();
        if (that.P.coordsIn(x, y)) {
          that.pg(x, y);
          return;
        }
        if (that.hoveredSeries && that.hoveredSeries !== that.ib) {
          that.ve();
        }
        if (that.un(x, y, e)) {
          return;
        }
        if (that.vn(canvas, point)) {
          that.od();
        }
        if (!canvas && !point) {
          return;
        }
        if (series && !point) {
          point = series.getNeighborPoint(x, y);
          if (!that.Qi && point && !point.coordsIn(x, y)) {
            point = null;
          }
          if (series !== that.hoveredSeries) {
            that.wn(function() {
              that.hn(series);
              that.rg(e, series, x, y);
              that.xe(point, x, y);
            }, series);
            return;
          }
        } else if (point) {
          if (e.type !== _pointer.default.move && "touch" !== e.pointerType) {
            return;
          }
          if (that.hoveredSeries) {
            that.wn(function() {
              return that.vg(point, x, y, e);
            }, point);
          } else {
            that.vg(point, x, y, e);
          }
          return;
        } else if (that.rg(e, void 0, x, y) && that.Qi) {
          var _point;
          series = that.ib;
          point = series.getNeighborPoint(x, y);
          that.ve();
          (null === (_point = point) || void 0 === _point ? void 0 : _point.getMarkerVisibility()) && that.gn(point);
        } else if (!that.Qi) {
          that.od();
        }
        that.xe(point, x, y);
      },
      vg: function(point, x, y) {
        this.ng();
        this.gn(point);
        this.xe(point, x, y);
      },
      xe: function(point) {
        this.pointAtShownTooltip !== point && this.W.isEnabled() && this.Ni(point);
      },
      Bu: function(e) {
        var _point2;
        var that = e.data.tracker;
        if (that.tn) {
          return;
        }
        var rootOffset = that.n.getRootOffset();
        var x = _floor(e.pageX - rootOffset.left);
        var y = _floor(e.pageY - rootOffset.top);
        var point = getData(e, POINT_DATA);
        var series = that.ib || getData(e, SERIES_DATA) || (null === (_point2 = point) || void 0 === _point2 ? void 0 : _point2.series);
        var axis = that.Qb;
        if (that.P.coordsIn(x, y)) {
          var item = that.P.getItemByCoord(x, y);
          if (item) {
            that.xn(item, e);
          }
        } else if (null !== axis && void 0 !== axis && axis.coordsIn(x, y)) {
          var argument = getData(e, ARG_DATA, true);
          if ((0, _type.isDefined)(argument)) {
            that.u("argumentAxisClick", {
              argument,
              event: e
            });
          }
        } else if (series) {
          var _point3;
          point = point || series.getPointByCoord(x, y);
          if (null !== (_point3 = point) && void 0 !== _point3 && _point3.getMarkerVisibility()) {
            that.yn(point, e);
          } else {
            getData(e, SERIES_DATA) && that.u(SERIES_CLICK, {
              target: series,
              event: e
            });
          }
        }
      },
      dispose: function() {
        this.jn();
        this.n.root.off(DOT_EVENT_NS);
        this.ue.off(DOT_EVENT_NS);
      }
    };
    var ChartTracker = function(options) {
      this.ctor(options);
    };
    exports.ChartTracker = ChartTracker;
    (0, _extend.extend)(ChartTracker.prototype, baseTrackerPrototype, {
      yn: function(point, event) {
        var eventTrigger = this.u;
        var series = point.series;
        var eventArgs = {
          target: point,
          event
        };
        eventTrigger(POINT_CLICK, eventArgs, function() {
          !eventCanceled(eventArgs, series, "point") && eventTrigger(SERIES_CLICK, {
            target: series,
            event
          });
        });
      },
      update: function(options) {
        baseTrackerPrototype.update.call(this, options);
        this.Qb = options.argumentAxis || {};
        this.Ju = this.Qb && (0, _utils.normalizeEnum)(this.Qb.getOptions().hoverMode) === ALL_ARGUMENT_POINTS_MODE;
        this.Qy = options.rotated;
        this.Ri = options.crosshair;
        this.Qi = options.stickyHovering;
      },
      we: function(x, y) {
        var canvases = this.Eu || [];
        for (var i = 0; i < canvases.length; i++) {
          var c = canvases[i];
          if ((0, _utils.pointInCanvas)(c, x, y)) {
            return c;
          }
        }
        return null;
      },
      vn: function(canvas) {
        return !canvas && this.ib;
      },
      zn: function() {
        var _this$_crosshair;
        null === (_this$_crosshair = this.Ri) || void 0 === _this$_crosshair ? void 0 : _this$_crosshair.hide();
      },
      Ku: function(point, x, y) {
        if (this.Ri && null !== point && void 0 !== point && point.isVisible()) {
          this.Ri.show({
            point,
            x,
            y
          });
        }
      },
      cc: function() {
        baseTrackerPrototype.cc.call(this);
        this.ye();
        this.ib = null;
      },
      Lu: function(x, y) {
        var _point4;
        var points = [];
        var point = null;
        var distance = 1 / 0;
        if (this.W.isShared() && !this.hoveredSeries) {
          (0, _iterator.each)(this.qc, function(_, series) {
            var point2 = series.getNeighborPoint(x, y);
            point2 && points.push(point2);
          });
          (0, _iterator.each)(points, function(_, p) {
            var coords = p.getCrosshairData(x, y);
            var d = (0, _utils.getDistance)(x, y, coords.x, coords.y);
            if (d < distance) {
              point = p;
              distance = d;
            }
          });
        }
        return null === (_point4 = point) || void 0 === _point4 ? void 0 : _point4.series;
      },
      wn: function(callback, keeper) {
        var that = this;
        if (that.Si !== keeper) {
          that.ye();
          that.An = setTimeout(function() {
            callback();
            that.Si = null;
          }, DELAY);
          that.Si = keeper;
        }
      },
      ye: function() {
        clearTimeout(this.An);
        this.Si = this.An = null;
      },
      Ry: function(e) {
        if (!(0, _type.isDefined)(e.cancelable) || e.cancelable) {
          e.preventDefault();
          e.stopPropagation();
        }
      },
      rg: function(e, series, x, y) {
        if ("mouse" !== e.pointerType) {
          this.ib = null;
        } else {
          this.ib = series || this.ib || this.Lu(x, y);
        }
        return !!this.ib;
      },
      od: function() {
        var that = this;
        that.ib = null;
        that.zn();
        that.ye();
        baseTrackerPrototype.od.apply(that, arguments);
      },
      un: function(x, y, e) {
        this.ng();
        if (this.Ju && this.Qb.coordsIn(x, y)) {
          this.pn(getData(e, ARG_DATA, true));
          return true;
        }
      },
      xe: function(point, x, y) {
        this.hoveredSeries && this.hoveredSeries.updateHover(x, y);
        this.ye();
        this.Ku(point, x, y);
        baseTrackerPrototype.xe.call(this, point);
      },
      xn: function(item, e) {
        var series = this.qc[item.id];
        this.Hu({
          target: series,
          event: e
        }, SERIES_CLICK);
      },
      pg: function(x, y) {
        this.ib = null;
        this.zn();
        baseTrackerPrototype.pg.call(this, x, y);
      },
      vg: function(point, x, y, e) {
        this.rg(e, point.series, x, y);
        this.ve();
        baseTrackerPrototype.vg.call(this, point, x, y, e);
      },
      Pi: false,
      Oi: function() {
        return correctHoverMode(this.Qb);
      },
      dispose: function() {
        this.ye();
        baseTrackerPrototype.dispose.call(this);
      }
    });
    var PieTracker = function(options) {
      this.ctor(options);
    };
    exports.PieTracker = PieTracker;
    (0, _extend.extend)(PieTracker.prototype, baseTrackerPrototype, {
      vn: function(_, point) {
        return !point;
      },
      xn: function(item, e) {
        var points = [];
        this.qc.forEach(function(s) {
          return points.push.apply(points, s.getPointsByKeys(item.argument, item.argumentIndex));
        });
        this.u(LEGEND_CLICK, {
          target: item.argument,
          points,
          event: e
        });
      },
      yn: function(point, e) {
        this.u(POINT_CLICK, {
          target: point,
          event: e
        });
      },
      pg: function(x, y) {
        var item = this.P.getItemByCoord(x, y);
        if (item && this.qg !== item.argument) {
          this.ng();
          this.pn(item.argument, item.argumentIndex);
        } else if (!item) {
          this.clearHover();
        }
      },
      Oi: function() {
        return correctHoverMode(this.P);
      },
      un: _common.noop,
      rg: _common.noop,
      we: _common.noop,
      Pi: true
    });
  }
});

// node_modules/devextreme/cjs/exporter/file_saver.js
var require_file_saver = __commonJS({
  "node_modules/devextreme/cjs/exporter/file_saver.js"(exports) {
    "use strict";
    exports.fileSaver = exports.MIME_TYPES = void 0;
    var _dom_adapter = _interopRequireDefault(require_dom_adapter());
    var _window = require_window();
    var _ui = _interopRequireDefault(require_ui_errors());
    var _type = require_type();
    var _console = require_console();
    function _interopRequireDefault(obj) {
      return obj && obj.j ? obj : {
        default: obj
      };
    }
    var window2 = (0, _window.getWindow)();
    var navigator2 = (0, _window.getNavigator)();
    var FILE_EXTESIONS = {
      EXCEL: "xlsx",
      CSS: "css",
      PNG: "png",
      JPEG: "jpeg",
      GIF: "gif",
      SVG: "svg",
      PDF: "pdf"
    };
    var MIME_TYPES = {
      CSS: "text/css",
      EXCEL: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
      PNG: "image/png",
      JPEG: "image/jpeg",
      GIF: "image/gif",
      SVG: "image/svg+xml",
      PDF: "application/pdf"
    };
    exports.MIME_TYPES = MIME_TYPES;
    var fileSaver = {
      Mu: 3e4,
      Nu: function(format, data) {
        var mimeType = this.Bn(format);
        return "data:".concat(mimeType, ";base64,").concat(data);
      },
      Bn: function(format) {
        return MIME_TYPES[format] || "application/octet-stream";
      },
      Cn: function(fileName, href) {
        var exportLinkElement = _dom_adapter.default.createElement("a");
        exportLinkElement.download = fileName;
        exportLinkElement.href = href;
        exportLinkElement.target = "_blank";
        return exportLinkElement;
      },
      Ou: function(blob, fileName, format) {
        var savePicker = new Windows.Storage.Pickers.FileSavePicker();
        savePicker.suggestedStartLocation = Windows.Storage.Pickers.PickerLocationId.documentsLibrary;
        var fileExtension = FILE_EXTESIONS[format];
        if (fileExtension) {
          var mimeType = this.Bn(format);
          savePicker.fileTypeChoices.insert(mimeType, ["." + fileExtension]);
        }
        savePicker.suggestedFileName = fileName;
        savePicker.pickSaveFileAsync().then(function(file) {
          if (file) {
            file.openAsync(Windows.Storage.FileAccessMode.readWrite).then(function(outputStream) {
              var inputStream = blob.msDetachStream();
              Windows.Storage.Streams.RandomAccessStream.copyAsync(inputStream, outputStream).then(function() {
                outputStream.flushAsync().done(function() {
                  inputStream.close();
                  outputStream.close();
                });
              });
            });
          }
        });
      },
      Dn: function(link) {
        try {
          link.dispatchEvent(new MouseEvent("click", {
            cancelable: true
          }));
        } catch (e) {
          var event = _dom_adapter.default.getDocument().createEvent("MouseEvents");
          event.initMouseEvent("click", true, true, window2, 0, 0, 0, 80, 20, false, false, false, false, 0, null);
          link.dispatchEvent(event);
        }
      },
      Pu: function(fileName, format, data) {
        var _this = this;
        this.En = false;
        if ((0, _type.isDefined)(navigator2.msSaveOrOpenBlob)) {
          navigator2.msSaveOrOpenBlob(data, fileName);
          this.En = true;
        } else if ((0, _type.isDefined)(window2.WinJS)) {
          this.Ou(data, fileName, format);
          this.En = true;
        } else {
          var URL = window2.URL || window2.webkitURL || window2.mozURL || window2.msURL || window2.oURL;
          if ((0, _type.isDefined)(URL)) {
            var objectURL = URL.createObjectURL(data);
            var downloadLink = this.Cn(fileName, objectURL);
            setTimeout(function() {
              URL.revokeObjectURL(objectURL);
              _this.Sy = true;
            }, this.Mu);
            this.Dn(downloadLink);
          } else {
            _console.logger.warn("window.URL || window.webkitURL || window.mozURL || window.msURL || window.oURL is not defined");
          }
        }
      },
      saveAs: function(fileName, format, data) {
        var fileExtension = FILE_EXTESIONS[format];
        if (fileExtension) {
          fileName += "." + fileExtension;
        }
        if ((0, _type.isFunction)(window2.Blob)) {
          this.Pu(fileName, format, data);
        } else {
          if (!(0, _type.isDefined)(navigator2.userAgent.match(/iPad/i))) {
            _ui.default.log("E1034");
          }
          var downloadLink = this.Cn(fileName, this.Nu(format, data));
          this.Dn(downloadLink);
        }
      }
    };
    exports.fileSaver = fileSaver;
  }
});

// node_modules/devextreme/cjs/exporter/image_creator.js
var require_image_creator = __commonJS({
  "node_modules/devextreme/cjs/exporter/image_creator.js"(exports) {
    "use strict";
    exports.calcScaledInfo = calcScaledInfo;
    exports.getData = getData;
    exports.imageCreator = void 0;
    exports.testFormats = testFormats;
    var _renderer = _interopRequireDefault(require_renderer());
    var _color = _interopRequireDefault(require_color());
    var _type = require_type();
    var _svg = require_svg();
    var _iterator = require_iterator();
    var _extend = require_extend();
    var _dom_adapter = _interopRequireDefault(require_dom_adapter());
    var _dom = require_dom();
    var _window = require_window();
    var _inflector = require_inflector();
    var _deferred = require_deferred();
    function _interopRequireDefault(obj) {
      return obj && obj.j ? obj : {
        default: obj
      };
    }
    var window2 = (0, _window.getWindow)();
    var _math = Math;
    var PI = _math.PI;
    var _min = _math.min;
    var _abs = _math.abs;
    var _sqrt = _math.sqrt;
    var _pow = _math.pow;
    var _atan2 = _math.atan2;
    var _cos = _math.cos;
    var _sin = _math.sin;
    var _number = Number;
    var IMAGE_QUALITY = 1;
    var TEXT_DECORATION_LINE_WIDTH_COEFF = 0.05;
    var DEFAULT_FONT_SIZE = "10px";
    var DEFAULT_FONT_FAMILY = "sans-serif";
    var DEFAULT_TEXT_COLOR = "#000";
    var parseAttributes;
    function getStringFromCanvas(canvas, mimeType) {
      var dataURL = canvas.toDataURL(mimeType, IMAGE_QUALITY);
      var imageData = window2.atob(dataURL.substring(("data:" + mimeType + ";base64,").length));
      return imageData;
    }
    function arcTo(x1, y1, x2, y2, radius, largeArcFlag, clockwise, context) {
      var cBx = (x1 + x2) / 2;
      var cBy = (y1 + y2) / 2;
      var aB = _atan2(y1 - y2, x1 - x2);
      var k = largeArcFlag ? 1 : -1;
      aB += PI / 180 * 90 * (clockwise ? 1 : -1);
      var opSide = _sqrt(_pow(x2 - x1, 2) + _pow(y2 - y1, 2)) / 2;
      var adjSide = _sqrt(_abs(_pow(radius, 2) - _pow(opSide, 2)));
      var centerX = cBx + k * (adjSide * _cos(aB));
      var centerY = cBy + k * (adjSide * _sin(aB));
      var startAngle = _atan2(y1 - centerY, x1 - centerX);
      var endAngle = _atan2(y2 - centerY, x2 - centerX);
      context.arc(centerX, centerY, radius, startAngle, endAngle, !clockwise);
    }
    function getElementOptions(element, rootAppended) {
      var attr = parseAttributes(element.attributes || {});
      var options = (0, _extend.extend)({}, attr, {
        text: element.textContent.replace(/\s+/g, " "),
        textAlign: "middle" === attr["text-anchor"] ? "center" : attr["text-anchor"]
      });
      var transform = attr.transform;
      var coords;
      if (transform) {
        coords = transform.match(/translate\(-*\d+([.]\d+)*(,*\s*-*\d+([.]\d+)*)*/);
        if (coords) {
          coords = coords[0].match(/-*\d+([.]\d+)*/g);
          options.translateX = _number(coords[0]);
          options.translateY = coords[1] ? _number(coords[1]) : 0;
        }
        coords = transform.match(/rotate\(-*\d+([.]\d+)*(,*\s*-*\d+([.]\d+)*,*\s*-*\d+([.]\d+)*)*/);
        if (coords) {
          coords = coords[0].match(/-*\d+([.]\d+)*/g);
          options.rotationAngle = _number(coords[0]);
          options.rotationX = coords[1] && _number(coords[1]);
          options.rotationY = coords[2] && _number(coords[2]);
        }
        coords = transform.match(/scale\(-*\d+([.]\d+)*(,*\s*-*\d+([.]\d+)*)*/);
        if (coords) {
          coords = coords[0].match(/-*\d+([.]\d+)*/g);
          options.scaleX = _number(coords[0]);
          if (coords.length > 1) {
            options.scaleY = _number(coords[1]);
          } else {
            options.scaleY = options.scaleX;
          }
        }
      }
      parseStyles(element, options, rootAppended);
      return options;
    }
    function drawRect(context, options) {
      var x = options.x;
      var y = options.y;
      var width = options.width;
      var height = options.height;
      var cornerRadius = options.rx;
      if (!cornerRadius) {
        context.rect(x, y, width, height);
      } else {
        cornerRadius = _min(cornerRadius, width / 2, height / 2);
        context.save();
        context.translate(x, y);
        context.moveTo(width / 2, 0);
        context.arcTo(width, 0, width, height, cornerRadius);
        context.arcTo(width, height, 0, height, cornerRadius);
        context.arcTo(0, height, 0, 0, cornerRadius);
        context.arcTo(0, 0, cornerRadius, 0, cornerRadius);
        context.lineTo(width / 2, 0);
        context.restore();
      }
    }
    function drawImage(context, options, shared) {
      var d = new _deferred.Deferred();
      var image = new window2.Image();
      image.onload = function() {
        context.save();
        context.globalAlpha = options.globalAlpha;
        transformElement(context, options);
        clipElement(context, options, shared);
        context.drawImage(image, options.x || 0, options.y || 0, options.width, options.height);
        context.restore();
        d.resolve();
      };
      image.onerror = function() {
        d.resolve();
      };
      image.setAttribute("crossOrigin", "anonymous");
      image.src = options.href || options["xlink:href"];
      return d;
    }
    function drawPath(context, dAttr) {
      var dArray = dAttr.replace(/,/g, " ").split(/([A-Z])/i).filter(function(item) {
        return "" !== item.trim();
      });
      var i = 0;
      var params;
      var prevParams;
      var prevParamsLen;
      do {
        params = (dArray[i + 1] || "").trim().split(" ");
        switch (dArray[i]) {
          case "M":
            context.moveTo(_number(params[0]), _number(params[1]));
            i += 2;
            break;
          case "L":
            for (var j = 0; j < params.length / 2; j++) {
              context.lineTo(_number(params[2 * j]), _number(params[2 * j + 1]));
            }
            i += 2;
            break;
          case "C":
            context.bezierCurveTo(_number(params[0]), _number(params[1]), _number(params[2]), _number(params[3]), _number(params[4]), _number(params[5]));
            i += 2;
            break;
          case "a":
            prevParams = dArray[i - 1].trim().split(" ");
            prevParamsLen = prevParams.length - 1;
            arcTo(_number(prevParams[prevParamsLen - 1]), _number(prevParams[prevParamsLen]), _number(prevParams[prevParamsLen - 1]) + _number(params[5]), _number(prevParams[prevParamsLen]) + _number(params[6]), _number(params[0]), _number(params[3]), _number(params[4]), context);
            i += 2;
            break;
          case "A":
            prevParams = dArray[i - 1].trim().split(" ");
            prevParamsLen = prevParams.length - 1;
            arcTo(_number(prevParams[prevParamsLen - 1]), _number(prevParams[prevParamsLen]), _number(params[5]), _number(params[6]), _number(params[0]), _number(params[3]), _number(params[4]), context);
            i += 2;
            break;
          case "Z":
            context.closePath();
            i += 1;
            break;
          default:
            i++;
        }
      } while (i < dArray.length);
    }
    function parseStyles(element, options, rootAppended) {
      var style = element.style || {};
      var field;
      for (field in style) {
        if ("" !== style[field]) {
          options[(0, _inflector.camelize)(field)] = style[field];
        }
      }
      if (rootAppended && _dom_adapter.default.isElementNode(element)) {
        style = window2.getComputedStyle(element);
        ["fill", "stroke", "stroke-width", "font-family", "font-size", "font-style", "font-weight"].forEach(function(prop) {
          if (prop in style && "" !== style[prop]) {
            options[(0, _inflector.camelize)(prop)] = style[prop];
          }
        });
        ["opacity", "fill-opacity", "stroke-opacity"].forEach(function(prop) {
          if (prop in style && "" !== style[prop] && "1" !== style[prop]) {
            options[prop] = _number(style[prop]);
          }
        });
      }
      options.textDecoration = options.textDecoration || options.textDecorationLine;
      options.globalAlpha = (0, _type.isDefined)(options.opacity) ? options.opacity : options.globalAlpha;
    }
    function parseUrl(urlString) {
      var matches = urlString && urlString.match(/url\(.*#(.*?)["']?\)/i);
      return matches && matches[1];
    }
    function setFontStyle(context, options) {
      var fontParams = [];
      options.fontSize = options.fontSize || DEFAULT_FONT_SIZE;
      options.fontFamily = options.fontFamily || DEFAULT_FONT_FAMILY;
      options.fill = options.fill || DEFAULT_TEXT_COLOR;
      options.fontStyle && fontParams.push(options.fontStyle);
      options.fontWeight && fontParams.push(options.fontWeight);
      fontParams.push(options.fontSize);
      fontParams.push(options.fontFamily);
      context.font = fontParams.join(" ");
      context.textAlign = options.textAlign;
      context.fillStyle = options.fill;
      context.globalAlpha = options.globalAlpha;
    }
    function drawText(context, options, shared) {
      setFontStyle(context, options);
      applyFilter(context, options, shared);
      options.text && context.fillText(options.text, options.x || 0, options.y || 0);
      strokeElement(context, options, true);
      drawTextDecoration(context, options, shared);
    }
    function drawTextDecoration(context, options, shared) {
      if (!options.textDecoration || "none" === options.textDecoration) {
        return;
      }
      var x = options.x;
      var textWidth = context.measureText(options.text).width;
      var textHeight = parseInt(options.fontSize, 10);
      var lineHeight = textHeight * TEXT_DECORATION_LINE_WIDTH_COEFF < 1 ? 1 : textHeight * TEXT_DECORATION_LINE_WIDTH_COEFF;
      var y = options.y;
      switch (options.textDecoration) {
        case "line-through":
          y -= textHeight / 3 + lineHeight / 2;
          break;
        case "overline":
          y -= textHeight - lineHeight;
          break;
        case "underline":
          y += lineHeight;
      }
      context.rect(x, y, textWidth, lineHeight);
      fillElement(context, options, shared);
      strokeElement(context, options);
    }
    function aggregateOpacity(options) {
      options.strokeOpacity = void 0 !== options["stroke-opacity"] ? options["stroke-opacity"] : 1;
      options.fillOpacity = void 0 !== options["fill-opacity"] ? options["fill-opacity"] : 1;
      if (void 0 !== options.opacity) {
        options.strokeOpacity *= options.opacity;
        options.fillOpacity *= options.opacity;
      }
    }
    function hasTspan(element) {
      var nodes = element.childNodes;
      for (var i = 0; i < nodes.length; i++) {
        if ("tspan" === nodes[i].tagName) {
          return true;
        }
      }
      return false;
    }
    function drawTextElement(childNodes, context, options, shared) {
      var lines = [];
      var line;
      var offset = 0;
      for (var i = 0; i < childNodes.length; i++) {
        var element = childNodes[i];
        if (void 0 === element.tagName) {
          drawElement(element, context, options, shared);
        } else if ("tspan" === element.tagName || "text" === element.tagName) {
          var elementOptions = getElementOptions(element, shared.rootAppended);
          var mergedOptions = (0, _extend.extend)({}, options, elementOptions);
          if ("tspan" === element.tagName && hasTspan(element)) {
            drawTextElement(element.childNodes, context, mergedOptions, shared);
            continue;
          }
          mergedOptions.textAlign = "start";
          if (!line || void 0 !== elementOptions.x) {
            line = {
              elements: [],
              options: [],
              widths: [],
              offsets: []
            };
            lines.push(line);
          }
          if (void 0 !== elementOptions.y) {
            offset = 0;
          }
          if (void 0 !== elementOptions.dy) {
            offset += parseFloat(elementOptions.dy);
          }
          line.elements.push(element);
          line.options.push(mergedOptions);
          line.offsets.push(offset);
          setFontStyle(context, mergedOptions);
          line.widths.push(context.measureText(mergedOptions.text).width);
        }
      }
      lines.forEach(function(line2) {
        var commonWidth = line2.widths.reduce(function(commonWidth2, width) {
          return commonWidth2 + width;
        }, 0);
        var xDiff = 0;
        var currentOffset = 0;
        if ("center" === options.textAlign) {
          xDiff = commonWidth / 2;
        }
        if ("end" === options.textAlign) {
          xDiff = commonWidth;
        }
        line2.options.forEach(function(o, index) {
          var width = line2.widths[index];
          o.x = o.x - xDiff + currentOffset;
          o.y += line2.offsets[index];
          currentOffset += width;
        });
        line2.elements.forEach(function(element2, index) {
          drawTextElement(element2.childNodes, context, line2.options[index], shared);
        });
      });
    }
    function drawElement(element, context, parentOptions, shared) {
      var tagName = element.tagName;
      var isText = "text" === tagName || "tspan" === tagName || void 0 === tagName;
      var isImage = "image" === tagName;
      var isComment = 8 === element.nodeType;
      var options = (0, _extend.extend)({}, parentOptions, getElementOptions(element, shared.rootAppended));
      if ("hidden" === options.visibility || options[_svg.HIDDEN_FOR_EXPORT] || isComment) {
        return;
      }
      context.save();
      !isImage && transformElement(context, options);
      clipElement(context, options, shared);
      aggregateOpacity(options);
      var promise;
      context.beginPath();
      switch (element.tagName) {
        case void 0:
          drawText(context, options, shared);
          break;
        case "text":
        case "tspan":
          drawTextElement(element.childNodes, context, options, shared);
          break;
        case "image":
          promise = drawImage(context, options, shared);
          break;
        case "path":
          drawPath(context, options.d);
          break;
        case "rect":
          drawRect(context, options);
          context.closePath();
          break;
        case "circle":
          context.arc(options.cx, options.cy, options.r, 0, 2 * PI, 1);
      }
      if (!isText) {
        applyFilter(context, options, shared);
        if (!isImage) {
          promise = fillElement(context, options, shared);
        }
        strokeElement(context, options);
      }
      applyGradient(context, options, shared, element, "linear");
      applyGradient(context, options, shared, element, "radial");
      context.restore();
      return promise;
    }
    function applyGradient(context, options, _ref, element, type) {
      var linearGradients = _ref.linearGradients, radialGradients = _ref.radialGradients;
      var gradients = "linear" === type ? linearGradients : radialGradients;
      if (0 === Object.keys(gradients).length) {
        return;
      }
      var id = parseUrl(options.fill);
      if (id && gradients[id]) {
        var box = element.getBBox();
        var horizontalCenter = box.x + box.width / 2;
        var verticalCenter = box.y + box.height / 2;
        var maxRadius = Math.max(box.height / 2, box.width / 2);
        var gradient = "linear" === type ? context.createLinearGradient(box.x, 0, box.x + box.width, 0) : context.createRadialGradient(horizontalCenter, verticalCenter, 0, horizontalCenter, verticalCenter, maxRadius);
        gradients[id].colors.forEach(function(opt) {
          var offset = parseInt(opt.offset.replace(/%/, ""));
          gradient.addColorStop(offset / 100, opt.stopColor);
        });
        if ("linear" === type) {
          var _ref2, _gradients$id$transfo;
          var angle = null !== (_ref2 = (null === (_gradients$id$transfo = gradients[id].transform) || void 0 === _gradients$id$transfo ? void 0 : _gradients$id$transfo.replace(/\D/g, "")) * Math.PI / 180) && void 0 !== _ref2 ? _ref2 : 0;
          context.translate(horizontalCenter, verticalCenter);
          context.rotate(angle);
          context.translate(-horizontalCenter, -verticalCenter);
        }
        context.globalAlpha = options.opacity;
        context.fillStyle = gradient;
        context.fill();
      }
    }
    function applyFilter(context, options, shared) {
      var filterOptions;
      var id = parseUrl(options.filter);
      if (id) {
        filterOptions = shared.filters[id];
        if (!filterOptions) {
          filterOptions = {
            offsetX: 0,
            offsetY: 0,
            blur: 0,
            color: "#000"
          };
        }
        context.shadowOffsetX = filterOptions.offsetX;
        context.shadowOffsetY = filterOptions.offsetY;
        context.shadowColor = filterOptions.color;
        context.shadowBlur = filterOptions.blur;
      }
    }
    function transformElement(context, options) {
      context.translate(options.translateX || 0, options.translateY || 0);
      options.translateX = void 0;
      options.translateY = void 0;
      if (options.rotationAngle) {
        context.translate(options.rotationX || 0, options.rotationY || 0);
        context.rotate(options.rotationAngle * PI / 180);
        context.translate(-(options.rotationX || 0), -(options.rotationY || 0));
        options.rotationAngle = void 0;
        options.rotationX = void 0;
        options.rotationY = void 0;
      }
      if (isFinite(options.scaleX)) {
        context.scale(options.scaleX, options.scaleY);
        options.scaleX = void 0;
        options.scaleY = void 0;
      }
    }
    function clipElement(context, options, shared) {
      if (options["clip-path"]) {
        drawElement(shared.clipPaths[parseUrl(options["clip-path"])], context, {}, shared);
        context.clip();
        options["clip-path"] = void 0;
      }
    }
    function hex2rgba(hexColor, alpha) {
      var color = new _color.default(hexColor);
      return "rgba(" + color.r + "," + color.g + "," + color.b + "," + alpha + ")";
    }
    function createGradient(element) {
      var _element$attributes$g;
      var options = {
        colors: [],
        transform: null === (_element$attributes$g = element.attributes.gradientTransform) || void 0 === _element$attributes$g ? void 0 : _element$attributes$g.textContent
      };
      (0, _iterator.each)(element.childNodes, function(_, _ref3) {
        var attributes = _ref3.attributes;
        options.colors.push({
          offset: attributes.offset.value,
          stopColor: attributes["stop-color"].value
        });
      });
      return options;
    }
    function createFilter(element) {
      var color;
      var opacity;
      var filterOptions = {};
      (0, _iterator.each)(element.childNodes, function(_, node) {
        var attr = node.attributes;
        if (!attr.result) {
          return;
        }
        switch (attr.result.value) {
          case "gaussianBlurResult":
            filterOptions.blur = _number(attr.stdDeviation.value);
            break;
          case "offsetResult":
            filterOptions.offsetX = _number(attr.dx.value);
            filterOptions.offsetY = _number(attr.dy.value);
            break;
          case "floodResult":
            color = attr["flood-color"] ? attr["flood-color"].value : "#000";
            opacity = attr["flood-opacity"] ? attr["flood-opacity"].value : 1;
            filterOptions.color = hex2rgba(color, opacity);
        }
      });
      return filterOptions;
    }
    function asyncEach(array, callback) {
      var d = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : new _deferred.Deferred();
      var i = 0;
      for (; i < array.length; i++) {
        var result = callback(array[i]);
        if ((0, _type.isPromise)(result)) {
          result.then(function() {
            asyncEach(Array.prototype.slice.call(array, i + 1), callback, d);
          });
          break;
        }
      }
      if (i === array.length) {
        d.resolve();
      }
      return d;
    }
    function drawCanvasElements(elements, context, parentOptions, shared) {
      return asyncEach(elements, function(element) {
        switch (element.tagName && element.tagName.toLowerCase()) {
          case "g":
          case "svg":
            var options = (0, _extend.extend)({}, parentOptions, getElementOptions(element, shared.rootAppended));
            context.save();
            transformElement(context, options);
            clipElement(context, options, shared);
            var onDone = function() {
              context.restore();
            };
            var promise = drawCanvasElements(element.childNodes, context, options, shared);
            if ((0, _type.isPromise)(promise)) {
              promise.then(onDone);
            } else {
              onDone();
            }
            return promise;
          case "defs":
            return drawCanvasElements(element.childNodes, context, {}, shared);
          case "clippath":
            shared.clipPaths[element.attributes.id.textContent] = element.childNodes[0];
            break;
          case "pattern":
            shared.patterns[element.attributes.id.textContent] = element;
            break;
          case "filter":
            shared.filters[element.id] = createFilter(element);
            break;
          case "lineargradient":
            shared.linearGradients[element.attributes.id.textContent] = createGradient(element);
            break;
          case "radialgradient":
            shared.radialGradients[element.attributes.id.textContent] = createGradient(element);
            break;
          default:
            return drawElement(element, context, parentOptions, shared);
        }
      });
    }
    function setLineDash(context, options) {
      var matches = options["stroke-dasharray"] && options["stroke-dasharray"].match(/(\d+)/g);
      if (matches && matches.length) {
        matches = (0, _iterator.map)(matches, function(item) {
          return _number(item);
        });
        context.setLineDash(matches);
      }
    }
    function strokeElement(context, options, isText) {
      var stroke = options.stroke;
      if (stroke && "none" !== stroke && 0 !== options["stroke-width"]) {
        setLineDash(context, options);
        context.lineJoin = options["stroke-linejoin"];
        context.lineWidth = options["stroke-width"];
        context.globalAlpha = options.strokeOpacity;
        context.strokeStyle = stroke;
        isText ? context.strokeText(options.text, options.x, options.y) : context.stroke();
        context.globalAlpha = 1;
      }
    }
    function getPattern(context, pattern, shared, parentOptions) {
      var options = getElementOptions(pattern, shared.rootAppended);
      var patternCanvas = imageCreator.Ti(options.width, options.height, 0);
      var patternContext = patternCanvas.getContext("2d");
      var promise = drawCanvasElements(pattern.childNodes, patternContext, options, shared);
      var onDone = function() {
        context.fillStyle = context.createPattern(patternCanvas, "repeat");
        context.globalAlpha = parentOptions.fillOpacity;
        context.fill();
        context.globalAlpha = 1;
      };
      if ((0, _type.isPromise)(promise)) {
        promise.then(onDone);
      } else {
        onDone();
      }
      return promise;
    }
    function fillElement(context, options, shared) {
      var fill = options.fill;
      var promise;
      if (fill && "none" !== fill) {
        if (-1 === fill.search(/url/)) {
          context.fillStyle = fill;
          context.globalAlpha = options.fillOpacity;
          context.fill();
          context.globalAlpha = 1;
        } else {
          var pattern = shared.patterns[parseUrl(fill)];
          if (!pattern) {
            return;
          }
          promise = getPattern(context, pattern, shared, options);
        }
      }
      return promise;
    }
    parseAttributes = function(attributes) {
      var newAttributes = {};
      var attr;
      (0, _iterator.each)(attributes, function(index, item) {
        attr = item.textContent;
        if (isFinite(attr)) {
          attr = _number(attr);
        }
        newAttributes[item.name.toLowerCase()] = attr;
      });
      return newAttributes;
    };
    function drawBackground(context, width, height, backgroundColor, margin) {
      context.fillStyle = backgroundColor || "#ffffff";
      context.fillRect(-margin, -margin, width + 2 * margin, height + 2 * margin);
    }
    function createInvisibleDiv() {
      var invisibleDiv = _dom_adapter.default.createElement("div");
      invisibleDiv.style.left = "-9999px";
      invisibleDiv.style.position = "absolute";
      return invisibleDiv;
    }
    function convertSvgToCanvas(svg, canvas, rootAppended) {
      return drawCanvasElements(svg.childNodes, canvas.getContext("2d"), {}, {
        clipPaths: {},
        patterns: {},
        filters: {},
        linearGradients: {},
        radialGradients: {},
        rootAppended
      });
    }
    function getCanvasFromSvg(markup, _ref4) {
      var width = _ref4.width, height = _ref4.height, backgroundColor = _ref4.backgroundColor, margin = _ref4.margin, _ref4$svgToCanvas = _ref4.svgToCanvas, svgToCanvas = void 0 === _ref4$svgToCanvas ? convertSvgToCanvas : _ref4$svgToCanvas;
      var scaledScreenInfo = calcScaledInfo(width, height);
      var canvas = imageCreator.Ti(scaledScreenInfo.width, scaledScreenInfo.height, margin);
      var context = canvas.getContext("2d");
      context.setTransform(scaledScreenInfo.pixelRatio, 0, 0, scaledScreenInfo.pixelRatio, 0, 0);
      var svgElem = (0, _svg.getSvgElement)(markup);
      var invisibleDiv;
      var markupIsDomElement = _dom_adapter.default.isElementNode(markup);
      context.translate(margin, margin);
      _dom_adapter.default.getBody().appendChild(canvas);
      if (!markupIsDomElement) {
        invisibleDiv = createInvisibleDiv();
        invisibleDiv.appendChild(svgElem);
        _dom_adapter.default.getBody().appendChild(invisibleDiv);
      }
      if (svgElem.attributes.direction) {
        canvas.dir = svgElem.attributes.direction.textContent;
      }
      drawBackground(context, width, height, backgroundColor, margin);
      return (0, _deferred.fromPromise)(svgToCanvas(svgElem, canvas, markupIsDomElement && (0, _dom.contains)(_dom_adapter.default.getBody(), markup))).then(function() {
        return canvas;
      }).always(function() {
        invisibleDiv && _dom_adapter.default.getBody().removeChild(invisibleDiv);
        _dom_adapter.default.getBody().removeChild(canvas);
      });
    }
    var imageCreator = {
      getImageData: function(markup, options) {
        var mimeType = "image/" + options.format;
        if ((0, _type.isFunction)(options.Qu)) {
          parseAttributes = options.Qu;
        }
        return getCanvasFromSvg(markup, options).then(function(canvas) {
          return getStringFromCanvas(canvas, mimeType);
        });
      },
      getData: function(markup, options) {
        var that = this;
        return imageCreator.getImageData(markup, options).then(function(binaryData) {
          var mimeType = "image/" + options.format;
          var data = (0, _type.isFunction)(window2.Blob) && !options.useBase64 ? that.Ui(binaryData, mimeType) : that.Vi(binaryData);
          return data;
        });
      },
      Ui: function(binaryData, mimeType) {
        var i;
        var dataArray = new Uint8Array(binaryData.length);
        for (i = 0; i < binaryData.length; i++) {
          dataArray[i] = binaryData.charCodeAt(i);
        }
        return new window2.Blob([dataArray.buffer], {
          type: mimeType
        });
      },
      Vi: function(binaryData) {
        return window2.btoa(binaryData);
      },
      Ti: function(width, height, margin) {
        var canvas = (0, _renderer.default)("<canvas>")[0];
        canvas.width = width + 2 * margin;
        canvas.height = height + 2 * margin;
        canvas.hidden = true;
        return canvas;
      }
    };
    exports.imageCreator = imageCreator;
    function getData(data, options) {
      return imageCreator.getData(data, options);
    }
    function testFormats(formats) {
      var canvas = imageCreator.Ti(100, 100, 0);
      return formats.reduce(function(r, f) {
        var mimeType = ("image/" + f).toLowerCase();
        if (-1 !== canvas.toDataURL(mimeType).indexOf(mimeType)) {
          r.supported.push(f);
        } else {
          r.unsupported.push(f);
        }
        return r;
      }, {
        supported: [],
        unsupported: []
      });
    }
    function calcScaledInfo(width, height) {
      var pixelRatio = window2.devicePixelRatio || 1;
      return {
        pixelRatio,
        width: width * pixelRatio,
        height: height * pixelRatio
      };
    }
  }
});

// node_modules/devextreme/cjs/core/http_request.js
var require_http_request = __commonJS({
  "node_modules/devextreme/cjs/core/http_request.js"(exports, module) {
    "use strict";
    exports.default = void 0;
    var _window = require_window();
    var _dependency_injector = _interopRequireDefault(require_dependency_injector());
    function _interopRequireDefault(obj) {
      return obj && obj.j ? obj : {
        default: obj
      };
    }
    var window2 = (0, _window.getWindow)();
    var nativeXMLHttpRequest = {
      getXhr: function() {
        return new window2.XMLHttpRequest();
      }
    };
    var _default = (0, _dependency_injector.default)(nativeXMLHttpRequest);
    exports.default = _default;
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/devextreme/cjs/core/utils/ajax.js
var require_ajax = __commonJS({
  "node_modules/devextreme/cjs/core/utils/ajax.js"(exports, module) {
    "use strict";
    exports.default = void 0;
    var _deferred = require_deferred();
    var _dom_adapter = _interopRequireDefault(require_dom_adapter());
    var _http_request = _interopRequireDefault(require_http_request());
    var _window = require_window();
    var _extend = require_extend();
    var _type = require_type();
    var _dependency_injector = _interopRequireDefault(require_dependency_injector());
    function _interopRequireDefault(obj) {
      return obj && obj.j ? obj : {
        default: obj
      };
    }
    var window2 = (0, _window.getWindow)();
    var SUCCESS = "success";
    var ERROR = "error";
    var TIMEOUT = "timeout";
    var NO_CONTENT = "nocontent";
    var PARSER_ERROR = "parsererror";
    var isStatusSuccess = function(status) {
      return 200 <= status && status < 300;
    };
    var hasContent = function(status) {
      return 204 !== status;
    };
    var paramsConvert = function(params) {
      var result = [];
      for (var name in params) {
        var value = params[name];
        if (void 0 === value) {
          continue;
        }
        if (null === value) {
          value = "";
        }
        if ("function" === typeof value) {
          value = value();
        }
        result.push(encodeURIComponent(name) + "=" + encodeURIComponent(value));
      }
      return result.join("&");
    };
    var createScript = function(options) {
      var script = _dom_adapter.default.createElement("script");
      for (var name in options) {
        script[name] = options[name];
      }
      return script;
    };
    var removeScript = function(scriptNode) {
      scriptNode.parentNode.removeChild(scriptNode);
    };
    var appendToHead = function(element) {
      return _dom_adapter.default.getHead().appendChild(element);
    };
    var evalScript = function(code) {
      var script = createScript({
        text: code
      });
      appendToHead(script);
      removeScript(script);
    };
    var evalCrossDomainScript = function(url) {
      var script = createScript({
        src: url
      });
      return new Promise(function(resolve, reject) {
        var events = {
          load: resolve,
          error: reject
        };
        var loadHandler = function(e) {
          events[e.type]();
          removeScript(script);
        };
        for (var event in events) {
          _dom_adapter.default.listen(script, event, loadHandler);
        }
        appendToHead(script);
      });
    };
    var getAcceptHeader = function(options) {
      var dataType = options.dataType || "*";
      var scriptAccept = "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript";
      var accepts = {
        "*": "*/*",
        text: "text/plain",
        html: "text/html",
        xml: "application/xml, text/xml",
        json: "application/json, text/javascript",
        jsonp: scriptAccept,
        script: scriptAccept
      };
      (0, _extend.extendFromObject)(accepts, options.accepts, true);
      return accepts[dataType] ? accepts[dataType] + ("*" !== dataType ? ", */*; q=0.01" : "") : accepts["*"];
    };
    var getContentTypeHeader = function(options) {
      var defaultContentType;
      if (options.data && !options.upload && "GET" !== getMethod(options)) {
        defaultContentType = "application/x-www-form-urlencoded;charset=utf-8";
      }
      return options.contentType || defaultContentType;
    };
    var getDataFromResponse = function(xhr) {
      return xhr.responseType && "text" !== xhr.responseType || "string" !== typeof xhr.responseText ? xhr.response : xhr.responseText;
    };
    var postProcess = function(deferred, xhr, dataType) {
      var data = getDataFromResponse(xhr);
      switch (dataType) {
        case "jsonp":
          evalScript(data);
          break;
        case "script":
          evalScript(data);
          deferred.resolve(data, SUCCESS, xhr);
          break;
        case "json":
          try {
            deferred.resolve(JSON.parse(data), SUCCESS, xhr);
          } catch (e) {
            deferred.reject(xhr, PARSER_ERROR, e);
          }
          break;
        default:
          deferred.resolve(data, SUCCESS, xhr);
      }
    };
    var isCrossDomain = function(url) {
      if (!(0, _window.hasWindow)()) {
        return true;
      }
      var crossDomain = false;
      var originAnchor = _dom_adapter.default.createElement("a");
      var urlAnchor = _dom_adapter.default.createElement("a");
      originAnchor.href = window2.location.href;
      try {
        urlAnchor.href = url;
        urlAnchor.href = urlAnchor.href;
        crossDomain = originAnchor.protocol + "//" + originAnchor.host !== urlAnchor.protocol + "//" + urlAnchor.host;
      } catch (e) {
        crossDomain = true;
      }
      return crossDomain;
    };
    var setHttpTimeout = function(timeout, xhr) {
      return timeout && setTimeout(function() {
        xhr.customStatus = TIMEOUT;
        xhr.abort();
      }, timeout);
    };
    var getJsonpOptions = function(options) {
      if ("jsonp" === options.dataType) {
        var random = Math.random().toString().replace(/\D/g, "");
        var callbackName = options.jsonpCallback || "dxCallback" + Date.now() + "_" + random;
        var callbackParameter = options.jsonp || "callback";
        options.data = options.data || {};
        options.data[callbackParameter] = callbackName;
        return callbackName;
      }
    };
    var getRequestOptions = function(options, headers) {
      var params = options.data;
      var paramsAlreadyString = "string" === typeof params;
      var url = options.url || window2.location.href;
      if (!paramsAlreadyString && !options.cache) {
        params = params || {};
        params.dr = Date.now();
      }
      if (params && !options.upload) {
        if (!paramsAlreadyString) {
          params = paramsConvert(params);
        }
        if ("GET" === getMethod(options)) {
          if ("" !== params) {
            url += (url.indexOf("?") > -1 ? "&" : "?") + params;
          }
          params = null;
        } else if (headers["Content-Type"] && headers["Content-Type"].indexOf("application/x-www-form-urlencoded") > -1) {
          params = params.replace(/%20/g, "+");
        }
      }
      return {
        url,
        parameters: params
      };
    };
    function getMethod(options) {
      return (options.method || "GET").toUpperCase();
    }
    var getRequestHeaders = function(options) {
      var headers = options.headers || {};
      headers["Content-Type"] = headers["Content-Type"] || getContentTypeHeader(options);
      headers.Accept = headers.Accept || getAcceptHeader(options);
      if (!options.crossDomain && !headers["X-Requested-With"]) {
        headers["X-Requested-With"] = "XMLHttpRequest";
      }
      return headers;
    };
    var sendRequest = function(options) {
      var xhr = _http_request.default.getXhr();
      var d = new _deferred.Deferred();
      var result = d.promise();
      var async = (0, _type.isDefined)(options.async) ? options.async : true;
      var dataType = options.dataType;
      var timeout = options.timeout || 0;
      var timeoutId;
      options.crossDomain = isCrossDomain(options.url);
      var needScriptEvaluation = "jsonp" === dataType || "script" === dataType;
      if (void 0 === options.cache) {
        options.cache = !needScriptEvaluation;
      }
      var callbackName = getJsonpOptions(options);
      var headers = getRequestHeaders(options);
      var requestOptions = getRequestOptions(options, headers);
      var url = requestOptions.url;
      var parameters = requestOptions.parameters;
      if (callbackName) {
        window2[callbackName] = function(data) {
          d.resolve(data, SUCCESS, xhr);
        };
      }
      if (options.crossDomain && needScriptEvaluation) {
        evalCrossDomainScript(url).then(function() {
          if ("jsonp" === dataType) {
            return;
          }
          d.resolve(null, SUCCESS, xhr);
        }, function() {
          d.reject(xhr, ERROR);
        });
        return result;
      }
      if (options.crossDomain && !("withCredentials" in xhr)) {
        d.reject(xhr, ERROR);
        return result;
      }
      xhr.open(getMethod(options), url, async, options.username, options.password);
      if (async) {
        xhr.timeout = timeout;
        timeoutId = setHttpTimeout(timeout, xhr);
      }
      xhr.onreadystatechange = function(e) {
        if (4 === xhr.readyState) {
          clearTimeout(timeoutId);
          if (isStatusSuccess(xhr.status)) {
            if (hasContent(xhr.status)) {
              postProcess(d, xhr, dataType);
            } else {
              d.resolve(null, NO_CONTENT, xhr);
            }
          } else {
            d.reject(xhr, xhr.customStatus || ERROR);
          }
        }
      };
      if (options.upload) {
        xhr.upload.onprogress = options.upload.onprogress;
        xhr.upload.onloadstart = options.upload.onloadstart;
        xhr.upload.onabort = options.upload.onabort;
      }
      if (options.xhrFields) {
        for (var field in options.xhrFields) {
          xhr[field] = options.xhrFields[field];
        }
      }
      if ("arraybuffer" === options.responseType) {
        xhr.responseType = options.responseType;
      }
      for (var name in headers) {
        if (Object.prototype.hasOwnProperty.call(headers, name) && (0, _type.isDefined)(headers[name])) {
          xhr.setRequestHeader(name, headers[name]);
        }
      }
      if (options.beforeSend) {
        options.beforeSend(xhr);
      }
      xhr.send(parameters);
      result.abort = function() {
        xhr.abort();
      };
      return result;
    };
    var _default = (0, _dependency_injector.default)({
      sendRequest
    });
    exports.default = _default;
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/devextreme/cjs/exporter/svg_creator.js
var require_svg_creator = __commonJS({
  "node_modules/devextreme/cjs/exporter/svg_creator.js"(exports) {
    "use strict";
    exports.getData = getData;
    exports.svgCreator = void 0;
    var _renderer = _interopRequireDefault(require_renderer());
    var _ajax = _interopRequireDefault(require_ajax());
    var _window = require_window();
    var _type = require_type();
    var _iterator = require_iterator();
    var _svg = require_svg();
    var _deferred = require_deferred();
    function _interopRequireDefault(obj) {
      return obj && obj.j ? obj : {
        default: obj
      };
    }
    var window2 = (0, _window.getWindow)();
    var svgCreator = {
      Ty: "",
      pd: {},
      Fn: [],
      Ru: function(src, callback) {
        _ajax.default.sendRequest({
          url: src,
          method: "GET",
          responseType: "arraybuffer"
        }).done(callback).fail(function() {
          callback(false);
        });
      },
      Su: function() {
        var that = this;
        (0, _iterator.each)(that.pd, function(src) {
          var deferred = new _deferred.Deferred();
          that.Fn.push(deferred);
          that.Ru(src, function(response) {
            if (!response) {
              delete that.pd[src];
              deferred.resolve();
              return;
            }
            var i;
            var binary = "";
            var bytes = new Uint8Array(response);
            var length = bytes.byteLength;
            for (i = 0; i < length; i++) {
              binary += String.fromCharCode(bytes[i]);
            }
            that.pd[src] = "data:image/png;base64," + window2.btoa(binary);
            deferred.resolve();
          });
        });
      },
      Gn: function(element) {
        var href;
        var that = this;
        if ("image" === element.tagName) {
          href = (0, _renderer.default)(element).attr("href") || (0, _renderer.default)(element).attr("xlink:href");
          if (!that.pd[href]) {
            that.pd[href] = "";
          }
        }
        (0, _iterator.each)(element.childNodes, function(_, element2) {
          that.Gn(element2);
        });
      },
      Tu: function(svgElem) {
        this.Gn(svgElem);
        this.Su();
        return _deferred.when.apply(_renderer.default, this.Fn);
      },
      getData: function(data, options) {
        var markup;
        var that = this;
        var svgElem = (0, _svg.getSvgElement)(data);
        var $svgObject = (0, _renderer.default)(svgElem);
        $svgObject.find("[".concat(_svg.HIDDEN_FOR_EXPORT, "]")).remove();
        markup = '<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>' + (0, _svg.getSvgMarkup)($svgObject.get(0), options.backgroundColor);
        return that.Tu(svgElem).then(function() {
          (0, _iterator.each)(that.pd, function(href, dataURI) {
            var regexpString = `href=['|"]`.concat(href, `['|"]`);
            markup = markup.replace(new RegExp(regexpString, "gi"), 'href="'.concat(dataURI, '"'));
          });
          return (0, _type.isFunction)(window2.Blob) ? that.Ui(markup) : that.Vi(markup);
        });
      },
      Ui: function(markup) {
        return new window2.Blob([markup], {
          type: "image/svg+xml"
        });
      },
      Vi: function(markup) {
        return window2.btoa(markup);
      }
    };
    exports.svgCreator = svgCreator;
    function getData(data, options) {
      return svgCreator.getData(data, options);
    }
  }
});

// node_modules/devextreme/cjs/exporter/pdf_creator.js
var require_pdf_creator = __commonJS({
  "node_modules/devextreme/cjs/exporter/pdf_creator.js"(exports) {
    "use strict";
    exports.getData = getData;
    var _version = require_version();
    var _window = require_window();
    var _image_creator = require_image_creator();
    var _type = require_type();
    var _extend = require_extend();
    var window2 = (0, _window.getWindow)();
    var mainPageTemplate = "%PDF-1.3\r\n2 0 obj\r\n<</ProcSet[/PDF/ImageB/ImageC/ImageI]/XObject<</I0 5 0 R>>>>\r\nendobj\r\n4 0 obj\r\n<</Type/Pages/Kids[1 0 R]/Count 1>>\r\nendobj\r\n7 0 obj\r\n<</OpenAction[1 0 R /FitH null]/Type/Catalog/Pages 4 0 R/PageLayout/OneColumn>>\r\nendobj\r\n1 0 obj\r\n<</Type/Page/Resources 2 0 R/MediaBox[0 0 _width_ _height_]/Contents 3 0 R/Parent 4 0 R>>\r\nendobj\r\n";
    var contentTemplate = "3 0 obj\r\n<</Length 52>>stream\r\n0.20 w\n0 G\nq _width_ 0 0 _height_ 0.00 0.00 cm /I0 Do Q\r\nendstream\r\nendobj\r\n";
    var infoTemplate = "6 0 obj\r\n<</CreationDate _date_/Producer(DevExtreme _version_)>>\r\nendobj\r\n";
    var imageStartTemplate = "5 0 obj\r\n<</Type/XObject/Subtype/Image/Width _width_/Height _height_/ColorSpace/DeviceRGB/BitsPerComponent 8/Filter/DCTDecode/Length _length_>>stream\r\n";
    var imageEndTemplate = "\r\nendstream\r\nendobj\r\n";
    var trailerTemplate = "trailer\r\n<<\r\n/Size 8\r\n/Root 7 0 R\r\n/Info 6 0 R\r\n>>\r\nstartxref\r\n_length_\r\n%%EOF";
    var xrefTemplate = "xref\r\n0 8\r\n0000000000 65535 f\r\n0000000241 00000 n\r\n0000000010 00000 n\r\n_main_ 00000 n\r\n0000000089 00000 n\r\n_image_ 00000 n\r\n_info_ 00000 n\r\n0000000143 00000 n\r\n";
    var pad = function pad2(str, len) {
      return str.length < len ? pad2("0" + str, len) : str;
    };
    var composePdfString = function(imageString, options, curDate) {
      var margin = 2 * (options.margin || 0);
      var _calcScaledInfo = (0, _image_creator.calcScaledInfo)(options.width, options.height), width = _calcScaledInfo.width, height = _calcScaledInfo.height;
      width += margin;
      height += margin;
      var widthPt = (0.75 * width).toFixed(2);
      var heightPt = (0.75 * height).toFixed(2);
      var flooredWidth = Math.floor(width);
      var flooredHeight = Math.floor(height);
      var mainPage = mainPageTemplate.replace("_width_", widthPt).replace("_height_", heightPt);
      var content = contentTemplate.replace("_width_", widthPt).replace("_height_", heightPt);
      var info = infoTemplate.replace("_date_", curDate).replace("_version_", _version.version);
      var image = imageStartTemplate.replace("_width_", flooredWidth).replace("_height_", flooredHeight).replace("_length_", imageString.length) + imageString + imageEndTemplate;
      var xref = getXref(mainPage.length, content.length, info.length);
      var mainContent = mainPage + content + info + image;
      var trailer = trailerTemplate.replace("_length_", mainContent.length);
      return mainContent + xref + trailer;
    };
    function getXref(mainPageLength, contentLength, infoLength) {
      return xrefTemplate.replace("_main_", pad(mainPageLength + "", 10)).replace("_info_", pad(mainPageLength + contentLength + "", 10)).replace("_image_", pad(mainPageLength + contentLength + infoLength + "", 10));
    }
    var getCurDate = function() {
      return /* @__PURE__ */ new Date();
    };
    var getBlob = function(binaryData) {
      var i = 0;
      var dataArray = new Uint8Array(binaryData.length);
      for (; i < binaryData.length; i++) {
        dataArray[i] = binaryData.charCodeAt(i);
      }
      return new window2.Blob([dataArray.buffer], {
        type: "application/pdf"
      });
    };
    var getBase64 = function(binaryData) {
      return window2.btoa(binaryData);
    };
    function getTwoDigitValue(value) {
      var stringValue = value.toString();
      if (1 === stringValue.length) {
        return "0".concat(value);
      }
      return value;
    }
    function convertToPdfDateFormat(date) {
      var dateUnits = [date.getUTCFullYear(), getTwoDigitValue(date.getUTCMonth()), getTwoDigitValue(date.getUTCDate()), getTwoDigitValue(date.getUTCHours()), getTwoDigitValue(date.getUTCMinutes()), getTwoDigitValue(date.getUTCSeconds())];
      return "(D:".concat(dateUnits.join(""), "Z00'00')");
    }
    function getData(data, options) {
      return _image_creator.imageCreator.getImageData(data, (0, _extend.extend)({}, options, {
        format: "JPEG"
      })).then(function(imageString) {
        var binaryData = composePdfString(imageString, options, convertToPdfDateFormat(getCurDate()));
        var pdfData = (0, _type.isFunction)(window2.Blob) ? getBlob(binaryData) : getBase64(binaryData);
        return pdfData;
      });
    }
  }
});

// node_modules/devextreme/cjs/exporter.js
var require_exporter = __commonJS({
  "node_modules/devextreme/cjs/exporter.js"(exports) {
    "use strict";
    exports.export = _export;
    Object.defineProperty(exports, "fileSaver", {
      enumerable: true,
      get: function() {
        return _file_saver.fileSaver;
      }
    });
    exports.svg = exports.pdf = exports.image = void 0;
    var _file_saver = require_file_saver();
    var _image_creator = require_image_creator();
    var _svg_creator = require_svg_creator();
    var _type = require_type();
    var _deferred = require_deferred();
    var _pdf_creator = require_pdf_creator();
    function _export(data, options, getData) {
      if (!data) {
        return new _deferred.Deferred().resolve();
      }
      var exportingAction = options.exportingAction;
      var exportedAction = options.exportedAction;
      var fileSavingAction = options.fileSavingAction;
      var eventArgs = {
        fileName: options.fileName,
        format: options.format,
        cancel: false
      };
      if ((0, _type.isBoolean)(options.selectedRowsOnly)) {
        eventArgs.selectedRowsOnly = options.selectedRowsOnly;
      }
      (0, _type.isFunction)(exportingAction) && exportingAction(eventArgs);
      if (!eventArgs.cancel) {
        return getData(data, options).then(function(blob) {
          (0, _type.isFunction)(exportedAction) && exportedAction();
          if ((0, _type.isFunction)(fileSavingAction)) {
            eventArgs.data = blob;
            fileSavingAction(eventArgs);
          }
          if (!eventArgs.cancel) {
            var format = "xlsx" === options.format ? "EXCEL" : options.format;
            _file_saver.fileSaver.saveAs(eventArgs.fileName, format, blob);
          }
        });
      }
      return new _deferred.Deferred().resolve();
    }
    var image = {
      creator: _image_creator.imageCreator,
      getData: _image_creator.getData,
      testFormats: _image_creator.testFormats
    };
    exports.image = image;
    var pdf = {
      getData: _pdf_creator.getData
    };
    exports.pdf = pdf;
    var svg = {
      creator: _svg_creator.svgCreator,
      getData: _svg_creator.getData
    };
    exports.svg = svg;
  }
});

// node_modules/devextreme/cjs/events/hover.js
var require_hover = __commonJS({
  "node_modules/devextreme/cjs/events/hover.js"(exports) {
    "use strict";
    exports.start = exports.end = void 0;
    var _events_engine = _interopRequireDefault(require_events_engine());
    var _element_data = require_element_data();
    var _class = _interopRequireDefault(require_class());
    var _devices = _interopRequireDefault(require_devices());
    var _event_registrator = _interopRequireDefault(require_event_registrator());
    var _index = require_utils2();
    var _pointer = _interopRequireDefault(require_pointer());
    function _interopRequireDefault(obj) {
      return obj && obj.j ? obj : {
        default: obj
      };
    }
    var HOVERSTART_NAMESPACE = "dxHoverStart";
    var HOVERSTART = "dxhoverstart";
    exports.start = HOVERSTART;
    var POINTERENTER_NAMESPACED_EVENT_NAME = (0, _index.addNamespace)(_pointer.default.enter, HOVERSTART_NAMESPACE);
    var HOVEREND_NAMESPACE = "dxHoverEnd";
    var HOVEREND = "dxhoverend";
    exports.end = HOVEREND;
    var POINTERLEAVE_NAMESPACED_EVENT_NAME = (0, _index.addNamespace)(_pointer.default.leave, HOVEREND_NAMESPACE);
    var Hover = _class.default.inherit({
      noBubble: true,
      ctor: function() {
        this.wg = this.Hn + "_HandlerStore";
      },
      setup: function(element) {
        (0, _element_data.data)(element, this.wg, {});
      },
      add: function(element, handleObj) {
        var that = this;
        var handler = function(e) {
          that.tb(e);
        };
        _events_engine.default.on(element, this.Wi, handleObj.selector, handler);
        (0, _element_data.data)(element, this.wg)[handleObj.guid] = handler;
      },
      tb: function(e) {
        if ((0, _index.isTouchEvent)(e) || _devices.default.isSimulator()) {
          return;
        }
        (0, _index.fireEvent)({
          type: this.ld,
          originalEvent: e,
          delegateTarget: e.delegateTarget
        });
      },
      remove: function(element, handleObj) {
        var handler = (0, _element_data.data)(element, this.wg)[handleObj.guid];
        _events_engine.default.off(element, this.Wi, handleObj.selector, handler);
      },
      teardown: function(element) {
        (0, _element_data.removeData)(element, this.wg);
      }
    });
    var HoverStart = Hover.inherit({
      ctor: function() {
        this.Hn = HOVERSTART_NAMESPACE;
        this.ld = HOVERSTART;
        this.Wi = POINTERENTER_NAMESPACED_EVENT_NAME;
        this.callBase();
      },
      tb: function(e) {
        var pointers = e.pointers || [];
        if (!pointers.length) {
          this.callBase(e);
        }
      }
    });
    var HoverEnd = Hover.inherit({
      ctor: function() {
        this.Hn = HOVEREND_NAMESPACE;
        this.ld = HOVEREND;
        this.Wi = POINTERLEAVE_NAMESPACED_EVENT_NAME;
        this.callBase();
      }
    });
    (0, _event_registrator.default)(HOVERSTART, new HoverStart());
    (0, _event_registrator.default)(HOVEREND, new HoverEnd());
  }
});

// node_modules/devextreme/cjs/viz/core/export.js
var require_export = __commonJS({
  "node_modules/devextreme/cjs/viz/core/export.js"(exports) {
    "use strict";
    exports.plugin = exports.getMarkup = exports.exportWidgets = exports.exportFromMarkup = exports.combineMarkups = exports.ExportMenu = void 0;
    var _extend = require_extend();
    var _window = require_window();
    var _utils = require_utils();
    var _svg = require_svg();
    var _exporter = require_exporter();
    var _message = _interopRequireDefault(require_message());
    var _type = require_type();
    var _themes = require_themes2();
    var _hover = require_hover();
    var _pointer = _interopRequireDefault(require_pointer());
    var _console = require_console();
    var _size = require_size();
    function _interopRequireDefault(obj) {
      return obj && obj.j ? obj : {
        default: obj
      };
    }
    function _typeof(obj) {
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _defineProperty(obj, key, value) {
      key = _toPropertyKey(key);
      if (key in obj) {
        Object.defineProperty(obj, key, {
          value,
          enumerable: true,
          configurable: true,
          writable: true
        });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return "symbol" === _typeof(key) ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if ("object" !== _typeof(input) || null === input) {
        return input;
      }
      var prim = input[Symbol.toPrimitive];
      if (void 0 !== prim) {
        var res = prim.call(input, hint || "default");
        if ("object" !== _typeof(res)) {
          return res;
        }
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return ("string" === hint ? String : Number)(input);
    }
    var pointerActions = [_pointer.default.down, _pointer.default.move].join(" ");
    var BUTTON_SIZE = 35;
    var ICON_COORDS = [
      [9, 12, 26, 12, 26, 14, 9, 14],
      [9, 17, 26, 17, 26, 19, 9, 19],
      [9, 22, 26, 22, 26, 24, 9, 24]
    ];
    var LIST_PADDING_TOP = 4;
    var LIST_WIDTH = 120;
    var VERTICAL_TEXT_MARGIN = 8;
    var HORIZONTAL_TEXT_MARGIN = 15;
    var MENU_ITEM_HEIGHT = 30;
    var LIST_STROKE_WIDTH = 1;
    var MARGIN = 10;
    var SHADOW_OFFSET = 2;
    var SHADOW_BLUR = 3;
    var DEFAULT_EXPORT_FORMAT = "PNG";
    var ALLOWED_IMAGE_FORMATS = [DEFAULT_EXPORT_FORMAT, "JPEG", "GIF"];
    var ALLOWED_EXTRA_FORMATS = ["PDF", "SVG"];
    var EXPORT_CSS_CLASS = "dx-export-menu";
    var A4WidthCm = "21cm";
    var EXPORT_DATA_KEY = "export-element-type";
    var FORMAT_DATA_KEY = "export-element-format";
    var GET_COLOR_REGEX = /data-backgroundcolor="([^"]*)"/;
    function getValidFormats() {
      var imageFormats = _exporter.image.testFormats(ALLOWED_IMAGE_FORMATS);
      return {
        unsupported: imageFormats.unsupported,
        supported: imageFormats.supported.concat(ALLOWED_EXTRA_FORMATS)
      };
    }
    function validateFormat(format, incidentOccurred, validFormats) {
      validFormats = validFormats || getValidFormats();
      format = String(format).toUpperCase();
      if (-1 !== validFormats.supported.indexOf(format)) {
        return format;
      }
      if (-1 !== validFormats.unsupported.indexOf(format)) {
        incidentOccurred && incidentOccurred("W2108", [format]);
      }
    }
    function getCreatorFunc(format) {
      if ("SVG" === format) {
        return _exporter.svg.getData;
      } else if ("PDF" === format) {
        return _exporter.pdf.getData;
      } else {
        return _exporter.image.getData;
      }
    }
    function _print(imageSrc, options) {
      var document2 = (0, _window.getWindow)().document;
      var iFrame = document2.createElement("iframe");
      iFrame.onload = setPrint(imageSrc, options);
      iFrame.style.position = "fixed";
      iFrame.style.width = "0";
      iFrame.style.height = "0";
      iFrame.style.right = "0";
      iFrame.style.bottom = "0";
      document2.body.appendChild(iFrame);
    }
    function calculatePrintPageWidth(iFrameBody) {
      iFrameBody.style.width = A4WidthCm;
      var width = (0, _size.getWidth)(iFrameBody);
      iFrameBody.style.width = "";
      return width;
    }
    function setPrint(imageSrc, options) {
      return function() {
        var _this = this;
        var window2 = this.contentWindow;
        var img = window2.document.createElement("img");
        window2.document.body.appendChild(img);
        var widthRatio = calculatePrintPageWidth(window2.document.body) / options.width;
        if (widthRatio < 1) {
          window2.document.body.style.transform = "scale(".concat(widthRatio, ")");
          window2.document.body.style["transform-origin"] = "0 0";
        }
        var removeFrame = function() {
          _this.parentElement.removeChild(_this);
        };
        img.addEventListener("load", function() {
          window2.focus();
          window2.print();
        });
        img.addEventListener("error", removeFrame);
        window2.addEventListener("afterprint", function() {
          setTimeout(removeFrame, 0);
        });
        img.src = imageSrc;
      };
    }
    function getItemAttributes(options, type, itemIndex) {
      var x = BUTTON_SIZE - LIST_WIDTH;
      var y = BUTTON_SIZE + LIST_PADDING_TOP + LIST_STROKE_WIDTH + itemIndex * MENU_ITEM_HEIGHT;
      var attr = {
        rect: {
          width: LIST_WIDTH - 2 * LIST_STROKE_WIDTH,
          height: MENU_ITEM_HEIGHT,
          x: x + LIST_STROKE_WIDTH,
          y
        },
        text: {
          x: x + (options.rtl ? LIST_WIDTH - HORIZONTAL_TEXT_MARGIN : HORIZONTAL_TEXT_MARGIN),
          y: y + MENU_ITEM_HEIGHT - VERTICAL_TEXT_MARGIN
        }
      };
      if ("printing" === type) {
        attr.separator = {
          stroke: options.button.default.borderColor,
          "stroke-width": LIST_STROKE_WIDTH,
          cursor: "pointer",
          sharp: "v",
          d: "M " + x + " " + (y + MENU_ITEM_HEIGHT - LIST_STROKE_WIDTH) + " L " + (x + LIST_WIDTH) + " " + (y + MENU_ITEM_HEIGHT - LIST_STROKE_WIDTH)
        };
      }
      return attr;
    }
    function createMenuItem(renderer, options, settings) {
      var itemData = {};
      var type = settings.type;
      var format = settings.format;
      var attr = getItemAttributes(options, type, settings.itemIndex);
      var fontStyle = (0, _utils.patchFontOptions)(options.font);
      fontStyle["pointer-events"] = "none";
      var menuItem = renderer.g().attr({
        class: EXPORT_CSS_CLASS + "-list-item"
      });
      itemData[EXPORT_DATA_KEY] = type;
      if (format) {
        itemData[FORMAT_DATA_KEY] = format;
      }
      var rect = renderer.rect();
      rect.attr(attr.rect).css({
        cursor: "pointer",
        "pointer-events": "all"
      }).data(itemData);
      rect.on(_hover.start + ".export", function() {
        return rect.attr({
          fill: options.button.hover.backgroundColor
        });
      }).on(_hover.end + ".export", function() {
        return rect.attr({
          fill: null
        });
      });
      rect.append(menuItem);
      var text = renderer.text(settings.text).css(fontStyle).attr(attr.text).append(menuItem);
      if ("printing" === type) {
        renderer.path(null, "line").attr(attr.separator).append(menuItem);
      }
      return {
        g: menuItem,
        rect,
        resetState: function() {
          return rect.attr({
            fill: null
          });
        },
        fixPosition: function() {
          var textBBox = text.getBBox();
          text.move(attr.text.x - textBBox.x - (options.rtl ? textBBox.width : 0));
        }
      };
    }
    function createMenuItems(renderer, options) {
      var items = [];
      if (options.printingEnabled) {
        items.push(createMenuItem(renderer, options, {
          type: "printing",
          text: _message.default.format("vizExport-printingButtonText"),
          itemIndex: items.length
        }));
      }
      items = options.formats.reduce(function(r, format) {
        r.push(createMenuItem(renderer, options, {
          type: "exporting",
          text: _message.default.getFormatter("vizExport-exportButtonText")(format),
          format,
          itemIndex: r.length
        }));
        return r;
      }, items);
      return items;
    }
    function getBackgroundColorFromMarkup(markup) {
      var parsedMarkup = GET_COLOR_REGEX.exec(markup);
      return null === parsedMarkup || void 0 === parsedMarkup ? void 0 : parsedMarkup[1];
    }
    var exportFromMarkup = function(markup, options) {
      options.format = validateFormat(options.format) || DEFAULT_EXPORT_FORMAT;
      options.fileName = options.fileName || "file";
      options.exportingAction = options.onExporting;
      options.exportedAction = options.onExported;
      options.fileSavingAction = options.onFileSaving;
      options.margin = (0, _type.isDefined)(options.margin) ? options.margin : MARGIN;
      options.backgroundColor = (0, _type.isDefined)(options.backgroundColor) ? options.backgroundColor : getBackgroundColorFromMarkup(markup) || (0, _themes.getTheme)().backgroundColor;
      (0, _exporter.export)(markup, options, getCreatorFunc(options.format));
    };
    exports.exportFromMarkup = exportFromMarkup;
    var getMarkup = function(widgets) {
      return combineMarkups(widgets).markup;
    };
    exports.getMarkup = getMarkup;
    var exportWidgets = function(widgets, options) {
      options = options || {};
      var markupInfo = combineMarkups(widgets, {
        gridLayout: options.gridLayout,
        verticalAlignment: options.verticalAlignment,
        horizontalAlignment: options.horizontalAlignment
      });
      options.width = markupInfo.width;
      options.height = markupInfo.height;
      exportFromMarkup(markupInfo.markup, options);
    };
    exports.exportWidgets = exportWidgets;
    var combineMarkups = function(widgets) {
      var options = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
      if (!Array.isArray(widgets)) {
        widgets = [
          [widgets]
        ];
      } else if (!Array.isArray(widgets[0])) {
        widgets = widgets.map(function(item) {
          return [item];
        });
      }
      var compactView = !options.gridLayout;
      var exportItems = widgets.reduce(function(r, row, rowIndex) {
        var rowInfo = row.reduce(function(r2, item, colIndex) {
          var size = item.getSize();
          var backgroundColor2 = item.option("backgroundColor") || (0, _themes.getTheme)(item.option("theme")).backgroundColor;
          backgroundColor2 && -1 === r2.backgroundColors.indexOf(backgroundColor2) && r2.backgroundColors.push(backgroundColor2);
          r2.hOffset = r2.width;
          r2.width += size.width;
          r2.height = Math.max(r2.height, size.height);
          r2.itemWidth = Math.max(r2.itemWidth, size.width);
          r2.items.push({
            markup: item.svg(),
            width: size.width,
            height: size.height,
            c: colIndex,
            r: rowIndex,
            hOffset: r2.hOffset
          });
          return r2;
        }, {
          items: [],
          height: 0,
          itemWidth: 0,
          hOffset: 0,
          width: 0,
          backgroundColors: r.backgroundColors
        });
        r.rowOffsets.push(r.totalHeight);
        r.rowHeights.push(rowInfo.height);
        r.totalHeight += rowInfo.height;
        r.items = r.items.concat(rowInfo.items);
        r.itemWidth = Math.max(r.itemWidth, rowInfo.itemWidth);
        r.maxItemLen = Math.max(r.maxItemLen, rowInfo.items.length);
        r.totalWidth = compactView ? Math.max(r.totalWidth, rowInfo.width) : r.maxItemLen * r.itemWidth;
        return r;
      }, {
        items: [],
        rowOffsets: [],
        rowHeights: [],
        itemWidth: 0,
        totalHeight: 0,
        maxItemLen: 0,
        totalWidth: 0,
        backgroundColors: []
      });
      var backgroundColor = 'data-backgroundcolor="'.concat(1 === exportItems.backgroundColors.length ? exportItems.backgroundColors[0] : "", '" ');
      var getVOffset = function(item) {
        var align = options.verticalAlignment;
        var dy = exportItems.rowHeights[item.r] - item.height;
        return exportItems.rowOffsets[item.r] + ("bottom" === align ? dy : "center" === align ? dy / 2 : 0);
      };
      var getHOffset = function(item) {
        if (compactView) {
          return item.hOffset;
        }
        var align = options.horizontalAlignment;
        var colWidth = exportItems.itemWidth;
        var dx = colWidth - item.width;
        return item.c * colWidth + ("right" === align ? dx : "center" === align ? dx / 2 : 0);
      };
      var totalHeight = exportItems.totalHeight;
      var totalWidth = exportItems.totalWidth;
      return {
        markup: "<svg " + backgroundColor + 'height="' + totalHeight + '" width="' + totalWidth + '" version="1.1" xmlns="http://www.w3.org/2000/svg">' + exportItems.items.map(function(item) {
          return '<g transform="translate('.concat(getHOffset(item), ",").concat(getVOffset(item), ')">').concat(item.markup, "</g>");
        }).join("") + "</svg>",
        width: totalWidth,
        height: totalHeight
      };
    };
    exports.combineMarkups = combineMarkups;
    var ExportMenu = function(params) {
      var renderer = this.n = params.renderer;
      this.ea = params.incidentOccurred;
      this.Uu = params.exportTo;
      this.Vu = params.print;
      this.qd = renderer.shadowFilter("-50%", "-50%", "200%", "200%", SHADOW_OFFSET, 6, SHADOW_BLUR);
      this.qd.attr({
        opacity: 0.8
      });
      this.p = renderer.g().attr(_defineProperty({
        class: EXPORT_CSS_CLASS
      }, _svg.HIDDEN_FOR_EXPORT, true)).linkOn(renderer.root, {
        name: "export-menu",
        after: "peripheral"
      });
      this.Tb = renderer.g().attr({
        class: EXPORT_CSS_CLASS + "-button"
      }).append(this.p);
      this.ze = renderer.g().attr({
        class: EXPORT_CSS_CLASS + "-list"
      }).append(this.p);
      this.xg = renderer.rect(-LIST_WIDTH + BUTTON_SIZE, BUTTON_SIZE + LIST_PADDING_TOP, LIST_WIDTH, 0);
      this.xg.attr({
        "stroke-width": LIST_STROKE_WIDTH,
        cursor: "pointer",
        rx: 4,
        ry: 4,
        filter: this.qd.id
      });
      this.xg.data({
        "export-element-type": "list"
      });
      this.validFormats = getValidFormats();
      this.Wu();
    };
    exports.ExportMenu = ExportMenu;
    (0, _extend.extend)(ExportMenu.prototype, {
      getLayoutOptions: function() {
        if (this.In) {
          return {
            width: 0,
            height: 0,
            cutSide: "vertical",
            cutLayoutSide: "top"
          };
        }
        var bBox = this.Tb.getBBox();
        bBox.cutSide = "vertical";
        bBox.cutLayoutSide = "top";
        bBox.height += MARGIN;
        bBox.position = {
          vertical: "top",
          horizontal: "right"
        };
        bBox.verticalAlignment = "top";
        bBox.horizontalAlignment = "right";
        return bBox;
      },
      shift: function(_, y) {
        this.p.attr({
          translateY: this.p.attr("translateY") + y
        });
      },
      draw: function(width, height, canvas) {
        this.p.move(width - BUTTON_SIZE - SHADOW_OFFSET - SHADOW_BLUR + canvas.left, Math.floor(height / 2 - BUTTON_SIZE / 2));
        var layoutOptions = this.getLayoutOptions();
        if (layoutOptions.width > width || layoutOptions.height > height) {
          this.freeSpace();
        }
        return this;
      },
      show: function() {
        this.p.linkAppend();
      },
      hide: function() {
        this.p.linkRemove();
      },
      setOptions: function(options) {
        var _this2 = this;
        this.e = options;
        if (options.formats) {
          options.formats = options.formats.reduce(function(r, format) {
            format = validateFormat(format, _this2.ea, _this2.validFormats);
            format && r.push(format);
            return r;
          }, []);
        } else {
          options.formats = this.validFormats.supported.slice();
        }
        options.printingEnabled = void 0 === options.printingEnabled ? true : options.printingEnabled;
        if (options.enabled && (options.formats.length || options.printingEnabled)) {
          this.show();
          this.Xu();
          this.Yu();
          this.Ae();
        } else {
          this.hide();
        }
      },
      dispose: function() {
        this.Zu();
        this.p.linkRemove().linkOff();
        this.p.dispose();
        this.qd.dispose();
      },
      layoutOptions: function() {
        return this.e.enabled && {
          horizontalAlignment: "right",
          verticalAlignment: "top",
          weak: true
        };
      },
      measure: function() {
        this._u();
        var margin = this.e.button.margin;
        return [BUTTON_SIZE + margin.left + margin.right, BUTTON_SIZE + margin.top + margin.bottom];
      },
      move: function(rect) {
        var margin = this.e.button.margin;
        this.p.attr({
          translateX: Math.round(rect[0]) + margin.left,
          translateY: Math.round(rect[1]) + margin.top
        });
      },
      _u: function() {
        this.In = false;
        this.show();
      },
      freeSpace: function() {
        this.ea("W2107");
        this.In = true;
        this.hide();
      },
      Ae: function() {
        this.ze.remove();
        this.Xi = false;
        this.rd("default");
        this.Jn.forEach(function(item) {
          return item.resetState();
        });
      },
      $u: function() {
        this.ze.append(this.p);
        this.Xi = true;
        this.Jn.forEach(function(item) {
          return item.fixPosition();
        });
      },
      rd: function(state) {
        var style = this.e.button[state];
        this.Be.attr({
          stroke: style.borderColor,
          fill: style.backgroundColor
        });
        this.Yi.attr({
          fill: style.color
        });
      },
      Wu: function() {
        var _this3 = this;
        this.n.root.on(_pointer.default.up + ".export", function(e) {
          var elementType = e.target[EXPORT_DATA_KEY];
          if (!elementType) {
            if (_this3.Be) {
              _this3.Ae();
            }
            return;
          }
          if ("button" === elementType) {
            if (_this3.Xi) {
              _this3.rd("default");
              _this3.Ae();
            } else {
              _this3.rd("focus");
              _this3.$u();
            }
          } else if ("printing" === elementType) {
            _this3.Vu();
            _this3.Ae();
          } else if ("exporting" === elementType) {
            _this3.Uu(e.target[FORMAT_DATA_KEY]);
            _this3.Ae();
          }
        });
        this.ze.on(pointerActions, function(e) {
          return e.stopPropagation();
        });
        this.Tb.on(_pointer.default.enter, function() {
          return _this3.rd("hover");
        });
        this.Tb.on(_pointer.default.leave, function() {
          return _this3.rd(_this3.Xi ? "focus" : "default");
        });
        this.Tb.on(_pointer.default.down + ".export", function() {
          return _this3.rd("active");
        });
      },
      Zu: function() {
        this.n.root.off(".export");
        this.ze.off();
        this.Tb.off();
      },
      Xu: function() {
        var renderer = this.n;
        var options = this.e;
        var exportData = {
          "export-element-type": "button"
        };
        if (!this.Be) {
          this.Be = renderer.rect(0, 0, BUTTON_SIZE, BUTTON_SIZE).append(this.Tb);
          this.Be.attr({
            rx: 4,
            ry: 4,
            fill: options.button.default.backgroundColor,
            stroke: options.button.default.borderColor,
            "stroke-width": 1,
            cursor: "pointer"
          });
          this.Be.data(exportData);
          this.Yi = renderer.path(ICON_COORDS).append(this.Tb);
          this.Yi.attr({
            fill: options.button.default.color,
            cursor: "pointer"
          });
          this.Yi.data(exportData);
          this.Tb.setTitle(_message.default.format("vizExport-titleMenuText"));
        }
      },
      Yu: function() {
        var options = this.e;
        var buttonDefault = options.button.default;
        var listGroup = this.ze;
        var items = createMenuItems(this.n, options);
        this.qd.attr({
          color: options.shadowColor
        });
        this.xg.attr({
          height: items.length * MENU_ITEM_HEIGHT + 2 * LIST_STROKE_WIDTH,
          fill: buttonDefault.backgroundColor,
          stroke: buttonDefault.borderColor
        });
        listGroup.clear();
        this.xg.append(listGroup);
        items.forEach(function(item) {
          return item.g.append(listGroup);
        });
        this.Jn = items;
      }
    });
    function getExportOptions(widget, exportOptions, fileName, format) {
      if (format || exportOptions.format) {
        format = validateFormat(format || exportOptions.format, widget.ea);
      }
      var _widget$getSize = widget.getSize(), width = _widget$getSize.width, height = _widget$getSize.height;
      return {
        format: format || DEFAULT_EXPORT_FORMAT,
        fileName: fileName || exportOptions.fileName || "file",
        backgroundColor: exportOptions.backgroundColor,
        width,
        height,
        margin: exportOptions.margin,
        svgToCanvas: exportOptions.svgToCanvas,
        exportingAction: widget.bc("onExporting", {
          excludeValidators: ["disabled"]
        }),
        exportedAction: widget.bc("onExported", {
          excludeValidators: ["disabled"]
        }),
        fileSavingAction: widget.bc("onFileSaving", {
          excludeValidators: ["disabled"]
        })
      };
    }
    var plugin = {
      name: "export",
      init: function() {
        var _this4 = this;
        this.Ce = new ExportMenu({
          renderer: this.n,
          incidentOccurred: this.ea,
          print: function() {
            return _this4.print();
          },
          exportTo: function(format) {
            return _this4.exportTo(void 0, format);
          }
        });
        this.Mc.add(this.Ce);
      },
      dispose: function() {
        this.Ce.dispose();
      },
      members: {
        av: function() {
          return (0, _extend.extend)({}, this.Ea("export"), {
            rtl: this.Ea("rtlEnabled", true)
          });
        },
        Kn: function() {
          var pointerEventsValue = this.n.root.attr("pointer-events");
          this.n.root.attr({
            "pointer-events": "none"
          });
          return pointerEventsValue;
        },
        exportTo: function(fileName, format) {
          var _this5 = this;
          var menu = this.Ce;
          var options = getExportOptions(this, this.Ea("export") || {}, fileName, format);
          menu && menu.hide();
          var pointerEventsValue = this.Kn();
          var promise = (0, _exporter.export)(this.n.root.element, options, getCreatorFunc(options.format)).fail(_console.logger.error).always(function() {
            _this5.n.root.attr({
              "pointer-events": pointerEventsValue
            });
          });
          menu && menu.show();
          return promise;
        },
        print: function() {
          var _this6 = this;
          var menu = this.Ce;
          var options = getExportOptions(this, this.Ea("export") || {});
          options.exportingAction = null;
          options.exportedAction = null;
          options.margin = 0;
          options.format = "PNG";
          options.useBase64 = true;
          options.fileSavingAction = function(eventArgs) {
            _print("data:image/png;base64,".concat(eventArgs.data), {
              width: options.width,
              bv: options.bv
            });
            eventArgs.cancel = true;
          };
          var pointerEventsValue = this.Kn();
          menu && menu.hide();
          var promise = (0, _exporter.export)(this.n.root.element, options, getCreatorFunc(options.format)).fail(_console.logger.error).always(function() {
            _this6.n.root.attr({
              "pointer-events": pointerEventsValue
            });
          });
          menu && menu.show();
          return promise;
        }
      },
      customize: function(constructor) {
        var proto = constructor.prototype;
        constructor.addChange({
          code: "EXPORT",
          handler: function() {
            this.Ce.setOptions(this.av());
            this.La(["LAYOUT"]);
          },
          isThemeDependent: true,
          isOptionChange: true,
          option: "export"
        });
        proto.ua.onExporting = "EXPORT";
        proto.ua.onExported = "EXPORT";
        proto.ua.onFileSaving = "EXPORT";
      },
      fontFields: ["export.font"]
    };
    exports.plugin = plugin;
  }
});

// node_modules/devextreme/cjs/data/utils.js
var require_utils5 = __commonJS({
  "node_modules/devextreme/cjs/data/utils.js"(exports) {
    "use strict";
    exports.errorMessageFromXhr = exports.base64_encode = exports.aggregators = exports.XHR_ERROR_UNLOAD = void 0;
    exports.isConjunctiveOperator = isConjunctiveOperator;
    exports.isDisjunctiveOperator = isDisjunctiveOperator;
    exports.rejectedPromise = exports.processRequestResultLock = exports.normalizeSortingInfo = exports.normalizeBinaryCriterion = exports.keysEqual = exports.isUnaryOperation = exports.isGroupCriterion = void 0;
    exports.throttleChanges = throttleChanges;
    exports.trivialPromise = void 0;
    var _type = require_type();
    var _dom_adapter = _interopRequireDefault(require_dom_adapter());
    var _ready_callbacks = _interopRequireDefault(require_ready_callbacks());
    var _window = require_window();
    var _iterator = require_iterator();
    var _deferred = require_deferred();
    var _common = require_common();
    function _interopRequireDefault(obj) {
      return obj && obj.j ? obj : {
        default: obj
      };
    }
    function _toConsumableArray(arr) {
      return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
    }
    function _nonIterableSpread() {
      throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _unsupportedIterableToArray(o, minLen) {
      if (!o) {
        return;
      }
      if ("string" === typeof o) {
        return _arrayLikeToArray(o, minLen);
      }
      var n = Object.prototype.toString.call(o).slice(8, -1);
      if ("Object" === n && o.constructor) {
        n = o.constructor.name;
      }
      if ("Map" === n || "Set" === n) {
        return Array.from(o);
      }
      if ("Arguments" === n || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) {
        return _arrayLikeToArray(o, minLen);
      }
    }
    function _iterableToArray(iter) {
      if ("undefined" !== typeof Symbol && null != iter[Symbol.iterator] || null != iter["@@iterator"]) {
        return Array.from(iter);
      }
    }
    function _arrayWithoutHoles(arr) {
      if (Array.isArray(arr)) {
        return _arrayLikeToArray(arr);
      }
    }
    function _arrayLikeToArray(arr, len) {
      if (null == len || len > arr.length) {
        len = arr.length;
      }
      for (var i = 0, arr2 = new Array(len); i < len; i++) {
        arr2[i] = arr[i];
      }
      return arr2;
    }
    var ready = _ready_callbacks.default.add;
    var XHR_ERROR_UNLOAD = "DEVEXTREME_XHR_ERROR_UNLOAD";
    exports.XHR_ERROR_UNLOAD = XHR_ERROR_UNLOAD;
    var normalizeBinaryCriterion = function(crit) {
      return [crit[0], crit.length < 3 ? "=" : String(crit[1]).toLowerCase(), crit.length < 2 ? true : crit[crit.length - 1]];
    };
    exports.normalizeBinaryCriterion = normalizeBinaryCriterion;
    var normalizeSortingInfo = function(info) {
      if (!Array.isArray(info)) {
        info = [info];
      }
      return (0, _iterator.map)(info, function(i) {
        var result = {
          selector: (0, _type.isFunction)(i) || "string" === typeof i ? i : i.getter || i.field || i.selector,
          desc: !!(i.desc || "d" === String(i.dir).charAt(0).toLowerCase())
        };
        if (i.compare) {
          result.compare = i.compare;
        }
        return result;
      });
    };
    exports.normalizeSortingInfo = normalizeSortingInfo;
    var errorMessageFromXhr = function() {
      var textStatusMessages = {
        timeout: "Network connection timeout",
        error: "Unspecified network error",
        parsererror: "Unexpected server response"
      };
      var unloading;
      ready(function() {
        var window2 = (0, _window.getWindow)();
        _dom_adapter.default.listen(window2, "beforeunload", function() {
          unloading = true;
        });
      });
      return function(xhr, textStatus) {
        if (unloading) {
          return XHR_ERROR_UNLOAD;
        }
        if (xhr.status < 400) {
          return function(textStatus2) {
            var result = textStatusMessages[textStatus2];
            if (!result) {
              return textStatus2;
            }
            return result;
          }(textStatus);
        }
        return xhr.statusText;
      };
    }();
    exports.errorMessageFromXhr = errorMessageFromXhr;
    var aggregators = {
      count: {
        seed: 0,
        step: function(count) {
          return 1 + count;
        }
      },
      sum: {
        seed: 0,
        step: function(sum, item) {
          return sum + item;
        }
      },
      min: {
        step: function(min, item) {
          return item < min ? item : min;
        }
      },
      max: {
        step: function(max, item) {
          return item > max ? item : max;
        }
      },
      avg: {
        seed: [0, 0],
        step: function(pair, value) {
          return [pair[0] + value, pair[1] + 1];
        },
        finalize: function(pair) {
          return pair[1] ? pair[0] / pair[1] : NaN;
        }
      }
    };
    exports.aggregators = aggregators;
    var processRequestResultLock = function() {
      var lockCount = 0;
      var lockDeferred;
      return {
        obtain: function() {
          if (0 === lockCount) {
            lockDeferred = new _deferred.Deferred();
          }
          lockCount++;
        },
        release: function() {
          lockCount--;
          if (lockCount < 1) {
            lockDeferred.resolve();
          }
        },
        promise: function() {
          var deferred = 0 === lockCount ? new _deferred.Deferred().resolve() : lockDeferred;
          return deferred.promise();
        },
        reset: function() {
          lockCount = 0;
          if (lockDeferred) {
            lockDeferred.resolve();
          }
        }
      };
    }();
    exports.processRequestResultLock = processRequestResultLock;
    function isDisjunctiveOperator(condition) {
      return /^(or|\|\||\|)$/i.test(condition);
    }
    function isConjunctiveOperator(condition) {
      return /^(and|&&|&)$/i.test(condition);
    }
    var keysEqual = function(keyExpr, key1, key2) {
      if (Array.isArray(keyExpr)) {
        var names = (0, _iterator.map)(key1, function(v, k) {
          return k;
        });
        var name;
        for (var i = 0; i < names.length; i++) {
          name = names[i];
          if (!(0, _common.equalByValue)(key1[name], key2[name], {
            strict: false
          })) {
            return false;
          }
        }
        return true;
      }
      return (0, _common.equalByValue)(key1, key2, {
        strict: false
      });
    };
    exports.keysEqual = keysEqual;
    var BASE64_CHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
    var base64_encode = function(input) {
      if (!Array.isArray(input)) {
        input = stringToByteArray(String(input));
      }
      var result = "";
      function getBase64Char(index) {
        return BASE64_CHARS.charAt(index);
      }
      for (var i = 0; i < input.length; i += 3) {
        var octet1 = input[i];
        var octet2 = input[i + 1];
        var octet3 = input[i + 2];
        result += (0, _iterator.map)([octet1 >> 2, (3 & octet1) << 4 | octet2 >> 4, isNaN(octet2) ? 64 : (15 & octet2) << 2 | octet3 >> 6, isNaN(octet3) ? 64 : 63 & octet3], getBase64Char).join("");
      }
      return result;
    };
    exports.base64_encode = base64_encode;
    function stringToByteArray(str) {
      var bytes = [];
      var code;
      var i;
      for (i = 0; i < str.length; i++) {
        code = str.charCodeAt(i);
        if (code < 128) {
          bytes.push(code);
        } else if (code < 2048) {
          bytes.push(192 + (code >> 6), 128 + (63 & code));
        } else if (code < 65536) {
          bytes.push(224 + (code >> 12), 128 + (code >> 6 & 63), 128 + (63 & code));
        } else if (code < 2097152) {
          bytes.push(240 + (code >> 18), 128 + (code >> 12 & 63), 128 + (code >> 6 & 63), 128 + (63 & code));
        }
      }
      return bytes;
    }
    var isUnaryOperation = function(crit) {
      return "!" === crit[0] && Array.isArray(crit[1]);
    };
    exports.isUnaryOperation = isUnaryOperation;
    var isGroupOperator = function(value) {
      return "and" === value || "or" === value;
    };
    var isGroupCriterion = function(crit) {
      var first = crit[0];
      var second = crit[1];
      if (Array.isArray(first)) {
        return true;
      }
      if ((0, _type.isFunction)(first)) {
        if (Array.isArray(second) || (0, _type.isFunction)(second) || isGroupOperator(second)) {
          return true;
        }
      }
      return false;
    };
    exports.isGroupCriterion = isGroupCriterion;
    var trivialPromise = function() {
      var d = new _deferred.Deferred();
      return d.resolve.apply(d, arguments).promise();
    };
    exports.trivialPromise = trivialPromise;
    var rejectedPromise = function() {
      var d = new _deferred.Deferred();
      return d.reject.apply(d, arguments).promise();
    };
    exports.rejectedPromise = rejectedPromise;
    function throttle(func, timeout) {
      var timeoutId;
      return function() {
        var _this = this;
        if (!timeoutId) {
          timeoutId = setTimeout(function() {
            timeoutId = void 0;
            func.call(_this);
          }, (0, _type.isFunction)(timeout) ? timeout() : timeout);
        }
        return timeoutId;
      };
    }
    function throttleChanges(func, timeout) {
      var cache = [];
      var throttled = throttle(function() {
        func.call(this, cache);
        cache = [];
      }, timeout);
      return function(changes) {
        if (Array.isArray(changes)) {
          var _cache;
          (_cache = cache).push.apply(_cache, _toConsumableArray(changes));
        }
        return throttled.call(this, cache);
      };
    }
  }
});

// node_modules/devextreme/cjs/data/errors.js
var require_errors2 = __commonJS({
  "node_modules/devextreme/cjs/data/errors.js"(exports) {
    "use strict";
    exports.setErrorHandler = exports.handleError = exports.errors = exports.errorHandler = void 0;
    var _error = _interopRequireDefault(require_error());
    var _errors = _interopRequireDefault(require_errors());
    function _interopRequireDefault(obj) {
      return obj && obj.j ? obj : {
        default: obj
      };
    }
    var errors = (0, _error.default)(_errors.default.ERROR_MESSAGES, {
      E4000: "[DevExpress.data]: {0}",
      E4001: "Unknown aggregating function is detected: '{0}'",
      E4002: "Unsupported OData protocol version is used",
      E4003: "Unknown filter operation is used: {0}",
      E4004: "The thenby() method is called before the sortby() method",
      E4005: "Store requires a key expression for this operation",
      E4006: "ArrayStore 'data' option must be an array",
      E4007: "Compound keys cannot be auto-generated",
      E4008: "Attempt to insert an item with a duplicated key",
      E4009: "Data item cannot be found",
      E4010: "CustomStore does not support creating queries",
      E4011: "Custom Store method is not implemented or is not a function: {0}",
      E4012: "Custom Store method returns an invalid value: {0}",
      E4013: "Local Store requires the 'name' configuration option is specified",
      E4014: "Unknown data type is specified for ODataStore: {0}",
      E4015: "Unknown entity name or alias is used: {0}",
      E4016: "The compileSetter(expr) method is called with 'self' passed as a parameter",
      E4017: "Keys cannot be modified",
      E4018: "The server has returned a non-numeric value in a response to an item count request",
      E4019: "Mixing of group operators inside a single group of filter expression is not allowed",
      E4020: "Unknown store type is detected: {0}",
      E4021: "The server response does not provide the totalCount value",
      E4022: "The server response does not provide the groupCount value",
      E4023: "Could not parse the following XML: {0}",
      E4024: "String function {0} cannot be used with the data field {1} of type {2}.",
      W4000: "Data returned from the server has an incorrect structure",
      W4001: 'The {0} field is listed in both "keyType" and "fieldTypes". The value of "fieldTypes" is used.',
      W4002: "Data loading has failed for some cells due to the following error: {0}"
    });
    exports.errors = errors;
    var errorHandler = null;
    exports.errorHandler = errorHandler;
    var handleError = function(error) {
      var _errorHandler;
      null === (_errorHandler = errorHandler) || void 0 === _errorHandler ? void 0 : _errorHandler(error);
    };
    exports.handleError = handleError;
    var setErrorHandler = function(handler) {
      return exports.errorHandler = errorHandler = handler;
    };
    exports.setErrorHandler = setErrorHandler;
  }
});

// node_modules/devextreme/cjs/data/array_utils.js
var require_array_utils = __commonJS({
  "node_modules/devextreme/cjs/data/array_utils.js"(exports) {
    "use strict";
    exports.applyBatch = applyBatch;
    exports.applyChanges = applyChanges;
    exports.createObjectWithChanges = createObjectWithChanges;
    exports.indexByKey = indexByKey;
    exports.insert = insert;
    exports.remove = remove;
    exports.update = update;
    var _type = require_type();
    var _config = _interopRequireDefault(require_config());
    var _guid = _interopRequireDefault(require_guid());
    var _extend = require_extend();
    var _errors = require_errors2();
    var _object = require_object();
    var _data = require_data();
    var _utils = require_utils5();
    function _interopRequireDefault(obj) {
      return obj && obj.j ? obj : {
        default: obj
      };
    }
    function _typeof(obj) {
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _toConsumableArray(arr) {
      return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
    }
    function _nonIterableSpread() {
      throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _unsupportedIterableToArray(o, minLen) {
      if (!o) {
        return;
      }
      if ("string" === typeof o) {
        return _arrayLikeToArray(o, minLen);
      }
      var n = Object.prototype.toString.call(o).slice(8, -1);
      if ("Object" === n && o.constructor) {
        n = o.constructor.name;
      }
      if ("Map" === n || "Set" === n) {
        return Array.from(o);
      }
      if ("Arguments" === n || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) {
        return _arrayLikeToArray(o, minLen);
      }
    }
    function _iterableToArray(iter) {
      if ("undefined" !== typeof Symbol && null != iter[Symbol.iterator] || null != iter["@@iterator"]) {
        return Array.from(iter);
      }
    }
    function _arrayWithoutHoles(arr) {
      if (Array.isArray(arr)) {
        return _arrayLikeToArray(arr);
      }
    }
    function _arrayLikeToArray(arr, len) {
      if (null == len || len > arr.length) {
        len = arr.length;
      }
      for (var i = 0, arr2 = new Array(len); i < len; i++) {
        arr2[i] = arr[i];
      }
      return arr2;
    }
    function _extends() {
      _extends = Object.assign ? Object.assign.bind() : function(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends.apply(this, arguments);
    }
    function hasKey(target, keyOrKeys) {
      var key;
      var keys = "string" === typeof keyOrKeys ? keyOrKeys.split() : keyOrKeys.slice();
      while (keys.length) {
        key = keys.shift();
        if (key in target) {
          return true;
        }
      }
      return false;
    }
    function findItems(keyInfo, items, key, groupCount) {
      var childItems;
      var result;
      if (groupCount) {
        for (var i = 0; i < items.length; i++) {
          childItems = items[i].items || items[i].collapsedItems || [];
          result = findItems(keyInfo, childItems || [], key, groupCount - 1);
          if (result) {
            return result;
          }
        }
      } else if (indexByKey(keyInfo, items, key) >= 0) {
        return items;
      }
    }
    function getItems(keyInfo, items, key, groupCount) {
      if (groupCount) {
        return findItems(keyInfo, items, key, groupCount) || [];
      }
      return items;
    }
    function generateDataByKeyMap(keyInfo, array) {
      if (keyInfo.key() && (!array.rc || array.Ln !== array.length)) {
        var dataByKeyMap = {};
        var arrayLength = array.length;
        for (var i = 0; i < arrayLength; i++) {
          dataByKeyMap[JSON.stringify(keyInfo.keyOf(array[i]))] = array[i];
        }
        array.rc = dataByKeyMap;
        array.Ln = arrayLength;
      }
    }
    function getCacheValue(array, key) {
      if (array.rc) {
        return array.rc[JSON.stringify(key)];
      }
    }
    function getHasKeyCacheValue(array, key) {
      if (array.rc) {
        return array.rc[JSON.stringify(key)];
      }
      return true;
    }
    function setDataByKeyMapValue(array, key, data) {
      if (array.rc) {
        array.rc[JSON.stringify(key)] = data;
        array.Ln += data ? 1 : -1;
      }
    }
    function cloneInstanceWithChangedPaths(instance, changes, clonedInstances) {
      clonedInstances = clonedInstances || /* @__PURE__ */ new WeakMap();
      var result = instance ? Object.create(Object.getPrototypeOf(instance)) : {};
      if (instance) {
        clonedInstances.set(instance, result);
      }
      var instanceWithoutPrototype = _extends({}, instance);
      (0, _object.deepExtendArraySafe)(result, instanceWithoutPrototype, true, true);
      for (var name in instanceWithoutPrototype) {
        var value = instanceWithoutPrototype[name];
        var change = null === changes || void 0 === changes ? void 0 : changes[name];
        if ((0, _type.isObject)(value) && !(0, _type.isPlainObject)(value) && (0, _type.isObject)(change) && !clonedInstances.has(value)) {
          result[name] = cloneInstanceWithChangedPaths(value, change, clonedInstances);
        }
      }
      for (var _name in result) {
        var prop = result[_name];
        if ((0, _type.isObject)(prop) && clonedInstances.has(prop)) {
          result[_name] = clonedInstances.get(prop);
        }
      }
      return result;
    }
    function createObjectWithChanges(target, changes) {
      var result = cloneInstanceWithChangedPaths(target, changes);
      return (0, _object.deepExtendArraySafe)(result, changes, true, true);
    }
    function applyBatch(_ref) {
      var keyInfo = _ref.keyInfo, data = _ref.data, changes = _ref.changes, groupCount = _ref.groupCount, useInsertIndex = _ref.useInsertIndex, immutable = _ref.immutable, disableCache = _ref.disableCache, logError = _ref.logError, skipCopying = _ref.skipCopying;
      var resultItems = true === immutable ? _toConsumableArray(data) : data;
      changes.forEach(function(item) {
        var items = "insert" === item.type ? resultItems : getItems(keyInfo, resultItems, item.key, groupCount);
        !disableCache && generateDataByKeyMap(keyInfo, items);
        switch (item.type) {
          case "update":
            update(keyInfo, items, item.key, item.data, true, immutable, logError);
            break;
          case "insert":
            insert(keyInfo, items, item.data, useInsertIndex && (0, _type.isDefined)(item.index) ? item.index : -1, true, logError, skipCopying);
            break;
          case "remove":
            remove(keyInfo, items, item.key, true, logError);
        }
      });
      return resultItems;
    }
    function getErrorResult(isBatch, logError, errorCode) {
      return !isBatch ? (0, _utils.rejectedPromise)(_errors.errors.Error(errorCode)) : logError && _errors.errors.log(errorCode);
    }
    function applyChanges(data, changes) {
      var options = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {};
      var _options$keyExpr = options.keyExpr, keyExpr = void 0 === _options$keyExpr ? "id" : _options$keyExpr, _options$immutable = options.immutable, immutable = void 0 === _options$immutable ? true : _options$immutable;
      var keyGetter = (0, _data.compileGetter)(keyExpr);
      var keyInfo = {
        key: function() {
          return keyExpr;
        },
        keyOf: function(obj) {
          return keyGetter(obj);
        }
      };
      return applyBatch({
        keyInfo,
        data,
        changes,
        immutable,
        disableCache: true,
        logError: true
      });
    }
    function update(keyInfo, array, key, data, isBatch, immutable, logError) {
      var target;
      var keyExpr = keyInfo.key();
      if (keyExpr) {
        if (hasKey(data, keyExpr) && !(0, _utils.keysEqual)(keyExpr, key, keyInfo.keyOf(data))) {
          return getErrorResult(isBatch, logError, "E4017");
        }
        target = getCacheValue(array, key);
        if (!target) {
          var index = indexByKey(keyInfo, array, key);
          if (index < 0) {
            return getErrorResult(isBatch, logError, "E4009");
          }
          target = array[index];
          if (true === immutable && (0, _type.isDefined)(target)) {
            var newTarget = createObjectWithChanges(target, data);
            array[index] = newTarget;
            return !isBatch && (0, _utils.trivialPromise)(newTarget, key);
          }
        }
      } else {
        target = key;
      }
      (0, _object.deepExtendArraySafe)(target, data, true);
      if (!isBatch) {
        if ((0, _config.default)().useLegacyStoreResult) {
          return (0, _utils.trivialPromise)(key, data);
        } else {
          return (0, _utils.trivialPromise)(target, key);
        }
      }
    }
    function insert(keyInfo, array, data, index, isBatch, logError, skipCopying) {
      var keyValue;
      var keyExpr = keyInfo.key();
      var obj = (0, _type.isPlainObject)(data) && !skipCopying ? (0, _extend.extend)({}, data) : data;
      if (keyExpr) {
        keyValue = keyInfo.keyOf(obj);
        if (void 0 === keyValue || "object" === _typeof(keyValue) && (0, _type.isEmptyObject)(keyValue)) {
          if (Array.isArray(keyExpr)) {
            throw _errors.errors.Error("E4007");
          }
          keyValue = obj[keyExpr] = String(new _guid.default());
        } else if (void 0 !== array[indexByKey(keyInfo, array, keyValue)]) {
          return getErrorResult(isBatch, logError, "E4008");
        }
      } else {
        keyValue = obj;
      }
      if (index >= 0) {
        array.splice(index, 0, obj);
      } else {
        array.push(obj);
      }
      setDataByKeyMapValue(array, keyValue, obj);
      if (!isBatch) {
        return (0, _utils.trivialPromise)((0, _config.default)().useLegacyStoreResult ? data : obj, keyValue);
      }
    }
    function remove(keyInfo, array, key, isBatch, logError) {
      var index = indexByKey(keyInfo, array, key);
      if (index > -1) {
        array.splice(index, 1);
        setDataByKeyMapValue(array, key, null);
      }
      if (!isBatch) {
        return (0, _utils.trivialPromise)(key);
      } else if (index < 0) {
        return getErrorResult(isBatch, logError, "E4009");
      }
    }
    function indexByKey(keyInfo, array, key) {
      var keyExpr = keyInfo.key();
      if (!getHasKeyCacheValue(array, key)) {
        return -1;
      }
      for (var i = 0, arrayLength = array.length; i < arrayLength; i++) {
        if ((0, _utils.keysEqual)(keyExpr, keyInfo.keyOf(array[i]), key)) {
          return i;
        }
      }
      return -1;
    }
  }
});

// node_modules/devextreme/cjs/data/array_query.js
var require_array_query = __commonJS({
  "node_modules/devextreme/cjs/data/array_query.js"(exports, module) {
    "use strict";
    exports.default = void 0;
    var _class = _interopRequireDefault(require_class());
    var _type = require_type();
    var _iterator = require_iterator();
    var _data = require_data();
    var _deferred = require_deferred();
    var _errors = require_errors2();
    var _utils = require_utils5();
    function _interopRequireDefault(obj) {
      return obj && obj.j ? obj : {
        default: obj
      };
    }
    var Iterator = _class.default.inherit({
      toArray: function() {
        var result = [];
        this.reset();
        while (this.next()) {
          result.push(this.current());
        }
        return result;
      },
      countable: function() {
        return false;
      }
    });
    var ArrayIterator = Iterator.inherit({
      ctor: function(array) {
        this.array = array;
        this.index = -1;
      },
      next: function() {
        if (this.index + 1 < this.array.length) {
          this.index++;
          return true;
        }
        return false;
      },
      current: function() {
        return this.array[this.index];
      },
      reset: function() {
        this.index = -1;
      },
      toArray: function() {
        return this.array.slice(0);
      },
      countable: function() {
        return true;
      },
      count: function() {
        return this.array.length;
      }
    });
    var WrappedIterator = Iterator.inherit({
      ctor: function(iter) {
        this.iter = iter;
      },
      next: function() {
        return this.iter.next();
      },
      current: function() {
        return this.iter.current();
      },
      reset: function() {
        return this.iter.reset();
      }
    });
    var MapIterator = WrappedIterator.inherit({
      ctor: function(iter, mapper) {
        this.callBase(iter);
        this.index = -1;
        this.mapper = mapper;
      },
      current: function() {
        return this.mapper(this.callBase(), this.index);
      },
      next: function() {
        var hasNext = this.callBase();
        if (hasNext) {
          this.index++;
        }
        return hasNext;
      }
    });
    var defaultCompare = function(xValue, yValue, options) {
      if ((0, _type.isString)(xValue) && (0, _type.isString)(yValue) && (null !== options && void 0 !== options && options.locale || null !== options && void 0 !== options && options.collatorOptions)) {
        return new Intl.Collator((null === options || void 0 === options ? void 0 : options.locale) || void 0, (null === options || void 0 === options ? void 0 : options.collatorOptions) || void 0).compare(xValue, yValue);
      }
      xValue = (0, _data.toComparable)(xValue, false, options);
      yValue = (0, _data.toComparable)(yValue, false, options);
      if (null === xValue && null !== yValue) {
        return -1;
      }
      if (null !== xValue && null === yValue) {
        return 1;
      }
      if (void 0 === xValue && void 0 !== yValue) {
        return 1;
      }
      if (void 0 !== xValue && void 0 === yValue) {
        return -1;
      }
      if (xValue < yValue) {
        return -1;
      }
      if (xValue > yValue) {
        return 1;
      }
      return 0;
    };
    var SortIterator = Iterator.inherit({
      ctor: function(iter, getter, desc, compare) {
        this.langParams = iter.langParams;
        if (!(iter instanceof MapIterator)) {
          iter = new MapIterator(iter, this.cv);
          iter.langParams = this.langParams;
        }
        this.iter = iter;
        this.rules = [{
          getter,
          desc,
          compare,
          langParams: this.langParams
        }];
      },
      thenBy: function(getter, desc, compare) {
        var result = new SortIterator(this.sortedIter || this.iter, getter, desc, compare);
        if (!this.sortedIter) {
          result.rules = this.rules.concat(result.rules);
        }
        return result;
      },
      next: function() {
        this.Mn();
        return this.sortedIter.next();
      },
      current: function() {
        this.Mn();
        return this.sortedIter.current();
      },
      reset: function() {
        delete this.sortedIter;
      },
      countable: function() {
        return this.sortedIter || this.iter.countable();
      },
      count: function() {
        if (this.sortedIter) {
          return this.sortedIter.count();
        }
        return this.iter.count();
      },
      Mn: function() {
        var that = this;
        if (that.sortedIter) {
          return;
        }
        (0, _iterator.each)(that.rules, function() {
          this.getter = (0, _data.compileGetter)(this.getter);
        });
        that.sortedIter = new MapIterator(new ArrayIterator(this.iter.toArray().sort(function(x, y) {
          return that.dv(x, y);
        })), that.ev);
      },
      cv: function(record, index) {
        return {
          index,
          value: record
        };
      },
      ev: function(wrappedItem) {
        return wrappedItem.value;
      },
      fv: function(langParams) {
        return function(xValue, yValue) {
          return defaultCompare(xValue, yValue, langParams);
        };
      },
      dv: function(x, y) {
        var xIndex = x.index;
        var yIndex = y.index;
        x = x.value;
        y = y.value;
        if (x === y) {
          return xIndex - yIndex;
        }
        for (var i = 0, rulesCount = this.rules.length; i < rulesCount; i++) {
          var rule = this.rules[i];
          var xValue = rule.getter(x);
          var yValue = rule.getter(y);
          var compare = rule.compare || this.fv(rule.langParams);
          var compareResult = compare(xValue, yValue);
          if (compareResult) {
            return rule.desc ? -compareResult : compareResult;
          }
        }
        return xIndex - yIndex;
      }
    });
    var compileCriteria = function() {
      var langParams = {};
      var _toComparable = function(value) {
        return (0, _data.toComparable)(value, false, langParams);
      };
      var toString = function(value) {
        var _langParams;
        return (0, _type.isDefined)(value) ? null !== (_langParams = langParams) && void 0 !== _langParams && _langParams.locale ? value.toLocaleString(langParams.locale) : value.toString() : "";
      };
      function compileEquals(getter, value, negate) {
        return function(obj) {
          obj = _toComparable(getter(obj));
          var result = function(value2) {
            return "" === value2 || 0 === value2 || false === value2;
          }(value) ? obj === value : obj == value;
          if (negate) {
            result = !result;
          }
          return result;
        };
      }
      return function(crit, options) {
        langParams = options || {};
        if ((0, _type.isFunction)(crit)) {
          return crit;
        }
        if ((0, _utils.isGroupCriterion)(crit)) {
          return function(crit2) {
            var ops = [];
            var isConjunctiveOperator = false;
            var isConjunctiveNextOperator = false;
            (0, _iterator.each)(crit2, function() {
              if (Array.isArray(this) || (0, _type.isFunction)(this)) {
                if (ops.length > 1 && isConjunctiveOperator !== isConjunctiveNextOperator) {
                  throw new _errors.errors.Error("E4019");
                }
                ops.push(compileCriteria(this, langParams));
                isConjunctiveOperator = isConjunctiveNextOperator;
                isConjunctiveNextOperator = true;
              } else {
                isConjunctiveNextOperator = (0, _utils.isConjunctiveOperator)(this);
              }
            });
            return function(d) {
              var result = isConjunctiveOperator;
              for (var i = 0; i < ops.length; i++) {
                if (ops[i](d) !== isConjunctiveOperator) {
                  result = !isConjunctiveOperator;
                  break;
                }
              }
              return result;
            };
          }(crit);
        }
        if ((0, _utils.isUnaryOperation)(crit)) {
          return function(crit2) {
            var op = crit2[0];
            var criteria = compileCriteria(crit2[1], langParams);
            if ("!" === op) {
              return function(obj) {
                return !criteria(obj);
              };
            }
            throw _errors.errors.Error("E4003", op);
          }(crit);
        }
        return function(crit2) {
          crit2 = (0, _utils.normalizeBinaryCriterion)(crit2);
          var getter = (0, _data.compileGetter)(crit2[0]);
          var op = crit2[1];
          var value = crit2[2];
          value = _toComparable(value);
          var compare = function(obj, operatorFn) {
            obj = _toComparable(getter(obj));
            return (null == value || null == obj) && value !== obj ? false : operatorFn(obj, value);
          };
          switch (op.toLowerCase()) {
            case "=":
              return compileEquals(getter, value);
            case "<>":
              return compileEquals(getter, value, true);
            case ">":
              return function(obj) {
                return compare(obj, function(a, b) {
                  return a > b;
                });
              };
            case "<":
              return function(obj) {
                return compare(obj, function(a, b) {
                  return a < b;
                });
              };
            case ">=":
              return function(obj) {
                return compare(obj, function(a, b) {
                  return a >= b;
                });
              };
            case "<=":
              return function(obj) {
                return compare(obj, function(a, b) {
                  return a <= b;
                });
              };
            case "startswith":
              return function(obj) {
                return 0 === _toComparable(toString(getter(obj))).indexOf(value);
              };
            case "endswith":
              return function(obj) {
                var getterValue = _toComparable(toString(getter(obj)));
                var searchValue = toString(value);
                if (getterValue.length < searchValue.length) {
                  return false;
                }
                var index = getterValue.lastIndexOf(value);
                return -1 !== index && index === getterValue.length - value.length;
              };
            case "contains":
              return function(obj) {
                return _toComparable(toString(getter(obj))).indexOf(value) > -1;
              };
            case "notcontains":
              return function(obj) {
                return -1 === _toComparable(toString(getter(obj))).indexOf(value);
              };
          }
          throw _errors.errors.Error("E4003", op);
        }(crit);
      };
    }();
    var FilterIterator = WrappedIterator.inherit({
      ctor: function(iter, criteria) {
        this.callBase(iter);
        this.langParams = iter.langParams;
        this.criteria = compileCriteria(criteria, this.langParams);
      },
      next: function() {
        while (this.iter.next()) {
          if (this.criteria(this.current())) {
            return true;
          }
        }
        return false;
      }
    });
    var GroupIterator = Iterator.inherit({
      ctor: function(iter, getter) {
        this.iter = iter;
        this.getter = getter;
      },
      next: function() {
        this.Nn();
        return this.groupedIter.next();
      },
      current: function() {
        this.Nn();
        return this.groupedIter.current();
      },
      reset: function() {
        delete this.groupedIter;
      },
      countable: function() {
        return !!this.groupedIter;
      },
      count: function() {
        return this.groupedIter.count();
      },
      Nn: function() {
        if (this.groupedIter) {
          return;
        }
        var hash = {};
        var keys = [];
        var iter = this.iter;
        var getter = (0, _data.compileGetter)(this.getter);
        iter.reset();
        while (iter.next()) {
          var current = iter.current();
          var key = getter(current);
          if (key in hash) {
            hash[key].push(current);
          } else {
            hash[key] = [current];
            keys.push(key);
          }
        }
        this.groupedIter = new ArrayIterator((0, _iterator.map)(keys, function(key2) {
          return {
            key: key2,
            items: hash[key2]
          };
        }));
      }
    });
    var SelectIterator = WrappedIterator.inherit({
      ctor: function(iter, getter) {
        this.callBase(iter);
        this.getter = (0, _data.compileGetter)(getter);
      },
      current: function() {
        return this.getter(this.callBase());
      },
      countable: function() {
        return this.iter.countable();
      },
      count: function() {
        return this.iter.count();
      }
    });
    var SliceIterator = WrappedIterator.inherit({
      ctor: function(iter, skip, take) {
        this.callBase(iter);
        this.skip = Math.max(0, skip);
        this.take = Math.max(0, take);
        this.pos = 0;
      },
      next: function() {
        if (this.pos >= this.skip + this.take) {
          return false;
        }
        while (this.pos < this.skip && this.iter.next()) {
          this.pos++;
        }
        this.pos++;
        return this.iter.next();
      },
      reset: function() {
        this.callBase();
        this.pos = 0;
      },
      countable: function() {
        return this.iter.countable();
      },
      count: function() {
        return Math.min(this.iter.count() - this.skip, this.take);
      }
    });
    var arrayQueryImpl = function arrayQueryImpl2(iter, queryOptions) {
      queryOptions = queryOptions || {};
      if (!(iter instanceof Iterator)) {
        iter = new ArrayIterator(iter);
      }
      if (queryOptions.langParams) {
        iter.langParams = queryOptions.langParams;
      }
      var handleError = function(error) {
        var handler = queryOptions.errorHandler;
        if (handler) {
          handler(error);
        }
        (0, _errors.handleError)(error);
      };
      var aggregateCore = function(aggregator) {
        var d = new _deferred.Deferred().fail(handleError);
        var seed;
        var step = aggregator.step;
        var finalize = aggregator.finalize;
        try {
          iter.reset();
          if ("seed" in aggregator) {
            seed = aggregator.seed;
          } else {
            seed = iter.next() ? iter.current() : NaN;
          }
          var accumulator = seed;
          while (iter.next()) {
            accumulator = step(accumulator, iter.current());
          }
          d.resolve(finalize ? finalize(accumulator) : accumulator);
        } catch (x) {
          d.reject(x);
        }
        return d.promise();
      };
      var standardAggregate = function(name) {
        return aggregateCore(_utils.aggregators[name]);
      };
      var select = function(getter) {
        if (!(0, _type.isFunction)(getter) && !Array.isArray(getter)) {
          getter = [].slice.call(arguments);
        }
        return chainQuery(new SelectIterator(iter, getter));
      };
      var selectProp = function(name) {
        return select((0, _data.compileGetter)(name));
      };
      function chainQuery(iter2) {
        return arrayQueryImpl2(iter2, queryOptions);
      }
      return {
        toArray: function() {
          return iter.toArray();
        },
        enumerate: function() {
          var d = new _deferred.Deferred().fail(handleError);
          try {
            d.resolve(iter.toArray());
          } catch (x) {
            d.reject(x);
          }
          return d.promise();
        },
        setLangParams: function(options) {
          iter.langParams = options;
        },
        sortBy: function(getter, desc, compare) {
          return chainQuery(new SortIterator(iter, getter, desc, compare));
        },
        thenBy: function(getter, desc, compare) {
          if (iter instanceof SortIterator) {
            return chainQuery(iter.thenBy(getter, desc, compare));
          }
          throw _errors.errors.Error("E4004");
        },
        filter: function(criteria) {
          if (!Array.isArray(criteria)) {
            criteria = [].slice.call(arguments);
          }
          return chainQuery(new FilterIterator(iter, criteria));
        },
        slice: function(skip, take) {
          if (void 0 === take) {
            take = Number.MAX_VALUE;
          }
          return chainQuery(new SliceIterator(iter, skip, take));
        },
        select,
        groupBy: function(getter) {
          return chainQuery(new GroupIterator(iter, getter));
        },
        aggregate: function(seed, step, finalize) {
          if (arguments.length < 2) {
            return aggregateCore({
              step: arguments[0]
            });
          }
          return aggregateCore({
            seed,
            step,
            finalize
          });
        },
        count: function() {
          if (iter.countable()) {
            var d = new _deferred.Deferred().fail(handleError);
            try {
              d.resolve(iter.count());
            } catch (x) {
              d.reject(x);
            }
            return d.promise();
          }
          return standardAggregate("count");
        },
        sum: function(getter) {
          if (getter) {
            return selectProp(getter).sum();
          }
          return standardAggregate("sum");
        },
        min: function(getter) {
          if (getter) {
            return selectProp(getter).min();
          }
          return standardAggregate("min");
        },
        max: function(getter) {
          if (getter) {
            return selectProp(getter).max();
          }
          return standardAggregate("max");
        },
        avg: function(getter) {
          if (getter) {
            return selectProp(getter).avg();
          }
          return standardAggregate("avg");
        }
      };
    };
    var _default = arrayQueryImpl;
    exports.default = _default;
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/devextreme/cjs/data/store_helper.js
var require_store_helper = __commonJS({
  "node_modules/devextreme/cjs/data/store_helper.js"(exports, module) {
    "use strict";
    exports.default = void 0;
    var _common = require_common();
    var _extend = require_extend();
    var _iterator = require_iterator();
    var _array_query = _interopRequireDefault(require_array_query());
    var _utils = require_utils5();
    function _interopRequireDefault(obj) {
      return obj && obj.j ? obj : {
        default: obj
      };
    }
    function multiLevelGroup(query, groupInfo) {
      query = query.groupBy(groupInfo[0].selector);
      if (groupInfo.length > 1) {
        query = query.select(function(g) {
          return (0, _extend.extend)({}, g, {
            items: multiLevelGroup((0, _array_query.default)(g.items), groupInfo.slice(1)).toArray()
          });
        });
      }
      return query;
    }
    function arrangeSortingInfo(groupInfo, sortInfo) {
      var filteredGroup = [];
      (0, _iterator.each)(groupInfo, function(_, group) {
        var collision = (0, _common.grep)(sortInfo, function(sort) {
          return group.selector === sort.selector;
        });
        if (collision.length < 1) {
          filteredGroup.push(group);
        }
      });
      return filteredGroup.concat(sortInfo);
    }
    function queryByOptions(query, options, isCountQuery) {
      var _options;
      options = options || {};
      var filter = options.filter;
      if (null !== (_options = options) && void 0 !== _options && _options.langParams) {
        var _query$setLangParams, _query;
        null === (_query$setLangParams = (_query = query).setLangParams) || void 0 === _query$setLangParams ? void 0 : _query$setLangParams.call(_query, options.langParams);
      }
      if (filter) {
        query = query.filter(filter);
      }
      if (isCountQuery) {
        return query;
      }
      var sort = options.sort;
      var select = options.select;
      var group = options.group;
      var skip = options.skip;
      var take = options.take;
      if (group) {
        group = (0, _utils.normalizeSortingInfo)(group);
        group.keepInitialKeyOrder = !!options.group.keepInitialKeyOrder;
      }
      if (sort || group) {
        sort = (0, _utils.normalizeSortingInfo)(sort || []);
        if (group && !group.keepInitialKeyOrder) {
          sort = arrangeSortingInfo(group, sort);
        }
        (0, _iterator.each)(sort, function(index) {
          query = query[index ? "thenBy" : "sortBy"](this.selector, this.desc, this.compare);
        });
      }
      if (select) {
        query = query.select(select);
      }
      if (group) {
        query = multiLevelGroup(query, group);
      }
      if (take || skip) {
        query = query.slice(skip || 0, take);
      }
      return query;
    }
    var _default = {
      multiLevelGroup,
      arrangeSortingInfo,
      queryByOptions
    };
    exports.default = _default;
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/devextreme/cjs/data/abstract_store.js
var require_abstract_store = __commonJS({
  "node_modules/devextreme/cjs/data/abstract_store.js"(exports, module) {
    "use strict";
    exports.default = void 0;
    var _class = _interopRequireDefault(require_class());
    var _events_strategy = require_events_strategy();
    var _iterator = require_iterator();
    var _errors = require_errors2();
    var _utils = require_utils5();
    var _data = require_data();
    var _store_helper = _interopRequireDefault(require_store_helper());
    var _deferred = require_deferred();
    var _common = require_common();
    var _type = require_type();
    function _interopRequireDefault(obj) {
      return obj && obj.j ? obj : {
        default: obj
      };
    }
    function _toConsumableArray(arr) {
      return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
    }
    function _nonIterableSpread() {
      throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _unsupportedIterableToArray(o, minLen) {
      if (!o) {
        return;
      }
      if ("string" === typeof o) {
        return _arrayLikeToArray(o, minLen);
      }
      var n = Object.prototype.toString.call(o).slice(8, -1);
      if ("Object" === n && o.constructor) {
        n = o.constructor.name;
      }
      if ("Map" === n || "Set" === n) {
        return Array.from(o);
      }
      if ("Arguments" === n || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) {
        return _arrayLikeToArray(o, minLen);
      }
    }
    function _iterableToArray(iter) {
      if ("undefined" !== typeof Symbol && null != iter[Symbol.iterator] || null != iter["@@iterator"]) {
        return Array.from(iter);
      }
    }
    function _arrayWithoutHoles(arr) {
      if (Array.isArray(arr)) {
        return _arrayLikeToArray(arr);
      }
    }
    function _arrayLikeToArray(arr, len) {
      if (null == len || len > arr.length) {
        len = arr.length;
      }
      for (var i = 0, arr2 = new Array(len); i < len; i++) {
        arr2[i] = arr[i];
      }
      return arr2;
    }
    function _extends() {
      _extends = Object.assign ? Object.assign.bind() : function(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends.apply(this, arguments);
    }
    var abstract = _class.default.abstract;
    var queryByOptions = _store_helper.default.queryByOptions;
    var storeImpl = {};
    var Store = _class.default.inherit({
      ud: {},
      ctor: function(options) {
        var that = this;
        options = options || {};
        this.q = new _events_strategy.EventsStrategy(this);
        (0, _iterator.each)(["onLoaded", "onLoading", "onInserted", "onInserting", "onUpdated", "onUpdating", "onPush", "onRemoved", "onRemoving", "onModified", "onModifying"], function(_, optionName) {
          if (optionName in options) {
            that.on(optionName.slice(2).toLowerCase(), options[optionName]);
          }
        });
        this.hv = options.key;
        this.Zi = options.errorHandler;
        this.On = true;
      },
      _i: _common.noop,
      iv: function() {
        return null;
      },
      key: function() {
        return this.hv;
      },
      keyOf: function(obj) {
        if (!this.Pn) {
          this.Pn = (0, _data.compileGetter)(this.key());
        }
        return this.Pn(obj);
      },
      kv: function() {
        if (!this.key()) {
          throw _errors.errors.Error("E4005");
        }
      },
      load: function(options) {
        var that = this;
        options = options || {};
        this.q.fireEvent("loading", [options]);
        return this.Qn(this.Rn(options)).done(function(result) {
          that.q.fireEvent("loaded", [result, options]);
        });
      },
      Rn: function(options) {
        if (!(0, _type.isEmptyObject)(this.ud)) {
          options = options || {};
          options.ud = _extends({}, this.ud, options.ud);
        }
        return queryByOptions(this.createQuery(options), options).enumerate();
      },
      Qn: function(task) {
        var result = new _deferred.Deferred();
        task.done(function() {
          var that = this;
          var args = arguments;
          _utils.processRequestResultLock.promise().done(function() {
            result.resolveWith(that, args);
          });
        }).fail(function() {
          result.rejectWith(this, arguments);
        });
        return result;
      },
      createQuery: abstract,
      totalCount: function(options) {
        return this.Sn(options);
      },
      Sn: function(options) {
        return queryByOptions(this.createQuery(options), options, true).count();
      },
      byKey: function(key, extraOptions) {
        return this.vd(this.Qn(this.$i(key, extraOptions)));
      },
      $i: abstract,
      insert: function(values) {
        var that = this;
        that.q.fireEvent("modifying");
        that.q.fireEvent("inserting", [values]);
        return that.vd(that.aj(values).done(function(callbackValues, callbackKey) {
          that.q.fireEvent("inserted", [callbackValues, callbackKey]);
          that.q.fireEvent("modified");
        }));
      },
      aj: abstract,
      update: function(key, values) {
        var that = this;
        that.q.fireEvent("modifying");
        that.q.fireEvent("updating", [key, values]);
        return that.vd(that.bj(key, values).done(function() {
          that.q.fireEvent("updated", [key, values]);
          that.q.fireEvent("modified");
        }));
      },
      bj: abstract,
      push: function(changes) {
        var _this = this;
        var beforePushArgs = {
          changes,
          waitFor: []
        };
        this.q.fireEvent("beforePush", [beforePushArgs]);
        _deferred.when.apply(void 0, _toConsumableArray(beforePushArgs.waitFor)).done(function() {
          _this.cj(changes);
          _this.q.fireEvent("push", [changes]);
        });
      },
      cj: _common.noop,
      remove: function(key) {
        var that = this;
        that.q.fireEvent("modifying");
        that.q.fireEvent("removing", [key]);
        return that.vd(that.dj(key).done(function(callbackKey) {
          that.q.fireEvent("removed", [callbackKey]);
          that.q.fireEvent("modified");
        }));
      },
      dj: abstract,
      vd: function(deferred) {
        return deferred.fail(this.Zi).fail(_errors.handleError);
      },
      on: function(eventName, eventHandler) {
        this.q.on(eventName, eventHandler);
        return this;
      },
      off: function(eventName, eventHandler) {
        this.q.off(eventName, eventHandler);
        return this;
      }
    });
    Store.create = function(alias, options) {
      if (!(alias in storeImpl)) {
        throw _errors.errors.Error("E4020", alias);
      }
      return new storeImpl[alias](options);
    };
    Store.registerClass = function(type, alias) {
      if (alias) {
        storeImpl[alias] = type;
      }
      return type;
    };
    Store.inherit = function(inheritor) {
      return function(members, alias) {
        var type = inheritor.apply(this, [members]);
        Store.registerClass(type, alias);
        return type;
      };
    }(Store.inherit);
    var _default = Store;
    exports.default = _default;
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/devextreme/cjs/data/custom_store.js
var require_custom_store = __commonJS({
  "node_modules/devextreme/cjs/data/custom_store.js"(exports, module) {
    "use strict";
    exports.default = void 0;
    var _renderer = _interopRequireDefault(require_renderer());
    var _utils = require_utils5();
    var _array_utils = require_array_utils();
    var _type = require_type();
    var _config = _interopRequireDefault(require_config());
    var _errors = require_errors2();
    var _abstract_store = _interopRequireDefault(require_abstract_store());
    var _array_query = _interopRequireDefault(require_array_query());
    var _store_helper = _interopRequireDefault(require_store_helper());
    var _deferred = require_deferred();
    function _interopRequireDefault(obj) {
      return obj && obj.j ? obj : {
        default: obj
      };
    }
    var TOTAL_COUNT = "totalCount";
    var LOAD = "load";
    var BY_KEY = "byKey";
    var INSERT = "insert";
    var UPDATE = "update";
    var REMOVE = "remove";
    function isPromise(obj) {
      return obj && (0, _type.isFunction)(obj.then);
    }
    function trivialPromise(value) {
      return new _deferred.Deferred().resolve(value).promise();
    }
    function ensureRequiredFuncOption(name, obj) {
      if (!(0, _type.isFunction)(obj)) {
        throw _errors.errors.Error("E4011", name);
      }
    }
    function throwInvalidUserFuncResult(name) {
      throw _errors.errors.Error("E4012", name);
    }
    function createUserFuncFailureHandler(pendingDeferred) {
      function errorMessageFromXhr(promiseArguments) {
        var xhr = promiseArguments[0];
        var textStatus = promiseArguments[1];
        if (!xhr || !xhr.getResponseHeader) {
          return null;
        }
        return (0, _utils.errorMessageFromXhr)(xhr, textStatus);
      }
      return function(arg) {
        var error;
        if (arg instanceof Error) {
          error = arg;
        } else {
          error = new Error(errorMessageFromXhr(arguments) || arg && String(arg) || "Unknown error");
        }
        if (error.message !== _utils.XHR_ERROR_UNLOAD) {
          pendingDeferred.reject(error);
        }
      };
    }
    function invokeUserLoad(store, options) {
      var userFunc = store.mv;
      var userResult;
      ensureRequiredFuncOption(LOAD, userFunc);
      userResult = userFunc.apply(store, [options]);
      if (Array.isArray(userResult)) {
        userResult = trivialPromise(userResult);
      } else if (null === userResult || void 0 === userResult) {
        userResult = trivialPromise([]);
      } else if (!isPromise(userResult)) {
        throwInvalidUserFuncResult(LOAD);
      }
      return (0, _deferred.fromPromise)(userResult);
    }
    function invokeUserTotalCountFunc(store, options) {
      var userFunc = store.Tn;
      var userResult;
      if (!(0, _type.isFunction)(userFunc)) {
        throw _errors.errors.Error("E4021");
      }
      userResult = userFunc.apply(store, [options]);
      if (!isPromise(userResult)) {
        userResult = Number(userResult);
        if (!isFinite(userResult)) {
          throwInvalidUserFuncResult(TOTAL_COUNT);
        }
        userResult = trivialPromise(userResult);
      }
      return (0, _deferred.fromPromise)(userResult);
    }
    function invokeUserByKeyFunc(store, key, extraOptions) {
      var userFunc = store.Un;
      var userResult;
      ensureRequiredFuncOption(BY_KEY, userFunc);
      userResult = userFunc.apply(store, [key, extraOptions]);
      if (!isPromise(userResult)) {
        userResult = trivialPromise(userResult);
      }
      return (0, _deferred.fromPromise)(userResult);
    }
    function runRawLoad(pendingDeferred, store, userFuncOptions, continuation) {
      if (store.De) {
        continuation(store.De);
      } else {
        var loadPromise = store.Vn || invokeUserLoad(store, userFuncOptions);
        if (store.Wn) {
          store.Vn = loadPromise;
        }
        loadPromise.always(function() {
          delete store.Vn;
        }).done(function(rawData) {
          if (store.Wn) {
            store.De = rawData;
          }
          continuation(rawData);
        }).fail(createUserFuncFailureHandler(pendingDeferred));
      }
    }
    function runRawLoadWithQuery(pendingDeferred, store, options, countOnly) {
      options = options || {};
      var userFuncOptions = {};
      if ("userData" in options) {
        userFuncOptions.userData = options.userData;
      }
      runRawLoad(pendingDeferred, store, userFuncOptions, function(rawData) {
        var rawDataQuery = (0, _array_query.default)(rawData, {
          errorHandler: store.Zi
        });
        var itemsQuery;
        var totalCountQuery;
        var waitList = [];
        var items;
        var totalCount;
        if (!countOnly) {
          itemsQuery = _store_helper.default.queryByOptions(rawDataQuery, options);
          if (itemsQuery === rawDataQuery) {
            items = rawData.slice(0);
          } else {
            waitList.push(itemsQuery.enumerate().done(function(asyncResult) {
              items = asyncResult;
            }));
          }
        }
        if (options.requireTotalCount || countOnly) {
          totalCountQuery = _store_helper.default.queryByOptions(rawDataQuery, options, true);
          if (totalCountQuery === rawDataQuery) {
            totalCount = rawData.length;
          } else {
            waitList.push(totalCountQuery.count().done(function(asyncResult) {
              totalCount = asyncResult;
            }));
          }
        }
        _deferred.when.apply(_renderer.default, waitList).done(function() {
          if (countOnly) {
            pendingDeferred.resolve(totalCount);
          } else if (options.requireTotalCount) {
            pendingDeferred.resolve(items, {
              totalCount
            });
          } else {
            pendingDeferred.resolve(items);
          }
        }).fail(function(x) {
          pendingDeferred.reject(x);
        });
      });
    }
    function runRawLoadWithKey(pendingDeferred, store, key) {
      runRawLoad(pendingDeferred, store, {}, function(rawData) {
        var keyExpr = store.key();
        var item;
        for (var i = 0, len = rawData.length; i < len; i++) {
          item = rawData[i];
          if ((0, _utils.keysEqual)(keyExpr, store.keyOf(rawData[i]), key)) {
            pendingDeferred.resolve(item);
            return;
          }
        }
        pendingDeferred.reject(_errors.errors.Error("E4009"));
      });
    }
    var CustomStore = _abstract_store.default.inherit({
      ctor: function(options) {
        options = options || {};
        this.callBase(options);
        this.On = !!options.useDefaultSearch || "raw" === options.loadMode;
        this.ej = options.loadMode;
        this.Wn = false !== options.cacheRawData;
        this.mv = options[LOAD];
        this.Tn = options[TOTAL_COUNT];
        this.Un = options[BY_KEY];
        this.nv = options[INSERT];
        this.ov = options[UPDATE];
        this.pv = options[REMOVE];
      },
      _i: function() {
        delete this.De;
      },
      createQuery: function() {
        throw _errors.errors.Error("E4010");
      },
      clearRawDataCache: function() {
        this._i();
      },
      Sn: function(options) {
        var d = new _deferred.Deferred();
        if ("raw" === this.ej && !this.Tn) {
          runRawLoadWithQuery(d, this, options, true);
        } else {
          invokeUserTotalCountFunc(this, options).done(function(count) {
            d.resolve(Number(count));
          }).fail(createUserFuncFailureHandler(d));
          d = this.vd(d);
        }
        return d.promise();
      },
      cj: function(changes) {
        if (this.De) {
          (0, _array_utils.applyBatch)({
            keyInfo: this,
            data: this.De,
            changes
          });
        }
      },
      Rn: function(options) {
        var d = new _deferred.Deferred();
        if ("raw" === this.ej) {
          runRawLoadWithQuery(d, this, options, false);
        } else {
          invokeUserLoad(this, options).done(function(data, extra) {
            d.resolve(data, extra);
          }).fail(createUserFuncFailureHandler(d));
          d = this.vd(d);
        }
        return d.promise();
      },
      $i: function(key, extraOptions) {
        var d = new _deferred.Deferred();
        if (this.Xn()) {
          this.kv();
          runRawLoadWithKey(d, this, key);
        } else {
          invokeUserByKeyFunc(this, key, extraOptions).done(function(obj) {
            d.resolve(obj);
          }).fail(createUserFuncFailureHandler(d));
        }
        return d.promise();
      },
      Xn: function() {
        return "raw" === this.ej && !this.Un;
      },
      aj: function(values) {
        var that = this;
        var userFunc = that.nv;
        var userResult;
        var d = new _deferred.Deferred();
        ensureRequiredFuncOption(INSERT, userFunc);
        userResult = userFunc.apply(that, [values]);
        if (!isPromise(userResult)) {
          userResult = trivialPromise(userResult);
        }
        (0, _deferred.fromPromise)(userResult).done(function(serverResponse) {
          if ((0, _config.default)().useLegacyStoreResult) {
            d.resolve(values, serverResponse);
          } else {
            d.resolve(serverResponse || values, that.keyOf(serverResponse));
          }
        }).fail(createUserFuncFailureHandler(d));
        return d.promise();
      },
      bj: function(key, values) {
        var userFunc = this.ov;
        var userResult;
        var d = new _deferred.Deferred();
        ensureRequiredFuncOption(UPDATE, userFunc);
        userResult = userFunc.apply(this, [key, values]);
        if (!isPromise(userResult)) {
          userResult = trivialPromise(userResult);
        }
        (0, _deferred.fromPromise)(userResult).done(function(serverResponse) {
          if ((0, _config.default)().useLegacyStoreResult) {
            d.resolve(key, values);
          } else {
            d.resolve(serverResponse || values, key);
          }
        }).fail(createUserFuncFailureHandler(d));
        return d.promise();
      },
      dj: function(key) {
        var userFunc = this.pv;
        var userResult;
        var d = new _deferred.Deferred();
        ensureRequiredFuncOption(REMOVE, userFunc);
        userResult = userFunc.apply(this, [key]);
        if (!isPromise(userResult)) {
          userResult = trivialPromise();
        }
        (0, _deferred.fromPromise)(userResult).done(function() {
          d.resolve(key);
        }).fail(createUserFuncFailureHandler(d));
        return d.promise();
      }
    });
    var _default = CustomStore;
    exports.default = _default;
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/devextreme/cjs/core/utils/queue.js
var require_queue = __commonJS({
  "node_modules/devextreme/cjs/core/utils/queue.js"(exports) {
    "use strict";
    exports.create = createQueue;
    exports.enqueue = void 0;
    var _errors = _interopRequireDefault(require_errors());
    var _deferred = require_deferred();
    function _interopRequireDefault(obj) {
      return obj && obj.j ? obj : {
        default: obj
      };
    }
    function createQueue(discardPendingTasks) {
      var _tasks = [];
      var _busy = false;
      function exec() {
        while (_tasks.length) {
          _busy = true;
          var task = _tasks.shift();
          var result = task();
          if (void 0 === result) {
            continue;
          }
          if (result.then) {
            (0, _deferred.when)(result).always(exec);
            return;
          }
          throw _errors.default.Error("E0015");
        }
        _busy = false;
      }
      return {
        add: function(task, removeTaskCallback) {
          if (!discardPendingTasks) {
            _tasks.push(task);
          } else {
            if (_tasks[0] && removeTaskCallback) {
              removeTaskCallback(_tasks[0]);
            }
            _tasks = [task];
          }
          if (!_busy) {
            exec();
          }
        },
        busy: function() {
          return _busy;
        }
      };
    }
    var enqueue = createQueue().add;
    exports.enqueue = enqueue;
  }
});

// node_modules/devextreme/cjs/data/query_adapters.js
var require_query_adapters = __commonJS({
  "node_modules/devextreme/cjs/data/query_adapters.js"(exports, module) {
    "use strict";
    exports.default = void 0;
    var _default = {};
    exports.default = _default;
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/devextreme/cjs/data/remote_query.js
var require_remote_query = __commonJS({
  "node_modules/devextreme/cjs/data/remote_query.js"(exports, module) {
    "use strict";
    exports.default = void 0;
    var _query_adapters = _interopRequireDefault(require_query_adapters());
    var _errors = require_errors2();
    var _iterator = require_iterator();
    var _type = require_type();
    var _deferred = require_deferred();
    var _array_query = _interopRequireDefault(require_array_query());
    function _interopRequireDefault(obj) {
      return obj && obj.j ? obj : {
        default: obj
      };
    }
    var remoteQueryImpl = function remoteQueryImpl2(url, queryOptions, tasks) {
      tasks = tasks || [];
      queryOptions = queryOptions || {};
      var createTask = function(name, args) {
        return {
          name,
          args
        };
      };
      var exec = function(executorTask) {
        var d = new _deferred.Deferred();
        var _adapterFactory;
        var _adapter;
        var _taskQueue;
        var _currentTask;
        var _mergedSortArgs;
        var rejectWithNotify = function(error) {
          var handler = queryOptions.errorHandler;
          if (handler) {
            handler(error);
          }
          (0, _errors.handleError)(error);
          d.reject(error);
        };
        function mergeSortTask(task) {
          switch (task.name) {
            case "sortBy":
              _mergedSortArgs = [task.args];
              return true;
            case "thenBy":
              if (!_mergedSortArgs) {
                throw _errors.errors.Error("E4004");
              }
              _mergedSortArgs.push(task.args);
              return true;
          }
          return false;
        }
        try {
          _adapterFactory = queryOptions.adapter;
          if (!(0, _type.isFunction)(_adapterFactory)) {
            _adapterFactory = _query_adapters.default[_adapterFactory];
          }
          _adapter = _adapterFactory(queryOptions);
          _taskQueue = [].concat(tasks).concat(executorTask);
          var optimize = _adapter.optimize;
          if (optimize) {
            optimize(_taskQueue);
          }
          while (_taskQueue.length) {
            _currentTask = _taskQueue[0];
            if (!mergeSortTask(_currentTask)) {
              if (_mergedSortArgs) {
                _taskQueue.unshift(createTask("multiSort", [_mergedSortArgs]));
                _mergedSortArgs = null;
                continue;
              }
              if ("enumerate" !== String(_currentTask.name)) {
                if (!_adapter[_currentTask.name] || false === _adapter[_currentTask.name].apply(_adapter, _currentTask.args)) {
                  break;
                }
              }
            }
            _taskQueue.shift();
          }
          !function() {
            var head = _taskQueue[0];
            var unmergedTasks = [];
            if (head && "multiSort" === head.name) {
              _taskQueue.shift();
              (0, _iterator.each)(head.args[0], function() {
                unmergedTasks.push(createTask(unmergedTasks.length ? "thenBy" : "sortBy", this));
              });
            }
            _taskQueue = unmergedTasks.concat(_taskQueue);
          }();
          _adapter.exec(url).done(function(result, extra) {
            if (!_taskQueue.length) {
              d.resolve(result, extra);
            } else {
              var clientChain = (0, _array_query.default)(result, {
                errorHandler: queryOptions.errorHandler
              });
              (0, _iterator.each)(_taskQueue, function() {
                clientChain = clientChain[this.name].apply(clientChain, this.args);
              });
              clientChain.done(d.resolve).fail(d.reject);
            }
          }).fail(rejectWithNotify);
        } catch (x) {
          rejectWithNotify(x);
        }
        return d.promise();
      };
      var query = {};
      (0, _iterator.each)(["sortBy", "thenBy", "filter", "slice", "select", "groupBy"], function() {
        var name = String(this);
        query[name] = function() {
          return remoteQueryImpl2(url, queryOptions, tasks.concat(createTask(name, arguments)));
        };
      });
      (0, _iterator.each)(["count", "min", "max", "sum", "avg", "aggregate", "enumerate"], function() {
        var name = String(this);
        query[name] = function() {
          return exec.call(this, createTask(name, arguments));
        };
      });
      return query;
    };
    var _default = remoteQueryImpl;
    exports.default = _default;
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/devextreme/cjs/data/query_implementation.js
var require_query_implementation = __commonJS({
  "node_modules/devextreme/cjs/data/query_implementation.js"(exports) {
    "use strict";
    exports.queryImpl = void 0;
    var _array_query = _interopRequireDefault(require_array_query());
    var _remote_query = _interopRequireDefault(require_remote_query());
    function _interopRequireDefault(obj) {
      return obj && obj.j ? obj : {
        default: obj
      };
    }
    var queryImpl = {
      array: _array_query.default,
      remote: _remote_query.default
    };
    exports.queryImpl = queryImpl;
  }
});

// node_modules/devextreme/cjs/data/query.js
var require_query = __commonJS({
  "node_modules/devextreme/cjs/data/query.js"(exports, module) {
    "use strict";
    exports.default = void 0;
    var _query_implementation = require_query_implementation();
    var query = function() {
      var impl = Array.isArray(arguments[0]) ? "array" : "remote";
      return _query_implementation.queryImpl[impl].apply(this, arguments);
    };
    var _default = query;
    exports.default = _default;
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/devextreme/cjs/data/array_store.js
var require_array_store = __commonJS({
  "node_modules/devextreme/cjs/data/array_store.js"(exports, module) {
    "use strict";
    exports.default = void 0;
    var _utils = require_utils5();
    var _query = _interopRequireDefault(require_query());
    var _errors = require_errors2();
    var _abstract_store = _interopRequireDefault(require_abstract_store());
    var _array_utils = require_array_utils();
    function _interopRequireDefault(obj) {
      return obj && obj.j ? obj : {
        default: obj
      };
    }
    var ArrayStore = _abstract_store.default.inherit({
      ctor: function(options) {
        if (Array.isArray(options)) {
          options = {
            data: options
          };
        } else {
          options = options || {};
        }
        this.callBase(options);
        var initialArray = options.data;
        if (initialArray && !Array.isArray(initialArray)) {
          throw _errors.errors.Error("E4006");
        }
        this.Ub = initialArray || [];
      },
      createQuery: function() {
        return (0, _query.default)(this.Ub, {
          errorHandler: this.Zi
        });
      },
      $i: function(key) {
        var index = (0, _array_utils.indexByKey)(this, this.Ub, key);
        if (-1 === index) {
          return (0, _utils.rejectedPromise)(_errors.errors.Error("E4009"));
        }
        return (0, _utils.trivialPromise)(this.Ub[index]);
      },
      aj: function(values) {
        return (0, _array_utils.insert)(this, this.Ub, values);
      },
      cj: function(changes) {
        (0, _array_utils.applyBatch)({
          keyInfo: this,
          data: this.Ub,
          changes
        });
      },
      bj: function(key, values) {
        return (0, _array_utils.update)(this, this.Ub, key, values);
      },
      dj: function(key) {
        return (0, _array_utils.remove)(this, this.Ub, key);
      },
      clear: function() {
        this.q.fireEvent("modifying");
        this.Ub = [];
        this.q.fireEvent("modified");
      }
    }, "array");
    var _default = ArrayStore;
    exports.default = _default;
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/devextreme/cjs/data/data_source/utils.js
var require_utils6 = __commonJS({
  "node_modules/devextreme/cjs/data/data_source/utils.js"(exports) {
    "use strict";
    exports.normalizeStoreLoadOptionAccessorArguments = exports.normalizeLoadResult = exports.normalizeDataSourceOptions = exports.mapDataRespectingGrouping = exports.isPending = exports.CANCELED_TOKEN = void 0;
    var _ajax = _interopRequireDefault(require_ajax());
    var _abstract_store = _interopRequireDefault(require_abstract_store());
    var _array_store = _interopRequireDefault(require_array_store());
    var _iterator = require_iterator();
    var _custom_store = _interopRequireDefault(require_custom_store());
    var _extend = require_extend();
    var _type = require_type();
    var _utils = require_utils5();
    var _excluded = ["items"];
    function _interopRequireDefault(obj) {
      return obj && obj.j ? obj : {
        default: obj
      };
    }
    function _extends() {
      _extends = Object.assign ? Object.assign.bind() : function(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends.apply(this, arguments);
    }
    function _objectWithoutProperties(source, excluded) {
      if (null == source) {
        return {};
      }
      var target = _objectWithoutPropertiesLoose(source, excluded);
      var key, i;
      if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for (i = 0; i < sourceSymbolKeys.length; i++) {
          key = sourceSymbolKeys[i];
          if (excluded.indexOf(key) >= 0) {
            continue;
          }
          if (!Object.prototype.propertyIsEnumerable.call(source, key)) {
            continue;
          }
          target[key] = source[key];
        }
      }
      return target;
    }
    function _objectWithoutPropertiesLoose(source, excluded) {
      if (null == source) {
        return {};
      }
      var target = {};
      var sourceKeys = Object.keys(source);
      var key, i;
      for (i = 0; i < sourceKeys.length; i++) {
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) {
          continue;
        }
        target[key] = source[key];
      }
      return target;
    }
    var CANCELED_TOKEN = "canceled";
    exports.CANCELED_TOKEN = CANCELED_TOKEN;
    var isPending = function(deferred) {
      return "pending" === deferred.state();
    };
    exports.isPending = isPending;
    var normalizeStoreLoadOptionAccessorArguments = function(originalArguments) {
      switch (originalArguments.length) {
        case 0:
          return;
        case 1:
          return originalArguments[0];
      }
      return [].slice.call(originalArguments);
    };
    exports.normalizeStoreLoadOptionAccessorArguments = normalizeStoreLoadOptionAccessorArguments;
    var mapGroup = function(group, level, mapper) {
      return (0, _iterator.map)(group, function(item) {
        item.items;
        var restItem = _objectWithoutProperties(item, _excluded);
        return _extends({}, restItem, {
          items: mapRecursive(item.items, level - 1, mapper)
        });
      });
    };
    var mapRecursive = function(items, level, mapper) {
      if (!Array.isArray(items)) {
        return items;
      }
      return level ? mapGroup(items, level, mapper) : (0, _iterator.map)(items, mapper);
    };
    var mapDataRespectingGrouping = function(items, mapper, groupInfo) {
      var level = groupInfo ? (0, _utils.normalizeSortingInfo)(groupInfo).length : 0;
      return mapRecursive(items, level, mapper);
    };
    exports.mapDataRespectingGrouping = mapDataRespectingGrouping;
    var normalizeLoadResult = function(data, extra) {
      var _data;
      if (null !== (_data = data) && void 0 !== _data && _data.data) {
        extra = data;
        data = data.data;
      }
      if (!Array.isArray(data)) {
        data = [data];
      }
      return {
        data,
        extra
      };
    };
    exports.normalizeLoadResult = normalizeLoadResult;
    var createCustomStoreFromLoadFunc = function(options) {
      var storeConfig = {};
      (0, _iterator.each)(["useDefaultSearch", "key", "load", "loadMode", "cacheRawData", "byKey", "lookup", "totalCount", "insert", "update", "remove"], function() {
        storeConfig[this] = options[this];
        delete options[this];
      });
      return new _custom_store.default(storeConfig);
    };
    var createStoreFromConfig = function(storeConfig) {
      var alias = storeConfig.type;
      delete storeConfig.type;
      return _abstract_store.default.create(alias, storeConfig);
    };
    var createCustomStoreFromUrl = function(url, normalizationOptions) {
      return new _custom_store.default({
        load: function() {
          return _ajax.default.sendRequest({
            url,
            dataType: "json"
          });
        },
        loadMode: null === normalizationOptions || void 0 === normalizationOptions ? void 0 : normalizationOptions.fromUrlLoadMode
      });
    };
    var normalizeDataSourceOptions = function(options, normalizationOptions) {
      var store;
      if ("string" === typeof options) {
        options = {
          paginate: false,
          store: createCustomStoreFromUrl(options, normalizationOptions)
        };
      }
      if (void 0 === options) {
        options = [];
      }
      if (Array.isArray(options) || options instanceof _abstract_store.default) {
        options = {
          store: options
        };
      } else {
        options = (0, _extend.extend)({}, options);
      }
      if (void 0 === options.store) {
        options.store = [];
      }
      store = options.store;
      if ("load" in options) {
        store = createCustomStoreFromLoadFunc(options);
      } else if (Array.isArray(store)) {
        store = new _array_store.default(store);
      } else if ((0, _type.isPlainObject)(store)) {
        store = createStoreFromConfig((0, _extend.extend)({}, store));
      }
      options.store = store;
      return options;
    };
    exports.normalizeDataSourceOptions = normalizeDataSourceOptions;
  }
});

// node_modules/devextreme/cjs/data/data_source/operation_manager.js
var require_operation_manager = __commonJS({
  "node_modules/devextreme/cjs/data/data_source/operation_manager.js"(exports, module) {
    "use strict";
    exports.default = void 0;
    var _utils = require_utils6();
    var OperationManager = function() {
      function OperationManager2() {
        this.wd = -1;
        this.yg = {};
      }
      var _proto = OperationManager2.prototype;
      _proto.add = function(deferred) {
        this.wd++;
        this.yg[this.wd] = deferred;
        return this.wd;
      };
      _proto.remove = function(operationId) {
        return delete this.yg[operationId];
      };
      _proto.cancel = function(operationId) {
        if (operationId in this.yg) {
          this.yg[operationId].reject(_utils.CANCELED_TOKEN);
          return true;
        }
        return false;
      };
      _proto.cancelAll = function() {
        while (this.wd > -1) {
          this.cancel(this.wd);
          this.wd--;
        }
      };
      return OperationManager2;
    }();
    exports.default = OperationManager;
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/devextreme/cjs/data/data_source/data_source.js
var require_data_source = __commonJS({
  "node_modules/devextreme/cjs/data/data_source/data_source.js"(exports) {
    "use strict";
    exports.DataSource = void 0;
    var _class = _interopRequireDefault(require_class());
    var _extend = require_extend();
    var _common = require_common();
    var _iterator = require_iterator();
    var _type = require_type();
    var _utils = require_utils5();
    var _array_utils = require_array_utils();
    var _custom_store = _interopRequireDefault(require_custom_store());
    var _events_strategy = require_events_strategy();
    var _errors = require_errors2();
    var _queue = require_queue();
    var _deferred = require_deferred();
    var _operation_manager = _interopRequireDefault(require_operation_manager());
    var _utils2 = require_utils6();
    function _interopRequireDefault(obj) {
      return obj && obj.j ? obj : {
        default: obj
      };
    }
    function _extends() {
      _extends = Object.assign ? Object.assign.bind() : function(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends.apply(this, arguments);
    }
    function _toConsumableArray(arr) {
      return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
    }
    function _nonIterableSpread() {
      throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _unsupportedIterableToArray(o, minLen) {
      if (!o) {
        return;
      }
      if ("string" === typeof o) {
        return _arrayLikeToArray(o, minLen);
      }
      var n = Object.prototype.toString.call(o).slice(8, -1);
      if ("Object" === n && o.constructor) {
        n = o.constructor.name;
      }
      if ("Map" === n || "Set" === n) {
        return Array.from(o);
      }
      if ("Arguments" === n || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) {
        return _arrayLikeToArray(o, minLen);
      }
    }
    function _iterableToArray(iter) {
      if ("undefined" !== typeof Symbol && null != iter[Symbol.iterator] || null != iter["@@iterator"]) {
        return Array.from(iter);
      }
    }
    function _arrayWithoutHoles(arr) {
      if (Array.isArray(arr)) {
        return _arrayLikeToArray(arr);
      }
    }
    function _arrayLikeToArray(arr, len) {
      if (null == len || len > arr.length) {
        len = arr.length;
      }
      for (var i = 0, arr2 = new Array(len); i < len; i++) {
        arr2[i] = arr[i];
      }
      return arr2;
    }
    var DataSource = _class.default.inherit({
      ctor: function(options) {
        var _options$reshapeOnPus, _this = this;
        options = (0, _utils2.normalizeDataSourceOptions)(options);
        this.q = new _events_strategy.EventsStrategy(this, {
          syncStrategy: true
        });
        this.N = options.store;
        this.Yn = 0;
        var needThrottling = 0 !== options.pushAggregationTimeout;
        if (needThrottling) {
          var throttlingTimeout = void 0 === options.pushAggregationTimeout ? function() {
            return 5 * _this.Yn;
          } : options.pushAggregationTimeout;
          var pushDeferred;
          var lastPushWaiters;
          var throttlingPushHandler = (0, _utils.throttleChanges)(function(changes) {
            pushDeferred.resolve();
            var storePushPending = _deferred.when.apply(void 0, _toConsumableArray(lastPushWaiters));
            storePushPending.done(function() {
              return _this.Zn(changes);
            });
            lastPushWaiters = void 0;
            pushDeferred = void 0;
          }, throttlingTimeout);
          this.Ee = function(args) {
            _this.qv = throttlingPushHandler(args.changes);
            if (!pushDeferred) {
              pushDeferred = new _deferred.Deferred();
            }
            lastPushWaiters = args.waitFor;
            args.waitFor.push(pushDeferred.promise());
          };
          this.N.on("beforePush", this.Ee);
        } else {
          this.Ee = function(changes) {
            return _this.Zn(changes);
          };
          this.N.on("push", this.Ee);
        }
        this.Vb = this.rv(options);
        this.zg = options.map;
        this._n = options.postProcess;
        this.fj = void 0 !== options.pageIndex ? options.pageIndex : 0;
        this.jb = void 0 !== options.pageSize ? options.pageSize : 20;
        this.$n = 0;
        this.tv = this.uv();
        this.Ag = "searchValue" in options ? options.searchValue : null;
        this.Bg = options.searchOperation || "contains";
        this.Cg = options.searchExpr;
        this.Eb = options.paginate;
        this.vv = null !== (_options$reshapeOnPus = options.reshapeOnPush) && void 0 !== _options$reshapeOnPus ? _options$reshapeOnPus : false;
        (0, _iterator.each)(["onChanged", "onLoadError", "onLoadingChanged", "onCustomizeLoadResult", "onCustomizeStoreLoadOptions"], function(_, optionName) {
          if (optionName in options) {
            _this.on(optionName.substr(2, 1).toLowerCase() + optionName.substr(3), options[optionName]);
          }
        });
        this.Fe = new _operation_manager.default();
        this.G();
      },
      G: function() {
        this.V = [];
        this.ao = {};
        this.co = -1;
        this.go = false;
        if (!(0, _type.isDefined)(this.Eb)) {
          this.Eb = !this.group();
        }
        this.Dg = !this.Eb;
      },
      dispose: function() {
        var _this$_delayedLoadTas;
        this.N.off("beforePush", this.Ee);
        this.N.off("push", this.Ee);
        this.q.dispose();
        clearTimeout(this.qv);
        null === (_this$_delayedLoadTas = this.ho) || void 0 === _this$_delayedLoadTas ? void 0 : _this$_delayedLoadTas.abort();
        this.Fe.cancelAll();
        delete this.N;
        delete this.V;
        delete this.ho;
        this.sb = true;
      },
      rv: function(options) {
        var result = {};
        var names = ["sort", "filter", "langParams", "select", "group", "requireTotalCount"];
        var customNames = this.N.iv();
        if (customNames) {
          names = names.concat(customNames);
        }
        (0, _iterator.each)(names, function() {
          result[this] = options[this];
        });
        return result;
      },
      loadOptions: function() {
        return this.Vb;
      },
      items: function() {
        return this.V;
      },
      pageIndex: function(newIndex) {
        if (!(0, _type.isNumeric)(newIndex)) {
          return this.fj;
        }
        this.fj = newIndex;
        this.Dg = !this.Eb;
      },
      paginate: function(value) {
        if (!(0, _type.isBoolean)(value)) {
          return this.Eb;
        }
        if (this.Eb !== value) {
          this.Eb = value;
          this.pageIndex(0);
        }
      },
      pageSize: function(value) {
        if (!(0, _type.isNumeric)(value)) {
          return this.jb;
        }
        this.jb = value;
      },
      isLastPage: function() {
        return this.Dg;
      },
      generateStoreLoadOptionAccessor: function(optionName) {
        var _this2 = this;
        return function(args) {
          var normalizedArgs = (0, _utils2.normalizeStoreLoadOptionAccessorArguments)(args);
          if (void 0 === normalizedArgs) {
            return _this2.Vb[optionName];
          }
          _this2.Vb[optionName] = normalizedArgs;
        };
      },
      sort: function() {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        return this.generateStoreLoadOptionAccessor("sort")(args);
      },
      filter: function() {
        var newFilter = (0, _utils2.normalizeStoreLoadOptionAccessorArguments)(arguments);
        if (void 0 === newFilter) {
          return this.Vb.filter;
        }
        this.Vb.filter = newFilter;
        this.pageIndex(0);
      },
      group: function() {
        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          args[_key2] = arguments[_key2];
        }
        return this.generateStoreLoadOptionAccessor("group")(args);
      },
      select: function() {
        for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
          args[_key3] = arguments[_key3];
        }
        return this.generateStoreLoadOptionAccessor("select")(args);
      },
      requireTotalCount: function(value) {
        if (!(0, _type.isBoolean)(value)) {
          return this.Vb.requireTotalCount;
        }
        this.Vb.requireTotalCount = value;
      },
      searchValue: function(value) {
        if (arguments.length < 1) {
          return this.Ag;
        }
        this.Ag = value;
        this.pageIndex(0);
      },
      searchOperation: function(op) {
        if (!(0, _type.isString)(op)) {
          return this.Bg;
        }
        this.Bg = op;
        this.pageIndex(0);
      },
      searchExpr: function(expr) {
        var argc = arguments.length;
        if (0 === argc) {
          return this.Cg;
        }
        if (argc > 1) {
          expr = [].slice.call(arguments);
        }
        this.Cg = expr;
        this.pageIndex(0);
      },
      store: function() {
        return this.N;
      },
      key: function() {
        var _this$_store;
        return null === (_this$_store = this.N) || void 0 === _this$_store ? void 0 : _this$_store.key();
      },
      totalCount: function() {
        return this.co;
      },
      isLoaded: function() {
        return this.go;
      },
      isLoading: function() {
        return this.$n > 0;
      },
      beginLoading: function() {
        this.io(1);
      },
      endLoading: function() {
        this.io(-1);
      },
      uv: function() {
        return (0, _queue.create)();
      },
      io: function(increment) {
        var oldLoading = this.isLoading();
        this.$n += increment;
        var newLoading = this.isLoading();
        if (oldLoading ^ newLoading) {
          this.q.fireEvent("loadingChanged", [newLoading]);
        }
      },
      wv: function(deferred) {
        var _this3 = this;
        this.beginLoading();
        deferred.always(function() {
          _this3.endLoading();
        });
      },
      jo: function(deferred) {
        var _this4 = this;
        deferred.fail(function() {
          for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
            args[_key4] = arguments[_key4];
          }
          if (args[0] === _utils2.CANCELED_TOKEN) {
            return;
          }
          _this4.q.fireEvent("loadError", args);
        });
      },
      mo: function(args) {
        var date = /* @__PURE__ */ new Date();
        this.q.fireEvent("changed", args);
        this.Yn = /* @__PURE__ */ new Date() - date;
      },
      xv: function(deferred) {
        var _this5 = this;
        deferred.done(function() {
          return _this5.mo();
        });
      },
      loadSingle: function(propName, propValue) {
        var _this6 = this;
        var d = new _deferred.Deferred();
        var key = this.key();
        var store = this.N;
        var options = this.oo();
        var handleDone = function(data) {
          var isEmptyArray = Array.isArray(data) && !data.length;
          if (!(0, _type.isDefined)(data) || isEmptyArray) {
            d.reject(new _errors.errors.Error("E4009"));
          } else {
            if (!Array.isArray(data)) {
              data = [data];
            }
            d.resolve(_this6.gj(data)[0]);
          }
        };
        this.jo(d);
        if (arguments.length < 2) {
          propValue = propName;
          propName = key;
        }
        delete options.skip;
        delete options.group;
        delete options.refresh;
        delete options.pageIndex;
        delete options.searchString;
        var shouldForceByKey = function() {
          return store instanceof _custom_store.default && !store.Xn();
        };
        (function() {
          if (propName === key || shouldForceByKey()) {
            return store.byKey(propValue, options);
          }
          options.take = 1;
          options.filter = options.filter ? [options.filter, [propName, propValue]] : [propName, propValue];
          return store.load(options);
        })().fail(d.reject).done(handleDone);
        return d.promise();
      },
      load: function() {
        var _this7 = this;
        var d = new _deferred.Deferred();
        var loadTask = function() {
          if (_this7.sb) {
            return;
          }
          if (!(0, _utils2.isPending)(d)) {
            return;
          }
          return _this7.yv(loadOperation, d);
        };
        this.wv(d);
        this.jo(d);
        this.xv(d);
        var loadOperation = this.zv(d);
        this.q.fireEvent("customizeStoreLoadOptions", [loadOperation]);
        this.tv.add(function() {
          if ("number" === typeof loadOperation.delay) {
            _this7.ho = (0, _common.executeAsync)(loadTask, loadOperation.delay);
          } else {
            loadTask();
          }
          return d.promise();
        });
        return d.promise({
          operationId: loadOperation.operationId
        });
      },
      Zn: function(changes) {
        var _this8 = this;
        if (this.vv) {
          this.load();
        } else {
          var changingArgs = {
            changes
          };
          this.q.fireEvent("changing", [changingArgs]);
          var group = this.group();
          var items = this.items();
          var groupLevel = 0;
          var dataSourceChanges = this.paginate() || group ? changes.filter(function(item) {
            return "update" === item.type;
          }) : changes;
          if (group) {
            groupLevel = Array.isArray(group) ? group.length : 1;
          }
          if (this.zg) {
            dataSourceChanges.forEach(function(item) {
              if ("insert" === item.type) {
                item.data = _this8.zg(item.data);
              }
            });
          }
          if (changingArgs.postProcessChanges) {
            dataSourceChanges = changingArgs.postProcessChanges(dataSourceChanges);
          }
          (0, _array_utils.applyBatch)({
            keyInfo: this.store(),
            data: items,
            changes: dataSourceChanges,
            groupCount: groupLevel,
            useInsertIndex: true
          });
          this.mo([{
            changes
          }]);
        }
      },
      zv: function(deferred) {
        var _this9 = this;
        var operationId = this.Fe.add(deferred);
        var storeLoadOptions = this.oo();
        if (this.N && !(0, _type.isEmptyObject)(null === storeLoadOptions || void 0 === storeLoadOptions ? void 0 : storeLoadOptions.langParams)) {
          this.N.ud = _extends({}, this.N.ud, storeLoadOptions.langParams);
        }
        deferred.always(function() {
          return _this9.Fe.remove(operationId);
        });
        return {
          operationId,
          storeLoadOptions
        };
      },
      reload: function() {
        var store = this.store();
        store._i();
        this.G();
        return this.load();
      },
      cancel: function(operationId) {
        return this.Fe.cancel(operationId);
      },
      cancelAll: function() {
        return this.Fe.cancelAll();
      },
      Av: function(storeLoadOptions) {
        if (this.sb) {
          return;
        }
        if (this.store().On) {
          this.po(storeLoadOptions);
        } else {
          storeLoadOptions.searchOperation = this.Bg;
          storeLoadOptions.searchValue = this.Ag;
          storeLoadOptions.searchExpr = this.Cg;
        }
      },
      oo: function() {
        var result = (0, _extend.extend)({}, this.Vb);
        this.Av(result);
        if (this.Eb) {
          if (this.jb) {
            result.skip = this.fj * this.jb;
            result.take = this.jb;
          }
        }
        result.userData = this.ao;
        return result;
      },
      po: function(storeLoadOptions) {
        var value = this.Ag;
        var op = this.Bg;
        var selector = this.Cg;
        var searchFilter = [];
        if (!value) {
          return;
        }
        if (!selector) {
          selector = "this";
        }
        if (!Array.isArray(selector)) {
          selector = [selector];
        }
        (0, _iterator.each)(selector, function(i, item) {
          if (searchFilter.length) {
            searchFilter.push("or");
          }
          searchFilter.push([item, op, value]);
        });
        if (storeLoadOptions.filter) {
          storeLoadOptions.filter = [searchFilter, storeLoadOptions.filter];
        } else {
          storeLoadOptions.filter = searchFilter;
        }
      },
      yv: function(loadOptions, pendingDeferred) {
        var _this10 = this;
        var handleSuccess = function(data, extra) {
          if (_this10.sb) {
            return;
          }
          if (!(0, _utils2.isPending)(pendingDeferred)) {
            return;
          }
          var loadResult = (0, _extend.extend)((0, _utils2.normalizeLoadResult)(data, extra), loadOptions);
          _this10.q.fireEvent("customizeLoadResult", [loadResult]);
          (0, _deferred.when)(loadResult.data).done(function(data2) {
            loadResult.data = data2;
            _this10.Bv(loadResult, pendingDeferred);
          }).fail(pendingDeferred.reject);
        };
        if (loadOptions.data) {
          return new _deferred.Deferred().resolve(loadOptions.data).done(handleSuccess);
        }
        return this.store().load(loadOptions.storeLoadOptions).done(handleSuccess).fail(pendingDeferred.reject);
      },
      Bv: function(loadResult, pendingDeferred) {
        var _this11 = this;
        var data = loadResult.data;
        var extra = loadResult.extra;
        var storeLoadOptions = loadResult.storeLoadOptions;
        var resolvePendingDeferred = function() {
          _this11.go = true;
          _this11.co = isFinite(extra.totalCount) ? extra.totalCount : -1;
          return pendingDeferred.resolve(data, extra);
        };
        if (this.sb) {
          return;
        }
        data = this.Cv(this.gj(data));
        if (!(0, _type.isObject)(extra)) {
          extra = {};
        }
        this.V = data;
        if (!data.length || !this.Eb || this.jb && data.length < this.jb) {
          this.Dg = true;
        }
        if (storeLoadOptions.requireTotalCount && !isFinite(extra.totalCount)) {
          void _this11.store().totalCount(storeLoadOptions).done(function(count) {
            extra.totalCount = count;
            resolvePendingDeferred();
          }).fail(pendingDeferred.reject);
        } else {
          resolvePendingDeferred();
        }
      },
      gj: function(data) {
        if (this.zg) {
          return (0, _utils2.mapDataRespectingGrouping)(data, this.zg, this.group());
        }
        return data;
      },
      Cv: function(data) {
        if (this._n) {
          return this._n(data);
        }
        return data;
      },
      on: function(eventName, eventHandler) {
        this.q.on(eventName, eventHandler);
        return this;
      },
      off: function(eventName, eventHandler) {
        this.q.off(eventName, eventHandler);
        return this;
      }
    });
    exports.DataSource = DataSource;
  }
});

// node_modules/devextreme/cjs/ui/collection/data_controller.js
var require_data_controller = __commonJS({
  "node_modules/devextreme/cjs/ui/collection/data_controller.js"(exports, module) {
    "use strict";
    exports.default = void 0;
    var _common = require_common();
    var _deferred = require_deferred();
    var DataControllerMock = {
      load: function() {
        return (0, _deferred.Deferred)().reject();
      },
      loadSingle: function() {
        return (0, _deferred.Deferred)().reject();
      },
      loadFromStore: function() {
        return (0, _deferred.Deferred)().reject();
      },
      loadNextPage: function() {
        return (0, _deferred.Deferred)().reject();
      },
      loadOptions: _common.noop,
      userData: _common.noop,
      cancel: _common.noop,
      cancelAll: _common.noop,
      filter: _common.noop,
      addSearchFilter: _common.noop,
      group: _common.noop,
      paginate: _common.noop,
      pageSize: _common.noop,
      pageIndex: _common.noop,
      resetDataSourcePageIndex: _common.noop,
      totalCount: _common.noop,
      isLastPage: _common.noop,
      isLoading: _common.noop,
      isLoaded: _common.noop,
      searchValue: _common.noop,
      searchOperation: _common.noop,
      searchExpr: _common.noop,
      select: _common.noop,
      key: _common.noop,
      keyOf: _common.noop,
      store: _common.noop,
      items: _common.noop,
      applyMapFunction: _common.noop,
      getDataSource: _common.noop,
      reload: _common.noop,
      on: _common.noop,
      off: _common.noop
    };
    var DataController = function() {
      function DataController2(dataSource) {
        if (!dataSource) {
          return DataControllerMock;
        }
        this.o = dataSource;
      }
      var _proto = DataController2.prototype;
      _proto.load = function() {
        return this.o.load();
      };
      _proto.loadSingle = function(propName, propValue) {
        if (arguments.length < 2) {
          propValue = propName;
          propName = this.key();
        }
        return this.o.loadSingle(propName, propValue);
      };
      _proto.loadFromStore = function(loadOptions) {
        return this.store().load(loadOptions);
      };
      _proto.loadNextPage = function() {
        this.pageIndex(1 + this.pageIndex());
        return this.load();
      };
      _proto.loadOptions = function() {
        return this.o.loadOptions();
      };
      _proto.userData = function() {
        return this.o.ao;
      };
      _proto.cancel = function(operationId) {
        this.o.cancel(operationId);
      };
      _proto.cancelAll = function() {
        this.o.cancelAll();
      };
      _proto.filter = function(_filter) {
        return this.o.filter(_filter);
      };
      _proto.addSearchFilter = function(storeLoadOptions) {
        this.o.po(storeLoadOptions);
      };
      _proto.group = function(_group) {
        return this.o.group(_group);
      };
      _proto.paginate = function() {
        return this.o.paginate();
      };
      _proto.pageSize = function() {
        return this.o.jb;
      };
      _proto.pageIndex = function(_pageIndex) {
        return this.o.pageIndex(_pageIndex);
      };
      _proto.resetDataSourcePageIndex = function() {
        if (this.pageIndex()) {
          this.pageIndex(0);
          this.load();
        }
      };
      _proto.totalCount = function() {
        return this.o.totalCount();
      };
      _proto.isLastPage = function() {
        return this.o.isLastPage() || !this.o.jb;
      };
      _proto.isLoading = function() {
        return this.o.isLoading();
      };
      _proto.isLoaded = function() {
        return this.o.isLoaded();
      };
      _proto.searchValue = function(value) {
        if (!arguments.length) {
          return this.o.searchValue();
        }
        return this.o.searchValue(value);
      };
      _proto.searchOperation = function(operation) {
        return this.o.searchOperation(operation);
      };
      _proto.searchExpr = function(expr) {
        if (!arguments.length) {
          return this.o.searchExpr();
        }
        return this.o.searchExpr(expr);
      };
      _proto.select = function() {
        var _this$_dataSource;
        return (_this$_dataSource = this.o).select.apply(_this$_dataSource, arguments);
      };
      _proto.key = function() {
        return this.o.key();
      };
      _proto.keyOf = function(item) {
        return this.store().keyOf(item);
      };
      _proto.store = function() {
        return this.o.store();
      };
      _proto.items = function() {
        return this.o.items();
      };
      _proto.applyMapFunction = function(data) {
        return this.o.gj(data);
      };
      _proto.getDataSource = function() {
        return this.o || null;
      };
      _proto.reload = function() {
        return this.o.reload();
      };
      _proto.on = function(event, handler) {
        this.o.on(event, handler);
      };
      _proto.off = function(event, handler) {
        this.o.off(event, handler);
      };
      return DataController2;
    }();
    var _default = DataController;
    exports.default = _default;
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/devextreme/cjs/data_helper.js
var require_data_helper = __commonJS({
  "node_modules/devextreme/cjs/data_helper.js"(exports, module) {
    "use strict";
    exports.default = void 0;
    var _data_source = require_data_source();
    var _extend = require_extend();
    var _utils = require_utils6();
    var _data_controller = _interopRequireDefault(require_data_controller());
    function _interopRequireDefault(obj) {
      return obj && obj.j ? obj : {
        default: obj
      };
    }
    var DATA_SOURCE_OPTIONS_METHOD = "_dataSourceOptions";
    var DATA_SOURCE_CHANGED_METHOD = "_dataSourceChangedHandler";
    var DATA_SOURCE_LOAD_ERROR_METHOD = "_dataSourceLoadErrorHandler";
    var DATA_SOURCE_LOADING_CHANGED_METHOD = "_dataSourceLoadingChangedHandler";
    var DATA_SOURCE_FROM_URL_LOAD_MODE_METHOD = "_dataSourceFromUrlLoadMode";
    var SPECIFIC_DATA_SOURCE_OPTION = "_getSpecificDataSourceOption";
    var NORMALIZE_DATA_SOURCE = "_normalizeDataSource";
    var DataHelperMixin = {
      postCtor: function() {
        this.on("disposing", function() {
          this.qo();
        }.bind(this));
      },
      Dv: function() {
        this.Ev();
        this.Fv();
      },
      Ev: function() {
        var dataSourceOptions = SPECIFIC_DATA_SOURCE_OPTION in this ? this[SPECIFIC_DATA_SOURCE_OPTION]() : this.option("dataSource");
        var widgetDataSourceOptions;
        var dataSourceType;
        this.qo();
        if (dataSourceOptions) {
          if (dataSourceOptions instanceof _data_source.DataSource) {
            this.uo = true;
            this.o = dataSourceOptions;
          } else {
            widgetDataSourceOptions = DATA_SOURCE_OPTIONS_METHOD in this ? this[DATA_SOURCE_OPTIONS_METHOD]() : {};
            dataSourceType = this.Gv ? this.Gv() : _data_source.DataSource;
            dataSourceOptions = (0, _utils.normalizeDataSourceOptions)(dataSourceOptions, {
              fromUrlLoadMode: DATA_SOURCE_FROM_URL_LOAD_MODE_METHOD in this && this[DATA_SOURCE_FROM_URL_LOAD_MODE_METHOD]()
            });
            this.o = new dataSourceType((0, _extend.extend)(true, {}, widgetDataSourceOptions, dataSourceOptions));
          }
          if (NORMALIZE_DATA_SOURCE in this) {
            this.o = this[NORMALIZE_DATA_SOURCE](this.o);
          }
          this.Hv();
          this.Iv();
        }
      },
      Iv: function() {
        var _this$option;
        var dataController = null === (_this$option = this.option) || void 0 === _this$option ? void 0 : _this$option.call(this, "_dataController");
        var dataSource = this.o;
        if (dataController) {
          this.Jv = dataController;
        } else {
          this.Jv = new _data_controller.default(dataSource);
        }
      },
      Hv: function() {
        if (DATA_SOURCE_CHANGED_METHOD in this) {
          this.Kv();
        }
        if (DATA_SOURCE_LOAD_ERROR_METHOD in this) {
          this.Lv();
        }
        if (DATA_SOURCE_LOADING_CHANGED_METHOD in this) {
          this.Mv();
        }
        this.Nv();
      },
      Nv: function() {
        this.o.on("loadingChanged", function(isLoading) {
          this.Ov && this.Ov(!isLoading);
        }.bind(this));
      },
      Kv: function() {
        var dataSource = this.o;
        this.xd = function(e) {
          this[DATA_SOURCE_CHANGED_METHOD](dataSource.items(), e);
        }.bind(this);
        dataSource.on("changed", this.xd);
      },
      Lv: function() {
        this.Eg = this[DATA_SOURCE_LOAD_ERROR_METHOD].bind(this);
        this.o.on("loadError", this.Eg);
      },
      Mv: function() {
        this.Fg = this[DATA_SOURCE_LOADING_CHANGED_METHOD].bind(this);
        this.o.on("loadingChanged", this.Fg);
      },
      Fv: function() {
        var dataSource = this.o;
        if (dataSource) {
          if (dataSource.isLoaded()) {
            this.xd && this.xd();
          } else {
            dataSource.load();
          }
        }
      },
      Uy: function(key, value) {
        key = "this" === key ? this.o.key() || "this" : key;
        return this.o.loadSingle(key, value);
      },
      Dg: function() {
        return !this.o || this.o.isLastPage() || !this.o.jb;
      },
      Vy: function() {
        return this.o && this.o.isLoading();
      },
      qo: function() {
        if (this.o) {
          if (this.uo) {
            delete this.uo;
            this.xd && this.o.off("changed", this.xd);
            this.Eg && this.o.off("loadError", this.Eg);
            this.Fg && this.o.off("loadingChanged", this.Fg);
          } else {
            this.o.dispose();
          }
          delete this.o;
          delete this.xd;
          delete this.Eg;
          delete this.Fg;
        }
      },
      getDataSource: function() {
        return this.o || null;
      }
    };
    var _default = DataHelperMixin;
    exports.default = _default;
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/devextreme/cjs/viz/core/data_source.js
var require_data_source2 = __commonJS({
  "node_modules/devextreme/cjs/viz/core/data_source.js"(exports) {
    "use strict";
    exports.plugin = void 0;
    var _common = require_common();
    var _data_helper = _interopRequireDefault(require_data_helper());
    function _interopRequireDefault(obj) {
      return obj && obj.j ? obj : {
        default: obj
      };
    }
    var postCtor = _data_helper.default.postCtor;
    var name;
    var members = {
      Wy: function() {
        this.Ge();
      },
      Xy: function() {
        return {
          paginate: false
        };
      },
      Pv: function() {
        this.Dv();
        if (!this.option("dataSource")) {
          this.Ge();
        }
      },
      Qv: function() {
        return !this.o || this.o.isLoaded();
      },
      Rv: function() {
        return this.o && this.o.items();
      }
    };
    for (name in _data_helper.default) {
      if ("postCtor" === name) {
        continue;
      }
      members[name] = _data_helper.default[name];
    }
    var plugin = {
      name: "data_source",
      init: function() {
        postCtor.call(this);
      },
      dispose: _common.noop,
      members
    };
    exports.plugin = plugin;
  }
});

// node_modules/devextreme/cjs/viz/core/plaque.js
var require_plaque = __commonJS({
  "node_modules/devextreme/cjs/viz/core/plaque.js"(exports) {
    "use strict";
    exports.Plaque = void 0;
    var _extend = require_extend();
    var _type = require_type();
    var _excluded = ["x", "y", "canvas", "offsetX", "offsetY", "offset"];
    function _extends() {
      _extends = Object.assign ? Object.assign.bind() : function(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends.apply(this, arguments);
    }
    function _objectWithoutProperties(source, excluded) {
      if (null == source) {
        return {};
      }
      var target = _objectWithoutPropertiesLoose(source, excluded);
      var key, i;
      if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for (i = 0; i < sourceSymbolKeys.length; i++) {
          key = sourceSymbolKeys[i];
          if (excluded.indexOf(key) >= 0) {
            continue;
          }
          if (!Object.prototype.propertyIsEnumerable.call(source, key)) {
            continue;
          }
          target[key] = source[key];
        }
      }
      return target;
    }
    function _objectWithoutPropertiesLoose(source, excluded) {
      if (null == source) {
        return {};
      }
      var target = {};
      var sourceKeys = Object.keys(source);
      var key, i;
      for (i = 0; i < sourceKeys.length; i++) {
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) {
          continue;
        }
        target[key] = source[key];
      }
      return target;
    }
    var math = Math;
    var round = math.round;
    var max = math.max;
    var min = math.min;
    var sin = math.sin;
    var cos = math.cos;
    var asin = math.asin;
    var PI = math.PI;
    var buildPath = function() {
      for (var _len = arguments.length, points = new Array(_len), _key = 0; _key < _len; _key++) {
        points[_key] = arguments[_key];
      }
      return points.join("");
    };
    function getArc(cornerRadius, xDirection, yDirection) {
      return "a ".concat(cornerRadius, " ").concat(cornerRadius, " 0 0 1 ").concat(xDirection * cornerRadius, " ").concat(yDirection * cornerRadius);
    }
    function getAbsoluteArc(cornerRadius, x, y) {
      return "A ".concat(cornerRadius, " ").concat(cornerRadius, " 0 0 1 ").concat(x, " ").concat(y);
    }
    function rotateX(x, y, angle, x0, y0) {
      return (x - x0) * round(cos(angle)) + (y - y0) * round(sin(angle)) + x0;
    }
    function rotateY(x, y, angle, x0, y0) {
      return -(x - x0) * round(sin(angle)) + (y - y0) * round(cos(angle)) + y0;
    }
    function rotateSize(options, angle) {
      if (angle % 90 === 0 && angle % 180 !== 0) {
        return {
          width: options.height,
          height: options.width
        };
      }
      return options;
    }
    function getCloudAngle(_ref, x, y, anchorX, anchorY) {
      var width = _ref.width, height = _ref.height;
      var halfWidth = width / 2;
      var halfHeight = height / 2;
      var xr = Math.ceil(x + halfWidth);
      var xl = Math.floor(x - halfWidth);
      var yt = Math.floor(y - halfHeight);
      var yb = Math.ceil(y + halfHeight);
      if (anchorX < xl && anchorY < yt || anchorX >= xl && anchorX <= xr && anchorY < yt) {
        return 270;
      }
      if (anchorX > xr && anchorY > yb || anchorX >= xl && anchorX <= xr && anchorY > yb) {
        return 90;
      } else if (anchorX < xl && anchorY > yb || anchorX < xl && anchorY >= yt && anchorY <= yb) {
        return 180;
      }
      return 0;
    }
    function getCloudPoints(_ref2, x, y, anchorX, anchorY, _ref3, bounded) {
      var width = _ref2.width, height = _ref2.height;
      var arrowWidth = _ref3.arrowWidth, _ref3$cornerRadius = _ref3.cornerRadius, cornerRadius = void 0 === _ref3$cornerRadius ? 0 : _ref3$cornerRadius;
      var halfArrowWidth = arrowWidth / 2;
      var halfWidth = width / 2;
      var halfHeight = height / 2;
      var xr = Math.ceil(x + halfWidth);
      var xl = Math.floor(x - halfWidth);
      var yt = Math.floor(y - halfHeight);
      var yb = Math.ceil(y + halfHeight);
      var leftTopCorner = [xl, yt];
      var rightTopCorner = [xr, yt];
      var rightBottomCorner = [xr, yb];
      var leftBottomCorner = [xl, yb];
      var arrowX = anchorX <= xl ? xl : xr <= anchorX ? xr : anchorX;
      var arrowY = anchorY <= yt ? yt : yb <= anchorY ? yb : anchorY;
      var arrowBaseBottom = min(arrowY + halfArrowWidth, yb);
      var arrowBaseTop = max(arrowY - halfArrowWidth, yt);
      var arrowBaseLeft = max(arrowX - halfArrowWidth, xl);
      cornerRadius = Math.min(width / 2, height / 2, cornerRadius);
      var points;
      leftTopCorner[1] += cornerRadius;
      rightTopCorner[0] -= cornerRadius;
      rightBottomCorner[1] -= cornerRadius;
      leftBottomCorner[0] += cornerRadius;
      if (!bounded || xl <= anchorX && anchorX <= xr && yt <= anchorY && anchorY <= yb) {
        points = buildPath(leftTopCorner, getArc(cornerRadius, 1, -1), "L", rightTopCorner, getArc(cornerRadius, 1, 1), "L", rightBottomCorner, getArc(cornerRadius, -1, 1), "L", leftBottomCorner, getArc(cornerRadius, -1, -1));
      } else if (anchorX > xr && anchorY < yt) {
        var arrowAngle = arrowWidth / cornerRadius || 0;
        var angle = PI / 4 + arrowAngle / 2;
        var endAngle = PI / 4 - arrowAngle / 2;
        var arrowEndPointX = rightTopCorner[0] + cos(endAngle) * cornerRadius;
        var arrowEndPointY = rightTopCorner[1] + (1 - sin(endAngle)) * cornerRadius;
        var arrowArc = buildPath("L", rightTopCorner, getArc(cornerRadius, cos(angle), 1 - sin(angle)), "L", [anchorX, anchorY, arrowEndPointX, arrowEndPointY], getAbsoluteArc(cornerRadius, rightTopCorner[0] + cornerRadius, rightTopCorner[1] + cornerRadius));
        if (Math.abs(angle) > PI / 2) {
          arrowArc = buildPath("L", [arrowBaseLeft, yt, anchorX, anchorY, xr, arrowBaseBottom]);
        }
        points = buildPath(leftTopCorner, getArc(cornerRadius, 1, -1), arrowArc, "L", rightBottomCorner, getArc(cornerRadius, -1, 1), "L", leftBottomCorner, getArc(cornerRadius, -1, -1));
      } else if (anchorX > xr && anchorY >= yt && anchorY <= yb) {
        var _arrowArc;
        if (arrowBaseTop >= rightTopCorner[1] + cornerRadius && arrowBaseBottom <= rightBottomCorner[1]) {
          _arrowArc = buildPath(getArc(cornerRadius, 1, 1), "L", [xr, arrowBaseTop, anchorX, anchorY, xr, arrowBaseBottom], "L", rightBottomCorner, getArc(cornerRadius, -1, 1));
        } else if (arrowBaseTop < rightTopCorner[1] + cornerRadius && arrowBaseBottom >= rightTopCorner[1] + cornerRadius && arrowBaseBottom <= rightBottomCorner[1]) {
          var arrowWidthRest = rightTopCorner[1] + cornerRadius - arrowBaseTop;
          var _angle = arrowWidthRest / cornerRadius;
          var arrowBaseTopX = rightTopCorner[0] + cos(_angle) * cornerRadius;
          var arrowBaseTopY = rightTopCorner[1] + (1 - sin(_angle)) * cornerRadius;
          _arrowArc = buildPath(getArc(cornerRadius, cos(_angle), 1 - sin(_angle)), "L", [arrowBaseTopX, arrowBaseTopY, anchorX, anchorY, xr, arrowBaseBottom], "L", rightBottomCorner, getArc(cornerRadius, -1, 1));
        } else if (arrowBaseTop < rightTopCorner[1] + cornerRadius && arrowBaseBottom < rightTopCorner[1] + cornerRadius) {
          var _arrowWidthRest = rightTopCorner[1] + cornerRadius - arrowBaseTop;
          var _arrowAngle = _arrowWidthRest / cornerRadius;
          var _angle2 = _arrowAngle;
          var _arrowBaseTopX = rightTopCorner[0] + cos(_angle2) * cornerRadius;
          var _arrowBaseTopY = rightTopCorner[1] + (1 - sin(_angle2)) * cornerRadius;
          var bottomAngle = Math.sin((rightTopCorner[1] + cornerRadius - arrowBaseBottom) / cornerRadius);
          var arrowBaseBottomX = rightTopCorner[0] + cornerRadius * cos(bottomAngle);
          var arrowBaseBottomY = rightTopCorner[1] + cornerRadius * (1 - sin(bottomAngle));
          _arrowArc = buildPath(getArc(cornerRadius, cos(_angle2), 1 - sin(_angle2)), "L", [_arrowBaseTopX, _arrowBaseTopY, anchorX, anchorY, arrowBaseBottomX, arrowBaseBottomY], getAbsoluteArc(cornerRadius, rightTopCorner[0] + cornerRadius, rightTopCorner[1] + cornerRadius), "L", rightBottomCorner, getArc(cornerRadius, -1, 1));
        } else if (arrowBaseTop <= rightTopCorner[1] + cornerRadius && arrowBaseBottom >= rightBottomCorner[1]) {
          var topAngle = asin((rightTopCorner[1] + cornerRadius - arrowBaseTop) / cornerRadius);
          var _arrowBaseTopX2 = rightTopCorner[0] + cornerRadius * cos(topAngle);
          var _arrowBaseTopY2 = rightTopCorner[1] + cornerRadius * (1 - sin(topAngle));
          var _bottomAngle = asin((arrowBaseBottom - rightBottomCorner[1]) / cornerRadius);
          var _arrowBaseBottomX = rightBottomCorner[0] + cornerRadius * (cos(_bottomAngle) - 1);
          var _arrowBaseBottomY = rightBottomCorner[1] + cornerRadius * sin(_bottomAngle);
          _arrowArc = buildPath(getArc(cornerRadius, cos(topAngle), 1 - sin(topAngle)), "L", [_arrowBaseTopX2, _arrowBaseTopY2, anchorX, anchorY, _arrowBaseBottomX, _arrowBaseBottomY], getAbsoluteArc(cornerRadius, rightBottomCorner[0] - cornerRadius, rightBottomCorner[1] + cornerRadius));
        } else if (arrowBaseTop > rightTopCorner[1] + cornerRadius && arrowBaseTop <= rightBottomCorner[1] && arrowBaseBottom > rightBottomCorner[1]) {
          var _bottomAngle2 = asin((arrowBaseBottom - rightBottomCorner[1]) / cornerRadius);
          var _arrowBaseBottomX2 = rightBottomCorner[0] + cornerRadius * (cos(_bottomAngle2) - 1);
          var _arrowBaseBottomY2 = rightBottomCorner[1] + cornerRadius * sin(_bottomAngle2);
          _arrowArc = buildPath(getArc(cornerRadius, 1, 1), "L", [xr, arrowBaseTop, anchorX, anchorY, _arrowBaseBottomX2, _arrowBaseBottomY2], getAbsoluteArc(cornerRadius, rightBottomCorner[0] - cornerRadius, rightBottomCorner[1] + cornerRadius));
        } else if (arrowBaseTop > rightTopCorner[1] + cornerRadius && arrowBaseBottom > rightBottomCorner[1]) {
          var _bottomAngle3 = asin((arrowBaseBottom - rightBottomCorner[1]) / cornerRadius);
          var _arrowBaseBottomX3 = rightBottomCorner[0] + cornerRadius * (cos(_bottomAngle3) - 1);
          var _arrowBaseBottomY3 = rightBottomCorner[1] + cornerRadius * sin(_bottomAngle3);
          var _topAngle = asin((arrowBaseTop - rightBottomCorner[1]) / cornerRadius);
          var _arrowBaseTopX3 = rightBottomCorner[0] + cornerRadius * (cos(_topAngle) - 1);
          var _arrowBaseTopY3 = rightBottomCorner[1] + cornerRadius * sin(_topAngle);
          _arrowArc = buildPath(getArc(cornerRadius, 1, 1), "L", rightBottomCorner, getArc(cornerRadius, cos(_topAngle) - 1, sin(_topAngle)), "L", [_arrowBaseTopX3, _arrowBaseTopY3, anchorX, anchorY, _arrowBaseBottomX3, _arrowBaseBottomY3], getAbsoluteArc(cornerRadius, rightBottomCorner[0] - cornerRadius, rightBottomCorner[1] + cornerRadius));
        }
        points = buildPath(leftTopCorner, getArc(cornerRadius, 1, -1), "L", rightTopCorner, _arrowArc, "L", leftBottomCorner, getArc(cornerRadius, -1, -1));
      }
      return buildPath("M", points, "Z");
    }
    var Plaque = function() {
      function Plaque2(options, widget, root, contentTemplate) {
        var bounded = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : true;
        var measureContent = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : function(_, g) {
          return g.getBBox();
        };
        var moveContentGroup = arguments.length > 6 && void 0 !== arguments[6] ? arguments[6] : function(_, g, x, y) {
          return g.move(x, y);
        };
        this.widget = widget;
        this.options = options;
        this.root = root;
        this.contentTemplate = contentTemplate;
        this.bonded = bounded;
        this.measureContent = measureContent;
        this.moveContentGroup = moveContentGroup;
      }
      var _proto = Plaque2.prototype;
      _proto.draw = function(_ref4) {
        var _this = this;
        var anchorX = _ref4.x, anchorY = _ref4.y, _ref4$canvas = _ref4.canvas, canvas = void 0 === _ref4$canvas ? {} : _ref4$canvas, offsetX = _ref4.offsetX, offsetY = _ref4.offsetY, _ref4$offset = _ref4.offset, offset = void 0 === _ref4$offset ? 0 : _ref4$offset, restProps = _objectWithoutProperties(_ref4, _excluded);
        var options = this.options;
        var x = options.x, y = options.y;
        var bounds_xl = canvas.left, bounds_xr = canvas.width - canvas.right, bounds_width = canvas.width - canvas.right - canvas.left, bounds_yt = canvas.top, bounds_yb = canvas.height - canvas.bottom, bounds_height = canvas.height - canvas.bottom - canvas.top;
        if (!((0, _type.isDefined)(anchorX) && (0, _type.isDefined)(anchorY)) && !((0, _type.isDefined)(x) && (0, _type.isDefined)(y))) {
          return false;
        }
        if ((0, _type.isDefined)(anchorX) && (anchorX < bounds_xl || bounds_xr < anchorX || anchorY < bounds_yt || bounds_yb < anchorY)) {
          return false;
        }
        if (!this.tc) {
          this.Sv();
        }
        var shadowSettings = (0, _extend.extend)({
          x: "-50%",
          y: "-50%",
          width: "200%",
          height: "200%"
        }, options.shadow);
        var contentWidth = options.width > 0 ? options.width : null;
        var contentHeight = options.height > 0 ? options.height : null;
        var onRender = function() {
          var _this$_root;
          var bBox = _this.Gg = _this.measureContent(_this.widget, _this.Hg);
          var size = _this.ec = {
            width: max(contentWidth, bBox.width) + 2 * options.paddingLeftRight,
            height: max(contentHeight, bBox.height) + 2 * options.paddingTopBottom,
            offset
          };
          var xOff = shadowSettings.offsetX;
          var yOff = shadowSettings.offsetY;
          var blur = 2 * shadowSettings.blur + 1;
          var lm = max(blur - xOff, 0);
          var rm = max(blur + xOff, 0);
          var tm = max(blur - yOff, 0);
          var bm = max(blur + yOff, 0);
          _this.margins = {
            lm,
            rm,
            tm,
            bm
          };
          if (!(0, _type.isDefined)(x)) {
            if ((0, _type.isDefined)(offsetX)) {
              x = anchorX + offsetX;
            } else if (bounds_width < size.width) {
              x = round(bounds_xl + bounds_width / 2);
            } else {
              x = min(max(anchorX, Math.ceil(bounds_xl + size.width / 2 + lm)), Math.floor(bounds_xr - size.width / 2 - rm));
            }
          } else {
            x += offsetX || 0;
            if (!(0, _type.isDefined)(anchorX)) {
              anchorX = x;
            }
          }
          if (!(0, _type.isDefined)(y)) {
            if ((0, _type.isDefined)(offsetY)) {
              y = anchorY + offsetY;
            } else {
              var y_top = anchorY - options.arrowLength - size.height / 2 - offset;
              var y_bottom = anchorY + options.arrowLength + size.height / 2 + offset;
              if (bounds_height < size.height + options.arrowLength) {
                y = round(bounds_yt + size.height / 2);
              } else if (y_top - size.height / 2 - tm < bounds_yt) {
                if (y_bottom + size.height / 2 + bm < bounds_yb) {
                  y = y_bottom;
                  anchorY += offset;
                } else {
                  y = round(bounds_yt + size.height / 2);
                }
              } else {
                y = y_top;
                anchorY -= offset;
              }
            }
          } else {
            y += offsetY || 0;
            if (!(0, _type.isDefined)(anchorY)) {
              anchorY = y + size.height / 2;
            }
          }
          _this.anchorX = anchorX;
          _this.anchorY = anchorY;
          _this.move(x, y);
          null === (_this$_root = _this.tc) || void 0 === _this$_root ? void 0 : _this$_root.append(_this.root);
        };
        if (this.contentTemplate.render) {
          this.contentTemplate.render({
            model: options,
            container: this.Hg.element,
            onRendered: onRender
          });
        } else {
          return this.contentTemplate(_extends({
            group: this.Hg,
            onRender
          }, restProps));
        }
        return true;
      };
      _proto.Sv = function() {
        var renderer = this.widget.n;
        var options = this.options;
        var shadowSettings = (0, _extend.extend)({
          x: "-50%",
          y: "-50%",
          width: "200%",
          height: "200%"
        }, options.shadow);
        var shadow = this.qd = renderer.shadowFilter().attr(shadowSettings);
        var cloudSettings = {
          opacity: options.opacity,
          "stroke-width": 0,
          fill: options.color
        };
        var borderOptions = options.border || {};
        if (borderOptions.visible) {
          (0, _extend.extend)(cloudSettings, {
            "stroke-width": borderOptions.width,
            stroke: borderOptions.color,
            "stroke-opacity": borderOptions.opacity,
            dashStyle: borderOptions.dashStyle
          });
        }
        var group = this.tc = renderer.g().append(this.root);
        if (options.type) {
          group.attr({
            class: "dxc-".concat(options.type, "-annotation")
          });
        }
        var cloudGroup = renderer.g().attr({
          filter: shadow.id
        }).append(group);
        this.hj = renderer.path([], "area").attr(cloudSettings).sharp().append(cloudGroup);
        this.Hg = renderer.g().append(group);
      };
      _proto.getBBox = function() {
        var size = this.ec || {};
        var margins = this.margins || {};
        var rotationAngle = getCloudAngle(size, this.x, this.y, this.anchorX, this.anchorY);
        return {
          x: Math.floor(this.x - size.width / 2 - margins.lm),
          y: Math.floor(this.y - size.height / 2 - margins.tm - (270 === rotationAngle ? this.options.arrowLength : 0)),
          width: size.width + margins.lm + margins.rm,
          height: size.height + margins.tm + margins.bm + (90 === rotationAngle || 270 === rotationAngle ? this.options.arrowLength : 0)
        };
      };
      _proto.clear = function() {
        if (this.tc) {
          this.tc.remove();
          this.qd.remove();
          this.tc = null;
        }
        return this;
      };
      _proto.customizeCloud = function(attr) {
        if (this.hj) {
          this.hj.attr(attr);
        }
      };
      _proto.moveRoot = function(x, y) {
        if (this.tc) {
          this.tc.move(x, y);
        }
      };
      _proto.move = function(x, y) {
        x = round(x);
        y = round(y);
        this.x = x;
        this.y = y;
        var rotationAngle = getCloudAngle(this.ec, x, y, this.anchorX, this.anchorY);
        var radRotationAngle = rotationAngle * PI / 180;
        this.hj.attr({
          d: getCloudPoints(rotateSize(this.ec, rotationAngle), x, y, rotateX(this.anchorX, this.anchorY, radRotationAngle, x, y), rotateY(this.anchorX, this.anchorY, radRotationAngle, x, y), this.options, this.bonded)
        }).rotate(rotationAngle, x, y);
        this.moveContentGroup(this.widget, this.Hg, x - this.Gg.x - this.Gg.width / 2, y - this.Gg.y - this.Gg.height / 2);
      };
      _proto.hitTest = function(x, y) {
        var _ref5 = this.ec || {}, width = _ref5.width, height = _ref5.height;
        return Math.abs(x - this.x) <= width / 2 && Math.abs(y - this.y) <= height / 2;
      };
      return Plaque2;
    }();
    exports.Plaque = Plaque;
  }
});

// node_modules/devextreme/cjs/viz/core/tooltip.js
var require_tooltip = __commonJS({
  "node_modules/devextreme/cjs/viz/core/tooltip.js"(exports) {
    "use strict";
    exports.plugin = exports.Tooltip = void 0;
    var _size = require_size();
    var _dom_adapter = _interopRequireDefault(require_dom_adapter());
    var _window = require_window();
    var _dom = require_dom();
    var _inflector = require_inflector();
    var _renderer = _interopRequireDefault(require_renderer());
    var _renderer2 = require_renderer2();
    var _type = require_type();
    var _extend = require_extend();
    var _utils = require_utils();
    var _format_helper = _interopRequireDefault(require_format_helper());
    var _plaque = require_plaque();
    function _interopRequireDefault(obj) {
      return obj && obj.j ? obj : {
        default: obj
      };
    }
    var format = _format_helper.default.format;
    var mathCeil = Math.ceil;
    var mathMax = Math.max;
    var mathMin = Math.min;
    var window2 = (0, _window.getWindow)();
    var DEFAULT_HTML_GROUP_WIDTH = 3e3;
    function hideElement($element) {
      $element.css({
        left: "-9999px"
      }).detach();
    }
    function getSpecialFormatOptions(options, specialFormat) {
      var result = options;
      switch (specialFormat) {
        case "argument":
          result = {
            format: options.argumentFormat
          };
          break;
        case "percent":
          result = {
            format: {
              type: "percent",
              precision: options.format && options.format.percentPrecision
            }
          };
      }
      return result;
    }
    function createTextHtml() {
      return (0, _renderer.default)("<div>").css({
        position: "relative",
        display: "inline-block",
        padding: 0,
        margin: 0,
        border: "0px solid transparent"
      });
    }
    function removeElements(elements) {
      elements.forEach(function(el) {
        return el.remove();
      });
    }
    var Tooltip = function(params) {
      this.u = params.eventTrigger;
      this.vo = params.widgetRoot;
      this.Kh = params.widget;
      this.xo = [];
      this.Fb = (0, _renderer.default)("<div>").css({
        position: "absolute",
        overflow: "hidden",
        pointerEvents: "none"
      }).addClass(params.cssClass);
      var renderer = this.n = new _renderer2.Renderer({
        pathModified: params.pathModified,
        container: this.Fb[0]
      });
      var root = renderer.root;
      root.attr({
        "pointer-events": "none"
      });
      this.aa = renderer.text(void 0, 0, 0);
      this.uc = (0, _renderer.default)("<div>").css({
        position: "absolute",
        padding: 0,
        margin: 0,
        border: "0px solid transparent"
      }).appendTo(this.Fb);
      this.kb = createTextHtml().appendTo(this.uc);
    };
    exports.Tooltip = Tooltip;
    Tooltip.prototype = {
      constructor: Tooltip,
      dispose: function() {
        this.Fb.remove();
        this.n.dispose();
        this.e = this.vo = null;
      },
      zo: function() {
        var options = this.e;
        var container = (0, _renderer.default)(this.vo).closest(options.container);
        if (0 === container.length) {
          container = (0, _renderer.default)(options.container);
        }
        return (container.length ? container : (0, _renderer.default)("body")).get(0);
      },
      setTemplate: function(contentTemplate) {
        this.Ao = contentTemplate ? this.Kh.Gc(contentTemplate) : null;
      },
      setOptions: function(options) {
        var _this = this;
        options = options || {};
        var that = this;
        that.e = options;
        that.yd = (0, _utils.patchFontOptions)(options.font);
        that.yd.color = that.yd.fill;
        that.Fb.css({
          zIndex: options.zIndex
        });
        that.Tv = options.customizeTooltip;
        var textGroupHtml = that.uc;
        if (this.plaque) {
          this.plaque.clear();
        }
        this.setTemplate(options.contentTemplate);
        var pointerEvents = options.interactive ? "auto" : "none";
        if (options.interactive) {
          this.n.root.css({
            "-ms-user-select": "auto",
            "-moz-user-select": "auto",
            "-webkit-user-select": "auto"
          });
        }
        this.plaque = new _plaque.Plaque({
          opacity: that.e.opacity,
          color: that.e.color,
          border: that.e.border,
          paddingLeftRight: that.e.paddingLeftRight,
          paddingTopBottom: that.e.paddingTopBottom,
          arrowLength: that.e.arrowLength,
          arrowWidth: 20,
          shadow: that.e.shadow,
          cornerRadius: that.e.cornerRadius
        }, that, that.n.root, function(_ref) {
          var group = _ref.group, onRender = _ref.onRender, eventData = _ref.eventData, isMoving = _ref.isMoving, _ref$templateCallback = _ref.templateCallback, templateCallback = void 0 === _ref$templateCallback ? function() {
          } : _ref$templateCallback;
          var state = that.ab;
          if (!isMoving) {
            var template = that.Ao;
            var useTemplate = template && !state.formatObject.skipTemplate;
            if (state.html || useTemplate) {
              textGroupHtml.css({
                color: state.textColor,
                width: DEFAULT_HTML_GROUP_WIDTH,
                pointerEvents
              });
              if (useTemplate) {
                var htmlContainers = that.xo;
                var containerToTemplateRender = createTextHtml().appendTo(that.uc);
                htmlContainers.push(containerToTemplateRender);
                template.render({
                  model: state.formatObject,
                  container: containerToTemplateRender,
                  onRendered: function() {
                    removeElements(htmlContainers.splice(0, htmlContainers.length - 1));
                    that.kb = (0, _dom.replaceWith)(that.kb, containerToTemplateRender);
                    state.html = that.kb.html();
                    if (0 === (0, _size.getWidth)(that.kb) && 0 === (0, _size.getHeight)(that.kb)) {
                      _this.plaque.clear();
                      templateCallback(false);
                      return;
                    }
                    onRender();
                    that.ij(eventData);
                    that.Bo();
                    that.plaque.customizeCloud({
                      fill: state.color,
                      stroke: state.borderColor,
                      "pointer-events": pointerEvents
                    });
                    templateCallback(true);
                    that.xo = [];
                  }
                });
                return;
              } else {
                that.aa.attr({
                  text: ""
                });
                that.kb.html(state.html);
              }
            } else {
              that.aa.css({
                fill: state.textColor
              }).attr({
                text: state.text,
                class: options.cssClass,
                "pointer-events": pointerEvents
              }).append(group.attr({
                align: options.textAlignment
              }));
            }
            that.ij(eventData);
            that.plaque.customizeCloud({
              fill: state.color,
              stroke: state.borderColor,
              "pointer-events": pointerEvents
            });
          }
          onRender();
          that.Bo();
          return true;
        }, true, function(tooltip, g) {
          var state = tooltip.ab;
          if (state.html) {
            var bBox = window2.getComputedStyle(that.kb.get(0));
            bBox = {
              x: 0,
              y: 0,
              width: mathCeil(parseFloat(bBox.width)),
              height: mathCeil(parseFloat(bBox.height))
            };
            return bBox;
          }
          return g.getBBox();
        }, function(tooltip, g, x, y) {
          var state = tooltip.ab;
          if (state.html) {
            that.uc.css({
              left: x,
              top: y
            });
          } else {
            g.move(x, y);
          }
        });
        return that;
      },
      ij: function(eventData) {
        this.Wb && this.u("tooltipHidden", this.Wb);
        this.Wb = eventData;
        this.u("tooltipShown", this.Wb);
      },
      setRendererOptions: function(options) {
        this.n.setOptions(options);
        this.uc.css({
          direction: options.rtl ? "rtl" : "ltr"
        });
        return this;
      },
      update: function(options) {
        this.setOptions(options);
        hideElement(this.Fb);
        var normalizedCSS = {};
        for (var name in this.yd) {
          normalizedCSS[(0, _inflector.camelize)(name)] = this.yd[name];
        }
        this.uc.css(normalizedCSS);
        this.aa.css(this.yd);
        this.Wb = null;
        return this;
      },
      Uv: function(formatObject, state) {
        var customizeTooltip = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : this.Tv;
        var options = this.e;
        var customize = {};
        if ((0, _type.isFunction)(customizeTooltip)) {
          customize = customizeTooltip.call(formatObject, formatObject);
          customize = (0, _type.isPlainObject)(customize) ? customize : {};
          if ("text" in customize) {
            state.text = (0, _type.isDefined)(customize.text) ? String(customize.text) : "";
          }
          if ("html" in customize) {
            state.html = (0, _type.isDefined)(customize.html) ? String(customize.html) : "";
          }
        }
        if (!("text" in state) && !("html" in state)) {
          state.text = formatObject.valueText || formatObject.description || "";
        }
        state.color = customize.color || options.color;
        state.borderColor = customize.borderColor || (options.border || {}).color;
        state.textColor = customize.fontColor || (this.yd || {}).color;
        return !!state.text || !!state.html || !!this.Ao;
      },
      show: function(formatObject, params, eventData, customizeTooltip, templateCallback) {
        if (this.e.forceEvents) {
          eventData.x = params.x;
          eventData.y = params.y - params.offset;
          this.ij(eventData);
          return true;
        }
        var state = {
          formatObject,
          eventData,
          templateCallback
        };
        if (!this.Uv(formatObject, state, customizeTooltip)) {
          return false;
        }
        this.ab = state;
        this.Fb.appendTo(this.zo());
        this.Gb();
        var parameters = (0, _extend.extend)({}, this.e, {
          canvas: this.we()
        }, state, {
          x: params.x,
          y: params.y,
          offset: params.offset
        });
        return this.plaque.clear().draw(parameters);
      },
      isCursorOnTooltip: function(x, y) {
        if (this.e.interactive) {
          var box = this.plaque.getBBox();
          return x > box.x && x < box.x + box.width && y > box.y && y < box.y + box.height;
        }
        return false;
      },
      hide: function(isPointerOut) {
        hideElement(this.Fb);
        if (this.Wb) {
          this.u("tooltipHidden", this.e.forceEvents ? (0, _extend.extend)({
            isPointerOut
          }, this.Wb) : this.Wb);
          this.Gb();
          this.Wb = null;
        }
      },
      Gb: function() {
        this.kb.empty();
      },
      move: function(x, y, offset) {
        this.plaque.draw({
          x,
          y,
          offset,
          canvas: this.we(),
          isMoving: true
        });
      },
      Bo: function() {
        var plaqueBBox = this.plaque.getBBox();
        this.n.resize(plaqueBBox.width, plaqueBBox.height);
        var offset = this.Fb.css({
          left: 0,
          top: 0
        }).offset();
        var left = plaqueBBox.x;
        var top = plaqueBBox.y;
        this.Fb.css({
          left: left - offset.left,
          top: top - offset.top
        });
        this.plaque.moveRoot(-left, -top);
        if (this.ab.html) {
          this.kb.css({
            left: -left,
            top: -top
          });
          this.uc.css({
            width: mathCeil((0, _size.getWidth)(this.kb))
          });
        }
      },
      formatValue: function(value, _specialFormat) {
        var options = _specialFormat ? getSpecialFormatOptions(this.e, _specialFormat) : this.e;
        return format(value, options.format);
      },
      getOptions: function() {
        return this.e;
      },
      getLocation: function() {
        return (0, _utils.normalizeEnum)(this.e.location);
      },
      isEnabled: function() {
        return !!this.e.enabled || !!this.e.forceEvents;
      },
      isShared: function() {
        return !!this.e.shared;
      },
      we: function() {
        var container = this.zo();
        var containerBox = container.getBoundingClientRect();
        var html = _dom_adapter.default.getDocumentElement();
        var document2 = _dom_adapter.default.getDocument();
        var left = window2.pageXOffset || html.scrollLeft || 0;
        var top = window2.pageYOffset || html.scrollTop || 0;
        var box = {
          left,
          top,
          width: mathMax(html.clientWidth, document2.body.clientWidth) + left,
          height: mathMax(document2.body.scrollHeight, html.scrollHeight, document2.body.offsetHeight, html.offsetHeight, document2.body.clientHeight, html.clientHeight),
          right: 0,
          bottom: 0
        };
        if (container !== _dom_adapter.default.getBody()) {
          left = mathMax(box.left, box.left + containerBox.left);
          top = mathMax(box.top, box.top + containerBox.top);
          box.width = mathMin(containerBox.width, box.width) + left + box.left;
          box.height = mathMin(containerBox.height, box.height) + top + box.top;
          box.left = left;
          box.top = top;
        }
        return box;
      }
    };
    var plugin = {
      name: "tooltip",
      init: function() {
        this.Vv();
      },
      dispose: function() {
        this.Wv();
      },
      members: {
        Vv: function() {
          this.W = new Tooltip({
            cssClass: this.Jb + "-tooltip",
            eventTrigger: this.u,
            pathModified: this.option("pathModified"),
            widgetRoot: this.element(),
            widget: this
          });
        },
        Wv: function() {
          this.W.dispose();
          this.W = null;
        },
        Xv: function() {
          this.W.setRendererOptions(this.Ih());
        },
        Yv: function() {
          this.W.update(this.Ea("tooltip"));
        }
      },
      extenders: {
        Nc: function() {
          this.W && this.W.hide();
        }
      },
      customize: function(constructor) {
        var proto = constructor.prototype;
        proto.Ib.onTooltipShown = {
          name: "tooltipShown"
        };
        proto.Ib.onTooltipHidden = {
          name: "tooltipHidden"
        };
        constructor.addChange({
          code: "TOOLTIP_RENDERER",
          handler: function() {
            this.Xv();
          },
          isThemeDependent: true,
          isOptionChange: true
        });
        constructor.addChange({
          code: "TOOLTIP",
          handler: function() {
            this.Yv();
          },
          isThemeDependent: true,
          isOptionChange: true,
          option: "tooltip"
        });
      },
      fontFields: ["tooltip.font"]
    };
    exports.plugin = plugin;
  }
});

// node_modules/devextreme/cjs/viz/core/loading_indicator.js
var require_loading_indicator = __commonJS({
  "node_modules/devextreme/cjs/viz/core/loading_indicator.js"(exports) {
    "use strict";
    exports.plugin = exports.LoadingIndicator = void 0;
    var _utils = require_utils();
    var STATE_HIDDEN = 0;
    var STATE_SHOWN = 1;
    var ANIMATION_EASING = "linear";
    var ANIMATION_DURATION = 400;
    var LOADING_INDICATOR_READY = "loadingIndicatorReady";
    var LoadingIndicator = function(parameters) {
      var renderer = parameters.renderer;
      this.p = renderer.g().attr({
        class: "dx-loading-indicator"
      }).linkOn(renderer.root, {
        name: "loading-indicator",
        after: "peripheral"
      });
      this.zd = renderer.rect().attr({
        opacity: 0
      }).append(this.p);
      this.aa = renderer.text().attr({
        align: "center"
      }).append(this.p);
      this.Zv(parameters.eventTrigger, this.p, renderer.root, parameters.notify);
    };
    exports.LoadingIndicator = LoadingIndicator;
    LoadingIndicator.prototype = {
      constructor: LoadingIndicator,
      Zv: function(eventTrigger, group, root, notify) {
        this.Co = [{
          opacity: 0,
          start: function() {
            notify(false);
          },
          complete: function() {
            group.linkRemove();
            root.css({
              "pointer-events": ""
            });
            eventTrigger(LOADING_INDICATOR_READY);
          }
        }, {
          opacity: 0.85,
          start: function() {
            group.linkAppend();
            root.css({
              "pointer-events": "none"
            });
            notify(true);
          },
          complete: function() {
            eventTrigger(LOADING_INDICATOR_READY);
          }
        }];
        this.ab = STATE_HIDDEN;
      },
      setSize: function(size) {
        var width = size.width;
        var height = size.height;
        this.zd.attr({
          width,
          height
        });
        this.aa.attr({
          x: width / 2,
          y: height / 2
        });
      },
      setOptions: function(options) {
        this.zd.attr({
          fill: options.backgroundColor
        });
        this.aa.css((0, _utils.patchFontOptions)(options.font)).attr({
          text: options.text,
          class: options.cssClass
        });
        this[options.show ? "show" : "hide"]();
      },
      dispose: function() {
        this.p.linkRemove().linkOff();
        this.p = this.zd = this.aa = this.Co = null;
      },
      Do: function(stateId) {
        var state;
        if (this.ab !== stateId) {
          this.ab = stateId;
          this.Eo = false;
          state = this.Co[stateId];
          this.zd.stopAnimation().animate({
            opacity: state.opacity
          }, {
            complete: state.complete,
            easing: ANIMATION_EASING,
            duration: ANIMATION_DURATION,
            unstoppable: true
          });
          this.Fo = true;
          state.start();
          this.Fo = false;
        }
      },
      show: function() {
        this.Do(STATE_SHOWN);
      },
      hide: function() {
        this.Do(STATE_HIDDEN);
      },
      scheduleHiding: function() {
        if (!this.Fo) {
          this.Eo = true;
        }
      },
      fulfillHiding: function() {
        if (this.Eo) {
          this.hide();
        }
      }
    };
    var plugin = {
      name: "loading_indicator",
      init: function() {
        var that = this;
        that.Hb = new LoadingIndicator({
          eventTrigger: that.u,
          renderer: that.n,
          notify: function(state) {
            that.Go = true;
            that.option("loadingIndicator", {
              show: state
            });
            that.Go = false;
            if (state) {
              that.Nc();
            }
          }
        });
        that.Ig();
      },
      dispose: function() {
        this.Hb.dispose();
        this.Hb = null;
      },
      members: {
        Ig: function() {
          this.Hb.scheduleHiding();
        },
        Ho: function() {
          this.Hb.fulfillHiding();
        },
        showLoadingIndicator: function() {
          this.Hb.show();
        },
        hideLoadingIndicator: function() {
          this.Hb.hide();
        },
        ul: function() {
          if (!this.xf) {
            this.Ig();
          }
        }
      },
      extenders: {
        Yy: function(isLoading) {
          if (isLoading && (this.e.silent("loadingIndicator") || {}).enabled) {
            this.Hb.show();
          }
        },
        il: function() {
          this.Hb.setSize(this.A);
        },
        endUpdate: function() {
          if (this.ac && this.Af()) {
            this.Ho();
          }
        }
      },
      customize: function(constructor) {
        var proto = constructor.prototype;
        if (proto.Ge) {
          var _dataSourceChangedHandler = proto.Ge;
          proto.Ge = function() {
            this.Ig();
            _dataSourceChangedHandler.apply(this, arguments);
          };
        }
        constructor.addChange({
          code: "LOADING_INDICATOR",
          handler: function() {
            if (!this.Go) {
              this.Hb.setOptions(this.Ea("loadingIndicator"));
            }
            this.Ig();
          },
          isThemeDependent: true,
          option: "loadingIndicator",
          isOptionChange: true
        });
        proto.Ib.onLoadingIndicatorReady = {
          name: "loadingIndicatorReady"
        };
        var _drawn = proto.Oc;
        proto.Oc = function() {
          _drawn.apply(this, arguments);
          if (this.Af()) {
            this.Ho();
          }
        };
      },
      fontFields: ["loadingIndicator.font"]
    };
    exports.plugin = plugin;
  }
});

// node_modules/devextreme/cjs/viz/chart_components/base_chart.js
var require_base_chart = __commonJS({
  "node_modules/devextreme/cjs/viz/chart_components/base_chart.js"(exports) {
    "use strict";
    function _typeof(obj) {
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    exports.overlapping = exports.BaseChart = void 0;
    var _common = require_common();
    var _events_engine = _interopRequireDefault(require_events_engine());
    var _type = require_type();
    var _iterator = require_iterator();
    var _extend = require_extend();
    var _index = require_utils2();
    var _base_widget = _interopRequireDefault(require_base_widget());
    var _legend = require_legend();
    var _data_validator = require_data_validator();
    var _base_series = require_base_series();
    var _chart_theme_manager = require_chart_theme_manager();
    var _layout_manager = require_layout_manager();
    var trackerModule = _interopRequireWildcard(require_tracker());
    var _utils = require_utils();
    var _export = require_export();
    var _title = require_title();
    var _data_source = require_data_source2();
    var _tooltip = require_tooltip();
    var _loading_indicator = require_loading_indicator();
    function _getRequireWildcardCache(nodeInterop) {
      if ("function" !== typeof WeakMap) {
        return null;
      }
      var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
      var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
      return (_getRequireWildcardCache = function(nodeInterop2) {
        return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }
    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.j) {
        return obj;
      }
      if (null === obj || "object" !== _typeof(obj) && "function" !== typeof obj) {
        return {
          default: obj
        };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if ("default" !== key && Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    function _interopRequireDefault(obj) {
      return obj && obj.j ? obj : {
        default: obj
      };
    }
    var _isArray = Array.isArray;
    var REINIT_REFRESH_ACTION = "_reinit";
    var REINIT_DATA_SOURCE_REFRESH_ACTION = "_updateDataSource";
    var DATA_INIT_REFRESH_ACTION = "_dataInit";
    var FORCE_RENDER_REFRESH_ACTION = "_forceRender";
    var RESIZE_REFRESH_ACTION = "_resize";
    var ACTIONS_BY_PRIORITY = [REINIT_REFRESH_ACTION, REINIT_DATA_SOURCE_REFRESH_ACTION, DATA_INIT_REFRESH_ACTION, FORCE_RENDER_REFRESH_ACTION, RESIZE_REFRESH_ACTION];
    var DEFAULT_OPACITY = 0.3;
    var REFRESH_SERIES_DATA_INIT_ACTION_OPTIONS = ["series", "commonSeriesSettings", "dataPrepareSettings", "seriesSelectionMode", "pointSelectionMode", "synchronizeMultiAxes", "resolveLabelsOverlapping"];
    var REFRESH_SERIES_FAMILIES_ACTION_OPTIONS = ["minBubbleSize", "maxBubbleSize", "barGroupPadding", "barGroupWidth", "negativesAsZeroes", "negativesAsZeros"];
    var FORCE_RENDER_REFRESH_ACTION_OPTIONS = ["adaptiveLayout", "crosshair", "resolveLabelOverlapping", "adjustOnZoom", "stickyHovering"];
    var FONT = "font";
    function checkHeightRollingStock(rollingStocks, stubCanvas) {
      var canvasSize = stubCanvas.end - stubCanvas.start;
      var size = 0;
      rollingStocks.forEach(function(rollingStock) {
        size += rollingStock.getBoundingRect().width;
      });
      while (canvasSize < size) {
        size -= findAndKillSmallValue(rollingStocks);
      }
    }
    function findAndKillSmallValue(rollingStocks) {
      var smallestObject = rollingStocks.reduce(function(prev, rollingStock, index) {
        if (!rollingStock) {
          return prev;
        }
        var value = rollingStock.value();
        return value < prev.value ? {
          value,
          rollingStock,
          index
        } : prev;
      }, {
        rollingStock: void 0,
        value: 1 / 0,
        index: void 0
      });
      smallestObject.rollingStock.getLabels()[0].draw(false);
      var width = smallestObject.rollingStock.getBoundingRect().width;
      rollingStocks[smallestObject.index] = null;
      return width;
    }
    function checkStackOverlap(rollingStocks) {
      var i;
      var j;
      var iLength;
      var jLength;
      var overlap = false;
      for (i = 0, iLength = rollingStocks.length - 1; i < iLength; i++) {
        for (j = i + 1, jLength = rollingStocks.length; j < jLength; j++) {
          if (i !== j && checkStacksOverlapping(rollingStocks[i], rollingStocks[j], true)) {
            overlap = true;
            break;
          }
        }
        if (overlap) {
          break;
        }
      }
      return overlap;
    }
    function resolveLabelOverlappingInOneDirection(points, canvas, isRotated, isInverted, shiftFunction) {
      var customSorting = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : function() {
        return 0;
      };
      var rollingStocks = [];
      var stubCanvas = {
        start: isRotated ? canvas.left : canvas.top,
        end: isRotated ? canvas.width - canvas.right : canvas.height - canvas.bottom
      };
      var hasStackedSeries = false;
      var sortRollingStocks;
      points.forEach(function(p) {
        if (!p) {
          return;
        }
        hasStackedSeries = hasStackedSeries || p.series.isStackedSeries() || p.series.isFullStackedSeries();
        p.getLabels().forEach(function(l) {
          l.isVisible() && rollingStocks.push(new RollingStock(l, isRotated, shiftFunction));
        });
      });
      if (hasStackedSeries) {
        !isRotated ^ isInverted && rollingStocks.reverse();
        sortRollingStocks = !isInverted ? sortRollingStocksByValue(rollingStocks) : rollingStocks;
      } else {
        var rollingStocksTmp = rollingStocks.slice();
        sortRollingStocks = rollingStocks.sort(function(a, b) {
          return customSorting(a, b) || a.getInitialPosition() - b.getInitialPosition() || rollingStocksTmp.indexOf(a) - rollingStocksTmp.indexOf(b);
        });
      }
      if (!checkStackOverlap(sortRollingStocks)) {
        return false;
      }
      checkHeightRollingStock(sortRollingStocks, stubCanvas);
      prepareOverlapStacks(sortRollingStocks);
      sortRollingStocks.reverse();
      moveRollingStock(sortRollingStocks, stubCanvas);
      return true;
    }
    function checkStacksOverlapping(firstRolling, secondRolling, inTwoSides) {
      if (!firstRolling || !secondRolling) {
        return;
      }
      var firstRect = firstRolling.getBoundingRect();
      var secondRect = secondRolling.getBoundingRect();
      var oppositeOverlapping = inTwoSides ? firstRect.oppositeStart <= secondRect.oppositeStart && firstRect.oppositeEnd > secondRect.oppositeStart || secondRect.oppositeStart <= firstRect.oppositeStart && secondRect.oppositeEnd > firstRect.oppositeStart : true;
      return firstRect.end > secondRect.start && oppositeOverlapping;
    }
    function sortRollingStocksByValue(rollingStocks) {
      var positiveRollingStocks = [];
      var negativeRollingStocks = [];
      rollingStocks.forEach(function(stock) {
        if (stock.value() > 0) {
          positiveRollingStocks.push(stock);
        } else {
          negativeRollingStocks.unshift(stock);
        }
      });
      return positiveRollingStocks.concat(negativeRollingStocks);
    }
    function prepareOverlapStacks(rollingStocks) {
      var i;
      var currentRollingStock;
      var root;
      for (i = 0; i < rollingStocks.length - 1; i++) {
        currentRollingStock = root || rollingStocks[i];
        if (checkStacksOverlapping(currentRollingStock, rollingStocks[i + 1])) {
          currentRollingStock.toChain(rollingStocks[i + 1]);
          rollingStocks[i + 1] = null;
          root = currentRollingStock;
        } else {
          root = rollingStocks[i + 1] || currentRollingStock;
        }
      }
    }
    function moveRollingStock(rollingStocks, canvas) {
      var i;
      var j;
      var currentRollingStock;
      var nextRollingStock;
      var currentBBox;
      var nextBBox;
      for (i = 0; i < rollingStocks.length; i++) {
        currentRollingStock = rollingStocks[i];
        if (rollingStocksIsOut(currentRollingStock, canvas)) {
          currentBBox = currentRollingStock.getBoundingRect();
          for (j = i + 1; j < rollingStocks.length; j++) {
            nextRollingStock = rollingStocks[j];
            if (!nextRollingStock) {
              continue;
            }
            nextBBox = nextRollingStock.getBoundingRect();
            if (nextBBox.end > currentBBox.start - (currentBBox.end - canvas.end)) {
              nextRollingStock.toChain(currentRollingStock);
              rollingStocks[i] = currentRollingStock = null;
              break;
            }
          }
        }
        currentRollingStock && currentRollingStock.setRollingStockInCanvas(canvas);
      }
    }
    function rollingStocksIsOut(rollingStock, canvas) {
      return rollingStock && rollingStock.getBoundingRect().end > canvas.end;
    }
    function RollingStock(label, isRotated, shiftFunction) {
      var bBox = label.getBoundingRect();
      var x = bBox.x;
      var y = bBox.y;
      var endX = bBox.x + bBox.width;
      var endY = bBox.y + bBox.height;
      this.labels = [label];
      this.shiftFunction = shiftFunction;
      this.Ma = {
        start: isRotated ? x : y,
        width: isRotated ? bBox.width : bBox.height,
        end: isRotated ? endX : endY,
        oppositeStart: isRotated ? y : x,
        oppositeEnd: isRotated ? endY : endX
      };
      this._v = isRotated ? bBox.x : bBox.y;
      return this;
    }
    RollingStock.prototype = {
      toChain: function(nextRollingStock) {
        var nextRollingStockBBox = nextRollingStock.getBoundingRect();
        nextRollingStock.shift(nextRollingStockBBox.start - this.Ma.end);
        this.$v(nextRollingStockBBox.width);
        this.labels = this.labels.concat(nextRollingStock.labels);
      },
      getBoundingRect: function() {
        return this.Ma;
      },
      shift: function(shiftLength) {
        var shiftFunction = this.shiftFunction;
        (0, _iterator.each)(this.labels, function(index, label) {
          var bBox = label.getBoundingRect();
          var coords = shiftFunction(bBox, shiftLength);
          if (!label.hideInsideLabel(coords)) {
            label.shift(coords.x, coords.y);
          }
        });
        this.Ma.end -= shiftLength;
        this.Ma.start -= shiftLength;
      },
      setRollingStockInCanvas: function(canvas) {
        if (this.Ma.end > canvas.end) {
          this.shift(this.Ma.end - canvas.end);
        }
      },
      getLabels: function() {
        return this.labels;
      },
      value: function() {
        return this.labels[0].getData().value;
      },
      getInitialPosition: function() {
        return this._v;
      },
      $v: function(width) {
        this.Ma.end += width;
        this.Ma.width += width;
      }
    };
    function getLegendFields(name) {
      return {
        nameField: name + "Name",
        colorField: name + "Color",
        indexField: name + "Index"
      };
    }
    function getLegendSettings(legendDataField) {
      var formatObjectFields = getLegendFields(legendDataField);
      return {
        getFormatObject: function(data) {
          var res = {};
          res[formatObjectFields.indexField] = data.id;
          res[formatObjectFields.colorField] = data.states.normal.fill;
          res[formatObjectFields.nameField] = data.text;
          return res;
        },
        textField: formatObjectFields.nameField
      };
    }
    function checkOverlapping(firstRect, secondRect) {
      return (firstRect.x <= secondRect.x && secondRect.x <= firstRect.x + firstRect.width || firstRect.x >= secondRect.x && firstRect.x <= secondRect.x + secondRect.width) && (firstRect.y <= secondRect.y && secondRect.y <= firstRect.y + firstRect.height || firstRect.y >= secondRect.y && firstRect.y <= secondRect.y + secondRect.height);
    }
    var overlapping = {
      resolveLabelOverlappingInOneDirection
    };
    exports.overlapping = overlapping;
    var BaseChart = _base_widget.default.inherit({
      Ib: {
        onSeriesClick: {
          name: "seriesClick"
        },
        onPointClick: {
          name: "pointClick"
        },
        onArgumentAxisClick: {
          name: "argumentAxisClick"
        },
        onLegendClick: {
          name: "legendClick"
        },
        onSeriesSelectionChanged: {
          name: "seriesSelectionChanged"
        },
        onPointSelectionChanged: {
          name: "pointSelectionChanged"
        },
        onSeriesHoverChanged: {
          name: "seriesHoverChanged"
        },
        onPointHoverChanged: {
          name: "pointHoverChanged"
        },
        onDone: {
          name: "done",
          actionSettings: {
            excludeValidators: ["disabled"]
          }
        },
        onZoomStart: {
          name: "zoomStart"
        },
        onZoomEnd: {
          name: "zoomEnd"
        }
      },
      qb: ["legend." + FONT, "legend.title." + FONT, "legend.title.subtitle." + FONT, "commonSeriesSettings.label." + FONT],
      Jb: "dxc",
      Jr: "dxc-chart",
      Od: ["INIT"],
      Jc: ["REFRESH_SERIES_REINIT"],
      Eh: function() {
        var themeOptions = this.callBase.apply(this, arguments);
        themeOptions.options = this.option();
        return themeOptions;
      },
      al: function() {
        var chartOption = this.option();
        var themeManager = new _chart_theme_manager.ThemeManager(this.Eh());
        themeManager.setTheme(chartOption.theme, chartOption.rtlEnabled);
        return themeManager;
      },
      bl: function() {
        this.Io = this.n.clipRect();
        this.jj();
        this.aw();
        this.bw();
        this.Jg = true;
        this.layoutManager = new _layout_manager.LayoutManager();
        this.kj();
        _events_engine.default.on(this.Ba, "contextmenu", function(event) {
          if ((0, _index.isTouchEvent)(event) || (0, _index.isPointerEvent)(event)) {
            event.preventDefault();
          }
        });
        _events_engine.default.on(this.Ba, "MSHoldVisual", function(event) {
          event.preventDefault();
        });
      },
      Zy: _common.noop,
      lj: function() {
        return this.D.getOptions("adaptiveLayout");
      },
      cw: function() {
        (0, _utils.setCanvasValues)(this.A);
        this.Jo();
        this._(["DATA_SOURCE", "DATA_INIT", "CORRECT_AXIS", "FULL_RENDER"]);
      },
      Ko: _common.noop,
      jj: function() {
        var that = this;
        var renderer = that.n;
        var root = renderer.root;
        var createConstantLinesGroup = function() {
          return renderer.g().attr({
            class: "dxc-constant-lines-group"
          }).linkOn(root, "constant-lines");
        };
        that.mj = {
          dispose: function() {
            this.under.dispose();
            this.above.dispose();
          },
          linkOff: function() {
            this.under.linkOff();
            this.above.linkOff();
          },
          clear: function() {
            this.under.linkRemove().clear();
            this.above.linkRemove().clear();
          },
          linkAppend: function() {
            this.under.linkAppend();
            this.above.linkAppend();
          }
        };
        that.dw = renderer.g().attr({
          class: "dxc-elements-axes-group"
        });
        var appendLabelsAxesGroup = function() {
          that.dw.linkOn(root, "elements");
        };
        that.ew = renderer.rect().attr({
          fill: "gray",
          opacity: 1e-4
        }).append(root);
        that._y = renderer.g().attr({
          class: "dxc-background"
        }).append(root);
        that.fw = renderer.g().attr({
          class: "dxc-strips-group"
        }).linkOn(root, "strips");
        that.gw = renderer.g().attr({
          class: "dxc-grids-group"
        }).linkOn(root, "grids");
        that.$y = renderer.g().attr({
          class: "dxc-border"
        }).linkOn(root, "border");
        that.hw = renderer.g().attr({
          class: "dxc-axes-group"
        }).linkOn(root, "axes");
        that.iw(appendLabelsAxesGroup);
        that.jw = renderer.g().attr({
          class: "dxc-strips-labels-group"
        }).linkOn(root, "strips-labels");
        that.mj.under = createConstantLinesGroup();
        that.ue = renderer.g().attr({
          class: "dxc-series-group"
        }).linkOn(root, "series");
        that.lw(appendLabelsAxesGroup);
        that.mj.above = createConstantLinesGroup();
        that.mw = renderer.g().attr({
          class: "dxc-scale-breaks"
        }).linkOn(root, "scale-breaks");
        that.wa = renderer.g().attr({
          class: "dxc-labels-group"
        }).linkOn(root, "labels");
        that.nw = renderer.g().attr({
          class: "dxc-crosshair-cursor"
        }).linkOn(root, "crosshair");
        that.wb = renderer.g().attr({
          class: "dxc-legend",
          "clip-path": that.ow()
        }).linkOn(root, "legend").linkAppend(root).enableLinks();
        that.bz = renderer.g().attr({
          class: "dxc-scroll-bar"
        }).linkOn(root, "scroll-bar");
      },
      iw: function() {
      },
      lw: function() {
      },
      pw: function(propName, fieldNames) {
        (0, _iterator.each)(this[propName] || [], function(_, item) {
          if (fieldNames && item) {
            (0, _iterator.each)(fieldNames, function(_2, field) {
              item[field] && item[field].dispose();
            });
          } else {
            item && item.dispose();
          }
        });
        this[propName] = null;
      },
      ql: function() {
        var that = this;
        var disposeObject = function(propName) {
          if (that[propName]) {
            that[propName].dispose();
            that[propName] = null;
          }
        };
        var unlinkGroup = function(name) {
          that[name].linkOff();
        };
        var disposeObjectsInArray = this.pw;
        that.n.stopAllAnimations();
        disposeObjectsInArray.call(that, "series");
        disposeObject("_tracker");
        disposeObject("_crosshair");
        that.layoutManager = that.pc = that.A = that.Lo = null;
        unlinkGroup("_stripsGroup");
        unlinkGroup("_gridGroup");
        unlinkGroup("_axesGroup");
        unlinkGroup("_constantLinesGroup");
        unlinkGroup("_stripLabelAxesGroup");
        unlinkGroup("_panesBorderGroup");
        unlinkGroup("_seriesGroup");
        unlinkGroup("_labelsGroup");
        unlinkGroup("_crosshairCursorGroup");
        unlinkGroup("_legendGroup");
        unlinkGroup("_scrollBarGroup");
        unlinkGroup("_scaleBreaksGroup");
        disposeObject("_canvasClipRect");
        disposeObject("_panesBackgroundGroup");
        disposeObject("_backgroundRect");
        disposeObject("_stripsGroup");
        disposeObject("_gridGroup");
        disposeObject("_axesGroup");
        disposeObject("_constantLinesGroup");
        disposeObject("_stripLabelAxesGroup");
        disposeObject("_panesBorderGroup");
        disposeObject("_seriesGroup");
        disposeObject("_labelsGroup");
        disposeObject("_crosshairCursorGroup");
        disposeObject("_legendGroup");
        disposeObject("_scrollBarGroup");
        disposeObject("_scaleBreaksGroup");
      },
      yf: function() {
        return this.D.getOptions("animation");
      },
      Zk: function() {
        return {
          width: 400,
          height: 400
        };
      },
      Ea: function(name) {
        return this.D.getOptions(name);
      },
      Pr: function(rect) {
        this.zd = rect.slice();
        if (!this.ub.has("FULL_RENDER")) {
          this.He(RESIZE_REFRESH_ACTION);
        }
      },
      cz: function() {
        this.Mo(this.nj || {
          animate: false,
          isResize: true
        });
      },
      Oo: "ChartTracker",
      bw: function() {
        this.mb = new trackerModule[this.Oo]({
          seriesGroup: this.ue,
          renderer: this.n,
          tooltip: this.W,
          legend: this.P,
          eventTrigger: this.u
        });
      },
      ke: function() {
        return (0, _extend.extend)({
          chart: this
        }, this.Po());
      },
      Po: function() {
        var themeManager = this.D;
        return {
          seriesSelectionMode: themeManager.getOptions("seriesSelectionMode"),
          pointSelectionMode: themeManager.getOptions("pointSelectionMode")
        };
      },
      qw: function(trackerCanvases) {
        this.mb.update(this.ke());
        this.mb.setCanvases({
          left: 0,
          right: this.A.width,
          top: 0,
          bottom: this.A.height
        }, trackerCanvases);
      },
      tw: function(rect) {
        var currentCanvas = this.A;
        return (0, _utils.setCanvasValues)({
          left: rect[0],
          top: rect[1],
          right: currentCanvas.width - rect[2],
          bottom: currentCanvas.height - rect[3],
          width: currentCanvas.width,
          height: currentCanvas.height
        });
      },
      Mo: function(_options) {
        if (0 === this.A.width && 0 === this.A.height) {
          return;
        }
        this.Rr();
        var drawOptions = this.uw(_options);
        var recreateCanvas = drawOptions.recreateCanvas;
        this.vw();
        if (recreateCanvas) {
          this.ww = this.A;
        } else {
          this.A = this.ww;
        }
        recreateCanvas && this.xw(this.A);
        this.A = this.tw(this.zd);
        this.n.stopAllAnimations(true);
        this.yw();
        var startTime = /* @__PURE__ */ new Date();
        this.zw(drawOptions);
        this.ez = /* @__PURE__ */ new Date() - startTime;
      },
      vw: function() {
        this.Aw = this.A;
        this.A = (0, _extend.extend)({}, this.A);
      },
      Bw: _common.noop,
      zw: function(drawOptions) {
        var that = this;
        var preparedOptions = that.Cw(drawOptions);
        var isRotated = that.Qo();
        var isLegendInside = that.Dw();
        var trackerCanvases = [];
        (0, _extend.extend)({}, that.A);
        var argBusinessRange;
        var zoomMinArg;
        var zoomMaxArg;
        that.n.lock();
        if (drawOptions.drawLegend && that.P) {
          that.wb.linkAppend();
        }
        that.layoutManager.setOptions(that.lj());
        var layoutTargets = that.Ro();
        this.Bw(function(needSpace) {
          var axisDrawOptions = needSpace ? (0, _extend.extend)({}, drawOptions, {
            animate: false,
            recreateCanvas: true
          }) : drawOptions;
          var canvas = that.Ew(axisDrawOptions, preparedOptions);
          that.Fw(needSpace, canvas);
        });
        that.Gw(preparedOptions);
        that.Hw();
        that.Iw();
        layoutTargets.forEach(function(_ref) {
          var canvas = _ref.canvas;
          trackerCanvases.push({
            left: canvas.left,
            right: canvas.width - canvas.right,
            top: canvas.top,
            bottom: canvas.height - canvas.bottom
          });
        });
        if (that.Jw) {
          argBusinessRange = that.oj[0].getTranslator().getBusinessRange();
          if ("discrete" === argBusinessRange.axisType && argBusinessRange.categories && argBusinessRange.categories.length <= 1 || "discrete" !== argBusinessRange.axisType && argBusinessRange.min === argBusinessRange.max) {
            zoomMinArg = zoomMaxArg = void 0;
          } else {
            zoomMinArg = argBusinessRange.minVisible;
            zoomMaxArg = argBusinessRange.maxVisible;
          }
          that.Jw.init(argBusinessRange, !that.oj[0].getOptions().valueMarginsEnabled).setPosition(zoomMinArg, zoomMaxArg);
        }
        that.qw(trackerCanvases);
        that.Kw(drawOptions, isLegendInside);
        that.Lw();
        that.So(drawOptions, isRotated, isLegendInside);
        that.Sr();
        that.n.unlock();
      },
      Kw: _common.noop,
      Iw: _common.noop,
      Hw: function() {
        this.ue.linkAppend();
        this.wa.linkAppend();
        this.Mw();
      },
      So: function(drawOptions, isRotated, isLegendInside) {
        this.To(drawOptions, isRotated);
        this.Uo(drawOptions, isLegendInside);
      },
      To: function(drawOptions, isRotated) {
        drawOptions.hideLayoutLabels = this.layoutManager.needMoreSpaceForPanesCanvas(this.Ro(), isRotated) && !this.D.getOptions("adaptiveLayout").keepLabels;
        this.Nw(drawOptions);
      },
      Ow: function() {
        return function() {
          return true;
        };
      },
      Pw: function(series) {
        return function() {
          return true;
        };
      },
      Qw: function(series) {
        var _this = this;
        var argViewPortFilter = this.Ow();
        return series.map(function(s) {
          var valViewPortFilter = _this.Pw(s);
          return s.getPoints().filter(function(p) {
            return p.getOptions().visible && argViewPortFilter(p.argument) && (valViewPortFilter(p.getMinValue(true)) || valViewPortFilter(p.getMaxValue(true)));
          }).length;
        });
      },
      Uo: function(drawOptions, isLegendInside) {
        var that = this;
        var series = that.series;
        var resolveLabelOverlapping = that.D.getOptions("resolveLabelOverlapping");
        var pointsToAnimation = that.Qw(series);
        series.forEach(function(singleSeries, index) {
          that.Rw(singleSeries, drawOptions);
          var animationEnabled = drawOptions.animate && pointsToAnimation[index] <= drawOptions.animationPointsLimit && that.n.animationEnabled();
          singleSeries.draw(animationEnabled, drawOptions.hideLayoutLabels, that.Sw(singleSeries));
        });
        if ("none" === resolveLabelOverlapping) {
          that.Vo(false);
        } else {
          that.Wo(resolveLabelOverlapping);
        }
        that.Tw(isLegendInside);
        that.mb.repairTooltip();
        that.Kg();
        that.Xo();
        that.Yo = true;
      },
      fl: function() {
        if (this.Yo) {
          this.Yo = false;
          this.Oc();
          this.Uw();
        }
      },
      Wo: function(resolveLabelOverlapping) {
        this.Zo(resolveLabelOverlapping);
      },
      Kg: function() {
      },
      Xo: function() {
        this.A = this.Aw;
      },
      Zo: function(resolveLabelOverlapping) {
        var func;
        switch (resolveLabelOverlapping) {
          case "stack":
            func = this.fz;
            break;
          case "hide":
            func = this.Vw;
            break;
          case "shift":
            func = this.Ww;
        }
        return (0, _type.isFunction)(func) && func.call(this);
      },
      Lg: function() {
        return (0, _common.grep)(this.getAllSeries(), function(series) {
          return series.isVisible();
        });
      },
      Vw: function() {
        var labels = [];
        var currentLabel;
        var nextLabel;
        var currentLabelRect;
        var nextLabelRect;
        var i;
        var j;
        var points;
        var series = this.Lg();
        for (i = 0; i < series.length; i++) {
          points = series[i].getVisiblePoints();
          for (j = 0; j < points.length; j++) {
            labels.push.apply(labels, points[j].getLabels());
          }
        }
        for (i = 0; i < labels.length; i++) {
          currentLabel = labels[i];
          if (!currentLabel.isVisible()) {
            continue;
          }
          currentLabelRect = currentLabel.getBoundingRect();
          for (j = i + 1; j < labels.length; j++) {
            nextLabel = labels[j];
            nextLabelRect = nextLabel.getBoundingRect();
            if (checkOverlapping(currentLabelRect, nextLabelRect)) {
              nextLabel.draw(false);
            }
          }
        }
      },
      yw: function() {
        this.fw.linkRemove().clear();
        this.gw.linkRemove().clear();
        this.hw.linkRemove().clear();
        this.mj.clear();
        this.jw.linkRemove().clear();
        this.wa.linkRemove().clear();
        this.nw.linkRemove().clear();
        this.mw.linkRemove().clear();
      },
      Xw: function() {
        return false;
      },
      aw: function() {
        var legendSettings = getLegendSettings(this.Yw);
        this.P = new _legend.Legend({
          renderer: this.n,
          widget: this,
          group: this.wb,
          backgroundClass: "dxc-border",
          itemGroupClass: "dxc-item",
          titleGroupClass: "dxc-title",
          textField: legendSettings.textField,
          getFormatObject: legendSettings.getFormatObject,
          allowInsidePosition: this.Xw()
        });
        this.pj();
        this.Mc.add(this.P);
      },
      pj: function() {
        var themeManager = this.D;
        var legendOptions = themeManager.getOptions("legend");
        var legendData = this.Gl();
        legendOptions.containerBackgroundColor = themeManager.getOptions("containerBackgroundColor");
        legendOptions.ea = this.ea;
        this.P.update(legendData, legendOptions, themeManager.theme("legend").title);
        this.La(["LAYOUT"]);
      },
      uw: function(drawOptions) {
        var animationOptions = this.yf();
        var options = (0, _extend.extend)({}, {
          force: false,
          adjustAxes: true,
          drawLegend: true,
          drawTitle: true,
          animate: animationOptions.enabled,
          animationPointsLimit: animationOptions.maxPointCountSupported
        }, drawOptions, this.nj);
        if (!(0, _type.isDefined)(options.recreateCanvas)) {
          options.recreateCanvas = options.adjustAxes && options.drawLegend && options.drawTitle;
        }
        return options;
      },
      He: function(newRefreshAction) {
        var currentRefreshActionPosition = ACTIONS_BY_PRIORITY.indexOf(this.Ie);
        var newRefreshActionPosition = ACTIONS_BY_PRIORITY.indexOf(newRefreshAction);
        if (!this.Ie || currentRefreshActionPosition >= 0 && newRefreshActionPosition < currentRefreshActionPosition) {
          this.Ie = newRefreshAction;
        }
        this._(["REFRESH"]);
      },
      Gl: function() {
        return (0, _utils.map)(this._o(), function(item) {
          var legendData = item.legendData;
          var style = item.getLegendStyles;
          var opacity = style.normal.opacity;
          if (!item.visible) {
            if (!(0, _type.isDefined)(opacity) || opacity > DEFAULT_OPACITY) {
              opacity = DEFAULT_OPACITY;
            }
            legendData.textOpacity = DEFAULT_OPACITY;
          }
          var opacityStyle = {
            opacity
          };
          legendData.states = {
            hover: (0, _extend.extend)({}, style.hover, opacityStyle),
            selection: (0, _extend.extend)({}, style.selection, opacityStyle),
            normal: (0, _extend.extend)({}, style.normal, opacityStyle)
          };
          return legendData;
        });
      },
      $o: function(item) {
        return {
          legendData: {
            text: item[this.Zw],
            id: item.index,
            visible: true
          },
          getLegendStyles: item.getLegendStyles(),
          visible: item.isVisible()
        };
      },
      qj: function(seriesIndex) {
        var _that$series;
        if (this.series) {
          if ((0, _type.isDefined)(seriesIndex)) {
            this.series[seriesIndex].dispose();
            this.series.splice(seriesIndex, 1);
          } else {
            (0, _iterator.each)(this.series, function(_, s) {
              return s.dispose();
            });
            this.series.length = 0;
          }
        }
        if (!(null !== (_that$series = this.series) && void 0 !== _that$series && _that$series.length)) {
          this.series = [];
        }
      },
      ap: function() {
        (0, _iterator.each)(this.seriesFamilies || [], function(_, family) {
          family.dispose();
        });
        this.seriesFamilies = null;
        this.Jg = true;
      },
      $e: function(arg) {
        this.D.resetOptions(arg.name);
        this.callBase.apply(this, arguments);
      },
      dl: function() {
        var that = this;
        that.D.update(that.e.silent());
        that.callBase.apply(that, arguments);
      },
      ua: {
        animation: "ANIMATION",
        dataSource: "DATA_SOURCE",
        palette: "PALETTE",
        paletteExtensionMode: "PALETTE",
        legend: "FORCE_DATA_INIT",
        seriesTemplate: "FORCE_DATA_INIT",
        export: "FORCE_RENDER",
        valueAxis: "AXES_AND_PANES",
        argumentAxis: "AXES_AND_PANES",
        commonAxisSettings: "AXES_AND_PANES",
        panes: "AXES_AND_PANES",
        commonPaneSettings: "AXES_AND_PANES",
        defaultPane: "AXES_AND_PANES",
        containerBackgroundColor: "AXES_AND_PANES",
        rotated: "ROTATED",
        autoHidePointMarkers: "REFRESH_SERIES_REINIT",
        customizePoint: "REFRESH_SERIES_REINIT",
        customizeLabel: "REFRESH_SERIES_REINIT",
        scrollBar: "SCROLL_BAR"
      },
      Hc: ["ROTATED", "PALETTE", "REFRESH_SERIES_REINIT", "USE_SPIDER_WEB", "AXES_AND_PANES", "INIT", "REINIT", "DATA_SOURCE", "REFRESH_SERIES_DATA_INIT", "DATA_INIT", "FORCE_DATA_INIT", "REFRESH_AXES", "CORRECT_AXIS"],
      Ic: ["ANIMATION", "REFRESH_SERIES_FAMILIES", "FORCE_FIRST_DRAWING", "FORCE_DRAWING", "FORCE_RENDER", "VISUAL_RANGE", "SCROLL_BAR", "REINIT", "REFRESH", "FULL_RENDER"],
      gz: function() {
        this.n.updateAnimationOptions(this.yf());
      },
      hz: function() {
        this.Jg = true;
        this.Pv();
      },
      iz: function() {
        this.D.updatePalette();
        this.Je("DATA_INIT");
      },
      jz: function() {
        this.Je("DATA_INIT");
      },
      kz: function() {
        if ((!this.series || this.needToPopulateSeries) && !this.ub.has("FORCE_DATA_INIT")) {
          this.bp();
        }
      },
      lz: function() {
        this.bp();
      },
      mz: function() {
        this.nz();
        this.rj();
        this.He(FORCE_RENDER_REFRESH_ACTION);
      },
      oz: function() {
        this.He(FORCE_RENDER_REFRESH_ACTION);
      },
      pz: function() {
        this.Je("INIT");
      },
      qz: function() {
        this.kj();
        this.Je("INIT");
      },
      rz: function() {
        this.Je("INIT");
      },
      sz: function() {
        (0, _utils.setCanvasValues)(this.A);
        this.Jo();
        this._(["CORRECT_AXIS", "FULL_RENDER"]);
      },
      tz: function() {
        this.kj();
        this.He(FORCE_RENDER_REFRESH_ACTION);
      },
      vz: function() {
        this.He(REINIT_REFRESH_ACTION);
      },
      wz: function() {
        this.cp();
      },
      xz: function() {
        this.cp(true);
      },
      cp: function(isFirstDrawing) {
        this.series.forEach(function(s) {
          s.resetApplyingAnimation(isFirstDrawing);
        });
        this._w(isFirstDrawing);
      },
      _w: _common.noop,
      Je: function(actionName) {
        this.needToPopulateSeries = true;
        this._([actionName]);
      },
      yz: function() {
        this.Ko();
      },
      $w: function() {
        var methodName = this.Ie;
        if (methodName) {
          this.Ie = null;
          this.n.stopAllAnimations(true);
          this[methodName]();
        }
      },
      xw: function(canvas) {
        var width = Math.max(canvas.width - canvas.left - canvas.right, 0);
        var height = Math.max(canvas.height - canvas.top - canvas.bottom, 0);
        this.Io.attr({
          x: canvas.left,
          y: canvas.top,
          width,
          height
        });
        this.ew.attr({
          x: canvas.left,
          y: canvas.top,
          width,
          height
        });
      },
      ow: function() {
        return this.Io.id;
      },
      Ge: function() {
        if (this.ub.has("INIT")) {
          this._(["DATA_INIT"]);
        } else {
          this._(["FORCE_DATA_INIT"]);
        }
      },
      bp: function() {
        this.ax(true);
      },
      dp: function(singleSeries) {
        singleSeries.createPoints(false);
      },
      ep: function() {
        var _this2 = this;
        if (this.Lg().some(function(s) {
          return s.useAggregation();
        })) {
          this.zz();
        }
        this.series.forEach(function(s) {
          return _this2.dp(s);
        }, this);
      },
      ax: function(needRedraw) {
        if (!this.series || this.needToPopulateSeries) {
          this.series = this.fp();
        }
        this.bx();
        this.ex();
        this.rj();
        this.mb.updateSeries(this.series, this.ub.has("INIT"));
        this.pj();
        if (needRedraw) {
          this._(["FULL_RENDER"]);
        }
      },
      gx: function() {
        this.Mo({
          force: true
        });
      },
      bx: function() {
        var themeManager = this.D;
        var data = this.Rv();
        var dataValidatorOptions = themeManager.getOptions("dataPrepareSettings");
        var seriesTemplate = themeManager.getOptions("seriesTemplate");
        if (seriesTemplate) {
          this.fp(data);
        }
        this.hx();
        var parsedData = (0, _data_validator.validateData)(data, this.Lo, this.ea, dataValidatorOptions);
        themeManager.resetPalette();
        this.series.forEach(function(singleSeries) {
          singleSeries.updateData(parsedData[singleSeries.getArgumentField()]);
        });
        this.ep();
      },
      Uw: function() {
        var allSeriesInited = true;
        if (this.Jg) {
          (0, _iterator.each)(this.series, function(_, s) {
            allSeriesInited = allSeriesInited && s.canRenderCompleteHandle();
          });
          if (allSeriesInited) {
            this.Jg = false;
            this.u("done", {
              target: this
            });
          }
        }
      },
      Af: function() {
        return (0, _type.isDefined)(this.option("dataSource")) && this.Qv();
      },
      ix: function(data) {
        var that = this;
        var themeManager = that.D;
        var seriesTemplate = themeManager.getOptions("seriesTemplate");
        var seriesOptions = seriesTemplate ? (0, _utils.processSeriesTemplate)(seriesTemplate, data || []) : that.option("series");
        var allSeriesOptions = _isArray(seriesOptions) ? seriesOptions : seriesOptions ? [seriesOptions] : [];
        var extraOptions = that.jx();
        var particularSeriesOptions;
        var seriesTheme;
        var seriesThemes = [];
        var seriesVisibilityChanged = function(target) {
          that.kx();
          that.rj(target && target.getValueAxis(), true);
          that.n.stopAllAnimations(true);
          that.pj();
          that._(["FULL_RENDER"]);
        };
        for (var i = 0; i < allSeriesOptions.length; i++) {
          particularSeriesOptions = (0, _extend.extend)(true, {}, allSeriesOptions[i], extraOptions);
          if (!(0, _type.isDefined)(particularSeriesOptions.name) || "" === particularSeriesOptions.name) {
            particularSeriesOptions.name = "Series " + (i + 1).toString();
          }
          particularSeriesOptions.rotated = that.Qo();
          particularSeriesOptions.customizePoint = themeManager.getOptions("customizePoint");
          particularSeriesOptions.customizeLabel = themeManager.getOptions("customizeLabel");
          particularSeriesOptions.visibilityChanged = seriesVisibilityChanged;
          particularSeriesOptions.incidentOccurred = that.ea;
          seriesTheme = themeManager.getOptions("series", particularSeriesOptions, allSeriesOptions.length);
          if (that.lx(seriesTheme)) {
            seriesThemes.push(seriesTheme);
          }
        }
        return seriesThemes;
      },
      fp: function(data) {
        var _that$series2;
        var that = this;
        var seriesBasis = [];
        var incidentOccurred = that.ea;
        var seriesThemes = that.ix(data);
        var particularSeries;
        var disposeSeriesFamilies = false;
        that.needToPopulateSeries = false;
        (0, _iterator.each)(seriesThemes, function(_, theme) {
          var curSeries = that.series && that.series.filter(function(s) {
            return s.name === theme.name && -1 === seriesBasis.map(function(sb) {
              return sb.series;
            }).indexOf(s);
          })[0];
          if (curSeries && curSeries.type === theme.type) {
            seriesBasis.push({
              series: curSeries,
              options: theme
            });
          } else {
            seriesBasis.push({
              options: theme
            });
            disposeSeriesFamilies = true;
          }
        });
        0 !== (null === (_that$series2 = that.series) || void 0 === _that$series2 ? void 0 : _that$series2.length) && that.mb.clearHover();
        (0, _iterator.reverseEach)(that.series, function(index, series) {
          if (!seriesBasis.some(function(s) {
            return series === s.series;
          })) {
            that.qj(index);
            disposeSeriesFamilies = true;
          }
        });
        !disposeSeriesFamilies && (disposeSeriesFamilies = seriesBasis.some(function(sb) {
          return sb.series.name !== seriesThemes[sb.series.index].name;
        }));
        that.series = [];
        disposeSeriesFamilies && that.ap();
        that.D.resetPalette();
        var eventPipe = function(data2) {
          that.series.forEach(function(currentSeries) {
            currentSeries.notify(data2);
          });
        };
        (0, _iterator.each)(seriesBasis, function(_, basis) {
          var _that$_argumentAxes$f, _that$_argumentAxes;
          var seriesTheme = basis.options;
          var argumentAxis = null !== (_that$_argumentAxes$f = null === (_that$_argumentAxes = that.oj) || void 0 === _that$_argumentAxes ? void 0 : _that$_argumentAxes.filter(function(a) {
            return a.pane === seriesTheme.pane;
          })[0]) && void 0 !== _that$_argumentAxes$f ? _that$_argumentAxes$f : that.getArgumentAxis();
          var renderSettings = {
            commonSeriesModes: that.Po(),
            argumentAxis,
            valueAxis: that.mx(seriesTheme.pane, seriesTheme.axis)
          };
          if (basis.series) {
            particularSeries = basis.series;
            particularSeries.updateOptions(seriesTheme, renderSettings);
          } else {
            particularSeries = new _base_series.Series((0, _extend.extend)({
              renderer: that.n,
              seriesGroup: that.ue,
              labelsGroup: that.wa,
              eventTrigger: that.u,
              eventPipe,
              incidentOccurred
            }, renderSettings), seriesTheme);
          }
          if (!particularSeries.isUpdated) {
            incidentOccurred("E2101", [seriesTheme.type]);
          } else {
            particularSeries.index = that.series.length;
            that.series.push(particularSeries);
          }
        });
        return that.series;
      },
      getStackedPoints: function(point) {
        var stackName = point.series.getStackName();
        return this.Lg().reduce(function(stackPoints, series) {
          if (!(0, _type.isDefined)(series.getStackName()) || !(0, _type.isDefined)(stackName) || stackName === series.getStackName()) {
            stackPoints = stackPoints.concat(series.getPointsByArg(point.argument));
          }
          return stackPoints;
        }, []);
      },
      getAllSeries: function() {
        return (this.series || []).slice();
      },
      getSeriesByName: function(name) {
        var found = null;
        (0, _iterator.each)(this.series, function(i, singleSeries) {
          if (singleSeries.name === name) {
            found = singleSeries;
            return false;
          }
        });
        return found;
      },
      getSeriesByPos: function(pos) {
        return (this.series || [])[pos];
      },
      clearSelection: function() {
        this.mb.clearSelection();
      },
      hideTooltip: function() {
        this.mb.Db();
      },
      clearHover: function() {
        this.mb.clearHover();
      },
      render: function(renderOptions) {
        var that = this;
        that.nj = renderOptions;
        that.rl = renderOptions && renderOptions.force;
        that.callBase.apply(that, arguments);
        that.nj = that.rl = null;
        return that;
      },
      refresh: function() {
        this.qj();
        this.ap();
        this._(["CONTAINER_SIZE", "REFRESH_SERIES_REINIT"]);
      },
      tl: function() {
        var adaptiveLayout = this.lj();
        return [adaptiveLayout.width, adaptiveLayout.height];
      },
      Az: function() {
        if (!this.ub.has("INIT")) {
          this.$w();
        } else {
          this.Ie = null;
        }
      },
      Bz: function() {
        this.gx();
      },
      Cz: function() {
        this.cw();
      },
      Nc: function() {
        this.mb.stopCurrentHandling();
      }
    });
    exports.BaseChart = BaseChart;
    REFRESH_SERIES_DATA_INIT_ACTION_OPTIONS.forEach(function(name) {
      BaseChart.prototype.ua[name] = "REFRESH_SERIES_DATA_INIT";
    });
    FORCE_RENDER_REFRESH_ACTION_OPTIONS.forEach(function(name) {
      BaseChart.prototype.ua[name] = "FORCE_RENDER";
    });
    REFRESH_SERIES_FAMILIES_ACTION_OPTIONS.forEach(function(name) {
      BaseChart.prototype.ua[name] = "REFRESH_SERIES_FAMILIES";
    });
    BaseChart.addPlugin(_export.plugin);
    BaseChart.addPlugin(_title.plugin);
    BaseChart.addPlugin(_data_source.plugin);
    BaseChart.addPlugin(_tooltip.plugin);
    BaseChart.addPlugin(_loading_indicator.plugin);
    var _change_TITLE = BaseChart.prototype.nx;
    BaseChart.prototype.nx = function() {
      _change_TITLE.apply(this, arguments);
      this.La(["FORCE_RENDER"]);
    };
  }
});

// node_modules/devextreme/cjs/viz/translators/translator1d.js
var require_translator1d = __commonJS({
  "node_modules/devextreme/cjs/viz/translators/translator1d.js"(exports) {
    "use strict";
    exports.Translator1D = Translator1D;
    var _Number = Number;
    function Translator1D() {
      this.setDomain(arguments[0], arguments[1]).setCodomain(arguments[2], arguments[3]).setInverted(false);
    }
    Translator1D.prototype = {
      constructor: Translator1D,
      setDomain: function(domain1, domain2) {
        this.Ad = _Number(domain1);
        this.Mg = _Number(domain2);
        this.sj = this.Mg - this.Ad;
        return this;
      },
      setCodomain: function(codomain1, codomain2) {
        this.Ng = _Number(codomain1);
        this.tj = _Number(codomain2);
        this.gp = this.tj - this.Ng;
        return this;
      },
      setInverted: function(state) {
        this.inverted = state;
      },
      getDomain: function() {
        return [this.Ad, this.Mg];
      },
      getCodomain: function() {
        return [this.Ng, this.tj];
      },
      getDomainStart: function() {
        return this.Ad;
      },
      getDomainEnd: function() {
        return this.Mg;
      },
      getCodomainStart: function() {
        return this.Ng;
      },
      getCodomainEnd: function() {
        return this.tj;
      },
      getDomainRange: function() {
        return this.sj;
      },
      getCodomainRange: function() {
        return this.gp;
      },
      translate: function(value) {
        var ratio = (_Number(value) - this.Ad) / this.sj;
        this.inverted && (ratio = 1 - ratio);
        return 0 <= ratio && ratio <= 1 ? this.Ng + ratio * this.gp : NaN;
      },
      adjust: function(value) {
        var ratio = (_Number(value) - this.Ad) / this.sj;
        var result = NaN;
        if (ratio < 0) {
          result = this.Ad;
        } else if (ratio > 1) {
          result = this.Mg;
        } else if (0 <= ratio && ratio <= 1) {
          result = _Number(value);
        }
        return result;
      }
    };
  }
});

// node_modules/devextreme/cjs/events/gesture/emitter.gesture.js
var require_emitter_gesture = __commonJS({
  "node_modules/devextreme/cjs/events/gesture/emitter.gesture.js"(exports, module) {
    "use strict";
    exports.default = void 0;
    var _renderer = _interopRequireDefault(require_renderer());
    var _events_engine = _interopRequireDefault(require_events_engine());
    var _devices = _interopRequireDefault(require_devices());
    var _style = require_style();
    var _call_once = _interopRequireDefault(require_call_once());
    var _dom = require_dom();
    var _ready_callbacks = _interopRequireDefault(require_ready_callbacks());
    var _math = require_math();
    var _common = require_common();
    var _type = require_type();
    var _index = require_utils2();
    var _emitter = _interopRequireDefault(require_emitter());
    function _interopRequireDefault(obj) {
      return obj && obj.j ? obj : {
        default: obj
      };
    }
    var ready = _ready_callbacks.default.add;
    var abs = Math.abs;
    var SLEEP = 0;
    var INITED = 1;
    var STARTED = 2;
    var TOUCH_BOUNDARY = 10;
    var IMMEDIATE_TOUCH_BOUNDARY = 0;
    var IMMEDIATE_TIMEOUT = 180;
    var supportPointerEvents = function() {
      return (0, _style.styleProp)("pointer-events");
    };
    var setGestureCover = (0, _call_once.default)(function() {
      var isDesktop = "desktop" === _devices.default.real().deviceType;
      if (!supportPointerEvents() || !isDesktop) {
        return _common.noop;
      }
      var $cover = (0, _renderer.default)("<div>").addClass("dx-gesture-cover").css("pointerEvents", "none");
      _events_engine.default.subscribeGlobal($cover, "dxmousewheel", function(e) {
        e.preventDefault();
      });
      ready(function() {
        $cover.appendTo("body");
      });
      return function(toggle, cursor) {
        $cover.css("pointerEvents", toggle ? "all" : "none");
        toggle && $cover.css("cursor", cursor);
      };
    });
    var gestureCover = function(toggle, cursor) {
      var gestureCoverStrategy = setGestureCover();
      gestureCoverStrategy(toggle, cursor);
    };
    var GestureEmitter = _emitter.default.inherit({
      gesture: true,
      configure: function(data) {
        this.getElement().css("msTouchAction", data.immediate ? "pinch-zoom" : "");
        this.callBase(data);
      },
      allowInterruptionByMouseWheel: function() {
        return this.ob !== STARTED;
      },
      getDirection: function() {
        return this.direction;
      },
      Ji: function() {
        this.callBase.apply(this, arguments);
        this.Og(false);
        this.ob = SLEEP;
      },
      start: function(e) {
        if (e.Dz || (0, _index.needSkipEvent)(e)) {
          this.Ji(e);
          return;
        }
        this.uj = (0, _index.createEvent)(e);
        this.Pg = (0, _index.eventData)(e);
        this.ob = INITED;
        this.G(e);
        this.ox();
      },
      ox: function() {
        var _this$immediateTimeou;
        clearTimeout(this.hp);
        this.vj = false;
        if (!this.immediate) {
          return;
        }
        if (0 === this.immediateTimeout) {
          this.vj = true;
          return;
        }
        this.hp = setTimeout(function() {
          this.vj = true;
        }.bind(this), null !== (_this$immediateTimeou = this.immediateTimeout) && void 0 !== _this$immediateTimeou ? _this$immediateTimeou : IMMEDIATE_TIMEOUT);
      },
      move: function(e) {
        if (this.ob === INITED && this.px(e)) {
          this.ob = STARTED;
          this.qx();
          this.Og(true);
          this.ip(e);
          this.sx(e);
          this.jp(this.uj);
          if (this.ob === SLEEP) {
            return;
          }
          this.$t(e);
          this.wj(e);
          this.au();
        } else if (this.ob === STARTED) {
          this.ip(e);
          this.wj(e);
        }
      },
      px: function(e) {
        var touchBoundary = this.kp(e);
        var delta = (0, _index.eventDelta)(this.Pg, (0, _index.eventData)(e));
        var deltaX = abs(delta.x);
        var deltaY = abs(delta.y);
        var horizontalMove = this.lp(touchBoundary, deltaX, deltaY);
        var verticalMove = this.lp(touchBoundary, deltaY, deltaX);
        var direction = this.getDirection(e);
        var bothAccepted = "both" === direction && (horizontalMove || verticalMove);
        var horizontalAccepted = "horizontal" === direction && horizontalMove;
        var verticalAccepted = "vertical" === direction && verticalMove;
        return bothAccepted || horizontalAccepted || verticalAccepted || this.vj;
      },
      lp: function(touchBoundary, mainAxis, crossAxis) {
        return mainAxis && mainAxis >= touchBoundary && (this.immediate ? mainAxis >= crossAxis : true);
      },
      kp: function(e) {
        return this.immediate || (0, _index.isDxMouseWheelEvent)(e) ? IMMEDIATE_TOUCH_BOUNDARY : TOUCH_BOUNDARY;
      },
      sx: function(e) {
        var touchBoundary = this.kp(e);
        var delta = (0, _index.eventDelta)(this.Pg, (0, _index.eventData)(e));
        this.uj.pageX += (0, _math.sign)(delta.x) * touchBoundary;
        this.uj.pageY += (0, _math.sign)(delta.y) * touchBoundary;
      },
      qx: function() {
        if ("ios" === _devices.default.real().platform && this.getElement().find(":focus").length) {
          (0, _dom.resetActiveElement)();
        }
      },
      Og: function(toggle) {
        this.tx(toggle);
      },
      tx: function(toggle) {
        var isStarted = this.ob === STARTED;
        if (isStarted) {
          gestureCover(toggle, this.getElement().css("cursor"));
        }
      },
      ip: function(e) {
        if ((0, _index.isDxMouseWheelEvent)(e) || (0, _index.isTouchEvent)(e)) {
          return;
        }
        (0, _dom.clearSelection)();
      },
      end: function(e) {
        this.Og(false);
        if (this.ob === STARTED) {
          this.mp(e);
        } else if (this.ob === INITED) {
          this.ux(e);
        }
        this.ob = SLEEP;
      },
      dispose: function() {
        clearTimeout(this.hp);
        this.callBase.apply(this, arguments);
        this.Og(false);
      },
      G: _common.noop,
      jp: _common.noop,
      wj: _common.noop,
      ux: _common.noop,
      mp: _common.noop
    });
    GestureEmitter.initialTouchBoundary = TOUCH_BOUNDARY;
    GestureEmitter.touchBoundary = function(newBoundary) {
      if ((0, _type.isDefined)(newBoundary)) {
        TOUCH_BOUNDARY = newBoundary;
        return;
      }
      return TOUCH_BOUNDARY;
    };
    var _default = GestureEmitter;
    exports.default = _default;
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/devextreme/cjs/events/drag.js
var require_drag = __commonJS({
  "node_modules/devextreme/cjs/events/drag.js"(exports) {
    "use strict";
    function _typeof(obj) {
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    exports.start = exports.move = exports.leave = exports.enter = exports.end = exports.drop = void 0;
    var _renderer = _interopRequireDefault(require_renderer());
    var _element_data = require_element_data();
    var _array = require_array();
    var iteratorUtils = _interopRequireWildcard(require_iterator());
    var _dom = require_dom();
    var _event_registrator = _interopRequireDefault(require_event_registrator());
    var _index = require_utils2();
    var _emitter = _interopRequireDefault(require_emitter_gesture());
    var _emitter_registrator = _interopRequireDefault(require_emitter_registrator());
    function _getRequireWildcardCache(nodeInterop) {
      if ("function" !== typeof WeakMap) {
        return null;
      }
      var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
      var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
      return (_getRequireWildcardCache = function(nodeInterop2) {
        return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }
    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.j) {
        return obj;
      }
      if (null === obj || "object" !== _typeof(obj) && "function" !== typeof obj) {
        return {
          default: obj
        };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if ("default" !== key && Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    function _interopRequireDefault(obj) {
      return obj && obj.j ? obj : {
        default: obj
      };
    }
    var DRAG_START_EVENT = "dxdragstart";
    exports.start = DRAG_START_EVENT;
    var DRAG_EVENT = "dxdrag";
    exports.move = DRAG_EVENT;
    var DRAG_END_EVENT = "dxdragend";
    exports.end = DRAG_END_EVENT;
    var DRAG_ENTER_EVENT = "dxdragenter";
    exports.enter = DRAG_ENTER_EVENT;
    var DRAG_LEAVE_EVENT = "dxdragleave";
    exports.leave = DRAG_LEAVE_EVENT;
    var DROP_EVENT = "dxdrop";
    exports.drop = DROP_EVENT;
    var DX_DRAG_EVENTS_COUNT_KEY = "dxDragEventsCount";
    var knownDropTargets = [];
    var knownDropTargetSelectors = [];
    var knownDropTargetConfigs = [];
    var dropTargetRegistration = {
      setup: function(element, data) {
        var knownDropTarget = knownDropTargets.includes(element);
        if (!knownDropTarget) {
          knownDropTargets.push(element);
          knownDropTargetSelectors.push([]);
          knownDropTargetConfigs.push(data || {});
        }
      },
      add: function(element, handleObj) {
        var index = knownDropTargets.indexOf(element);
        this.updateEventsCounter(element, handleObj.type, 1);
        var selector = handleObj.selector;
        if (!knownDropTargetSelectors[index].includes(selector)) {
          knownDropTargetSelectors[index].push(selector);
        }
      },
      updateEventsCounter: function(element, event, value) {
        if ([DRAG_ENTER_EVENT, DRAG_LEAVE_EVENT, DROP_EVENT].indexOf(event) > -1) {
          var eventsCount = (0, _element_data.data)(element, DX_DRAG_EVENTS_COUNT_KEY) || 0;
          (0, _element_data.data)(element, DX_DRAG_EVENTS_COUNT_KEY, Math.max(0, eventsCount + value));
        }
      },
      remove: function(element, handleObj) {
        this.updateEventsCounter(element, handleObj.type, -1);
      },
      teardown: function(element) {
        var handlersCount = (0, _element_data.data)(element, DX_DRAG_EVENTS_COUNT_KEY);
        if (!handlersCount) {
          var index = knownDropTargets.indexOf(element);
          knownDropTargets.splice(index, 1);
          knownDropTargetSelectors.splice(index, 1);
          knownDropTargetConfigs.splice(index, 1);
          (0, _element_data.removeData)(element, DX_DRAG_EVENTS_COUNT_KEY);
        }
      }
    };
    (0, _event_registrator.default)(DRAG_ENTER_EVENT, dropTargetRegistration);
    (0, _event_registrator.default)(DRAG_LEAVE_EVENT, dropTargetRegistration);
    (0, _event_registrator.default)(DROP_EVENT, dropTargetRegistration);
    var getItemDelegatedTargets = function($element) {
      var dropTargetIndex = knownDropTargets.indexOf($element.get(0));
      var dropTargetSelectors = knownDropTargetSelectors[dropTargetIndex].filter(function(selector) {
        return selector;
      });
      var $delegatedTargets = $element.find(dropTargetSelectors.join(", "));
      if (knownDropTargetSelectors[dropTargetIndex].includes(void 0)) {
        $delegatedTargets = $delegatedTargets.add($element);
      }
      return $delegatedTargets;
    };
    var getItemConfig = function($element) {
      var dropTargetIndex = knownDropTargets.indexOf($element.get(0));
      return knownDropTargetConfigs[dropTargetIndex];
    };
    var getItemPosition = function(dropTargetConfig, $element) {
      if (dropTargetConfig.itemPositionFunc) {
        return dropTargetConfig.itemPositionFunc($element);
      } else {
        return $element.offset();
      }
    };
    var getItemSize = function(dropTargetConfig, $element) {
      if (dropTargetConfig.itemSizeFunc) {
        return dropTargetConfig.itemSizeFunc($element);
      }
      return {
        width: $element.get(0).getBoundingClientRect().width,
        height: $element.get(0).getBoundingClientRect().height
      };
    };
    var DragEmitter = _emitter.default.inherit({
      ctor: function(element) {
        this.callBase(element);
        this.direction = "both";
      },
      G: function(e) {
        this.wx = e;
      },
      jp: function(e) {
        e = this.Rb(DRAG_START_EVENT, this.wx);
        this.xx = e.maxLeftOffset;
        this.yx = e.maxRightOffset;
        this.zx = e.maxTopOffset;
        this.Ax = e.maxBottomOffset;
        if (e.targetElements || null === e.targetElements) {
          var dropTargets = (0, _array.wrapToArray)(e.targetElements || []);
          this.np = iteratorUtils.map(dropTargets, function(element) {
            return (0, _renderer.default)(element).get(0);
          });
        } else {
          this.np = knownDropTargets;
        }
      },
      wj: function(e) {
        var eventData = (0, _index.eventData)(e);
        var dragOffset = this.op(eventData);
        e = this.Rb(DRAG_EVENT, e, {
          offset: dragOffset
        });
        this.Bx(e);
        if (!e.Ez) {
          e.preventDefault();
        }
      },
      op: function(eventData) {
        return {
          x: this.Cx(eventData),
          y: this.Dx(eventData)
        };
      },
      Cx: function(eventData) {
        if ("vertical" !== this.direction) {
          var offset = eventData.x - this.Pg.x;
          return this.pp(offset, this.xx, this.yx);
        }
        return 0;
      },
      Dx: function(eventData) {
        if ("horizontal" !== this.direction) {
          var offset = eventData.y - this.Pg.y;
          return this.pp(offset, this.zx, this.Ax);
        }
        return 0;
      },
      pp: function(offset, minOffset, maxOffset) {
        if (null != minOffset) {
          offset = Math.max(offset, -minOffset);
        }
        if (null != maxOffset) {
          offset = Math.min(offset, maxOffset);
        }
        return offset;
      },
      Bx: function(e) {
        var target = this.Ex(e);
        var sameTarget = target === this.Qg;
        if (!sameTarget) {
          this.xj(e, DRAG_LEAVE_EVENT);
          this.Qg = target;
          this.xj(e, DRAG_ENTER_EVENT);
        }
      },
      xj: function(event, eventName) {
        if (!this.Qg) {
          return;
        }
        var eventData = {
          type: eventName,
          originalEvent: event,
          draggingElement: this.Ba.get(0),
          target: this.Qg
        };
        (0, _index.fireEvent)(eventData);
      },
      Ex: function(e) {
        var that = this;
        var result;
        iteratorUtils.each(knownDropTargets, function(_, target) {
          if (!that.Fx(target)) {
            return;
          }
          var $target = (0, _renderer.default)(target);
          iteratorUtils.each(getItemDelegatedTargets($target), function(_2, delegatedTarget) {
            var $delegatedTarget = (0, _renderer.default)(delegatedTarget);
            if (that.Gx(getItemConfig($target), $delegatedTarget, (0, _renderer.default)(result), e)) {
              result = delegatedTarget;
            }
          });
        });
        return result;
      },
      Fx: function(target) {
        var active = false;
        iteratorUtils.each(this.np, function(_, activeTarget) {
          active = active || activeTarget === target || (0, _dom.contains)(activeTarget, target);
          return !active;
        });
        return active;
      },
      Gx: function(config, $target, $prevTarget, e) {
        var isDraggingElement = $target.get(0) === (0, _renderer.default)(e.target).get(0);
        if (isDraggingElement) {
          return false;
        }
        var targetPosition = getItemPosition(config, $target);
        if (e.pageX < targetPosition.left) {
          return false;
        }
        if (e.pageY < targetPosition.top) {
          return false;
        }
        var targetSize = getItemSize(config, $target);
        if (e.pageX > targetPosition.left + targetSize.width) {
          return false;
        }
        if (e.pageY > targetPosition.top + targetSize.height) {
          return false;
        }
        if ($prevTarget.length && $prevTarget.closest($target).length) {
          return false;
        }
        if (config.checkDropTarget && !config.checkDropTarget($target, e)) {
          return false;
        }
        return $target;
      },
      mp: function(e) {
        var eventData = (0, _index.eventData)(e);
        this.Rb(DRAG_END_EVENT, e, {
          offset: this.op(eventData)
        });
        this.xj(e, DROP_EVENT);
        delete this.Qg;
      }
    });
    (0, _emitter_registrator.default)({
      emitter: DragEmitter,
      events: [DRAG_START_EVENT, DRAG_EVENT, DRAG_END_EVENT]
    });
  }
});

// node_modules/devextreme/cjs/viz/core/annotations.js
var require_annotations = __commonJS({
  "node_modules/devextreme/cjs/viz/core/annotations.js"(exports) {
    "use strict";
    exports.plugins = exports.createAnnotations = void 0;
    var _dom_adapter = _interopRequireDefault(require_dom_adapter());
    var _type = require_type();
    var _tooltip = require_tooltip();
    var _extend = require_extend();
    var _utils = require_utils();
    var _plaque = require_plaque();
    var _pointer = _interopRequireDefault(require_pointer());
    var _drag = require_drag();
    var _index = require_utils2();
    var _events_engine = _interopRequireDefault(require_events_engine());
    function _interopRequireDefault(obj) {
      return obj && obj.j ? obj : {
        default: obj
      };
    }
    var getDocument = _dom_adapter.default.getDocument;
    var EVENT_NS = "annotations";
    var DOT_EVENT_NS = "." + EVENT_NS;
    var POINTER_ACTION = (0, _index.addNamespace)([_pointer.default.down, _pointer.default.move], EVENT_NS);
    var POINTER_UP_EVENT_NAME = (0, _index.addNamespace)(_pointer.default.up, EVENT_NS);
    var DRAG_START_EVENT_NAME = _drag.start + DOT_EVENT_NS;
    var DRAG_EVENT_NAME = _drag.move + DOT_EVENT_NS;
    var DRAG_END_EVENT_NAME = _drag.end + DOT_EVENT_NS;
    function coreAnnotation(options, contentTemplate) {
      return {
        draw: function(widget, group) {
          var _this = this;
          var annotationGroup = widget.n.g().append(group).css((0, _utils.patchFontOptions)(options.font));
          if (this.plaque) {
            this.plaque.clear();
          }
          this.plaque = new _plaque.Plaque((0, _extend.extend)(true, {}, options, {
            cornerRadius: (options.border || {}).cornerRadius
          }), widget, annotationGroup, contentTemplate, widget.Ke(options));
          this.plaque.draw(widget.Le(this));
          if (options.allowDragging) {
            annotationGroup.on(DRAG_START_EVENT_NAME, {
              immediate: true
            }, function(e) {
              _this.Hx = _this.plaque.x - e.pageX;
              _this.Ix = _this.plaque.y - e.pageY;
            }).on(DRAG_EVENT_NAME, function(e) {
              _this.plaque.move(e.pageX + _this.Hx, e.pageY + _this.Ix);
            }).on(DRAG_END_EVENT_NAME, function(e) {
              _this.offsetX = (_this.offsetX || 0) + e.offset.x;
              _this.offsetY = (_this.offsetY || 0) + e.offset.y;
            });
          }
        },
        hitTest: function(x, y) {
          return this.plaque.hitTest(x, y);
        },
        showTooltip: function(tooltip, _ref) {
          var x = _ref.x, y = _ref.y;
          var that = this;
          var options2 = that.options;
          if (tooltip.annotation !== that) {
            tooltip.setTemplate(options2.tooltipTemplate);
            var callback = function(result) {
              result && (tooltip.annotation = that);
            };
            callback(tooltip.show(options2, {
              x,
              y
            }, {
              target: options2
            }, options2.customizeTooltip, callback));
          } else if (!tooltip.isCursorOnTooltip(x, y)) {
            tooltip.move(x, y);
          }
        }
      };
    }
    function getTemplateFunction(options, widget) {
      var template;
      if ("text" === options.type) {
        template = function(item, groupElement) {
          var text = widget.n.text(item.text).attr({
            class: item.cssClass
          }).append({
            element: groupElement
          });
          if (item.width > 0 || item.height > 0) {
            text.setMaxSize(item.width, item.height, {
              wordWrap: item.wordWrap,
              textOverflow: item.textOverflow
            });
          }
        };
      } else if ("image" === options.type) {
        template = function(item, groupElement) {
          var _ref2 = item.image || {}, width = _ref2.width, height = _ref2.height, url = _ref2.url, location = _ref2.location;
          var outerWidth = item.width, outerHeight = item.height;
          var imageWidth = outerWidth > 0 ? Math.min(width, outerWidth) : width;
          var imageHeight = outerHeight > 0 ? Math.min(height, outerHeight) : height;
          widget.n.image(0, 0, imageWidth, imageHeight, url, location || "center").append({
            element: groupElement
          });
        };
      } else if ("custom" === options.type) {
        template = options.template;
      }
      return template;
    }
    function getImageObject(image) {
      return "string" === typeof image ? {
        url: image
      } : image;
    }
    var createAnnotations = function(widget, items) {
      var commonAnnotationSettings = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {};
      var customizeAnnotation = arguments.length > 3 ? arguments[3] : void 0;
      var pullOptions = arguments.length > 4 ? arguments[4] : void 0;
      var commonImageOptions = getImageObject(commonAnnotationSettings.image);
      return items.reduce(function(arr, item) {
        var currentImageOptions = getImageObject(item.image);
        var customizedItem = (0, _type.isFunction)(customizeAnnotation) ? customizeAnnotation(item) : {};
        if (customizedItem) {
          customizedItem.image = getImageObject(customizedItem.image);
        }
        var options = (0, _extend.extend)(true, {}, commonAnnotationSettings, item, {
          image: commonImageOptions
        }, {
          image: currentImageOptions
        }, customizedItem);
        var templateFunction = getTemplateFunction(options, widget);
        var annotation = templateFunction && (0, _extend.extend)(true, pullOptions(options), coreAnnotation(options, widget.Gc(templateFunction)));
        annotation && arr.push(annotation);
        return arr;
      }, []);
    };
    exports.createAnnotations = createAnnotations;
    var chartPlugin = {
      name: "annotations_chart",
      init: function() {
      },
      dispose: function() {
      },
      members: {
        Le: function(annotation) {
          var _axis, _axis2;
          var coords = {
            offsetX: annotation.offsetX,
            offsetY: annotation.offsetY
          };
          var argCoordName = this.e.silent("rotated") ? "y" : "x";
          var valCoordName = this.e.silent("rotated") ? "x" : "y";
          var argAxis = this.getArgumentAxis();
          var argument = argAxis.validateUnit(annotation.argument);
          var axis = this.getValueAxis(annotation.axis);
          var series;
          var pane = null === (_axis = axis) || void 0 === _axis ? void 0 : _axis.pane;
          if (annotation.series) {
            var _series;
            series = this.series.filter(function(s) {
              return s.name === annotation.series;
            })[0];
            axis = null === (_series = series) || void 0 === _series ? void 0 : _series.getValueAxis();
            (0, _type.isDefined)(axis) && (pane = axis.pane);
          }
          if ((0, _type.isDefined)(argument)) {
            if (series) {
              var center = series.getPointCenterByArg(argument);
              center && (coords[argCoordName] = center[argCoordName]);
            } else {
              coords[argCoordName] = argAxis.getTranslator().translate(argument);
            }
            !(0, _type.isDefined)(pane) && (pane = argAxis.pane);
          }
          var value = null === (_axis2 = axis) || void 0 === _axis2 ? void 0 : _axis2.validateUnit(annotation.value);
          if ((0, _type.isDefined)(value)) {
            var _axis3;
            coords[valCoordName] = null === (_axis3 = axis) || void 0 === _axis3 ? void 0 : _axis3.getTranslator().translate(value);
            !(0, _type.isDefined)(pane) && (0, _type.isDefined)(axis) && (pane = axis.pane);
          }
          coords.canvas = this.Fz(pane);
          if ((0, _type.isDefined)(coords[argCoordName]) && !(0, _type.isDefined)(value)) {
            var _series2;
            if (!(0, _type.isDefined)(axis) && !(0, _type.isDefined)(series)) {
              coords[valCoordName] = argAxis.getAxisPosition();
            } else if ((0, _type.isDefined)(axis) && !(0, _type.isDefined)(series)) {
              coords[valCoordName] = this.oj.filter(function(a) {
                return a.pane === axis.pane;
              })[0].getAxisPosition();
            } else if (null !== (_series2 = series) && void 0 !== _series2 && _series2.checkSeriesViewportCoord(argAxis, coords[argCoordName])) {
              coords[valCoordName] = series.getSeriesPairCoord(coords[argCoordName], true);
            }
          }
          if (!(0, _type.isDefined)(argument) && (0, _type.isDefined)(coords[valCoordName])) {
            if ((0, _type.isDefined)(axis) && !(0, _type.isDefined)(series)) {
              coords[argCoordName] = axis.getAxisPosition();
            } else if ((0, _type.isDefined)(series)) {
              if (series.checkSeriesViewportCoord(axis, coords[valCoordName])) {
                coords[argCoordName] = series.getSeriesPairCoord(coords[valCoordName], false);
              }
            }
          }
          return coords;
        },
        Xb: function(event) {
          if (this.sb) {
            return;
          }
          var originalEvent = event.originalEvent || {};
          var touch = originalEvent.touches && originalEvent.touches[0] || {};
          var rootOffset = this.n.getRootOffset();
          var coords = {
            x: touch.pageX || originalEvent.pageX || event.pageX,
            y: touch.pageY || originalEvent.pageY || event.pageY
          };
          var annotation = this.ba.items.filter(function(a) {
            return a.hitTest(coords.x - rootOffset.left, coords.y - rootOffset.top);
          })[0];
          if (!annotation || !annotation.options.tooltipEnabled) {
            this.ba.hideTooltip();
            return;
          }
          this.Gb();
          if (annotation.options.allowDragging && event.type === _pointer.default.down) {
            this.ba.yj = true;
          }
          if (!this.ba.yj) {
            annotation.showTooltip(this.ba.tooltip, coords);
            event.stopPropagation();
          }
        },
        Ke: function(options) {
          return (0, _type.isDefined)(options.value) || (0, _type.isDefined)(options.argument);
        },
        Yb: function(options) {
          return {
            type: options.type,
            name: options.name,
            x: options.x,
            y: options.y,
            value: options.value,
            argument: options.argument,
            axis: options.axis,
            series: options.series,
            options,
            offsetX: options.offsetX,
            offsetY: options.offsetY
          };
        },
        Bd: function() {
          this.La(["FORCE_RENDER"]);
        },
        Gb: function() {
          this.hideTooltip();
          this.clearHover();
        }
      }
    };
    var polarChartPlugin = {
      name: "annotations_polar_chart",
      init: function() {
      },
      dispose: function() {
      },
      members: {
        Le: function(annotation) {
          var coords = {
            offsetX: annotation.offsetX,
            offsetY: annotation.offsetY,
            canvas: this.Gz()
          };
          var argAxis = this.getArgumentAxis();
          var argument = argAxis.validateUnit(annotation.argument);
          var value = this.getValueAxis().validateUnit(annotation.value);
          var radius = annotation.radius;
          var angle = annotation.angle;
          var pointCoords;
          var series;
          if (annotation.series) {
            series = this.series.filter(function(s) {
              return s.name === annotation.series;
            })[0];
          }
          (0, _extend.extend)(true, coords, this.getXYFromPolar(angle, radius, argument, value));
          if ((0, _type.isDefined)(series)) {
            if ((0, _type.isDefined)(coords.angle) && !(0, _type.isDefined)(value) && !(0, _type.isDefined)(radius)) {
              if (!(0, _type.isDefined)(argument)) {
                argument = argAxis.getTranslator().from(isFinite(angle) ? this.getActualAngle(angle) : coords.angle);
              }
              pointCoords = series.getSeriesPairCoord({
                argument,
                angle: -coords.angle
              }, true);
            } else if ((0, _type.isDefined)(coords.radius) && !(0, _type.isDefined)(argument) && !(0, _type.isDefined)(angle)) {
              pointCoords = series.getSeriesPairCoord({
                radius: coords.radius
              }, false);
            }
            if ((0, _type.isDefined)(pointCoords)) {
              coords.x = pointCoords.x;
              coords.y = pointCoords.y;
            }
          }
          if (annotation.series && !(0, _type.isDefined)(pointCoords)) {
            coords.x = coords.y = void 0;
          }
          return coords;
        },
        Xb: chartPlugin.members.Xb,
        Ke: chartPlugin.members.Ke,
        Yb: function(options) {
          var polarOptions = (0, _extend.extend)({}, {
            radius: options.radius,
            angle: options.angle
          }, chartPlugin.members.Yb(options));
          delete polarOptions.axis;
          return polarOptions;
        },
        Bd: chartPlugin.members.Bd,
        Gb: chartPlugin.members.Gb
      }
    };
    var vectorMapPlugin = {
      name: "annotations_vector_map",
      init: function() {
      },
      dispose: function() {
        this.ba.qp();
        this.ba.qp = null;
      },
      members: {
        Le: function(annotation) {
          var coords = {
            offsetX: annotation.offsetX,
            offsetY: annotation.offsetY
          };
          coords.canvas = this.Jx.getCanvas();
          if (annotation.coordinates) {
            var data = this.Jx.toScreenPoint(annotation.coordinates);
            coords.x = data[0];
            coords.y = data[1];
          }
          return coords;
        },
        Xb: chartPlugin.members.Xb,
        Ke: function(options) {
          return (0, _type.isDefined)(options.coordinates);
        },
        Yb: function(options) {
          var vectorMapOptions = (0, _extend.extend)({}, {
            coordinates: options.coordinates
          }, chartPlugin.members.Yb(options));
          delete vectorMapOptions.axis;
          delete vectorMapOptions.series;
          delete vectorMapOptions.argument;
          delete vectorMapOptions.value;
          return vectorMapOptions;
        },
        Bd: function() {
          this.La(["EXTRA_ELEMENTS"]);
        },
        rp: function() {
          return {
            "text-anchor": "start"
          };
        },
        Gb: function() {
        }
      },
      extenders: {
        Hz: function() {
          var that = this;
          var renderElements = function() {
            that.Kg();
          };
          that.ba.qp = that.mb.on({
            move: renderElements,
            zoom: renderElements,
            end: renderElements
          });
        }
      }
    };
    var pieChartPlugin = {
      name: "annotations_pie_chart",
      init: function() {
      },
      dispose: function() {
      },
      members: {
        Le: function(annotation) {
          var series;
          var coords = {
            offsetX: annotation.offsetX,
            offsetY: annotation.offsetY,
            canvas: this.A
          };
          if (annotation.argument) {
            if (annotation.series) {
              series = this.getSeriesByName(annotation.series);
            } else {
              series = this.series[0];
            }
            var argument = series.getPointsByArg(annotation.argument)[0];
            var _argument$getAnnotati = argument.getAnnotationCoords(annotation.location), x = _argument$getAnnotati.x, y = _argument$getAnnotati.y;
            coords.x = x;
            coords.y = y;
          }
          return coords;
        },
        Ke: function(options) {
          return options.argument;
        },
        Xb: chartPlugin.members.Xb,
        Yb: function(options) {
          var pieChartOptions = (0, _extend.extend)({}, {
            location: options.location
          }, chartPlugin.members.Yb(options));
          delete pieChartOptions.axis;
          return pieChartOptions;
        },
        Gb: chartPlugin.members.Gb,
        Bd: chartPlugin.members.Bd
      }
    };
    var corePlugin = {
      name: "annotations_core",
      init: function() {
        this.ba = {
          items: [],
          yj: false,
          tooltip: new _tooltip.Tooltip({
            cssClass: "".concat(this.Jb, "-annotation-tooltip"),
            eventTrigger: this.u,
            widgetRoot: this.element(),
            widget: this
          }),
          hideTooltip: function() {
            this.tooltip.annotation = null;
            this.tooltip.hide();
          },
          clearItems: function() {
            this.items.forEach(function(i) {
              return i.plaque.clear();
            });
            this.items = [];
          }
        };
        this.ba.tooltip.setRendererOptions(this.Ih());
      },
      dispose: function() {
        this.Me.linkRemove().linkOff();
        _events_engine.default.off(getDocument(), DOT_EVENT_NS);
        this.Me.off(DOT_EVENT_NS);
        this.ba.tooltip && this.ba.tooltip.dispose();
      },
      extenders: {
        jj: function() {
          var _this2 = this;
          this.Me = this.n.g().attr({
            class: "".concat(this.Jb, "-annotations")
          }).css(this.rp()).linkOn(this.n.root, "annotations").linkAppend();
          _events_engine.default.on(getDocument(), POINTER_ACTION, function(e) {
            if (_this2.sb) {
              return;
            }
            if (!_this2.ba.tooltip.isCursorOnTooltip(e.pageX, e.pageY)) {
              _this2.ba.hideTooltip();
            }
          });
          _events_engine.default.on(getDocument(), POINTER_UP_EVENT_NAME, function(event) {
            _this2.ba.yj = false;
            _this2.Xb(event);
          });
          this.Me.on(POINTER_ACTION, this.Xb.bind(this));
        },
        Kg: function() {
          var _this3 = this;
          this.Me.clear();
          this.ba.items.forEach(function(item) {
            return item.draw(_this3, _this3.Me);
          });
        },
        Nc: function() {
          this.ba.hideTooltip();
        }
      },
      members: {
        Kx: function() {
          this.ba.clearItems();
          var items = this.Ea("annotations", true);
          if (!(null !== items && void 0 !== items && items.length)) {
            return;
          }
          this.ba.items = createAnnotations(this, items, this.Ea("commonAnnotationSettings"), this.Ea("customizeAnnotation", true), this.Yb);
        },
        Lx: function() {
          var tooltipOptions = (0, _extend.extend)({}, this.Ea("tooltip"));
          tooltipOptions.contentTemplate = tooltipOptions.customizeTooltip = void 0;
          this.ba.tooltip.update(tooltipOptions);
        },
        Le: function() {
          return {};
        },
        Yb: function() {
          return {};
        },
        rp: function() {
          return {};
        }
      },
      customize: function(constructor) {
        constructor.addChange({
          code: "ANNOTATIONITEMS",
          handler: function() {
            this._(["ANNOTATIONS"]);
          },
          isOptionChange: true,
          option: "annotations"
        });
        constructor.addChange({
          code: "ANNOTATIONSSETTINGS",
          handler: function() {
            this._(["ANNOTATIONS"]);
          },
          isOptionChange: true,
          option: "commonAnnotationSettings"
        });
        constructor.addChange({
          code: "ANNOTATIONS",
          handler: function() {
            this.Kx();
            this.Lx();
            this.Bd();
          },
          isThemeDependent: true,
          isOptionChange: true
        });
      },
      fontFields: ["commonAnnotationSettings.font"]
    };
    var plugins = {
      core: corePlugin,
      chart: chartPlugin,
      polarChart: polarChartPlugin,
      vectorMap: vectorMapPlugin,
      pieChart: pieChartPlugin
    };
    exports.plugins = plugins;
  }
});

// node_modules/devextreme/cjs/viz/core/center_template.js
var require_center_template = __commonJS({
  "node_modules/devextreme/cjs/viz/core/center_template.js"(exports) {
    "use strict";
    exports.plugins = void 0;
    var _utils = require_utils();
    var _common = require_common();
    var pieChartPlugin = {
      name: "center_template_pie_chart",
      init: _common.noop,
      dispose: function() {
        this.Rg.linkOff().dispose();
      },
      extenders: {
        jj: function() {
          var patchedFontOptions = (0, _utils.patchFontOptions)(this.D.Ue);
          this.Rg = this.n.g().attr({
            class: "dxc-hole-template"
          }).linkOn(this.n.root, "center-template").css(patchedFontOptions).linkAppend();
        },
        Kg: function() {
          this._(["CENTER_TEMPLATE"]);
        }
      },
      members: {
        zj: function() {
          var template = this.option("centerTemplate");
          var centerTemplateGroup = this.Rg.clear();
          if (!template) {
            return;
          }
          centerTemplateGroup.attr({
            visibility: "hidden"
          });
          var center = this.Mx();
          this.Gc(template).render({
            model: this,
            container: centerTemplateGroup.element,
            onRendered: function() {
              var group = centerTemplateGroup;
              var bBox = group.getBBox();
              var bBoxCenterX = bBox.x + bBox.width / 2;
              var bBoxCenterY = bBox.y + bBox.height / 2;
              group.move(center.x - bBoxCenterX, center.y - bBoxCenterY);
              group.attr({
                visibility: "visible"
              });
            }
          });
        }
      },
      customize: function(constructor) {
        constructor.addChange({
          code: "CENTER_TEMPLATE",
          handler: function() {
            this.zj();
          },
          option: "centerTemplate"
        });
      }
    };
    var gaugePlugin = {
      name: "center_template_gauge",
      init: _common.noop,
      dispose: pieChartPlugin.dispose,
      extenders: {
        bl: function() {
          this.Nx();
        },
        Iz: function() {
          var patchedFontOptions = (0, _utils.patchFontOptions)(this.D.Ue);
          this.Rg.css(patchedFontOptions);
          this._(["CENTER_TEMPLATE"]);
        },
        Jz: function() {
          this._(["CENTER_TEMPLATE"]);
        }
      },
      members: {
        zj: pieChartPlugin.members.zj,
        Nx: function() {
          this.Rg = this.n.g().attr({
            class: "dxg-hole-template"
          }).linkOn(this.n.root, "center-template").linkAppend();
        }
      },
      customize: pieChartPlugin.customize
    };
    var plugins = {
      pieChart: pieChartPlugin,
      gauge: gaugePlugin
    };
    exports.plugins = plugins;
  }
});

// node_modules/devextreme/cjs/viz/pie_chart.js
var require_pie_chart = __commonJS({
  "node_modules/devextreme/cjs/viz/pie_chart.js"(exports, module) {
    "use strict";
    exports.default = void 0;
    var _consts = _interopRequireDefault(require_consts());
    var _utils = require_utils();
    var _extend2 = require_extend();
    var _type = require_type();
    var _iterator = require_iterator();
    var _range = require_range();
    var _component_registrator = _interopRequireDefault(require_component_registrator());
    var _base_chart = require_base_chart();
    var _common = require_common();
    var _translator1d = require_translator1d();
    var _annotations = require_annotations();
    var _center_template = require_center_template();
    function _interopRequireDefault(obj) {
      return obj && obj.j ? obj : {
        default: obj
      };
    }
    var states = _consts.default.states;
    var seriesSpacing = _consts.default.pieSeriesSpacing;
    var OPTIONS_FOR_REFRESH_SERIES = ["startAngle", "innerRadius", "segmentsDirection", "type"];
    var NORMAL_STATE = states.normalMark;
    var HOVER_STATE = states.hoverMark;
    var SELECTED_STATE = states.selectedMark;
    var MAX_RESOLVE_ITERATION_COUNT = 5;
    var LEGEND_ACTIONS = [states.resetItem, states.applyHover, states.applySelected, states.applySelected];
    function getLegendItemAction(points) {
      var state = NORMAL_STATE;
      points.forEach(function(point) {
        var _point$series;
        var seriesOptions = null === (_point$series = point.series) || void 0 === _point$series ? void 0 : _point$series.getOptions();
        var pointState = point.fullState;
        if ("none" === (null === seriesOptions || void 0 === seriesOptions ? void 0 : seriesOptions.hoverMode)) {
          pointState &= ~HOVER_STATE;
        }
        if ("none" === (null === seriesOptions || void 0 === seriesOptions ? void 0 : seriesOptions.selectionMode)) {
          pointState &= ~SELECTED_STATE;
        }
        state |= pointState;
      });
      return LEGEND_ACTIONS[state];
    }
    function correctPercentValue(value) {
      if ((0, _type.isNumeric)(value)) {
        if (value > 1) {
          value = 1;
        } else if (value < 0) {
          value = 0;
        }
      } else {
        value = void 0;
      }
      return value;
    }
    var pieSizeEqualizer = function() {
      function removeFromList(list, item) {
        return list.filter(function(li) {
          return li !== item;
        });
      }
      var pies = [];
      var timers = {};
      return {
        queue: function(pie) {
          var group = pie.getSizeGroup();
          pies = (list = pies, item = pie, removeFromList(list, item).concat(item));
          var list, item;
          clearTimeout(timers[group]);
          timers[group] = setTimeout(function() {
            !function(group2, allPies) {
              var pies2 = allPies.filter(function(p) {
                return p.Md() && p.getSizeGroup() === group2;
              });
              var minRadius = Math.min.apply(null, pies2.map(function(p) {
                return p.getSizeGroupLayout().radius;
              }));
              var minPie = pies2.filter(function(p) {
                return p.getSizeGroupLayout().radius === minRadius;
              });
              pies2.forEach(function(p) {
                return p.render({
                  force: true,
                  sizeGroupLayout: minPie.length ? minPie[0].getSizeGroupLayout() : {}
                });
              });
            }(group, pies);
          });
        },
        remove: function(pie) {
          pies = removeFromList(pies, pie);
          if (!pies.length) {
            timers = {};
          }
        }
      };
    }();
    var dxPieChart = _base_chart.BaseChart.inherit({
      Dc: "pie",
      lj: function() {
        return (0, _extend2.extend)(true, {}, this.callBase(), {
          piePercentage: correctPercentValue(this.D.getOptions("diameter")),
          minPiePercentage: correctPercentValue(this.D.getOptions("minDiameter"))
        });
      },
      ua: {
        diameter: "REINIT",
        minDiameter: "REINIT",
        sizeGroup: "REINIT"
      },
      ql: function() {
        pieSizeEqualizer.remove(this);
        this.callBase();
      },
      hx: function() {
        var series = this.series;
        this.Lo = {
          groups: [{
            series,
            valueOptions: {
              valueType: "numeric"
            }
          }],
          argumentOptions: series[0] && series[0].getOptions()
        };
      },
      getArgumentAxis: function() {
        return null;
      },
      mx: function() {
        var translator = new _translator1d.Translator1D().setCodomain(360, 0);
        return {
          getTranslator: function() {
            return translator;
          },
          setBusinessRange: function(range) {
            translator.setDomain(range.min, range.max);
          }
        };
      },
      rj: function() {
        this.series.map(function(series) {
          var range = new _range.Range();
          range.addRange(series.getRangeData().val);
          series.getValueAxis().setBusinessRange(range);
          return range;
        });
      },
      kx: function() {
        (0, _iterator.each)(this.series, function(_, singleSeries) {
          singleSeries.arrangePoints();
        });
      },
      lx: function() {
        return true;
      },
      dp: function(singleSeries) {
        this.callBase(singleSeries);
        singleSeries.arrangePoints();
      },
      ep: function() {
        var maxPointCount = 0;
        this.series.forEach(function(s) {
          maxPointCount = Math.max(s.getPointsCount(), maxPointCount);
        });
        this.series.forEach(function(s) {
          s.setMaxPointsCount(maxPointCount);
        });
        this.callBase();
      },
      $o: function(item) {
        var legendItem = this.callBase(item);
        var legendData = legendItem.legendData;
        legendData.argument = item.argument;
        legendData.argumentIndex = item.argumentIndex;
        legendData.points = [item];
        return legendItem;
      },
      _o: function() {
        var that = this;
        var itemsByArgument = {};
        (that.series || []).forEach(function(series) {
          series.getPoints().forEach(function(point) {
            var argument = point.argument.valueOf();
            var index = series.getPointsByArg(argument).indexOf(point);
            var key = argument.valueOf().toString() + index;
            itemsByArgument[key] = itemsByArgument[key] || [];
            var argumentCount = itemsByArgument[key].push(point);
            point.index = itemsByArgument[key][argumentCount - 2] ? itemsByArgument[key][argumentCount - 2].index : Object.keys(itemsByArgument).length - 1;
            point.argumentIndex = index;
          });
        });
        var items = [];
        (0, _iterator.each)(itemsByArgument, function(_, points) {
          points.forEach(function(point, index) {
            if (0 === index) {
              items.push(that.$o(point));
              return;
            }
            var item = items[items.length - 1];
            item.legendData.points.push(point);
            if (!item.visible) {
              item.visible = point.isVisible();
            }
          });
        });
        return items;
      },
      Ro: function() {
        return [{
          canvas: this.A
        }];
      },
      Ox: function(series, drawOptions) {
        var layout;
        var canvas = this.A;
        var drawnLabels = false;
        layout = this.layoutManager.applyPieChartSeriesLayout(canvas, series, true);
        series.forEach(function(singleSeries) {
          singleSeries.correctPosition(layout, canvas);
          drawnLabels = singleSeries.drawLabelsWOPoints() || drawnLabels;
        });
        if (drawnLabels) {
          layout = this.layoutManager.applyPieChartSeriesLayout(canvas, series, drawOptions.hideLayoutLabels);
        }
        series.forEach(function(singleSeries) {
          singleSeries.hideLabels();
        });
        this.Px = {
          x: layout.centerX,
          y: layout.centerY,
          radius: layout.radiusOuter,
          drawOptions
        };
        return layout;
      },
      Qx: function(series, sizeGroupLayout) {
        var canvas = this.A;
        var layout = this.layoutManager.applyEqualPieChartLayout(series, sizeGroupLayout);
        series.forEach(function(s) {
          s.correctPosition(layout, canvas);
          s.drawLabelsWOPoints();
        });
        this.layoutManager.correctPieLabelRadius(series, layout, canvas);
        return layout;
      },
      Nw: function(drawOptions) {
        var visibleSeries = this.Lg();
        var lengthVisibleSeries = visibleSeries.length;
        var innerRad;
        var delta;
        var layout;
        var sizeGroupLayout = drawOptions.sizeGroupLayout;
        if (lengthVisibleSeries) {
          layout = sizeGroupLayout ? this.Qx(visibleSeries, sizeGroupLayout) : this.Ox(visibleSeries, drawOptions);
          delta = (layout.radiusOuter - layout.radiusInner - seriesSpacing * (lengthVisibleSeries - 1)) / lengthVisibleSeries;
          innerRad = layout.radiusInner;
          this.Rx(layout);
          visibleSeries.forEach(function(singleSeries) {
            singleSeries.correctRadius({
              radiusInner: innerRad,
              radiusOuter: innerRad + delta
            });
            innerRad += delta + seriesSpacing;
          });
        }
      },
      So: function(drawOptions, isRotated, isLegendInside) {
        this.To(drawOptions, isRotated);
        if (!drawOptions.sizeGroupLayout && this.getSizeGroup()) {
          pieSizeEqualizer.queue(this);
          this.Xo();
          return;
        }
        this.Uo(drawOptions, isLegendInside);
      },
      Mx: function() {
        return this.sp;
      },
      getInnerRadius: function() {
        return this.Sx;
      },
      Sw: function() {
        var that = this;
        var legend = this.P;
        var items = this._o().map(function(i) {
          return i.legendData;
        });
        return function(target) {
          items.forEach(function(data) {
            var points = [];
            var callback = legend.getActionCallback({
              index: data.id
            });
            that.series.forEach(function(series) {
              var seriesPoints = series.getPointsByKeys(data.argument, data.argumentIndex);
              points.push.apply(points, seriesPoints);
            });
            if (target && target.argument === data.argument && target.argumentIndex === data.argumentIndex) {
              points.push(target);
            }
            callback(getLegendItemAction(points));
          });
        };
      },
      Wo: function(resolveLabelOverlapping) {
        var iterationCount = 0;
        var labelsWereOverlapped;
        var wordWrapApplied;
        do {
          wordWrapApplied = this.Vo("shift" === resolveLabelOverlapping);
          labelsWereOverlapped = this.Zo(resolveLabelOverlapping);
        } while ((labelsWereOverlapped || wordWrapApplied) && ++iterationCount < MAX_RESOLVE_ITERATION_COUNT);
      },
      Vo: function(moveLabelsFromCenter) {
        return this.series.reduce(function(r, s) {
          return s.adjustLabels(moveLabelsFromCenter) || r;
        }, false);
      },
      Rw: _common.noop,
      Ww: function() {
        var that = this;
        var inverseDirection = "anticlockwise" === that.option("segmentsDirection");
        var seriesByPosition = that.series.reduce(function(r, s) {
          (r[s.getOptions().label.position] || r.outside).push(s);
          return r;
        }, {
          inside: [],
          columns: [],
          outside: []
        });
        var labelsOverlapped = false;
        if (seriesByPosition.inside.length > 0) {
          labelsOverlapped = resolve(seriesByPosition.inside.reduce(function(r, singleSeries) {
            return singleSeries.getVisiblePoints().reduce(function(r2, point) {
              r2.left.push(point);
              return r2;
            }, r);
          }, {
            left: [],
            right: []
          }), shiftInColumnFunction) || labelsOverlapped;
        }
        labelsOverlapped = seriesByPosition.columns.reduce(function(r, singleSeries) {
          return resolve(dividePoints(singleSeries), shiftInColumnFunction) || r;
        }, labelsOverlapped);
        if (seriesByPosition.outside.length > 0) {
          labelsOverlapped = resolve(seriesByPosition.outside.reduce(function(r, singleSeries) {
            return dividePoints(singleSeries, r);
          }, null), function(box, length) {
            return (0, _utils.getVerticallyShiftedAngularCoords)(box, -length, that.sp);
          }) || labelsOverlapped;
        }
        return labelsOverlapped;
        function dividePoints(series, points) {
          return series.getVisiblePoints().reduce(function(r, point) {
            var angle = (0, _utils.normalizeAngle)(point.middleAngle);
            (angle <= 90 || angle >= 270 ? r.right : r.left).push(point);
            return r;
          }, points || {
            left: [],
            right: []
          });
        }
        function resolve(points, shiftCallback) {
          var overlapped;
          if (inverseDirection) {
            points.left.reverse();
            points.right.reverse();
          }
          overlapped = _base_chart.overlapping.resolveLabelOverlappingInOneDirection(points.left, that.A, false, false, shiftCallback);
          return _base_chart.overlapping.resolveLabelOverlappingInOneDirection(points.right, that.A, false, false, shiftCallback) || overlapped;
        }
        function shiftInColumnFunction(box, length) {
          return {
            x: box.x,
            y: box.y - length
          };
        }
      },
      Rx: function(_ref) {
        var x = _ref.centerX, y = _ref.centerY, radiusInner = _ref.radiusInner;
        this.sp = {
          x,
          y
        };
        this.Sx = radiusInner;
      },
      qj: function(seriesIndex) {
        this.callBase.apply(this, arguments);
        this.Kz = null;
      },
      Yw: "point",
      Zw: "argument",
      Lw: _common.noop,
      Tw: _common.noop,
      Oo: "PieTracker",
      kj: _common.noop,
      Lz: _common.noop,
      Gw: _common.noop,
      Mw: _common.noop,
      Cw: _common.noop,
      Dw: _common.noop,
      Ew: _common.noop,
      Fw: _common.noop,
      Qo: _common.noop,
      ex: _common.noop,
      Jo: _common.noop,
      Ko: _common.noop,
      jx: function() {
        return {
          startAngle: this.option("startAngle"),
          innerRadius: this.option("innerRadius"),
          segmentsDirection: this.option("segmentsDirection"),
          type: this.option("type")
        };
      },
      getSizeGroup: function() {
        return this.D.getOptions("sizeGroup");
      },
      getSizeGroupLayout: function() {
        return this.Px || {};
      }
    });
    (0, _iterator.each)(OPTIONS_FOR_REFRESH_SERIES, function(_, name) {
      dxPieChart.prototype.ua[name] = "REFRESH_SERIES_DATA_INIT";
    });
    dxPieChart.addPlugin(_center_template.plugins.pieChart);
    dxPieChart.addPlugin(_annotations.plugins.core);
    dxPieChart.addPlugin(_annotations.plugins.pieChart);
    (0, _component_registrator.default)("dxPieChart", dxPieChart);
    var _default = dxPieChart;
    exports.default = _default;
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/react-is/cjs/react-is.development.js
var require_react_is_development = __commonJS({
  "node_modules/react-is/cjs/react-is.development.js"(exports) {
    "use strict";
    if (true) {
      (function() {
        "use strict";
        var hasSymbol = typeof Symbol === "function" && Symbol.for;
        var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for("react.element") : 60103;
        var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for("react.portal") : 60106;
        var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for("react.fragment") : 60107;
        var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for("react.strict_mode") : 60108;
        var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for("react.profiler") : 60114;
        var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for("react.provider") : 60109;
        var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for("react.context") : 60110;
        var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for("react.async_mode") : 60111;
        var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for("react.concurrent_mode") : 60111;
        var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for("react.forward_ref") : 60112;
        var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for("react.suspense") : 60113;
        var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for("react.suspense_list") : 60120;
        var REACT_MEMO_TYPE = hasSymbol ? Symbol.for("react.memo") : 60115;
        var REACT_LAZY_TYPE = hasSymbol ? Symbol.for("react.lazy") : 60116;
        var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for("react.block") : 60121;
        var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for("react.fundamental") : 60117;
        var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for("react.responder") : 60118;
        var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for("react.scope") : 60119;
        function isValidElementType(type) {
          return typeof type === "string" || typeof type === "function" || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
          type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === "object" && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
        }
        function typeOf(object) {
          if (typeof object === "object" && object !== null) {
            var $$typeof = object.$$typeof;
            switch ($$typeof) {
              case REACT_ELEMENT_TYPE:
                var type = object.type;
                switch (type) {
                  case REACT_ASYNC_MODE_TYPE:
                  case REACT_CONCURRENT_MODE_TYPE:
                  case REACT_FRAGMENT_TYPE:
                  case REACT_PROFILER_TYPE:
                  case REACT_STRICT_MODE_TYPE:
                  case REACT_SUSPENSE_TYPE:
                    return type;
                  default:
                    var $$typeofType = type && type.$$typeof;
                    switch ($$typeofType) {
                      case REACT_CONTEXT_TYPE:
                      case REACT_FORWARD_REF_TYPE:
                      case REACT_LAZY_TYPE:
                      case REACT_MEMO_TYPE:
                      case REACT_PROVIDER_TYPE:
                        return $$typeofType;
                      default:
                        return $$typeof;
                    }
                }
              case REACT_PORTAL_TYPE:
                return $$typeof;
            }
          }
          return void 0;
        }
        var AsyncMode = REACT_ASYNC_MODE_TYPE;
        var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
        var ContextConsumer = REACT_CONTEXT_TYPE;
        var ContextProvider = REACT_PROVIDER_TYPE;
        var Element = REACT_ELEMENT_TYPE;
        var ForwardRef = REACT_FORWARD_REF_TYPE;
        var Fragment = REACT_FRAGMENT_TYPE;
        var Lazy = REACT_LAZY_TYPE;
        var Memo = REACT_MEMO_TYPE;
        var Portal = REACT_PORTAL_TYPE;
        var Profiler = REACT_PROFILER_TYPE;
        var StrictMode = REACT_STRICT_MODE_TYPE;
        var Suspense = REACT_SUSPENSE_TYPE;
        var hasWarnedAboutDeprecatedIsAsyncMode = false;
        function isAsyncMode(object) {
          {
            if (!hasWarnedAboutDeprecatedIsAsyncMode) {
              hasWarnedAboutDeprecatedIsAsyncMode = true;
              console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.");
            }
          }
          return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
        }
        function isConcurrentMode(object) {
          return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
        }
        function isContextConsumer(object) {
          return typeOf(object) === REACT_CONTEXT_TYPE;
        }
        function isContextProvider(object) {
          return typeOf(object) === REACT_PROVIDER_TYPE;
        }
        function isElement(object) {
          return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
        }
        function isForwardRef(object) {
          return typeOf(object) === REACT_FORWARD_REF_TYPE;
        }
        function isFragment(object) {
          return typeOf(object) === REACT_FRAGMENT_TYPE;
        }
        function isLazy(object) {
          return typeOf(object) === REACT_LAZY_TYPE;
        }
        function isMemo(object) {
          return typeOf(object) === REACT_MEMO_TYPE;
        }
        function isPortal(object) {
          return typeOf(object) === REACT_PORTAL_TYPE;
        }
        function isProfiler(object) {
          return typeOf(object) === REACT_PROFILER_TYPE;
        }
        function isStrictMode(object) {
          return typeOf(object) === REACT_STRICT_MODE_TYPE;
        }
        function isSuspense(object) {
          return typeOf(object) === REACT_SUSPENSE_TYPE;
        }
        exports.AsyncMode = AsyncMode;
        exports.ConcurrentMode = ConcurrentMode;
        exports.ContextConsumer = ContextConsumer;
        exports.ContextProvider = ContextProvider;
        exports.Element = Element;
        exports.ForwardRef = ForwardRef;
        exports.Fragment = Fragment;
        exports.Lazy = Lazy;
        exports.Memo = Memo;
        exports.Portal = Portal;
        exports.Profiler = Profiler;
        exports.StrictMode = StrictMode;
        exports.Suspense = Suspense;
        exports.isAsyncMode = isAsyncMode;
        exports.isConcurrentMode = isConcurrentMode;
        exports.isContextConsumer = isContextConsumer;
        exports.isContextProvider = isContextProvider;
        exports.isElement = isElement;
        exports.isForwardRef = isForwardRef;
        exports.isFragment = isFragment;
        exports.isLazy = isLazy;
        exports.isMemo = isMemo;
        exports.isPortal = isPortal;
        exports.isProfiler = isProfiler;
        exports.isStrictMode = isStrictMode;
        exports.isSuspense = isSuspense;
        exports.isValidElementType = isValidElementType;
        exports.typeOf = typeOf;
      })();
    }
  }
});

// node_modules/react-is/index.js
var require_react_is = __commonJS({
  "node_modules/react-is/index.js"(exports, module) {
    "use strict";
    if (false) {
      module.exports = null;
    } else {
      module.exports = require_react_is_development();
    }
  }
});

// node_modules/object-assign/index.js
var require_object_assign = __commonJS({
  "node_modules/object-assign/index.js"(exports, module) {
    "use strict";
    var getOwnPropertySymbols = Object.getOwnPropertySymbols;
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var propIsEnumerable = Object.prototype.propertyIsEnumerable;
    function toObject(val) {
      if (val === null || val === void 0) {
        throw new TypeError("Object.assign cannot be called with null or undefined");
      }
      return Object(val);
    }
    function shouldUseNative() {
      try {
        if (!Object.assign) {
          return false;
        }
        var test1 = new String("abc");
        test1[5] = "de";
        if (Object.getOwnPropertyNames(test1)[0] === "5") {
          return false;
        }
        var test2 = {};
        for (var i = 0; i < 10; i++) {
          test2["_" + String.fromCharCode(i)] = i;
        }
        var order2 = Object.getOwnPropertyNames(test2).map(function(n) {
          return test2[n];
        });
        if (order2.join("") !== "0123456789") {
          return false;
        }
        var test3 = {};
        "abcdefghijklmnopqrst".split("").forEach(function(letter) {
          test3[letter] = letter;
        });
        if (Object.keys(Object.assign({}, test3)).join("") !== "abcdefghijklmnopqrst") {
          return false;
        }
        return true;
      } catch (err) {
        return false;
      }
    }
    module.exports = shouldUseNative() ? Object.assign : function(target, source) {
      var from;
      var to = toObject(target);
      var symbols;
      for (var s = 1; s < arguments.length; s++) {
        from = Object(arguments[s]);
        for (var key in from) {
          if (hasOwnProperty.call(from, key)) {
            to[key] = from[key];
          }
        }
        if (getOwnPropertySymbols) {
          symbols = getOwnPropertySymbols(from);
          for (var i = 0; i < symbols.length; i++) {
            if (propIsEnumerable.call(from, symbols[i])) {
              to[symbols[i]] = from[symbols[i]];
            }
          }
        }
      }
      return to;
    };
  }
});

// node_modules/prop-types/lib/ReactPropTypesSecret.js
var require_ReactPropTypesSecret = __commonJS({
  "node_modules/prop-types/lib/ReactPropTypesSecret.js"(exports, module) {
    "use strict";
    var ReactPropTypesSecret = "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";
    module.exports = ReactPropTypesSecret;
  }
});

// node_modules/prop-types/lib/has.js
var require_has = __commonJS({
  "node_modules/prop-types/lib/has.js"(exports, module) {
    module.exports = Function.call.bind(Object.prototype.hasOwnProperty);
  }
});

// node_modules/prop-types/checkPropTypes.js
var require_checkPropTypes = __commonJS({
  "node_modules/prop-types/checkPropTypes.js"(exports, module) {
    "use strict";
    var printWarning = function() {
    };
    if (true) {
      ReactPropTypesSecret = require_ReactPropTypesSecret();
      loggedTypeFailures = {};
      has = require_has();
      printWarning = function(text) {
        var message = "Warning: " + text;
        if (typeof console !== "undefined") {
          console.error(message);
        }
        try {
          throw new Error(message);
        } catch (x) {
        }
      };
    }
    function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
      if (true) {
        for (var typeSpecName in typeSpecs) {
          if (has(typeSpecs, typeSpecName)) {
            var error;
            try {
              if (typeof typeSpecs[typeSpecName] !== "function") {
                var err = Error(
                  (componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`."
                );
                err.name = "Invariant Violation";
                throw err;
              }
              error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
            } catch (ex) {
              error = ex;
            }
            if (error && !(error instanceof Error)) {
              printWarning(
                (componentName || "React class") + ": type specification of " + location + " `" + typeSpecName + "` is invalid; the type checker function must return `null` or an `Error` but returned a " + typeof error + ". You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument)."
              );
            }
            if (error instanceof Error && !(error.message in loggedTypeFailures)) {
              loggedTypeFailures[error.message] = true;
              var stack = getStack ? getStack() : "";
              printWarning(
                "Failed " + location + " type: " + error.message + (stack != null ? stack : "")
              );
            }
          }
        }
      }
    }
    checkPropTypes.resetWarningCache = function() {
      if (true) {
        loggedTypeFailures = {};
      }
    };
    module.exports = checkPropTypes;
    var ReactPropTypesSecret;
    var loggedTypeFailures;
    var has;
  }
});

// node_modules/prop-types/factoryWithTypeCheckers.js
var require_factoryWithTypeCheckers = __commonJS({
  "node_modules/prop-types/factoryWithTypeCheckers.js"(exports, module) {
    "use strict";
    var ReactIs = require_react_is();
    var assign = require_object_assign();
    var ReactPropTypesSecret = require_ReactPropTypesSecret();
    var has = require_has();
    var checkPropTypes = require_checkPropTypes();
    var printWarning = function() {
    };
    if (true) {
      printWarning = function(text) {
        var message = "Warning: " + text;
        if (typeof console !== "undefined") {
          console.error(message);
        }
        try {
          throw new Error(message);
        } catch (x) {
        }
      };
    }
    function emptyFunctionThatReturnsNull() {
      return null;
    }
    module.exports = function(isValidElement, throwOnDirectAccess) {
      var ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
      var FAUX_ITERATOR_SYMBOL = "@@iterator";
      function getIteratorFn(maybeIterable) {
        var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
        if (typeof iteratorFn === "function") {
          return iteratorFn;
        }
      }
      var ANONYMOUS = "<<anonymous>>";
      var ReactPropTypes = {
        array: createPrimitiveTypeChecker("array"),
        bigint: createPrimitiveTypeChecker("bigint"),
        bool: createPrimitiveTypeChecker("boolean"),
        func: createPrimitiveTypeChecker("function"),
        number: createPrimitiveTypeChecker("number"),
        object: createPrimitiveTypeChecker("object"),
        string: createPrimitiveTypeChecker("string"),
        symbol: createPrimitiveTypeChecker("symbol"),
        any: createAnyTypeChecker(),
        arrayOf: createArrayOfTypeChecker,
        element: createElementTypeChecker(),
        elementType: createElementTypeTypeChecker(),
        instanceOf: createInstanceTypeChecker,
        node: createNodeChecker(),
        objectOf: createObjectOfTypeChecker,
        oneOf: createEnumTypeChecker,
        oneOfType: createUnionTypeChecker,
        shape: createShapeTypeChecker,
        exact: createStrictShapeTypeChecker
      };
      function is(x, y) {
        if (x === y) {
          return x !== 0 || 1 / x === 1 / y;
        } else {
          return x !== x && y !== y;
        }
      }
      function PropTypeError(message, data) {
        this.message = message;
        this.data = data && typeof data === "object" ? data : {};
        this.stack = "";
      }
      PropTypeError.prototype = Error.prototype;
      function createChainableTypeChecker(validate) {
        if (true) {
          var manualPropTypeCallCache = {};
          var manualPropTypeWarningCount = 0;
        }
        function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
          componentName = componentName || ANONYMOUS;
          propFullName = propFullName || propName;
          if (secret !== ReactPropTypesSecret) {
            if (throwOnDirectAccess) {
              var err = new Error(
                "Calling PropTypes validators directly is not supported by the `prop-types` package. Use `PropTypes.checkPropTypes()` to call them. Read more at http://fb.me/use-check-prop-types"
              );
              err.name = "Invariant Violation";
              throw err;
            } else if (typeof console !== "undefined") {
              var cacheKey = componentName + ":" + propName;
              if (!manualPropTypeCallCache[cacheKey] && // Avoid spamming the console because they are often not actionable except for lib authors
              manualPropTypeWarningCount < 3) {
                printWarning(
                  "You are manually calling a React.PropTypes validation function for the `" + propFullName + "` prop on `" + componentName + "`. This is deprecated and will throw in the standalone `prop-types` package. You may be seeing this warning due to a third-party PropTypes library. See https://fb.me/react-warning-dont-call-proptypes for details."
                );
                manualPropTypeCallCache[cacheKey] = true;
                manualPropTypeWarningCount++;
              }
            }
          }
          if (props[propName] == null) {
            if (isRequired) {
              if (props[propName] === null) {
                return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required " + ("in `" + componentName + "`, but its value is `null`."));
              }
              return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required in " + ("`" + componentName + "`, but its value is `undefined`."));
            }
            return null;
          } else {
            return validate(props, propName, componentName, location, propFullName);
          }
        }
        var chainedCheckType = checkType.bind(null, false);
        chainedCheckType.isRequired = checkType.bind(null, true);
        return chainedCheckType;
      }
      function createPrimitiveTypeChecker(expectedType) {
        function validate(props, propName, componentName, location, propFullName, secret) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== expectedType) {
            var preciseType = getPreciseType(propValue);
            return new PropTypeError(
              "Invalid " + location + " `" + propFullName + "` of type " + ("`" + preciseType + "` supplied to `" + componentName + "`, expected ") + ("`" + expectedType + "`."),
              { expectedType }
            );
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createAnyTypeChecker() {
        return createChainableTypeChecker(emptyFunctionThatReturnsNull);
      }
      function createArrayOfTypeChecker(typeChecker) {
        function validate(props, propName, componentName, location, propFullName) {
          if (typeof typeChecker !== "function") {
            return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside arrayOf.");
          }
          var propValue = props[propName];
          if (!Array.isArray(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an array."));
          }
          for (var i = 0; i < propValue.length; i++) {
            var error = typeChecker(propValue, i, componentName, location, propFullName + "[" + i + "]", ReactPropTypesSecret);
            if (error instanceof Error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createElementTypeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          if (!isValidElement(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createElementTypeTypeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          if (!ReactIs.isValidElementType(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement type."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createInstanceTypeChecker(expectedClass) {
        function validate(props, propName, componentName, location, propFullName) {
          if (!(props[propName] instanceof expectedClass)) {
            var expectedClassName = expectedClass.name || ANONYMOUS;
            var actualClassName = getClassName(props[propName]);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + actualClassName + "` supplied to `" + componentName + "`, expected ") + ("instance of `" + expectedClassName + "`."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createEnumTypeChecker(expectedValues) {
        if (!Array.isArray(expectedValues)) {
          if (true) {
            if (arguments.length > 1) {
              printWarning(
                "Invalid arguments supplied to oneOf, expected an array, got " + arguments.length + " arguments. A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z])."
              );
            } else {
              printWarning("Invalid argument supplied to oneOf, expected an array.");
            }
          }
          return emptyFunctionThatReturnsNull;
        }
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          for (var i = 0; i < expectedValues.length; i++) {
            if (is(propValue, expectedValues[i])) {
              return null;
            }
          }
          var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
            var type = getPreciseType(value);
            if (type === "symbol") {
              return String(value);
            }
            return value;
          });
          return new PropTypeError("Invalid " + location + " `" + propFullName + "` of value `" + String(propValue) + "` " + ("supplied to `" + componentName + "`, expected one of " + valuesString + "."));
        }
        return createChainableTypeChecker(validate);
      }
      function createObjectOfTypeChecker(typeChecker) {
        function validate(props, propName, componentName, location, propFullName) {
          if (typeof typeChecker !== "function") {
            return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside objectOf.");
          }
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an object."));
          }
          for (var key in propValue) {
            if (has(propValue, key)) {
              var error = typeChecker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
              if (error instanceof Error) {
                return error;
              }
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createUnionTypeChecker(arrayOfTypeCheckers) {
        if (!Array.isArray(arrayOfTypeCheckers)) {
          true ? printWarning("Invalid argument supplied to oneOfType, expected an instance of array.") : void 0;
          return emptyFunctionThatReturnsNull;
        }
        for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
          var checker = arrayOfTypeCheckers[i];
          if (typeof checker !== "function") {
            printWarning(
              "Invalid argument supplied to oneOfType. Expected an array of check functions, but received " + getPostfixForTypeWarning(checker) + " at index " + i + "."
            );
            return emptyFunctionThatReturnsNull;
          }
        }
        function validate(props, propName, componentName, location, propFullName) {
          var expectedTypes = [];
          for (var i2 = 0; i2 < arrayOfTypeCheckers.length; i2++) {
            var checker2 = arrayOfTypeCheckers[i2];
            var checkerResult = checker2(props, propName, componentName, location, propFullName, ReactPropTypesSecret);
            if (checkerResult == null) {
              return null;
            }
            if (checkerResult.data && has(checkerResult.data, "expectedType")) {
              expectedTypes.push(checkerResult.data.expectedType);
            }
          }
          var expectedTypesMessage = expectedTypes.length > 0 ? ", expected one of type [" + expectedTypes.join(", ") + "]" : "";
          return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`" + expectedTypesMessage + "."));
        }
        return createChainableTypeChecker(validate);
      }
      function createNodeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          if (!isNode(props[propName])) {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`, expected a ReactNode."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function invalidValidatorError(componentName, location, propFullName, key, type) {
        return new PropTypeError(
          (componentName || "React class") + ": " + location + " type `" + propFullName + "." + key + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + type + "`."
        );
      }
      function createShapeTypeChecker(shapeTypes) {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
          }
          for (var key in shapeTypes) {
            var checker = shapeTypes[key];
            if (typeof checker !== "function") {
              return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
            }
            var error = checker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
            if (error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createStrictShapeTypeChecker(shapeTypes) {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
          }
          var allKeys = assign({}, props[propName], shapeTypes);
          for (var key in allKeys) {
            var checker = shapeTypes[key];
            if (has(shapeTypes, key) && typeof checker !== "function") {
              return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
            }
            if (!checker) {
              return new PropTypeError(
                "Invalid " + location + " `" + propFullName + "` key `" + key + "` supplied to `" + componentName + "`.\nBad object: " + JSON.stringify(props[propName], null, "  ") + "\nValid keys: " + JSON.stringify(Object.keys(shapeTypes), null, "  ")
              );
            }
            var error = checker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
            if (error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function isNode(propValue) {
        switch (typeof propValue) {
          case "number":
          case "string":
          case "undefined":
            return true;
          case "boolean":
            return !propValue;
          case "object":
            if (Array.isArray(propValue)) {
              return propValue.every(isNode);
            }
            if (propValue === null || isValidElement(propValue)) {
              return true;
            }
            var iteratorFn = getIteratorFn(propValue);
            if (iteratorFn) {
              var iterator = iteratorFn.call(propValue);
              var step;
              if (iteratorFn !== propValue.entries) {
                while (!(step = iterator.next()).done) {
                  if (!isNode(step.value)) {
                    return false;
                  }
                }
              } else {
                while (!(step = iterator.next()).done) {
                  var entry = step.value;
                  if (entry) {
                    if (!isNode(entry[1])) {
                      return false;
                    }
                  }
                }
              }
            } else {
              return false;
            }
            return true;
          default:
            return false;
        }
      }
      function isSymbol(propType, propValue) {
        if (propType === "symbol") {
          return true;
        }
        if (!propValue) {
          return false;
        }
        if (propValue["@@toStringTag"] === "Symbol") {
          return true;
        }
        if (typeof Symbol === "function" && propValue instanceof Symbol) {
          return true;
        }
        return false;
      }
      function getPropType(propValue) {
        var propType = typeof propValue;
        if (Array.isArray(propValue)) {
          return "array";
        }
        if (propValue instanceof RegExp) {
          return "object";
        }
        if (isSymbol(propType, propValue)) {
          return "symbol";
        }
        return propType;
      }
      function getPreciseType(propValue) {
        if (typeof propValue === "undefined" || propValue === null) {
          return "" + propValue;
        }
        var propType = getPropType(propValue);
        if (propType === "object") {
          if (propValue instanceof Date) {
            return "date";
          } else if (propValue instanceof RegExp) {
            return "regexp";
          }
        }
        return propType;
      }
      function getPostfixForTypeWarning(value) {
        var type = getPreciseType(value);
        switch (type) {
          case "array":
          case "object":
            return "an " + type;
          case "boolean":
          case "date":
          case "regexp":
            return "a " + type;
          default:
            return type;
        }
      }
      function getClassName(propValue) {
        if (!propValue.constructor || !propValue.constructor.name) {
          return ANONYMOUS;
        }
        return propValue.constructor.name;
      }
      ReactPropTypes.checkPropTypes = checkPropTypes;
      ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
      ReactPropTypes.PropTypes = ReactPropTypes;
      return ReactPropTypes;
    };
  }
});

// node_modules/prop-types/index.js
var require_prop_types = __commonJS({
  "node_modules/prop-types/index.js"(exports, module) {
    if (true) {
      ReactIs = require_react_is();
      throwOnDirectAccess = true;
      module.exports = require_factoryWithTypeCheckers()(ReactIs.isElement, throwOnDirectAccess);
    } else {
      module.exports = null();
    }
    var ReactIs;
    var throwOnDirectAccess;
  }
});

// node_modules/devextreme/cjs/events/index.js
var require_events = __commonJS({
  "node_modules/devextreme/cjs/events/index.js"(exports) {
    "use strict";
    exports.triggerHandler = exports.trigger = exports.one = exports.on = exports.off = exports.Event = void 0;
    var _events_engine = _interopRequireDefault(require_events_engine());
    function _interopRequireDefault(obj) {
      return obj && obj.j ? obj : {
        default: obj
      };
    }
    var on = _events_engine.default.on;
    exports.on = on;
    var one = _events_engine.default.one;
    exports.one = one;
    var off = _events_engine.default.off;
    exports.off = off;
    var trigger = _events_engine.default.trigger;
    exports.trigger = trigger;
    var triggerHandler = _events_engine.default.triggerHandler;
    exports.triggerHandler = triggerHandler;
    var Event = _events_engine.default.Event;
    exports.Event = Event;
  }
});

// node_modules/devextreme-react/core/config.js
var require_config2 = __commonJS({
  "node_modules/devextreme-react/core/config.js"(exports) {
    "use strict";
    var __assign = exports && exports.tp || function() {
      __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign.apply(this, arguments);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getOption = void 0;
    var config = {
      useLegacyTemplateEngine: false
    };
    function setOptions(options) {
      config = __assign(__assign({}, config), options);
    }
    function getOption(optionName) {
      return config[optionName];
    }
    exports.getOption = getOption;
    exports.default = setOptions;
  }
});

// node_modules/devextreme-react/core/helpers.js
var require_helpers2 = __commonJS({
  "node_modules/devextreme-react/core/helpers.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.capitalizeFirstLetter = exports.DoubleKeyMap = exports.generateID = void 0;
    function generateID() {
      return Math.random().toString(36).substr(2);
    }
    exports.generateID = generateID;
    var DoubleKeyMap = (
      /** @class */
      function() {
        function DoubleKeyMap2() {
          this.Ne = /* @__PURE__ */ new Map();
        }
        DoubleKeyMap2.prototype.set = function(_a, value) {
          var key1 = _a.key1, key2 = _a.key2;
          var innerMap = this.Ne.get(key1);
          if (!innerMap) {
            innerMap = /* @__PURE__ */ new Map();
            this.Ne.set(key1, innerMap);
          }
          innerMap.set(key2, value);
        };
        DoubleKeyMap2.prototype.get = function(_a) {
          var key1 = _a.key1, key2 = _a.key2;
          var innerMap = this.Ne.get(key1);
          return innerMap ? innerMap.get(key2) : void 0;
        };
        DoubleKeyMap2.prototype.delete = function(_a) {
          var key1 = _a.key1, key2 = _a.key2;
          var innerMap = this.Ne.get(key1);
          if (!innerMap) {
            return;
          }
          innerMap.delete(key2);
          if (innerMap.size === 0) {
            this.Ne.delete(key1);
          }
        };
        return DoubleKeyMap2;
      }()
    );
    exports.DoubleKeyMap = DoubleKeyMap;
    function capitalizeFirstLetter(text) {
      if (text.length) {
        return "" + text[0].toUpperCase() + text.substr(1);
      }
      return "";
    }
    exports.capitalizeFirstLetter = capitalizeFirstLetter;
  }
});

// node_modules/devextreme-react/core/template-wrapper.js
var require_template_wrapper = __commonJS({
  "node_modules/devextreme-react/core/template-wrapper.js"(exports) {
    "use strict";
    var __extends = exports && exports.vc || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TemplateWrapper = void 0;
    var events = require_events();
    var React3 = require_react();
    var ReactDOM3 = require_react_dom();
    var component_base_1 = require_component_base();
    var removalListenerStyle = { display: "none" };
    var TableNodeNames;
    (function(TableNodeNames2) {
      TableNodeNames2["TABLE"] = "tbody";
      TableNodeNames2["TBODY"] = "tr";
    })(TableNodeNames || (TableNodeNames = {}));
    var TemplateWrapper = (
      /** @class */
      function(_super) {
        __extends(TemplateWrapper2, _super);
        function TemplateWrapper2(props) {
          var _this = _super.call(this, props) || this;
          _this.vp = React3.createRef();
          _this.state = { removalListenerRequired: false };
          _this.Sg = _this.Sg.bind(_this);
          _this.getPreviousSiblingNode = _this.getPreviousSiblingNode.bind(_this);
          return _this;
        }
        TemplateWrapper2.prototype.componentDidMount = function() {
          var _a, _b;
          this.wp();
          (_b = (_a = this.props).onDidMount) === null || _b === void 0 ? void 0 : _b.call(_a);
        };
        TemplateWrapper2.prototype.componentDidUpdate = function() {
          this.wp();
        };
        TemplateWrapper2.prototype.componentWillUnmount = function() {
          var node = this.element;
          var hiddenNode = this.hiddenElement;
          var container = this.props.container;
          if (node) {
            container.appendChild(node);
          }
          if (hiddenNode) {
            container.appendChild(hiddenNode);
          }
          if (this.Aj) {
            container.appendChild(this.Aj);
          }
        };
        Object.defineProperty(TemplateWrapper2.prototype, "_listenerElement", {
          get: function() {
            return this.vp.current;
          },
          enumerable: false,
          configurable: true
        });
        TemplateWrapper2.prototype.getPreviousSiblingNode = function(node) {
          this.hiddenElement = node;
          this.element = node === null || node === void 0 ? void 0 : node.previousSibling;
        };
        TemplateWrapper2.prototype.wp = function() {
          var node = this.element;
          var removalListenerRequired = this.state.removalListenerRequired;
          if (node && node.nodeType === Node.ELEMENT_NODE) {
            this.xp(node);
            return;
          }
          if (!removalListenerRequired) {
            this.setState({ removalListenerRequired: true });
            return;
          }
          if (this.Aj) {
            this.xp(this.Aj);
          }
        };
        TemplateWrapper2.prototype.xp = function(element) {
          events.off(element, component_base_1.DX_REMOVE_EVENT, this.Sg);
          events.one(element, component_base_1.DX_REMOVE_EVENT, this.Sg);
        };
        TemplateWrapper2.prototype.Sg = function() {
          var onRemoved = this.props.onRemoved;
          onRemoved();
        };
        TemplateWrapper2.prototype.render = function() {
          var removalListenerRequired = this.state.removalListenerRequired;
          var _a = this.props, content = _a.content, container = _a.container;
          var removalListener = removalListenerRequired ? React3.createElement("span", { style: removalListenerStyle, ref: this.vp }) : void 0;
          var nodeName = TableNodeNames[container.nodeName] || "div";
          return ReactDOM3.createPortal(React3.createElement(React3.Fragment, null, content, content && React3.createElement(nodeName, { style: { display: "none" }, ref: this.getPreviousSiblingNode }), removalListener), container);
        };
        return TemplateWrapper2;
      }(React3.PureComponent)
    );
    exports.TemplateWrapper = TemplateWrapper;
  }
});

// node_modules/devextreme-react/core/dx-template.js
var require_dx_template = __commonJS({
  "node_modules/devextreme-react/core/dx-template.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createDxTemplate = void 0;
    var React3 = require_react();
    var events = require_events();
    var helpers_1 = require_helpers2();
    var template_wrapper_1 = require_template_wrapper();
    var component_base_1 = require_component_base();
    function unwrapElement(element) {
      return element.get ? element.get(0) : element;
    }
    function createDxTemplate(createContentProvider, templatesStore, keyFn) {
      var renderedTemplates = new helpers_1.DoubleKeyMap();
      return {
        render: function(data) {
          var container = unwrapElement(data.container);
          var key = { key1: data.model, key2: container };
          var prevTemplateId = renderedTemplates.get(key);
          var templateId;
          var onRemoved = function() {
            templatesStore.setDeferredRemove(templateId, true);
            renderedTemplates.delete(key);
          };
          var _subscribeOnContainerRemoval = function() {
            if (container.nodeType === Node.ELEMENT_NODE) {
              events.one(container, component_base_1.DX_REMOVE_EVENT, onRemoved);
            }
          };
          var _unsubscribeOnContainerRemoval = function() {
            if (container.nodeType === Node.ELEMENT_NODE) {
              events.off(container, component_base_1.DX_REMOVE_EVENT, onRemoved);
            }
          };
          if (prevTemplateId) {
            templateId = prevTemplateId;
          } else {
            templateId = keyFn ? keyFn(data.model) : "__template_" + helpers_1.generateID();
            if (data.model !== void 0) {
              renderedTemplates.set(key, templateId);
            }
          }
          _subscribeOnContainerRemoval();
          templatesStore.add(templateId, function() {
            var props = {
              data: data.model,
              index: data.index
            };
            var contentProvider = createContentProvider();
            return React3.createElement(template_wrapper_1.TemplateWrapper, {
              content: contentProvider(props),
              container,
              onRemoved,
              onDidMount: function() {
                var _a;
                _unsubscribeOnContainerRemoval();
                templatesStore.setDeferredRemove(templateId, false);
                (_a = data.onRendered) === null || _a === void 0 ? void 0 : _a.call(data);
              },
              key: templateId
            });
          });
          return container;
        }
      };
    }
    exports.createDxTemplate = createDxTemplate;
  }
});

// node_modules/devextreme-react/core/templates-manager.js
var require_templates_manager = __commonJS({
  "node_modules/devextreme-react/core/templates-manager.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var React3 = require_react();
    var config_1 = require_config2();
    var dx_template_1 = require_dx_template();
    function normalizeProps(props) {
      if (config_1.getOption("useLegacyTemplateEngine")) {
        var model = props.data;
        if (model && Object.prototype.hasOwnProperty.call(model, "key")) {
          model.dxkey = model.key;
        }
        return model;
      }
      return props;
    }
    var contentCreators = {
      component: function(contentGetter) {
        return function(props) {
          props = normalizeProps(props);
          return React3.createElement.bind(null, contentGetter())(props);
        };
      },
      render: function(contentGetter) {
        return function(props) {
          normalizeProps(props);
          return contentGetter()(props.data, props.index);
        };
      },
      children: function(contentGetter) {
        return function() {
          return contentGetter();
        };
      }
    };
    var TemplatesManager = (
      /** @class */
      function() {
        function TemplatesManager2(templatesStore) {
          this.Ya = {};
          this.yp = {};
          this.Tg = templatesStore;
        }
        TemplatesManager2.prototype.add = function(name, template) {
          var _this = this;
          this.yp[name] = template.content;
          var contentCreator = contentCreators[template.type].bind(this, function() {
            return _this.yp[name];
          });
          this.Ya[name] = dx_template_1.createDxTemplate(contentCreator, this.Tg, template.keyFn);
        };
        Object.defineProperty(TemplatesManager2.prototype, "templatesCount", {
          get: function() {
            return Object.keys(this.Ya).length;
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(TemplatesManager2.prototype, "templates", {
          get: function() {
            return this.Ya;
          },
          enumerable: false,
          configurable: true
        });
        return TemplatesManager2;
      }()
    );
    exports.default = TemplatesManager;
  }
});

// node_modules/devextreme-react/core/templates-renderer.js
var require_templates_renderer = __commonJS({
  "node_modules/devextreme-react/core/templates-renderer.js"(exports) {
    "use strict";
    var __extends = exports && exports.vc || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TemplatesRenderer = void 0;
    var frame_1 = require_frame();
    var common_1 = require_common();
    var React3 = require_react();
    var TemplatesRenderer = (
      /** @class */
      function(_super) {
        __extends(TemplatesRenderer2, _super);
        function TemplatesRenderer2() {
          var _this = _super !== null && _super.apply(this, arguments) || this;
          _this.updateScheduled = false;
          _this.mounted = false;
          _this.shouldRepeatForceUpdate = false;
          _this.isUpdateFuncLaunched = false;
          return _this;
        }
        TemplatesRenderer2.prototype.componentDidMount = function() {
          this.mounted = true;
        };
        TemplatesRenderer2.prototype.componentWillUnmount = function() {
          this.mounted = false;
        };
        TemplatesRenderer2.prototype.scheduleUpdate = function(useDeferUpdate, onRendered) {
          var _this = this;
          if (this.updateScheduled) {
            this.shouldRepeatForceUpdate = this.isUpdateFuncLaunched;
            return;
          }
          this.updateScheduled = true;
          var updateFunc = useDeferUpdate ? common_1.deferUpdate : frame_1.requestAnimationFrame;
          updateFunc(function() {
            if (_this.mounted) {
              _this.isUpdateFuncLaunched = true;
              _this.forceUpdate(function() {
                _this.updateScheduled = false;
                onRendered === null || onRendered === void 0 ? void 0 : onRendered();
                if (_this.shouldRepeatForceUpdate) {
                  _this.shouldRepeatForceUpdate = false;
                  _this.forceUpdate();
                }
              });
            }
            _this.isUpdateFuncLaunched = false;
            _this.updateScheduled = false;
          });
        };
        TemplatesRenderer2.prototype.render = function() {
          var templatesStore = this.props.templatesStore;
          return React3.createElement(React3.Fragment, {}, templatesStore.renderWrappers());
        };
        return TemplatesRenderer2;
      }(React3.PureComponent)
    );
    exports.TemplatesRenderer = TemplatesRenderer;
  }
});

// node_modules/devextreme-react/core/templates-store.js
var require_templates_store = __commonJS({
  "node_modules/devextreme-react/core/templates-store.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TemplatesStore = void 0;
    var TemplatesStore = (
      /** @class */
      function() {
        function TemplatesStore2(onTemplateAdded) {
          this.Ya = {};
          this.Tx = onTemplateAdded;
        }
        TemplatesStore2.prototype.add = function(templateId, templateFunc) {
          this.Ya[templateId] = { template: templateFunc, isDeferredRemove: false };
          this.Tx();
        };
        TemplatesStore2.prototype.setDeferredRemove = function(templateId, isDeferredRemove) {
          if (this.Ya[templateId]) {
            this.Ya[templateId].isDeferredRemove = isDeferredRemove;
          }
        };
        TemplatesStore2.prototype.removeDefferedTemplate = function() {
          var _this = this;
          Object.entries(this.Ya).filter(function(_a) {
            var templateInfo = _a[1];
            return templateInfo.isDeferredRemove;
          }).forEach(function(_a) {
            var templateId = _a[0];
            delete _this.Ya[templateId];
          });
        };
        TemplatesStore2.prototype.renderWrappers = function() {
          var _this = this;
          this.removeDefferedTemplate();
          return Object.getOwnPropertyNames(this.Ya).map(function(templateId) {
            return _this.Ya[templateId].template();
          });
        };
        return TemplatesStore2;
      }()
    );
    exports.TemplatesStore = TemplatesStore;
  }
});

// node_modules/devextreme-react/core/configuration/utils.js
var require_utils7 = __commonJS({
  "node_modules/devextreme-react/core/configuration/utils.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.shallowEquals = exports.isIE = exports.parseOptionName = exports.mergeNameParts = void 0;
    function mergeNameParts() {
      var args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
      }
      return args.filter(function(value) {
        return value;
      }).join(".");
    }
    exports.mergeNameParts = mergeNameParts;
    function parseOptionName(name) {
      var parts = name.split("[");
      if (parts.length === 1) {
        return {
          isCollectionItem: false,
          name
        };
      }
      return {
        isCollectionItem: true,
        name: parts[0],
        index: Number(parts[1].slice(0, -1))
      };
    }
    exports.parseOptionName = parseOptionName;
    var isIE = function() {
      var _a, _b;
      var ua = (_b = (_a = window === null || window === void 0 ? void 0 : window.navigator) === null || _a === void 0 ? void 0 : _a.userAgent) !== null && _b !== void 0 ? _b : "";
      var msie = ua.indexOf("MSIE");
      var trident = ua.indexOf("Trident/");
      return msie > 0 || trident > 0;
    };
    exports.isIE = isIE;
    var shallowEquals = function(first, second) {
      if (Object.keys(first).length !== Object.keys(second).length) {
        return false;
      }
      return Object.keys(first).every(function(key) {
        return first[key] === second[key];
      });
    };
    exports.shallowEquals = shallowEquals;
  }
});

// node_modules/devextreme-react/core/configuration/tree.js
var require_tree = __commonJS({
  "node_modules/devextreme-react/core/configuration/tree.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.findValueInObject = exports.findValue = exports.buildTemplates = exports.buildNode = exports.buildConfig = exports.ValueType = void 0;
    var utils_1 = require_utils7();
    function buildTemplates(node, optionsAccum, templatesAccum) {
      node.templates.forEach(function(template) {
        if (template.isAnonymous) {
          var templateName = utils_1.mergeNameParts(node.fullName, template.optionName);
          optionsAccum[template.optionName] = templateName;
          templatesAccum[templateName] = template;
        } else {
          templatesAccum[template.optionName] = template;
        }
      });
    }
    exports.buildTemplates = buildTemplates;
    function buildNode(node, templatesAccum, ignoreInitialValues) {
      var result = {};
      Object.keys(node.predefinedOptions).forEach(function(key) {
        result[key] = node.predefinedOptions[key];
      });
      Object.keys(node.configs).forEach(function(key) {
        result[key] = buildNode(node.configs[key], templatesAccum, ignoreInitialValues);
      });
      Object.keys(node.configCollections).forEach(function(key) {
        result[key] = node.configCollections[key].map(function(item) {
          return buildNode(item, templatesAccum, ignoreInitialValues);
        });
      });
      if (!ignoreInitialValues) {
        Object.keys(node.initialOptions).forEach(function(key) {
          result[key] = node.initialOptions[key];
        });
      }
      Object.keys(node.options).forEach(function(key) {
        result[key] = node.options[key];
      });
      buildTemplates(node, result, templatesAccum);
      return result;
    }
    exports.buildNode = buildNode;
    function buildConfig(root, ignoreInitialValues) {
      var templatesAccum = {};
      var options = buildNode(root, templatesAccum, ignoreInitialValues);
      return {
        templates: templatesAccum,
        options
      };
    }
    exports.buildConfig = buildConfig;
    var ValueType;
    (function(ValueType2) {
      ValueType2[ValueType2["Simple"] = 0] = "Simple";
      ValueType2[ValueType2["Complex"] = 1] = "Complex";
      ValueType2[ValueType2["Array"] = 2] = "Array";
    })(ValueType || (ValueType = {}));
    exports.ValueType = ValueType;
    function findValueInObject(obj, path) {
      var key = path.shift();
      if (!key) {
        return {
          value: obj,
          type: ValueType.Simple
        };
      }
      if (obj instanceof Object && Object.keys(obj).includes(key)) {
        return findValueInObject(obj[key], path);
      }
      return void 0;
    }
    exports.findValueInObject = findValueInObject;
    function findValue(node, path) {
      var name = path.shift();
      if (!name) {
        return {
          value: buildConfig(node, true).options,
          type: ValueType.Complex
        };
      }
      var optionInfo = utils_1.parseOptionName(name);
      if (optionInfo.name in node.options) {
        var options = optionInfo.isCollectionItem ? node.options[optionInfo.name][optionInfo.index] : node.options[optionInfo.name];
        return findValueInObject(options, path);
      }
      if (optionInfo.isCollectionItem) {
        var collection = node.configCollections[optionInfo.name];
        if (!collection) {
          return void 0;
        }
        var item = collection[optionInfo.index];
        if (!item) {
          return void 0;
        }
        return findValue(item, path);
      }
      var child = node.configs[optionInfo.name];
      if (child) {
        return findValue(child, path);
      }
      var childCollection = node.configCollections[optionInfo.name];
      if (childCollection) {
        if (path.length !== 0) {
          return void 0;
        }
        return {
          value: childCollection.map(function(item2) {
            return buildNode(item2, {}, true);
          }),
          type: ValueType.Array
        };
      }
      return void 0;
    }
    exports.findValue = findValue;
  }
});

// node_modules/devextreme-react/core/configuration/comparer.js
var require_comparer = __commonJS({
  "node_modules/devextreme-react/core/configuration/comparer.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getChanges = void 0;
    var tree_1 = require_tree();
    var utils_1 = require_utils7();
    function compareTemplates(current, prev, changesAccum) {
      var currentTemplatesOptions = {};
      var currentTemplates = {};
      var prevTemplatesOptions = {};
      var prevTemplates = {};
      tree_1.buildTemplates(current, currentTemplatesOptions, currentTemplates);
      tree_1.buildTemplates(prev, prevTemplatesOptions, prevTemplates);
      changesAccum.addRemovedValues(currentTemplatesOptions, prevTemplatesOptions, current.fullName);
      Object.keys(currentTemplatesOptions).forEach(function(key) {
        if (currentTemplatesOptions[key] === prevTemplatesOptions[key]) {
          return;
        }
        changesAccum.options[utils_1.mergeNameParts(current.fullName, key)] = currentTemplatesOptions[key];
      });
      Object.keys(currentTemplates).forEach(function(key) {
        var currentTemplate = currentTemplates[key];
        var prevTemplate = prevTemplates[key];
        if (prevTemplate && currentTemplate.content === prevTemplate.content) {
          return;
        }
        changesAccum.templates[key] = currentTemplate;
      });
    }
    function compare(current, prev, changesAccum) {
      if (!prev) {
        changesAccum.options[current.fullName] = tree_1.buildNode(current, changesAccum.templates, true);
        return;
      }
      changesAccum.addRemovedValues(current.options, prev.options, current.fullName);
      changesAccum.addRemovedValues(current.configCollections, prev.configCollections, current.fullName);
      changesAccum.addRemovedValues(current.configs, prev.configs, current.fullName);
      compareCollections(current, prev, changesAccum);
      Object.keys(current.configs).forEach(function(key) {
        compare(current.configs[key], prev.configs[key], changesAccum);
      });
      Object.keys(current.options).forEach(function(key) {
        if (current.options[key] === prev.options[key]) {
          return;
        }
        changesAccum.options[utils_1.mergeNameParts(current.fullName, key)] = current.options[key];
      });
      compareTemplates(current, prev, changesAccum);
    }
    function appendRemovedValues(current, prev, path, changesAccum) {
      var removedKeys = Object.keys(prev).filter(function(key) {
        return Object.keys(current).indexOf(key) < 0;
      });
      removedKeys.forEach(function(key) {
        changesAccum.push(utils_1.mergeNameParts(path, key));
      });
    }
    function getChanges(current, prev) {
      var changesAccum = {
        options: {},
        removedOptions: [],
        templates: {},
        addRemovedValues: function(currentOptions, prevOptions, path) {
          appendRemovedValues(currentOptions, prevOptions, path, this.removedOptions);
        }
      };
      compare(current, prev, changesAccum);
      return changesAccum;
    }
    exports.getChanges = getChanges;
    function compareCollections(current, prev, changesAccum) {
      Object.keys(current.configCollections).forEach(function(key) {
        var currentCollection = current.configCollections[key];
        var prevCollection = prev.configCollections[key] || [];
        if (!currentCollection || currentCollection.length !== prevCollection.length) {
          var updatedCollection_1 = [];
          currentCollection.forEach(function(item) {
            var config = tree_1.buildNode(item, changesAccum.templates, true);
            updatedCollection_1.push(config);
          });
          changesAccum.options[utils_1.mergeNameParts(current.fullName, key)] = updatedCollection_1;
          return;
        }
        for (var i = 0; i < currentCollection.length; i += 1) {
          compare(currentCollection[i], prevCollection[i], changesAccum);
        }
      });
    }
  }
});

// node_modules/devextreme-react/core/options-manager.js
var require_options_manager = __commonJS({
  "node_modules/devextreme-react/core/options-manager.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.OptionsManager = exports.scheduleGuards = exports.unscheduleGuards = void 0;
    var comparer_1 = require_comparer();
    var tree_1 = require_tree();
    var utils_1 = require_utils7();
    var helpers_1 = require_helpers2();
    var optionsManagers = /* @__PURE__ */ new Set();
    var guardTimeoutHandler = -1;
    function unscheduleGuards() {
      clearTimeout(guardTimeoutHandler);
    }
    exports.unscheduleGuards = unscheduleGuards;
    function scheduleGuards() {
      unscheduleGuards();
      guardTimeoutHandler = window.setTimeout(function() {
        optionsManagers.forEach(function(optionManager) {
          return optionManager.execGuards();
        });
      });
    }
    exports.scheduleGuards = scheduleGuards;
    var OptionsManager = (
      /** @class */
      function() {
        function OptionsManager2(templatesManager) {
          this.guards = {};
          this.isUpdating = false;
          this.templatesManager = templatesManager;
          optionsManagers.add(this);
          this.onOptionChanged = this.onOptionChanged.bind(this);
          this.wrapOptionValue = this.wrapOptionValue.bind(this);
        }
        OptionsManager2.prototype.setInstance = function(instance, config, subscribableOptions, independentEvents) {
          this.instance = instance;
          this.currentConfig = config;
          this.subscribableOptions = new Set(subscribableOptions);
          this.independentEvents = new Set(independentEvents);
        };
        OptionsManager2.prototype.getInitialOptions = function(rootNode) {
          var _this = this;
          var config = tree_1.buildConfig(rootNode, false);
          Object.keys(config.templates).forEach(function(key) {
            _this.templatesManager.add(key, config.templates[key]);
          });
          var options = {};
          Object.keys(config.options).forEach(function(key) {
            options[key] = _this.wrapOptionValue(key, config.options[key]);
          });
          if (this.templatesManager.templatesCount > 0) {
            options.integrationOptions = {
              templates: this.templatesManager.templates
            };
          }
          return options;
        };
        OptionsManager2.prototype.update = function(config) {
          var _this = this;
          var changedOptions = [];
          var optionChangedHandler = function(_a) {
            var value = _a.value, fullName = _a.fullName;
            changedOptions.push([fullName, value]);
          };
          this.instance.on("optionChanged", optionChangedHandler);
          var changes = comparer_1.getChanges(config, this.currentConfig);
          if (!changes.options && !changes.templates && !changes.removedOptions.length) {
            return;
          }
          this.instance.beginUpdate();
          this.isUpdating = true;
          changes.removedOptions.forEach(function(optionName) {
            _this.resetOption(optionName);
          });
          Object.keys(changes.templates).forEach(function(key) {
            _this.templatesManager.add(key, changes.templates[key]);
          });
          if (this.templatesManager.templatesCount > 0) {
            this.setValue("integrationOptions", {
              templates: this.templatesManager.templates
            });
          }
          Object.keys(changes.options).forEach(function(key) {
            _this.setValue(key, changes.options[key]);
          });
          this.isUpdating = false;
          this.instance.off("optionChanged", optionChangedHandler);
          this.currentConfig = config;
          changedOptions.forEach(function(_a) {
            var name = _a[0], value = _a[1];
            var currentPropValue = config.options[name];
            if (Object.prototype.hasOwnProperty.call(config.options, name) && currentPropValue !== value) {
              _this.setValue(name, currentPropValue);
            }
          });
          this.instance.endUpdate();
        };
        OptionsManager2.prototype.onOptionChanged = function(e) {
          var _this = this;
          var _a;
          if (this.isUpdating) {
            return;
          }
          var valueDescriptor = tree_1.findValue(this.currentConfig, e.fullName.split("."));
          if (!valueDescriptor || valueDescriptor.value !== e.value) {
            this.callOptionChangeHandler(e.fullName, e.value);
          }
          valueDescriptor = tree_1.findValue(this.currentConfig, e.fullName.split("."));
          if (!valueDescriptor) {
            return;
          }
          var value = valueDescriptor.value, type = valueDescriptor.type;
          if (value instanceof Array && type === tree_1.ValueType.Array) {
            for (var i = 0; i < value.length; i += 1) {
              if (value[i] !== ((_a = e.value) === null || _a === void 0 ? void 0 : _a[i])) {
                this.addGuard(e.fullName, value);
                return;
              }
            }
          } else if (type === tree_1.ValueType.Complex && value instanceof Object) {
            Object.keys(value).forEach(function(key) {
              var _a2;
              if (value[key] === ((_a2 = e.value) === null || _a2 === void 0 ? void 0 : _a2[key])) {
                return;
              }
              _this.addGuard(utils_1.mergeNameParts(e.fullName, key), value[key]);
            });
          } else {
            var valuesAreEqual = value === e.value;
            var valuesAreEqualObjects = !valuesAreEqual && value instanceof Object && e.value instanceof Object && utils_1.shallowEquals(value, e.value);
            if (valuesAreEqual || valuesAreEqualObjects || this.instance.skipOptionsRollBack) {
              return;
            }
            this.addGuard(e.fullName, value);
          }
        };
        OptionsManager2.prototype.dispose = function() {
          var _this = this;
          optionsManagers.delete(this);
          Object.keys(this.guards).forEach(function(optionName) {
            delete _this.guards[optionName];
          });
        };
        OptionsManager2.prototype.isOptionSubscribable = function(optionName) {
          return this.subscribableOptions.has(optionName);
        };
        OptionsManager2.prototype.isIndependentEvent = function(optionName) {
          return this.independentEvents.has(optionName);
        };
        OptionsManager2.prototype.callOptionChangeHandler = function(optionName, optionValue) {
          if (!this.isOptionSubscribable(optionName)) {
            return;
          }
          var parts = optionName.split(".");
          var propName = parts[parts.length - 1];
          if (propName.startsWith("on")) {
            return;
          }
          var eventName = "on" + helpers_1.capitalizeFirstLetter(propName) + "Change";
          parts[parts.length - 1] = eventName;
          var changeEvent = tree_1.findValue(this.currentConfig, parts);
          if (!changeEvent) {
            return;
          }
          if (typeof changeEvent.value !== "function") {
            throw new Error("Invalid value for the " + eventName + " property.\n                " + eventName + " must be a function.");
          }
          changeEvent.value(optionValue);
        };
        OptionsManager2.prototype.wrapOptionValue = function(name, value) {
          var _this = this;
          if (name.substr(0, 2) === "on" && typeof value === "function") {
            return function() {
              var args = [];
              for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
              }
              if (!_this.isUpdating || _this.isIndependentEvent(name)) {
                value.apply(void 0, args);
              }
            };
          }
          return value;
        };
        OptionsManager2.prototype.addGuard = function(optionName, optionValue) {
          var _this = this;
          if (this.guards[optionName] !== void 0) {
            return;
          }
          var handler = function() {
            _this.setValue(optionName, optionValue);
            delete _this.guards[optionName];
          };
          this.guards[optionName] = handler;
          scheduleGuards();
        };
        OptionsManager2.prototype.execGuards = function() {
          Object.values(this.guards).forEach(function(handler) {
            return handler();
          });
        };
        OptionsManager2.prototype.resetOption = function(name) {
          this.instance.resetOption(name);
        };
        OptionsManager2.prototype.setValue = function(name, value) {
          if (this.guards[name]) {
            delete this.guards[name];
          }
          this.instance.option(name, this.wrapOptionValue(name, value));
        };
        return OptionsManager2;
      }()
    );
    exports.OptionsManager = OptionsManager;
  }
});

// node_modules/devextreme-react/core/widget-config.js
var require_widget_config = __commonJS({
  "node_modules/devextreme-react/core/widget-config.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.separateProps = exports.getClassName = exports.elementPropNames = void 0;
    var elementPropNames = ["style", "id"];
    exports.elementPropNames = elementPropNames;
    var classNamePropName = "className";
    function isIgnoredProp(name) {
      return name === "children" || name === classNamePropName || elementPropNames.indexOf(name) > -1;
    }
    function separateProps(props, defaultsProps, templateProps) {
      templateProps = templateProps || [];
      var defaults = {};
      var options = {};
      var templates = {};
      var knownTemplates = {};
      templateProps.forEach(function(value) {
        knownTemplates[value.component] = true;
        knownTemplates[value.render] = true;
      });
      Object.keys(props).forEach(function(key) {
        var defaultOptionName = defaultsProps ? defaultsProps[key] : null;
        if (isIgnoredProp(key)) {
          return;
        }
        if (defaultOptionName) {
          defaults[defaultOptionName] = props[key];
          return;
        }
        if (knownTemplates[key]) {
          templates[key] = props[key];
          return;
        }
        options[key] = props[key];
      });
      return { options, defaults, templates };
    }
    exports.separateProps = separateProps;
    function getClassName(props) {
      return props[classNamePropName];
    }
    exports.getClassName = getClassName;
  }
});

// node_modules/devextreme-react/core/template.js
var require_template2 = __commonJS({
  "node_modules/devextreme-react/core/template.js"(exports) {
    "use strict";
    var __extends = exports && exports.vc || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.findProps = exports.Template = void 0;
    var PropTypes = require_prop_types();
    var React3 = require_react();
    var Template = (
      /** @class */
      function(_super) {
        __extends(Template2, _super);
        function Template2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        Template2.prototype.render = function() {
          return null;
        };
        return Template2;
      }(React3.PureComponent)
    );
    exports.Template = Template;
    var requiredPropsCheck = function(props) {
      if (!props.component && !props.render && !props.children) {
        return new Error("The Template component requires 'component' or 'render' property");
      }
      return null;
    };
    Template.propTypes = {
      name: PropTypes.string.isRequired,
      component: requiredPropsCheck,
      render: requiredPropsCheck,
      children: requiredPropsCheck
    };
    function findProps(child) {
      if (child.type !== Template) {
        return void 0;
      }
      return {
        name: child.props.name,
        render: child.props.render,
        component: child.props.component,
        children: child.props.children,
        keyFn: child.props.keyFn
      };
    }
    exports.findProps = findProps;
  }
});

// node_modules/devextreme-react/core/configuration/react/element.js
var require_element2 = __commonJS({
  "node_modules/devextreme-react/core/configuration/react/element.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ElementType = exports.getElementInfo = void 0;
    var template_1 = require_template2();
    var ElementType;
    (function(ElementType2) {
      ElementType2[ElementType2["Option"] = 0] = "Option";
      ElementType2[ElementType2["Template"] = 1] = "Template";
      ElementType2[ElementType2["Unknown"] = 2] = "Unknown";
    })(ElementType || (ElementType = {}));
    exports.ElementType = ElementType;
    function getElementInfo(element, parentExpectedChildren) {
      var reactElement = element;
      if (!reactElement || !reactElement.type) {
        return {
          type: ElementType.Unknown
        };
      }
      if (reactElement.type === template_1.Template) {
        return {
          type: ElementType.Template,
          props: reactElement.props
        };
      }
      var elementDescriptor = reactElement.type;
      if (elementDescriptor.OptionName) {
        var name_1 = elementDescriptor.OptionName;
        var isCollectionItem = elementDescriptor.IsCollectionItem;
        var expectation = parentExpectedChildren && parentExpectedChildren[name_1];
        if (expectation) {
          isCollectionItem = expectation.isCollectionItem;
          if (expectation.optionName) {
            name_1 = expectation.optionName;
          }
        }
        return {
          type: ElementType.Option,
          descriptor: {
            name: name_1,
            isCollection: isCollectionItem,
            templates: elementDescriptor.TemplateProps || [],
            initialValuesProps: elementDescriptor.DefaultsProps || {},
            predefinedValuesProps: elementDescriptor.PredefinedProps || {},
            expectedChildren: elementDescriptor.ExpectedChildren || {}
          },
          props: reactElement.props
        };
      }
      return {
        type: ElementType.Unknown
      };
    }
    exports.getElementInfo = getElementInfo;
  }
});

// node_modules/devextreme-react/core/configuration/react/templates.js
var require_templates = __commonJS({
  "node_modules/devextreme-react/core/configuration/react/templates.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getNamedTemplate = exports.getAnonymousTemplate = void 0;
    function getAnonymousTemplate(props, templateMeta, hasTranscludedContent) {
      if (templateMeta.tmplOption === "template" && hasTranscludedContent) {
        return {
          optionName: templateMeta.tmplOption,
          isAnonymous: true,
          type: "children",
          content: props.children,
          keyFn: props[templateMeta.keyFn]
        };
      }
      if (props[templateMeta.render]) {
        return {
          optionName: templateMeta.tmplOption,
          isAnonymous: true,
          type: "render",
          content: props[templateMeta.render],
          keyFn: props[templateMeta.keyFn]
        };
      }
      if (props[templateMeta.component]) {
        return {
          optionName: templateMeta.tmplOption,
          isAnonymous: true,
          type: "component",
          content: props[templateMeta.component],
          keyFn: props[templateMeta.keyFn]
        };
      }
      return null;
    }
    exports.getAnonymousTemplate = getAnonymousTemplate;
    function getNamedTemplate(props) {
      if (!props.name) {
        return null;
      }
      if (props.component) {
        return {
          optionName: props.name,
          isAnonymous: false,
          type: "component",
          content: props.component,
          keyFn: props.keyFn
        };
      }
      if (props.render) {
        return {
          optionName: props.name,
          isAnonymous: false,
          type: "render",
          content: props.render,
          keyFn: props.keyFn
        };
      }
      return {
        optionName: props.name,
        isAnonymous: false,
        type: "children",
        content: props.children,
        keyFn: props.keyFn
      };
    }
    exports.getNamedTemplate = getNamedTemplate;
  }
});

// node_modules/devextreme-react/core/configuration/react/tree.js
var require_tree2 = __commonJS({
  "node_modules/devextreme-react/core/configuration/react/tree.js"(exports) {
    "use strict";
    var __assign = exports && exports.tp || function() {
      __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign.apply(this, arguments);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.buildConfigTree = exports.processChildren = void 0;
    var React3 = require_react();
    var widget_config_1 = require_widget_config();
    var element_1 = require_element2();
    var utils_1 = require_utils7();
    var templates_1 = require_templates();
    function processChildren(parentElement, parentFullName) {
      var templates = [];
      var configCollections = {};
      var configs = {};
      var hasTranscludedContent = false;
      React3.Children.map(parentElement.props.children, function(child) {
        var element = element_1.getElementInfo(child, parentElement.descriptor.expectedChildren);
        if (element.type === element_1.ElementType.Unknown) {
          if (child !== null && child !== void 0 && child !== false) {
            hasTranscludedContent = true;
          }
          return;
        }
        if (element.type === element_1.ElementType.Template) {
          var template = templates_1.getNamedTemplate(element.props);
          if (template) {
            templates.push(template);
          }
          return;
        }
        if (element.descriptor.isCollection) {
          var collection = configCollections[element.descriptor.name];
          if (!collection) {
            collection = [];
            configCollections[element.descriptor.name] = collection;
          }
          var collectionItem = createConfigNode(element, utils_1.mergeNameParts(parentFullName, element.descriptor.name) + "[" + collection.length + "]");
          collection.push(collectionItem);
          return;
        }
        var configNode = createConfigNode(element, parentFullName);
        configs[element.descriptor.name] = configNode;
      });
      return {
        configs,
        configCollections,
        templates,
        hasTranscludedContent
      };
    }
    exports.processChildren = processChildren;
    function createConfigNode(element, path) {
      var fullName = element.descriptor.isCollection ? path : utils_1.mergeNameParts(path, element.descriptor.name);
      var separatedValues = widget_config_1.separateProps(element.props, element.descriptor.initialValuesProps, element.descriptor.templates);
      var childrenData = processChildren(element, fullName);
      element.descriptor.templates.forEach(function(templateMeta) {
        var template = templates_1.getAnonymousTemplate(element.props, templateMeta, path.length > 0 ? childrenData.hasTranscludedContent : false);
        if (template) {
          childrenData.templates.push(template);
        }
      });
      return {
        fullName,
        predefinedOptions: element.descriptor.predefinedValuesProps,
        initialOptions: separatedValues.defaults,
        options: separatedValues.options,
        templates: childrenData.templates,
        configCollections: childrenData.configCollections,
        configs: childrenData.configs
      };
    }
    function buildConfigTree(widgetDescriptor, props) {
      return createConfigNode({
        type: element_1.ElementType.Option,
        descriptor: __assign({ name: "", isCollection: false }, widgetDescriptor),
        props
      }, "");
    }
    exports.buildConfigTree = buildConfigTree;
  }
});

// node_modules/devextreme-react/core/component-base.js
var require_component_base = __commonJS({
  "node_modules/devextreme-react/core/component-base.js"(exports) {
    "use strict";
    var __extends = exports && exports.vc || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __assign = exports && exports.tp || function() {
      __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign.apply(this, arguments);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DX_REMOVE_EVENT = exports.ComponentBase = void 0;
    var events = require_events();
    var React3 = require_react();
    var react_dom_1 = require_react_dom();
    var templates_manager_1 = require_templates_manager();
    var templates_renderer_1 = require_templates_renderer();
    var templates_store_1 = require_templates_store();
    var options_manager_1 = require_options_manager();
    var widget_config_1 = require_widget_config();
    var tree_1 = require_tree2();
    var utils_1 = require_utils7();
    var DX_REMOVE_EVENT = "dxremove";
    exports.DX_REMOVE_EVENT = DX_REMOVE_EVENT;
    var ComponentBase = (
      /** @class */
      function(_super) {
        __extends(ComponentBase2, _super);
        function ComponentBase2(props) {
          var _this = _super.call(this, props) || this;
          _this.isPortalComponent = false;
          _this.zp = [];
          _this.Ug = [];
          _this.useRequestAnimationFrameFlag = false;
          _this.useDeferUpdateForTemplates = false;
          _this.Bj = _this.Bj.bind(_this);
          _this.Oe = _this.Oe.bind(_this);
          _this.Tg = new templates_store_1.TemplatesStore(function() {
            if (_this.Vg) {
              _this.Vg.scheduleUpdate(_this.useDeferUpdateForTemplates);
            }
          });
          _this.Ux = new templates_manager_1.default(_this.Tg);
          _this.Pe = new options_manager_1.OptionsManager(_this.Ux);
          return _this;
        }
        ComponentBase2.displayContentsStyle = function() {
          return utils_1.isIE() ? {
            width: "100%",
            height: "100%",
            padding: 0,
            margin: 0
          } : { display: "contents" };
        };
        ComponentBase2.prototype.componentDidMount = function() {
          var _a;
          var _b;
          if ((_b = this.Ug) === null || _b === void 0 ? void 0 : _b.length) {
            (_a = this.I).append.apply(_a, this.Ug);
          } else if (this.I.childNodes.length) {
            this.Ug = Array.from(this.I.childNodes);
          }
          this.Ap(null, this.props);
        };
        ComponentBase2.prototype.componentDidUpdate = function(prevProps) {
          this.Ap(prevProps, this.props);
          var config = this.Bp();
          this.Pe.update(config);
          if (this.Vg) {
            this.Vg.scheduleUpdate(this.useDeferUpdateForTemplates, options_manager_1.scheduleGuards);
          }
          options_manager_1.unscheduleGuards();
        };
        ComponentBase2.prototype.componentWillUnmount = function() {
          var _a;
          if (this.Cd) {
            (_a = this.Ug) === null || _a === void 0 ? void 0 : _a.forEach(function(child) {
              var _a2;
              return (_a2 = child.parentNode) === null || _a2 === void 0 ? void 0 : _a2.removeChild(child);
            });
            events.triggerHandler(this.I, DX_REMOVE_EVENT);
            this.Cd.dispose();
          }
          this.Pe.dispose();
        };
        ComponentBase2.prototype.Oe = function(element) {
          element = element || this.I;
          var config = this.Bp();
          this.Cd = new this.Vx(element, __assign({ templatesRenderAsynchronously: true }, this.Pe.getInitialOptions(config)));
          if (!this.useRequestAnimationFrameFlag) {
            this.useDeferUpdateForTemplates = this.Cd.option("integrationOptions.useDeferUpdateForTemplates");
          }
          this.Pe.setInstance(this.Cd, config, this.subscribableOptions, this.independentEvents);
          this.Cd.on("optionChanged", this.Pe.onOptionChanged);
        };
        ComponentBase2.prototype.Bp = function() {
          return tree_1.buildConfigTree({
            templates: this.zp,
            initialValuesProps: this.Wx,
            predefinedValuesProps: {},
            expectedChildren: this.Xx
          }, this.props);
        };
        ComponentBase2.prototype.Bj = function(instance) {
          this.Vg = instance;
        };
        ComponentBase2.prototype.Yx = function() {
          var _this = this;
          var elementProps = {
            ref: function(element) {
              _this.I = element;
            }
          };
          widget_config_1.elementPropNames.forEach(function(name) {
            var props = _this.props;
            if (name in props) {
              elementProps[name] = props[name];
            }
          });
          return elementProps;
        };
        ComponentBase2.prototype.Ap = function(prevProps, newProps) {
          var _a, _b;
          var prevClassName = prevProps ? widget_config_1.getClassName(prevProps) : void 0;
          var newClassName = widget_config_1.getClassName(newProps);
          if (prevClassName === newClassName) {
            return;
          }
          if (prevClassName) {
            var classNames = prevClassName.split(" ").filter(function(c) {
              return c;
            });
            if (classNames.length) {
              (_a = this.I.classList).remove.apply(_a, classNames);
            }
          }
          if (newClassName) {
            var classNames = newClassName.split(" ").filter(function(c) {
              return c;
            });
            if (classNames.length) {
              (_b = this.I.classList).add.apply(_b, classNames);
            }
          }
        };
        ComponentBase2.prototype.renderChildren = function() {
          var children = this.props.children;
          return children;
        };
        ComponentBase2.prototype.renderContent = function() {
          var _this = this;
          var children = this.props.children;
          return this.isPortalComponent && children ? React3.createElement("div", {
            ref: function(node) {
              if (node && _this.portalContainer !== node) {
                _this.portalContainer = node;
                _this.forceUpdate();
              }
            },
            style: ComponentBase2.displayContentsStyle()
          }) : this.renderChildren();
        };
        ComponentBase2.prototype.renderPortal = function() {
          return this.portalContainer && react_dom_1.createPortal(this.renderChildren(), this.portalContainer);
        };
        ComponentBase2.prototype.render = function() {
          return React3.createElement(React3.Fragment, {}, React3.createElement("div", this.Yx(), this.renderContent(), React3.createElement(templates_renderer_1.TemplatesRenderer, {
            templatesStore: this.Tg,
            ref: this.Bj
          })), this.isPortalComponent && this.renderPortal());
        };
        return ComponentBase2;
      }(React3.PureComponent)
    );
    exports.ComponentBase = ComponentBase;
  }
});

// node_modules/devextreme-react/core/extension-component.js
var require_extension_component = __commonJS({
  "node_modules/devextreme-react/core/extension-component.js"(exports) {
    "use strict";
    var __extends = exports && exports.vc || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ExtensionComponent = void 0;
    var component_base_1 = require_component_base();
    var ExtensionComponent = (
      /** @class */
      function(_super) {
        __extends(ExtensionComponent2, _super);
        function ExtensionComponent2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtensionComponent2.prototype.componentDidMount = function() {
          var onMounted = this.props.onMounted;
          if (onMounted) {
            onMounted(this.Oe);
          } else {
            this.Oe();
          }
        };
        return ExtensionComponent2;
      }(component_base_1.ComponentBase)
    );
    exports.ExtensionComponent = ExtensionComponent;
  }
});

// node_modules/devextreme-react/core/component.js
var require_component2 = __commonJS({
  "node_modules/devextreme-react/core/component.js"(exports) {
    "use strict";
    var __extends = exports && exports.vc || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Component = void 0;
    var React3 = require_react();
    var component_base_1 = require_component_base();
    var extension_component_1 = require_extension_component();
    var Component2 = (
      /** @class */
      function(_super) {
        __extends(Component3, _super);
        function Component3(props) {
          var _this = _super.call(this, props) || this;
          _this.Cj = [];
          _this.Dj = _this.Dj.bind(_this);
          return _this;
        }
        Component3.prototype.componentDidMount = function() {
          _super.prototype.componentDidMount.call(this);
          this.Oe();
          this.Zx();
        };
        Component3.prototype.componentWillUnmount = function() {
          _super.prototype.componentWillUnmount.call(this);
          this.clearExtensions();
        };
        Component3.prototype.clearExtensions = function() {
          this.Cj = [];
        };
        Component3.prototype.renderChildren = function() {
          var _this = this;
          return React3.Children.map(this.props.children, function(child) {
            if (child && Object.prototype.isPrototypeOf.call(extension_component_1.ExtensionComponent, child.type)) {
              return React3.cloneElement(child, { onMounted: _this.Dj });
            }
            return child;
          });
        };
        Component3.prototype.Dj = function(creator) {
          this.Cj.push(creator);
        };
        Component3.prototype.Zx = function() {
          var _this = this;
          this.Cj.forEach(function(creator) {
            return creator(_this.I);
          });
        };
        return Component3;
      }(component_base_1.ComponentBase)
    );
    exports.Component = Component2;
  }
});

// node_modules/devextreme-react/core/nested-option.js
var require_nested_option = __commonJS({
  "node_modules/devextreme-react/core/nested-option.js"(exports) {
    "use strict";
    var __extends = exports && exports.vc || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    var React3 = require_react();
    var element_1 = require_element2();
    var NestedOption = (
      /** @class */
      function(_super) {
        __extends(NestedOption2, _super);
        function NestedOption2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        NestedOption2.prototype.render = function() {
          var stateChildren = this.props.children;
          var children = React3.Children.map(stateChildren, function(child) {
            var childElementInfo = element_1.getElementInfo(child);
            return childElementInfo.type === element_1.ElementType.Option ? child : null;
          });
          return React3.createElement(React3.Fragment, {}, children);
        };
        return NestedOption2;
      }(React3.PureComponent)
    );
    exports.default = NestedOption;
  }
});

// node_modules/devextreme-react/pie-chart.js
var require_pie_chart2 = __commonJS({
  "node_modules/devextreme-react/pie-chart.js"(exports) {
    "use strict";
    var __extends = exports && exports.vc || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TooltipBorder = exports.Tooltip = exports.Title = exports.Subtitle = exports.SmallValuesGrouping = exports.Size = exports.Shadow = exports.SeriesTemplate = exports.SeriesBorder = exports.Series = exports.SelectionStyle = exports.PieChartTitleSubtitle = exports.PieChartTitle = exports.Margin = exports.LoadingIndicator = exports.LegendTitleSubtitle = exports.LegendTitle = exports.Legend = exports.Label = exports.Image = exports.HoverStyle = exports.Hatching = exports.Format = exports.Font = exports.Export = exports.Connector = exports.CommonSeriesSettings = exports.CommonAnnotationSettings = exports.Color = exports.Border = exports.ArgumentFormat = exports.AnnotationBorder = exports.Annotation = exports.Animation = exports.AdaptiveLayout = exports.PieChart = void 0;
    var pie_chart_1 = require_pie_chart();
    var PropTypes = require_prop_types();
    var component_1 = require_component2();
    var nested_option_1 = require_nested_option();
    var PieChart2 = (
      /** @class */
      function(_super) {
        __extends(PieChart3, _super);
        function PieChart3() {
          var _this = _super !== null && _super.apply(this, arguments) || this;
          _this.Vx = pie_chart_1.default;
          _this.subscribableOptions = ["loadingIndicator", "loadingIndicator.show"];
          _this.independentEvents = ["onDisposing", "onDone", "onDrawn", "onExported", "onExporting", "onFileSaving", "onIncidentOccurred", "onInitialized", "onLegendClick", "onPointClick", "onTooltipHidden", "onTooltipShown"];
          _this.Wx = {
            defaultLoadingIndicator: "loadingIndicator"
          };
          _this.Xx = {
            adaptiveLayout: { optionName: "adaptiveLayout", isCollectionItem: false },
            animation: { optionName: "animation", isCollectionItem: false },
            annotation: { optionName: "annotations", isCollectionItem: true },
            commonAnnotationSettings: { optionName: "commonAnnotationSettings", isCollectionItem: false },
            commonSeriesSettings: { optionName: "commonSeriesSettings", isCollectionItem: false },
            export: { optionName: "export", isCollectionItem: false },
            legend: { optionName: "legend", isCollectionItem: false },
            loadingIndicator: { optionName: "loadingIndicator", isCollectionItem: false },
            margin: { optionName: "margin", isCollectionItem: false },
            pieChartTitle: { optionName: "title", isCollectionItem: false },
            series: { optionName: "series", isCollectionItem: true },
            seriesTemplate: { optionName: "seriesTemplate", isCollectionItem: false },
            size: { optionName: "size", isCollectionItem: false },
            title: { optionName: "title", isCollectionItem: false },
            tooltip: { optionName: "tooltip", isCollectionItem: false }
          };
          _this.zp = [{
            tmplOption: "centerTemplate",
            render: "centerRender",
            component: "centerComponent",
            keyFn: "centerKeyFn"
          }];
          return _this;
        }
        Object.defineProperty(PieChart3.prototype, "instance", {
          get: function() {
            return this.Cd;
          },
          enumerable: false,
          configurable: true
        });
        return PieChart3;
      }(component_1.Component)
    );
    exports.PieChart = PieChart2;
    PieChart2.propTypes = {
      adaptiveLayout: PropTypes.object,
      animation: PropTypes.oneOfType([
        PropTypes.bool,
        PropTypes.object
      ]),
      annotations: PropTypes.array,
      commonAnnotationSettings: PropTypes.object,
      customizeAnnotation: PropTypes.func,
      customizeLabel: PropTypes.func,
      customizePoint: PropTypes.func,
      diameter: PropTypes.number,
      disabled: PropTypes.bool,
      elementAttr: PropTypes.object,
      export: PropTypes.object,
      innerRadius: PropTypes.number,
      legend: PropTypes.object,
      loadingIndicator: PropTypes.object,
      margin: PropTypes.object,
      minDiameter: PropTypes.number,
      onDisposing: PropTypes.func,
      onDone: PropTypes.func,
      onDrawn: PropTypes.func,
      onExported: PropTypes.func,
      onExporting: PropTypes.func,
      onFileSaving: PropTypes.func,
      onIncidentOccurred: PropTypes.func,
      onInitialized: PropTypes.func,
      onLegendClick: PropTypes.func,
      onOptionChanged: PropTypes.func,
      onPointClick: PropTypes.func,
      onPointHoverChanged: PropTypes.func,
      onPointSelectionChanged: PropTypes.func,
      onTooltipHidden: PropTypes.func,
      onTooltipShown: PropTypes.func,
      palette: PropTypes.oneOfType([
        PropTypes.array,
        PropTypes.oneOfType([
          PropTypes.string,
          PropTypes.oneOf([
            "Bright",
            "Harmony Light",
            "Ocean",
            "Pastel",
            "Soft",
            "Soft Pastel",
            "Vintage",
            "Violet",
            "Carmine",
            "Dark Moon",
            "Dark Violet",
            "Green Mist",
            "Soft Blue",
            "Material",
            "Office"
          ])
        ])
      ]),
      paletteExtensionMode: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.oneOf([
          "alternate",
          "blend",
          "extrapolate"
        ])
      ]),
      pathModified: PropTypes.bool,
      pointSelectionMode: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.oneOf([
          "single",
          "multiple"
        ])
      ]),
      redrawOnResize: PropTypes.bool,
      resolveLabelOverlapping: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.oneOf([
          "hide",
          "none",
          "shift"
        ])
      ]),
      rtlEnabled: PropTypes.bool,
      segmentsDirection: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.oneOf([
          "anticlockwise",
          "clockwise"
        ])
      ]),
      series: PropTypes.oneOfType([
        PropTypes.array,
        PropTypes.object
      ]),
      seriesTemplate: PropTypes.object,
      size: PropTypes.object,
      sizeGroup: PropTypes.string,
      startAngle: PropTypes.number,
      theme: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.oneOf([
          "generic.dark",
          "generic.light",
          "generic.contrast",
          "generic.carmine",
          "generic.darkmoon",
          "generic.darkviolet",
          "generic.greenmist",
          "generic.softblue",
          "material.blue.light",
          "material.lime.light",
          "material.orange.light",
          "material.purple.light",
          "material.teal.light"
        ])
      ]),
      title: PropTypes.oneOfType([
        PropTypes.object,
        PropTypes.string
      ]),
      tooltip: PropTypes.object,
      type: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.oneOf([
          "donut",
          "doughnut",
          "pie"
        ])
      ])
    };
    var AdaptiveLayout = (
      /** @class */
      function(_super) {
        __extends(AdaptiveLayout2, _super);
        function AdaptiveLayout2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        AdaptiveLayout2.OptionName = "adaptiveLayout";
        return AdaptiveLayout2;
      }(nested_option_1.default)
    );
    exports.AdaptiveLayout = AdaptiveLayout;
    var Animation = (
      /** @class */
      function(_super) {
        __extends(Animation2, _super);
        function Animation2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        Animation2.OptionName = "animation";
        return Animation2;
      }(nested_option_1.default)
    );
    exports.Animation = Animation;
    var Annotation = (
      /** @class */
      function(_super) {
        __extends(Annotation2, _super);
        function Annotation2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        Annotation2.OptionName = "annotations";
        Annotation2.IsCollectionItem = true;
        Annotation2.ExpectedChildren = {
          annotationBorder: { optionName: "border", isCollectionItem: false },
          border: { optionName: "border", isCollectionItem: false },
          font: { optionName: "font", isCollectionItem: false },
          image: { optionName: "image", isCollectionItem: false },
          shadow: { optionName: "shadow", isCollectionItem: false }
        };
        Annotation2.TemplateProps = [{
          tmplOption: "template",
          render: "render",
          component: "component",
          keyFn: "keyFn"
        }, {
          tmplOption: "tooltipTemplate",
          render: "tooltipRender",
          component: "tooltipComponent",
          keyFn: "tooltipKeyFn"
        }];
        return Annotation2;
      }(nested_option_1.default)
    );
    exports.Annotation = Annotation;
    var AnnotationBorder = (
      /** @class */
      function(_super) {
        __extends(AnnotationBorder2, _super);
        function AnnotationBorder2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        AnnotationBorder2.OptionName = "border";
        return AnnotationBorder2;
      }(nested_option_1.default)
    );
    exports.AnnotationBorder = AnnotationBorder;
    var ArgumentFormat = (
      /** @class */
      function(_super) {
        __extends(ArgumentFormat2, _super);
        function ArgumentFormat2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        ArgumentFormat2.OptionName = "argumentFormat";
        return ArgumentFormat2;
      }(nested_option_1.default)
    );
    exports.ArgumentFormat = ArgumentFormat;
    var Border = (
      /** @class */
      function(_super) {
        __extends(Border2, _super);
        function Border2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        Border2.OptionName = "border";
        return Border2;
      }(nested_option_1.default)
    );
    exports.Border = Border;
    var Color = (
      /** @class */
      function(_super) {
        __extends(Color2, _super);
        function Color2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        Color2.OptionName = "color";
        return Color2;
      }(nested_option_1.default)
    );
    exports.Color = Color;
    var CommonAnnotationSettings = (
      /** @class */
      function(_super) {
        __extends(CommonAnnotationSettings2, _super);
        function CommonAnnotationSettings2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        CommonAnnotationSettings2.OptionName = "commonAnnotationSettings";
        CommonAnnotationSettings2.TemplateProps = [{
          tmplOption: "template",
          render: "render",
          component: "component",
          keyFn: "keyFn"
        }, {
          tmplOption: "tooltipTemplate",
          render: "tooltipRender",
          component: "tooltipComponent",
          keyFn: "tooltipKeyFn"
        }];
        return CommonAnnotationSettings2;
      }(nested_option_1.default)
    );
    exports.CommonAnnotationSettings = CommonAnnotationSettings;
    var CommonSeriesSettings = (
      /** @class */
      function(_super) {
        __extends(CommonSeriesSettings2, _super);
        function CommonSeriesSettings2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        CommonSeriesSettings2.OptionName = "commonSeriesSettings";
        CommonSeriesSettings2.ExpectedChildren = {
          border: { optionName: "border", isCollectionItem: false },
          color: { optionName: "color", isCollectionItem: false },
          hoverStyle: { optionName: "hoverStyle", isCollectionItem: false },
          label: { optionName: "label", isCollectionItem: false },
          selectionStyle: { optionName: "selectionStyle", isCollectionItem: false },
          seriesBorder: { optionName: "border", isCollectionItem: false },
          smallValuesGrouping: { optionName: "smallValuesGrouping", isCollectionItem: false }
        };
        return CommonSeriesSettings2;
      }(nested_option_1.default)
    );
    exports.CommonSeriesSettings = CommonSeriesSettings;
    var Connector = (
      /** @class */
      function(_super) {
        __extends(Connector2, _super);
        function Connector2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        Connector2.OptionName = "connector";
        return Connector2;
      }(nested_option_1.default)
    );
    exports.Connector = Connector;
    var Export = (
      /** @class */
      function(_super) {
        __extends(Export2, _super);
        function Export2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        Export2.OptionName = "export";
        return Export2;
      }(nested_option_1.default)
    );
    exports.Export = Export;
    var Font = (
      /** @class */
      function(_super) {
        __extends(Font2, _super);
        function Font2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        Font2.OptionName = "font";
        return Font2;
      }(nested_option_1.default)
    );
    exports.Font = Font;
    var Format = (
      /** @class */
      function(_super) {
        __extends(Format2, _super);
        function Format2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        Format2.OptionName = "format";
        return Format2;
      }(nested_option_1.default)
    );
    exports.Format = Format;
    var Hatching = (
      /** @class */
      function(_super) {
        __extends(Hatching2, _super);
        function Hatching2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        Hatching2.OptionName = "hatching";
        return Hatching2;
      }(nested_option_1.default)
    );
    exports.Hatching = Hatching;
    var HoverStyle = (
      /** @class */
      function(_super) {
        __extends(HoverStyle2, _super);
        function HoverStyle2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        HoverStyle2.OptionName = "hoverStyle";
        HoverStyle2.ExpectedChildren = {
          border: { optionName: "border", isCollectionItem: false },
          color: { optionName: "color", isCollectionItem: false },
          hatching: { optionName: "hatching", isCollectionItem: false },
          seriesBorder: { optionName: "border", isCollectionItem: false }
        };
        return HoverStyle2;
      }(nested_option_1.default)
    );
    exports.HoverStyle = HoverStyle;
    var Image = (
      /** @class */
      function(_super) {
        __extends(Image2, _super);
        function Image2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        Image2.OptionName = "image";
        return Image2;
      }(nested_option_1.default)
    );
    exports.Image = Image;
    var Label = (
      /** @class */
      function(_super) {
        __extends(Label2, _super);
        function Label2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        Label2.OptionName = "label";
        Label2.ExpectedChildren = {
          argumentFormat: { optionName: "argumentFormat", isCollectionItem: false },
          border: { optionName: "border", isCollectionItem: false },
          connector: { optionName: "connector", isCollectionItem: false },
          font: { optionName: "font", isCollectionItem: false },
          format: { optionName: "format", isCollectionItem: false },
          seriesBorder: { optionName: "border", isCollectionItem: false }
        };
        return Label2;
      }(nested_option_1.default)
    );
    exports.Label = Label;
    var Legend = (
      /** @class */
      function(_super) {
        __extends(Legend2, _super);
        function Legend2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        Legend2.OptionName = "legend";
        Legend2.ExpectedChildren = {
          annotationBorder: { optionName: "border", isCollectionItem: false },
          border: { optionName: "border", isCollectionItem: false },
          font: { optionName: "font", isCollectionItem: false },
          legendTitle: { optionName: "title", isCollectionItem: false },
          margin: { optionName: "margin", isCollectionItem: false },
          title: { optionName: "title", isCollectionItem: false }
        };
        Legend2.TemplateProps = [{
          tmplOption: "markerTemplate",
          render: "markerRender",
          component: "markerComponent",
          keyFn: "markerKeyFn"
        }];
        return Legend2;
      }(nested_option_1.default)
    );
    exports.Legend = Legend;
    var LegendTitle = (
      /** @class */
      function(_super) {
        __extends(LegendTitle2, _super);
        function LegendTitle2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        LegendTitle2.OptionName = "title";
        LegendTitle2.ExpectedChildren = {
          font: { optionName: "font", isCollectionItem: false },
          legendTitleSubtitle: { optionName: "subtitle", isCollectionItem: false },
          margin: { optionName: "margin", isCollectionItem: false },
          subtitle: { optionName: "subtitle", isCollectionItem: false }
        };
        return LegendTitle2;
      }(nested_option_1.default)
    );
    exports.LegendTitle = LegendTitle;
    var LegendTitleSubtitle = (
      /** @class */
      function(_super) {
        __extends(LegendTitleSubtitle2, _super);
        function LegendTitleSubtitle2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        LegendTitleSubtitle2.OptionName = "subtitle";
        LegendTitleSubtitle2.ExpectedChildren = {
          font: { optionName: "font", isCollectionItem: false }
        };
        return LegendTitleSubtitle2;
      }(nested_option_1.default)
    );
    exports.LegendTitleSubtitle = LegendTitleSubtitle;
    var LoadingIndicator = (
      /** @class */
      function(_super) {
        __extends(LoadingIndicator2, _super);
        function LoadingIndicator2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        LoadingIndicator2.OptionName = "loadingIndicator";
        LoadingIndicator2.DefaultsProps = {
          defaultShow: "show"
        };
        LoadingIndicator2.ExpectedChildren = {
          font: { optionName: "font", isCollectionItem: false }
        };
        return LoadingIndicator2;
      }(nested_option_1.default)
    );
    exports.LoadingIndicator = LoadingIndicator;
    var Margin = (
      /** @class */
      function(_super) {
        __extends(Margin2, _super);
        function Margin2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        Margin2.OptionName = "margin";
        return Margin2;
      }(nested_option_1.default)
    );
    exports.Margin = Margin;
    var PieChartTitle = (
      /** @class */
      function(_super) {
        __extends(PieChartTitle2, _super);
        function PieChartTitle2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        PieChartTitle2.OptionName = "title";
        PieChartTitle2.ExpectedChildren = {
          font: { optionName: "font", isCollectionItem: false },
          margin: { optionName: "margin", isCollectionItem: false },
          pieChartTitleSubtitle: { optionName: "subtitle", isCollectionItem: false },
          subtitle: { optionName: "subtitle", isCollectionItem: false }
        };
        return PieChartTitle2;
      }(nested_option_1.default)
    );
    exports.PieChartTitle = PieChartTitle;
    var PieChartTitleSubtitle = (
      /** @class */
      function(_super) {
        __extends(PieChartTitleSubtitle2, _super);
        function PieChartTitleSubtitle2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        PieChartTitleSubtitle2.OptionName = "subtitle";
        PieChartTitleSubtitle2.ExpectedChildren = {
          font: { optionName: "font", isCollectionItem: false }
        };
        return PieChartTitleSubtitle2;
      }(nested_option_1.default)
    );
    exports.PieChartTitleSubtitle = PieChartTitleSubtitle;
    var SelectionStyle = (
      /** @class */
      function(_super) {
        __extends(SelectionStyle2, _super);
        function SelectionStyle2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        SelectionStyle2.OptionName = "selectionStyle";
        SelectionStyle2.ExpectedChildren = {
          border: { optionName: "border", isCollectionItem: false },
          color: { optionName: "color", isCollectionItem: false },
          hatching: { optionName: "hatching", isCollectionItem: false },
          seriesBorder: { optionName: "border", isCollectionItem: false }
        };
        return SelectionStyle2;
      }(nested_option_1.default)
    );
    exports.SelectionStyle = SelectionStyle;
    var Series2 = (
      /** @class */
      function(_super) {
        __extends(Series3, _super);
        function Series3() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        Series3.OptionName = "series";
        Series3.IsCollectionItem = true;
        return Series3;
      }(nested_option_1.default)
    );
    exports.Series = Series2;
    var SeriesBorder = (
      /** @class */
      function(_super) {
        __extends(SeriesBorder2, _super);
        function SeriesBorder2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        SeriesBorder2.OptionName = "border";
        return SeriesBorder2;
      }(nested_option_1.default)
    );
    exports.SeriesBorder = SeriesBorder;
    var SeriesTemplate = (
      /** @class */
      function(_super) {
        __extends(SeriesTemplate2, _super);
        function SeriesTemplate2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        SeriesTemplate2.OptionName = "seriesTemplate";
        return SeriesTemplate2;
      }(nested_option_1.default)
    );
    exports.SeriesTemplate = SeriesTemplate;
    var Shadow = (
      /** @class */
      function(_super) {
        __extends(Shadow2, _super);
        function Shadow2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        Shadow2.OptionName = "shadow";
        return Shadow2;
      }(nested_option_1.default)
    );
    exports.Shadow = Shadow;
    var Size = (
      /** @class */
      function(_super) {
        __extends(Size2, _super);
        function Size2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        Size2.OptionName = "size";
        return Size2;
      }(nested_option_1.default)
    );
    exports.Size = Size;
    var SmallValuesGrouping = (
      /** @class */
      function(_super) {
        __extends(SmallValuesGrouping2, _super);
        function SmallValuesGrouping2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        SmallValuesGrouping2.OptionName = "smallValuesGrouping";
        return SmallValuesGrouping2;
      }(nested_option_1.default)
    );
    exports.SmallValuesGrouping = SmallValuesGrouping;
    var Subtitle = (
      /** @class */
      function(_super) {
        __extends(Subtitle2, _super);
        function Subtitle2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        Subtitle2.OptionName = "subtitle";
        return Subtitle2;
      }(nested_option_1.default)
    );
    exports.Subtitle = Subtitle;
    var Title = (
      /** @class */
      function(_super) {
        __extends(Title2, _super);
        function Title2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        Title2.OptionName = "title";
        return Title2;
      }(nested_option_1.default)
    );
    exports.Title = Title;
    var Tooltip = (
      /** @class */
      function(_super) {
        __extends(Tooltip2, _super);
        function Tooltip2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        Tooltip2.OptionName = "tooltip";
        Tooltip2.ExpectedChildren = {
          argumentFormat: { optionName: "argumentFormat", isCollectionItem: false },
          border: { optionName: "border", isCollectionItem: false },
          font: { optionName: "font", isCollectionItem: false },
          format: { optionName: "format", isCollectionItem: false },
          shadow: { optionName: "shadow", isCollectionItem: false },
          tooltipBorder: { optionName: "border", isCollectionItem: false }
        };
        Tooltip2.TemplateProps = [{
          tmplOption: "contentTemplate",
          render: "contentRender",
          component: "contentComponent",
          keyFn: "contentKeyFn"
        }];
        return Tooltip2;
      }(nested_option_1.default)
    );
    exports.Tooltip = Tooltip;
    var TooltipBorder = (
      /** @class */
      function(_super) {
        __extends(TooltipBorder2, _super);
        function TooltipBorder2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        TooltipBorder2.OptionName = "border";
        return TooltipBorder2;
      }(nested_option_1.default)
    );
    exports.TooltipBorder = TooltipBorder;
    exports.default = PieChart2;
  }
});

// node_modules/dotvvm-jscomponent-react/dist/dotvvm-react.js
var React = __toESM(require_react());
var ReactDOM = __toESM(require_react_dom());
function getKnockoutContext(element) {
  while (element) {
    const cx = ko.contextFor(element);
    if (cx)
      return cx;
    element = element.parentElement;
  }
  throw new Error("Could not find knockout context");
}
var KnockoutTemplateReactComponent = class extends React.Component {
  constructor() {
    super(...arguments);
    this.wrapRef = React.createRef();
    this.templateName = ko.observable();
  }
  // TODO: how to dispose the template?
  // componentWillUnmount() {
  // }
  componentDidMount() {
    this.initializeTemplate();
  }
  initializeTemplate() {
    const e = this.wrapRef.current;
    let context = getKnockoutContext(e);
    if (this.props.getChildContext) {
      context = this.props.getChildContext(context);
    } else if (this.props.viewModel !== void 0) {
      const updateEvent = new dotvvm.DotvvmEvent("templateInReact.newState");
      this.viewModelStateManager = new dotvvm.StateManager(this.props.viewModel, updateEvent);
      context = context.createChildContext(this.viewModelStateManager.stateObservable);
    }
    this.updateStuff();
    ko.renderTemplate(this.templateName, context, {}, e);
  }
  componentDidUpdate() {
    this.updateStuff();
  }
  updateStuff() {
    if (this.templateName() !== this.props.templateName)
      this.templateName(this.props.templateName);
    if (this.viewModelStateManager) {
      this.viewModelStateManager.setState(this.props.viewModel);
    }
  }
  render() {
    return React.createElement(this.props.wrapperTag, Object.assign({ ref: this.wrapRef }, this.props.wrapperAttributes));
  }
};
KnockoutTemplateReactComponent.defaultProps = {
  wrapperTag: "div"
};
var registerReactControl = (ReactControl, defaultProps = {}) => ({
  create: (elm, props, commands, templates, setPropsRaw) => {
    const initialProps = Object.assign(Object.assign(Object.assign({ setProps }, defaultProps), commands), templates);
    let currentProps = Object.assign(Object.assign({}, initialProps), props);
    rerender();
    return {
      updateProps(updatedProps) {
        currentProps = Object.assign(Object.assign({}, currentProps), updatedProps);
        rerender();
      },
      dispose() {
        ReactDOM.unmountComponentAtNode(elm);
      }
    };
    function rerender() {
      ReactDOM.render(React.createElement(ReactControl, Object.assign({}, currentProps)), elm);
    }
    function setProps(updatedProps) {
      currentProps = Object.assign(Object.assign({}, currentProps), updatedProps);
      setPropsRaw(updatedProps);
      rerender();
    }
  }
});

// wwwroot/PieChart.tsx
var React2 = __toESM(require_react(), 1);
var import_pie_chart = __toESM(require_pie_chart2(), 1);
var billionaires = [
  {
    country: "China",
    amount: 1002
  },
  {
    country: "United States",
    amount: 716
  },
  {
    country: "India",
    amount: 215
  },
  {
    country: "United Kingdom",
    amount: 150
  },
  {
    country: "Germany",
    amount: 145
  }
];
function pieChart(props) {
  return /* @__PURE__ */ React2.createElement(
    import_pie_chart.PieChart,
    {
      dataSource: props.sampleData,
      type: "doughnut"
    },
    /* @__PURE__ */ React2.createElement(
      import_pie_chart.Series,
      {
        argumentField: "country",
        valueField: "amount"
      }
    )
  );
}
var PieChart_default = (context) => ({
  $controls: {
    PieChart: registerReactControl(pieChart, {
      context,
      sampleData: billionaires,
      onClick() {
      }
    })
  }
});
export {
  PieChart_default as default
};
/*! Bundled license information:

react/cjs/react.development.js:
  (**
   * @license React
   * react.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

scheduler/cjs/scheduler.development.js:
  (**
   * @license React
   * scheduler.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

react-dom/cjs/react-dom.development.js:
  (**
   * @license React
   * react-dom.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)
  (**
   * Checks if an event is supported in the current execution environment.
   *
   * NOTE: This will not work correctly for non-generic events such as `change`,
   * `reset`, `load`, `error`, and `select`.
   *
   * Borrows from Modernizr.
   *
   * @param {string} eventNameSuffix Event name, e.g. "click".
   * @return {boolean} True if the event is supported.
   * @internal
   * @license Modernizr 3.0.0pre (Custom Build) | MIT
   *)

react-is/cjs/react-is.development.js:
  (** @license React v16.13.1
   * react-is.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

object-assign/index.js:
  (*
  object-assign
  (c) Sindre Sorhus
  @license MIT
  *)

devextreme-react/core/config.js:
  (*!
   * devextreme-react
   * Version: 23.1.4
   * Build date: Fri Jul 14 2023
   *
   * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED
   *
   * This software may be modified and distributed under the terms
   * of the MIT license. See the LICENSE file in the root of the project for details.
   *
   * https://github.com/DevExpress/devextreme-react
   *)

devextreme-react/core/helpers.js:
  (*!
   * devextreme-react
   * Version: 23.1.4
   * Build date: Fri Jul 14 2023
   *
   * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED
   *
   * This software may be modified and distributed under the terms
   * of the MIT license. See the LICENSE file in the root of the project for details.
   *
   * https://github.com/DevExpress/devextreme-react
   *)

devextreme-react/core/template-wrapper.js:
  (*!
   * devextreme-react
   * Version: 23.1.4
   * Build date: Fri Jul 14 2023
   *
   * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED
   *
   * This software may be modified and distributed under the terms
   * of the MIT license. See the LICENSE file in the root of the project for details.
   *
   * https://github.com/DevExpress/devextreme-react
   *)

devextreme-react/core/dx-template.js:
  (*!
   * devextreme-react
   * Version: 23.1.4
   * Build date: Fri Jul 14 2023
   *
   * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED
   *
   * This software may be modified and distributed under the terms
   * of the MIT license. See the LICENSE file in the root of the project for details.
   *
   * https://github.com/DevExpress/devextreme-react
   *)

devextreme-react/core/templates-manager.js:
  (*!
   * devextreme-react
   * Version: 23.1.4
   * Build date: Fri Jul 14 2023
   *
   * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED
   *
   * This software may be modified and distributed under the terms
   * of the MIT license. See the LICENSE file in the root of the project for details.
   *
   * https://github.com/DevExpress/devextreme-react
   *)

devextreme-react/core/templates-renderer.js:
  (*!
   * devextreme-react
   * Version: 23.1.4
   * Build date: Fri Jul 14 2023
   *
   * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED
   *
   * This software may be modified and distributed under the terms
   * of the MIT license. See the LICENSE file in the root of the project for details.
   *
   * https://github.com/DevExpress/devextreme-react
   *)

devextreme-react/core/templates-store.js:
  (*!
   * devextreme-react
   * Version: 23.1.4
   * Build date: Fri Jul 14 2023
   *
   * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED
   *
   * This software may be modified and distributed under the terms
   * of the MIT license. See the LICENSE file in the root of the project for details.
   *
   * https://github.com/DevExpress/devextreme-react
   *)

devextreme-react/core/configuration/utils.js:
  (*!
   * devextreme-react
   * Version: 23.1.4
   * Build date: Fri Jul 14 2023
   *
   * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED
   *
   * This software may be modified and distributed under the terms
   * of the MIT license. See the LICENSE file in the root of the project for details.
   *
   * https://github.com/DevExpress/devextreme-react
   *)

devextreme-react/core/configuration/tree.js:
  (*!
   * devextreme-react
   * Version: 23.1.4
   * Build date: Fri Jul 14 2023
   *
   * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED
   *
   * This software may be modified and distributed under the terms
   * of the MIT license. See the LICENSE file in the root of the project for details.
   *
   * https://github.com/DevExpress/devextreme-react
   *)

devextreme-react/core/configuration/comparer.js:
  (*!
   * devextreme-react
   * Version: 23.1.4
   * Build date: Fri Jul 14 2023
   *
   * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED
   *
   * This software may be modified and distributed under the terms
   * of the MIT license. See the LICENSE file in the root of the project for details.
   *
   * https://github.com/DevExpress/devextreme-react
   *)

devextreme-react/core/options-manager.js:
  (*!
   * devextreme-react
   * Version: 23.1.4
   * Build date: Fri Jul 14 2023
   *
   * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED
   *
   * This software may be modified and distributed under the terms
   * of the MIT license. See the LICENSE file in the root of the project for details.
   *
   * https://github.com/DevExpress/devextreme-react
   *)

devextreme-react/core/widget-config.js:
  (*!
   * devextreme-react
   * Version: 23.1.4
   * Build date: Fri Jul 14 2023
   *
   * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED
   *
   * This software may be modified and distributed under the terms
   * of the MIT license. See the LICENSE file in the root of the project for details.
   *
   * https://github.com/DevExpress/devextreme-react
   *)

devextreme-react/core/template.js:
  (*!
   * devextreme-react
   * Version: 23.1.4
   * Build date: Fri Jul 14 2023
   *
   * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED
   *
   * This software may be modified and distributed under the terms
   * of the MIT license. See the LICENSE file in the root of the project for details.
   *
   * https://github.com/DevExpress/devextreme-react
   *)

devextreme-react/core/configuration/react/element.js:
  (*!
   * devextreme-react
   * Version: 23.1.4
   * Build date: Fri Jul 14 2023
   *
   * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED
   *
   * This software may be modified and distributed under the terms
   * of the MIT license. See the LICENSE file in the root of the project for details.
   *
   * https://github.com/DevExpress/devextreme-react
   *)

devextreme-react/core/configuration/react/templates.js:
  (*!
   * devextreme-react
   * Version: 23.1.4
   * Build date: Fri Jul 14 2023
   *
   * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED
   *
   * This software may be modified and distributed under the terms
   * of the MIT license. See the LICENSE file in the root of the project for details.
   *
   * https://github.com/DevExpress/devextreme-react
   *)

devextreme-react/core/configuration/react/tree.js:
  (*!
   * devextreme-react
   * Version: 23.1.4
   * Build date: Fri Jul 14 2023
   *
   * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED
   *
   * This software may be modified and distributed under the terms
   * of the MIT license. See the LICENSE file in the root of the project for details.
   *
   * https://github.com/DevExpress/devextreme-react
   *)

devextreme-react/core/component-base.js:
  (*!
   * devextreme-react
   * Version: 23.1.4
   * Build date: Fri Jul 14 2023
   *
   * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED
   *
   * This software may be modified and distributed under the terms
   * of the MIT license. See the LICENSE file in the root of the project for details.
   *
   * https://github.com/DevExpress/devextreme-react
   *)

devextreme-react/core/extension-component.js:
  (*!
   * devextreme-react
   * Version: 23.1.4
   * Build date: Fri Jul 14 2023
   *
   * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED
   *
   * This software may be modified and distributed under the terms
   * of the MIT license. See the LICENSE file in the root of the project for details.
   *
   * https://github.com/DevExpress/devextreme-react
   *)

devextreme-react/core/component.js:
  (*!
   * devextreme-react
   * Version: 23.1.4
   * Build date: Fri Jul 14 2023
   *
   * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED
   *
   * This software may be modified and distributed under the terms
   * of the MIT license. See the LICENSE file in the root of the project for details.
   *
   * https://github.com/DevExpress/devextreme-react
   *)

devextreme-react/core/nested-option.js:
  (*!
   * devextreme-react
   * Version: 23.1.4
   * Build date: Fri Jul 14 2023
   *
   * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED
   *
   * This software may be modified and distributed under the terms
   * of the MIT license. See the LICENSE file in the root of the project for details.
   *
   * https://github.com/DevExpress/devextreme-react
   *)

devextreme-react/pie-chart.js:
  (*!
   * devextreme-react
   * Version: 23.1.4
   * Build date: Fri Jul 14 2023
   *
   * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED
   *
   * This software may be modified and distributed under the terms
   * of the MIT license. See the LICENSE file in the root of the project for details.
   *
   * https://github.com/DevExpress/devextreme-react
   *)
*/
//# sourceMappingURL=PieChart.js.map
